/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "stdio.h"
#include "string.h"
#include "stdbool.h"
#include <inttypes.h>

/* Private variables ---------------------------------------------------------*/
CAN_HandleTypeDef hcan1;
UART_HandleTypeDef huart1;

osThreadId defaultTaskHandle;
osThreadId receivedDatagramTaskId;

osMailQDef(canDatagramsQueue, 100, CANMessage);  // Define CAN datagram queue
osMailQId canDatagramsQueue;

uint8_t rxUARTBuff[1] = { 0 };
CAN_RxHeaderTypeDef rxMessageHeader;
uint8_t rxDataReceived[8];

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CAN1_Init(void);
static void MX_USART1_UART_Init(void);
void StartDefaultTask(void const * argument);

/* Private user code ---------------------------------------------------------*/
#define NUMBER_BLINKS 20

void bootLEDIndicator(void) {
    int blinkCounter = 0;
    while (blinkCounter < NUMBER_BLINKS) {
        HAL_GPIO_TogglePin(ORANGE_LED_SYSTEM_GPIO_Port, ORANGE_LED_SYSTEM_Pin);
        HAL_Delay(30);
        blinkCounter++;
    }
    HAL_GPIO_WritePin(ORANGE_LED_SYSTEM_GPIO_Port, ORANGE_LED_SYSTEM_Pin, GPIO_PIN_SET);
}

void setSnifferCANFilter(void) {
    /* Default filter - accept all to CAN_FIFO0 */
    CAN_FilterTypeDef sFilterConfig;
    sFilterConfig.FilterBank = 0;
    sFilterConfig.FilterIdHigh = 0x0000;
    sFilterConfig.FilterIdLow = 0x0000;
    sFilterConfig.FilterMaskIdHigh = 0x0000;
    sFilterConfig.FilterMaskIdLow = 0x0000;
    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
    HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxMessageHeader, rxDataReceived) == HAL_OK) {
        // CAN 데이터가 수신되면 큐에 삽입
        CANMessage *msgToSend = osMailCAlloc(canDatagramsQueue, osWaitForever);
        if (msgToSend != NULL) {
            msgToSend->header = rxMessageHeader;
            memcpy(msgToSend->data, rxDataReceived, rxMessageHeader.DLC);
            osMailPut(canDatagramsQueue, msgToSend);
        }
    }
    HAL_GPIO_TogglePin(RED_LED_CANRX_GPIO_Port, RED_LED_CANRX_Pin);  // CAN 수신 LED 토글
}

void recieivedDatagramsThread(void const *argument) {
    osEvent evt;
    CANMessage *dequeuedMsg;
    char message[50];

    while (true) {
        evt = osMailGet(canDatagramsQueue, osWaitForever);
        if (evt.status == osEventMail) {
            dequeuedMsg = evt.value.p;

            // CAN 메시지 데이터를 UART로 전송
            int len = snprintf(message, sizeof(message), "ID: 0x%" PRIx32 " DLC: %d Data: ",
                               dequeuedMsg->header.StdId, dequeuedMsg->header.DLC);
            for (int i = 0; i < dequeuedMsg->header.DLC; i++) {
                len += snprintf(message + len, sizeof(message) - len, "%02X ", dequeuedMsg->data[i]);
            }
            strcat(message, "\r\n");  // 새 줄 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);

            osMailFree(canDatagramsQueue, dequeuedMsg);  // 메일 풀에서 메모리 해제
        }
    }
}

int main(void) {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_CAN1_Init();
    MX_USART1_UART_Init();

    /* Start the CAN sniffer */
    HAL_UART_Receive_IT(&huart1, rxUARTBuff, 1);
    setSnifferCANFilter();
    HAL_CAN_Start(&hcan1);
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);  // CAN 수신 인터럽트 활성화

    /* Create the queue and thread for CAN message handling */
    canDatagramsQueue = osMailCreate(osMailQ(canDatagramsQueue), NULL);
    osThreadDef(receiveDatagramsTask, recieivedDatagramsThread, osPriorityNormal, 0, 640);
    receivedDatagramTaskId = osThreadCreate(osThread(receiveDatagramsTask), NULL);

    bootLEDIndicator();  // 부팅 LED 인디케이터

    osKernelStart();  // RTOS 스케줄러 시작

    /* Infinite loop */
    while (1) {}
}

/* GPIO Initialization */
static void MX_GPIO_Init(void) {
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
    __HAL_RCC_GPIOD_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD, GREEN_LED_IDLE_Pin | ORANGE_LED_SYSTEM_Pin | RED_LED_CANRX_Pin | BLUE_LED_CANTX_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pins : GREEN_LED_IDLE_Pin ORANGE_LED_SYSTEM_Pin RED_LED_CANRX_Pin BLUE_LED_CANTX_Pin */
    GPIO_InitStruct.Pin = GREEN_LED_IDLE_Pin | ORANGE_LED_SYSTEM_Pin | RED_LED_CANRX_Pin | BLUE_LED_CANTX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
}

/* CAN1 Initialization */
static void MX_CAN1_Init(void) {
    hcan1.Instance = CAN1;
    hcan1.Init.Prescaler = 12;
    hcan1.Init.Mode = CAN_MODE_NORMAL;
    hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
    hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
    hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
    hcan1.Init.TimeTriggeredMode = DISABLE;
    hcan1.Init.AutoBusOff = DISABLE;
    hcan1.Init.AutoWakeUp = DISABLE;
    hcan1.Init.AutoRetransmission = DISABLE;
    hcan1.Init.ReceiveFifoLocked = DISABLE;
    hcan1.Init.TransmitFifoPriority = DISABLE;
    if (HAL_CAN_Init(&hcan1) != HAL_OK) {
        Error_Handler();
    }
}

/* USART1 Initialization */
static void MX_USART1_UART_Init(void) {
    huart1.Instance = USART1;
    huart1.Init.BaudRate = 115200;
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
    huart1.Init.StopBits = UART_STOPBITS_1;
    huart1.Init.Parity = UART_PARITY_NONE;
    huart1.Init.Mode = UART_MODE_TX_RX;
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
    if (HAL_UART_Init(&huart1) != HAL_OK) {
        Error_Handler();
    }
}

/* System Clock Configuration */
void SystemClock_Config(void) {
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    __HAL_RCC_PWR_CLK_ENABLE();
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLM = 4;
    RCC_OscInitStruct.PLL.PLLN = 168;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    RCC_OscInitStruct.PLL.PLLQ = 4;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
        Error_Handler();
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
        Error_Handler();
    }
}

/* Error Handler */
void Error_Handler(void) {
    __disable_irq();
    while (1) {}
}
