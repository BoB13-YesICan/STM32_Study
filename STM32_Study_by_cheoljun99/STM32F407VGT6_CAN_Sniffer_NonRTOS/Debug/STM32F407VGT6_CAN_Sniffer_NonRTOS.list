
STM32F407VGT6_CAN_Sniffer_NonRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08006640  08006640  00007640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067c8  080067c8  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  080067c8  080067c8  000077c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067d0  080067d0  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067d0  080067d0  000077d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067d4  080067d4  000077d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080067d8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000805c  2**0
                  CONTENTS
 10 .bss          00000308  2000005c  2000005c  0000805c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000364  20000364  0000805c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010570  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002439  00000000  00000000  000185fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  0001aa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd1  00000000  00000000  0001b958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022250  00000000  00000000  0001c529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011204  00000000  00000000  0003e779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf929  00000000  00000000  0004f97d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f2a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004624  00000000  00000000  0011f2ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  00123910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006628 	.word	0x08006628

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08006628 	.word	0x08006628

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <cobs_encode>:
 *                 operation and the length of the result (that was written to
 *                 dst_buf_ptr)
 */
cobs_encode_result cobs_encode(void * dst_buf_ptr, size_t dst_buf_len,
                               const void * src_ptr, size_t src_len)
{
 8000590:	b480      	push	{r7}
 8000592:	b08f      	sub	sp, #60	@ 0x3c
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
 800059c:	603b      	str	r3, [r7, #0]
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
 80005a2:	2300      	movs	r3, #0
 80005a4:	753b      	strb	r3, [r7, #20]
    const uint8_t *     src_read_ptr        = src_ptr;
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	637b      	str	r3, [r7, #52]	@ 0x34
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
 80005aa:	683a      	ldr	r2, [r7, #0]
 80005ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80005ae:	4413      	add	r3, r2
 80005b0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t *           dst_buf_start_ptr   = dst_buf_ptr;
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	623b      	str	r3, [r7, #32]
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
 80005b6:	68ba      	ldr	r2, [r7, #8]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4413      	add	r3, r2
 80005bc:	61fb      	str	r3, [r7, #28]
    uint8_t *           dst_code_write_ptr  = dst_buf_ptr;
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	633b      	str	r3, [r7, #48]	@ 0x30
    uint8_t *           dst_write_ptr       = dst_code_write_ptr + 1;
 80005c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005c4:	3301      	adds	r3, #1
 80005c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t             src_byte            = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	76fb      	strb	r3, [r7, #27]
    uint8_t             search_len          = 1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b


    /* First, do a NULL pointer check and return immediately if it fails. */
    if ((dst_buf_ptr == NULL) || (src_ptr == NULL))
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d002      	beq.n	80005de <cobs_encode+0x4e>
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d10a      	bne.n	80005f4 <cobs_encode+0x64>
    {
        result.status = COBS_ENCODE_NULL_POINTER;
 80005de:	2301      	movs	r3, #1
 80005e0:	753b      	strb	r3, [r7, #20]
        return result;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	461a      	mov	r2, r3
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80005ee:	e882 0003 	stmia.w	r2, {r0, r1}
 80005f2:	e05f      	b.n	80006b4 <cobs_encode+0x124>
    }

    if (src_len != 0)
 80005f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d040      	beq.n	800067c <cobs_encode+0xec>
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
 80005fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80005fc:	69fb      	ldr	r3, [r7, #28]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d305      	bcc.n	800060e <cobs_encode+0x7e>
            {
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
 8000602:	7d3b      	ldrb	r3, [r7, #20]
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	b2db      	uxtb	r3, r3
 800060a:	753b      	strb	r3, [r7, #20]
                break;
 800060c:	e036      	b.n	800067c <cobs_encode+0xec>
            }

            src_byte = *src_read_ptr++;
 800060e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000610:	1c5a      	adds	r2, r3, #1
 8000612:	637a      	str	r2, [r7, #52]	@ 0x34
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	76fb      	strb	r3, [r7, #27]
            if (src_byte == 0)
 8000618:	7efb      	ldrb	r3, [r7, #27]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d10f      	bne.n	800063e <cobs_encode+0xae>
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
 800061e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000620:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000624:	701a      	strb	r2, [r3, #0]
                dst_code_write_ptr = dst_write_ptr++;
 8000626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000628:	1c5a      	adds	r2, r3, #1
 800062a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800062c:	633b      	str	r3, [r7, #48]	@ 0x30
                search_len = 1;
 800062e:	2301      	movs	r3, #1
 8000630:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                if (src_read_ptr >= src_end_ptr)
 8000634:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000638:	429a      	cmp	r2, r3
 800063a:	d3de      	bcc.n	80005fa <cobs_encode+0x6a>
                {
                    break;
 800063c:	e01e      	b.n	800067c <cobs_encode+0xec>
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
 800063e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000640:	1c5a      	adds	r2, r3, #1
 8000642:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000644:	7efa      	ldrb	r2, [r7, #27]
 8000646:	701a      	strb	r2, [r3, #0]
                search_len++;
 8000648:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800064c:	3301      	adds	r3, #1
 800064e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                if (src_read_ptr >= src_end_ptr)
 8000652:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000656:	429a      	cmp	r2, r3
 8000658:	d20f      	bcs.n	800067a <cobs_encode+0xea>
                {
                    break;
                }
                if (search_len == 0xFF)
 800065a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800065e:	2bff      	cmp	r3, #255	@ 0xff
 8000660:	d1cb      	bne.n	80005fa <cobs_encode+0x6a>
                {
                    /* We have a long string of non-zero bytes, so we need
                     * to write out a length code of 0xFF. */
                    *dst_code_write_ptr = search_len;
 8000662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000664:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000668:	701a      	strb	r2, [r3, #0]
                    dst_code_write_ptr = dst_write_ptr++;
 800066a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800066c:	1c5a      	adds	r2, r3, #1
 800066e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000670:	633b      	str	r3, [r7, #48]	@ 0x30
                    search_len = 1;
 8000672:	2301      	movs	r3, #1
 8000674:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            if (dst_write_ptr >= dst_buf_end_ptr)
 8000678:	e7bf      	b.n	80005fa <cobs_encode+0x6a>
                    break;
 800067a:	bf00      	nop

    /* We've reached the end of the source data (or possibly run out of output buffer)
     * Finalise the remaining output. In particular, write the code (length) byte.
     * Update the pointer to calculate the final output length.
     */
    if (dst_code_write_ptr >= dst_buf_end_ptr)
 800067c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	429a      	cmp	r2, r3
 8000682:	d307      	bcc.n	8000694 <cobs_encode+0x104>
    {
        /* We've run out of output buffer to write the code byte. */
        result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
 8000684:	7d3b      	ldrb	r3, [r7, #20]
 8000686:	f043 0302 	orr.w	r3, r3, #2
 800068a:	b2db      	uxtb	r3, r3
 800068c:	753b      	strb	r3, [r7, #20]
        dst_write_ptr = dst_buf_end_ptr;
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000692:	e003      	b.n	800069c <cobs_encode+0x10c>
    }
    else
    {
        /* Write the last code (length) byte. */
        *dst_code_write_ptr = search_len;
 8000694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000696:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800069a:	701a      	strb	r2, [r3, #0]
    }

    /* Calculate the output length, from the value of dst_code_write_ptr */
    result.out_len = dst_write_ptr - dst_buf_start_ptr;
 800069c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800069e:	6a3b      	ldr	r3, [r7, #32]
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	613b      	str	r3, [r7, #16]

    return result;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	461a      	mov	r2, r3
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006b0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80006b4:	68f8      	ldr	r0, [r7, #12]
 80006b6:	373c      	adds	r7, #60	@ 0x3c
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <cobs_decode>:
 *                 operation and the length of the result (that was written to
 *                 dst_buf_ptr)
 */
cobs_decode_result cobs_decode(void * dst_buf_ptr, size_t dst_buf_len,
                               const void * src_ptr, size_t src_len)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b08f      	sub	sp, #60	@ 0x3c
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
 80006cc:	603b      	str	r3, [r7, #0]
    cobs_decode_result  result              = { 0, COBS_DECODE_OK };
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	2300      	movs	r3, #0
 80006d4:	753b      	strb	r3, [r7, #20]
    const uint8_t *     src_read_ptr        = src_ptr;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	637b      	str	r3, [r7, #52]	@ 0x34
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
 80006da:	683a      	ldr	r2, [r7, #0]
 80006dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006de:	4413      	add	r3, r2
 80006e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t *           dst_buf_start_ptr   = dst_buf_ptr;
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
 80006e6:	68ba      	ldr	r2, [r7, #8]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4413      	add	r3, r2
 80006ec:	623b      	str	r3, [r7, #32]
    uint8_t *           dst_write_ptr       = dst_buf_ptr;
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	633b      	str	r3, [r7, #48]	@ 0x30
    uint8_t             i;
    uint8_t             len_code;


    /* First, do a NULL pointer check and return immediately if it fails. */
    if ((dst_buf_ptr == NULL) || (src_ptr == NULL))
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d002      	beq.n	80006fe <cobs_decode+0x3e>
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d10a      	bne.n	8000714 <cobs_decode+0x54>
    {
        result.status = COBS_DECODE_NULL_POINTER;
 80006fe:	2301      	movs	r3, #1
 8000700:	753b      	strb	r3, [r7, #20]
        return result;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	461a      	mov	r2, r3
 8000706:	f107 0310 	add.w	r3, r7, #16
 800070a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800070e:	e882 0003 	stmia.w	r2, {r0, r1}
 8000712:	e07e      	b.n	8000812 <cobs_decode+0x152>
    }

    if (src_len != 0)
 8000714:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000716:	2b00      	cmp	r3, #0
 8000718:	d06f      	beq.n	80007fa <cobs_decode+0x13a>
    {
        for (;;)
        {
            len_code = *src_read_ptr++;
 800071a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800071c:	1c5a      	adds	r2, r3, #1
 800071e:	637a      	str	r2, [r7, #52]	@ 0x34
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            if (len_code == 0)
 8000726:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800072a:	2b00      	cmp	r3, #0
 800072c:	d105      	bne.n	800073a <cobs_decode+0x7a>
            {
                result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
 800072e:	7d3b      	ldrb	r3, [r7, #20]
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	b2db      	uxtb	r3, r3
 8000736:	753b      	strb	r3, [r7, #20]
                break;
 8000738:	e05f      	b.n	80007fa <cobs_decode+0x13a>
            }
            len_code--;
 800073a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800073e:	3b01      	subs	r3, #1
 8000740:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

            /* Check length code against remaining input bytes */
            remaining_bytes = src_end_ptr - src_read_ptr;
 8000744:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	61fb      	str	r3, [r7, #28]
            if (len_code > remaining_bytes)
 800074c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000750:	69fa      	ldr	r2, [r7, #28]
 8000752:	429a      	cmp	r2, r3
 8000754:	d207      	bcs.n	8000766 <cobs_decode+0xa6>
            {
                result.status |= COBS_DECODE_INPUT_TOO_SHORT;
 8000756:	7d3b      	ldrb	r3, [r7, #20]
 8000758:	f043 0308 	orr.w	r3, r3, #8
 800075c:	b2db      	uxtb	r3, r3
 800075e:	753b      	strb	r3, [r7, #20]
                len_code = remaining_bytes;
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }

            /* Check length code against remaining output buffer space */
            remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
 8000766:	6a3a      	ldr	r2, [r7, #32]
 8000768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	61fb      	str	r3, [r7, #28]
            if (len_code > remaining_bytes)
 800076e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000772:	69fa      	ldr	r2, [r7, #28]
 8000774:	429a      	cmp	r2, r3
 8000776:	d207      	bcs.n	8000788 <cobs_decode+0xc8>
            {
                result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
 8000778:	7d3b      	ldrb	r3, [r7, #20]
 800077a:	f043 0302 	orr.w	r3, r3, #2
 800077e:	b2db      	uxtb	r3, r3
 8000780:	753b      	strb	r3, [r7, #20]
                len_code = remaining_bytes;
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }

            for (i = len_code; i != 0; i--)
 8000788:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800078c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000790:	e016      	b.n	80007c0 <cobs_decode+0x100>
            {
                src_byte = *src_read_ptr++;
 8000792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000794:	1c5a      	adds	r2, r3, #1
 8000796:	637a      	str	r2, [r7, #52]	@ 0x34
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	76fb      	strb	r3, [r7, #27]
                if (src_byte == 0)
 800079c:	7efb      	ldrb	r3, [r7, #27]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d104      	bne.n	80007ac <cobs_decode+0xec>
                {
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
 80007a2:	7d3b      	ldrb	r3, [r7, #20]
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	753b      	strb	r3, [r7, #20]
                }
                *dst_write_ptr++ = src_byte;
 80007ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007ae:	1c5a      	adds	r2, r3, #1
 80007b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80007b2:	7efa      	ldrb	r2, [r7, #27]
 80007b4:	701a      	strb	r2, [r3, #0]
            for (i = len_code; i != 0; i--)
 80007b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007ba:	3b01      	subs	r3, #1
 80007bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80007c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d1e4      	bne.n	8000792 <cobs_decode+0xd2>
            }

            if (src_read_ptr >= src_end_ptr)
 80007c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d213      	bcs.n	80007f8 <cobs_decode+0x138>
            {
                break;
            }

            /* Add a zero to the end */
            if (len_code != 0xFE)
 80007d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80007d4:	2bfe      	cmp	r3, #254	@ 0xfe
 80007d6:	d0a0      	beq.n	800071a <cobs_decode+0x5a>
            {
                if (dst_write_ptr >= dst_buf_end_ptr)
 80007d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80007da:	6a3b      	ldr	r3, [r7, #32]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d305      	bcc.n	80007ec <cobs_decode+0x12c>
                {
                    result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
 80007e0:	7d3b      	ldrb	r3, [r7, #20]
 80007e2:	f043 0302 	orr.w	r3, r3, #2
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	753b      	strb	r3, [r7, #20]
                    break;
 80007ea:	e006      	b.n	80007fa <cobs_decode+0x13a>
                }
                *dst_write_ptr++ = 0;
 80007ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
            len_code = *src_read_ptr++;
 80007f6:	e790      	b.n	800071a <cobs_decode+0x5a>
                break;
 80007f8:	bf00      	nop
            }
        }
    }

    result.out_len = dst_write_ptr - dst_buf_start_ptr;
 80007fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80007fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007fe:	1ad3      	subs	r3, r2, r3
 8000800:	613b      	str	r3, [r7, #16]

    return result;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	461a      	mov	r2, r3
 8000806:	f107 0310 	add.w	r3, r7, #16
 800080a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800080e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000812:	68f8      	ldr	r0, [r7, #12]
 8000814:	373c      	adds	r7, #60	@ 0x3c
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
	...

08000820 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000824:	f3bf 8f4f 	dsb	sy
}
 8000828:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <__NVIC_SystemReset+0x24>)
 800082c:	68db      	ldr	r3, [r3, #12]
 800082e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000832:	4904      	ldr	r1, [pc, #16]	@ (8000844 <__NVIC_SystemReset+0x24>)
 8000834:	4b04      	ldr	r3, [pc, #16]	@ (8000848 <__NVIC_SystemReset+0x28>)
 8000836:	4313      	orrs	r3, r2
 8000838:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800083a:	f3bf 8f4f 	dsb	sy
}
 800083e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <__NVIC_SystemReset+0x20>
 8000844:	e000ed00 	.word	0xe000ed00
 8000848:	05fa0004 	.word	0x05fa0004

0800084c <blueLEDIndicator>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 100);
	return ch;
}
#define NUMBER_BLINKS 20
void blueLEDIndicator(void) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
	int blinkCounter = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
	while (blinkCounter < NUMBER_BLINKS) {
 8000856:	e00e      	b.n	8000876 <blueLEDIndicator+0x2a>
		HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8000858:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800085c:	480f      	ldr	r0, [pc, #60]	@ (800089c <blueLEDIndicator+0x50>)
 800085e:	f002 fec8 	bl	80035f2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(PIN2_GPIO_Port, PIN2_Pin);
 8000862:	2108      	movs	r1, #8
 8000864:	480e      	ldr	r0, [pc, #56]	@ (80008a0 <blueLEDIndicator+0x54>)
 8000866:	f002 fec4 	bl	80035f2 <HAL_GPIO_TogglePin>
		HAL_Delay(30);
 800086a:	201e      	movs	r0, #30
 800086c:	f001 fb1c 	bl	8001ea8 <HAL_Delay>
		blinkCounter++;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3301      	adds	r3, #1
 8000874:	607b      	str	r3, [r7, #4]
	while (blinkCounter < NUMBER_BLINKS) {
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b13      	cmp	r3, #19
 800087a:	dded      	ble.n	8000858 <blueLEDIndicator+0xc>
	}
	HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000882:	4806      	ldr	r0, [pc, #24]	@ (800089c <blueLEDIndicator+0x50>)
 8000884:	f002 fe9c 	bl	80035c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PIN2_GPIO_Port, PIN2_Pin, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	2108      	movs	r1, #8
 800088c:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <blueLEDIndicator+0x54>)
 800088e:	f002 fe97 	bl	80035c0 <HAL_GPIO_WritePin>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40020c00 	.word	0x40020c00
 80008a0:	40020000 	.word	0x40020000

080008a4 <ErrorAppHandler>:

void ErrorAppHandler(void) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	// Display something went wrong :(
	 blueLEDIndicator();
 80008a8:	f7ff ffd0 	bl	800084c <blueLEDIndicator>
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <sendCANMessage>:
 * @param  data: pointer to the data to be sent
 * @retval TxMailbox: mailbox used for transmission
 */

uint32_t sendCANMessage(uint8_t dlc, uint32_t msgID, bool isRTR,
		bool isStandard, uint8_t *data) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	@ 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6039      	str	r1, [r7, #0]
 80008b8:	4611      	mov	r1, r2
 80008ba:	461a      	mov	r2, r3
 80008bc:	4603      	mov	r3, r0
 80008be:	71fb      	strb	r3, [r7, #7]
 80008c0:	460b      	mov	r3, r1
 80008c2:	71bb      	strb	r3, [r7, #6]
 80008c4:	4613      	mov	r3, r2
 80008c6:	717b      	strb	r3, [r7, #5]

	uint32_t TxMailbox;
	CAN_TxHeaderTypeDef pHeader;
	pHeader.DLC = dlc;
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	61fb      	str	r3, [r7, #28]

	if (isStandard) {
 80008cc:	797b      	ldrb	r3, [r7, #5]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d004      	beq.n	80008dc <sendCANMessage+0x2c>
		pHeader.IDE = CAN_ID_STD;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
		pHeader.StdId = msgID;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	e003      	b.n	80008e4 <sendCANMessage+0x34>
	} else {
		pHeader.IDE = CAN_ID_EXT;
 80008dc:	2304      	movs	r3, #4
 80008de:	617b      	str	r3, [r7, #20]
		pHeader.ExtId = msgID;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	613b      	str	r3, [r7, #16]
	}
	if (isRTR) {
 80008e4:	79bb      	ldrb	r3, [r7, #6]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d002      	beq.n	80008f0 <sendCANMessage+0x40>
		pHeader.RTR = CAN_RTR_REMOTE;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61bb      	str	r3, [r7, #24]
 80008ee:	e001      	b.n	80008f4 <sendCANMessage+0x44>
	} else {
		pHeader.RTR = CAN_RTR_DATA;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
	}

	// CAN 메시지 전송
	if (HAL_CAN_AddTxMessage(&hcan1, &pHeader, data, &TxMailbox) == HAL_OK) {
 80008f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f8:	f107 010c 	add.w	r1, r7, #12
 80008fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80008fe:	4809      	ldr	r0, [pc, #36]	@ (8000924 <sendCANMessage+0x74>)
 8000900:	f001 fd81 	bl	8002406 <HAL_CAN_AddTxMessage>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d105      	bne.n	8000916 <sendCANMessage+0x66>
		// 메시지 전송 성공 시 ORANGE_LED 켜기
		HAL_GPIO_TogglePin(ORANGE_LED_GPIO_Port, ORANGE_LED_Pin);
 800090a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800090e:	4806      	ldr	r0, [pc, #24]	@ (8000928 <sendCANMessage+0x78>)
 8000910:	f002 fe6f 	bl	80035f2 <HAL_GPIO_TogglePin>
 8000914:	e001      	b.n	800091a <sendCANMessage+0x6a>
	} else {
	    // 메시지 전송 실패 시 에러 처리
	    ErrorAppHandler();
 8000916:	f7ff ffc5 	bl	80008a4 <ErrorAppHandler>
	}

	return TxMailbox;
 800091a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800091c:	4618      	mov	r0, r3
 800091e:	3728      	adds	r7, #40	@ 0x28
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000078 	.word	0x20000078
 8000928:	40020c00 	.word	0x40020c00

0800092c <setCANFilterAcceptAll>:
/**
 * @brief  Configures the CAN filter to accept all messages to the CAN_FIFO buffer
 * @param  None
 * @retval None
 */
void setCANFilterAcceptAll(void) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	@ 0x28
 8000930:	af00      	add	r7, sp, #0
	/* Default filter - accept all to CAN_FIFO*/
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
	//sFilterConfig.FilterIdHigh = 0x00005;
	sFilterConfig.FilterBank = 0x0000;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800093e:	2301      	movs	r3, #1
 8000940:	61fb      	str	r3, [r7, #28]
	// Set Mask to all 0s to allow pass any messageID
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800094e:	2301      	movs	r3, #1
 8000950:	623b      	str	r3, [r7, #32]
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8000952:	463b      	mov	r3, r7
 8000954:	4619      	mov	r1, r3
 8000956:	4806      	ldr	r0, [pc, #24]	@ (8000970 <setCANFilterAcceptAll+0x44>)
 8000958:	f001 fbe8 	bl	800212c <HAL_CAN_ConfigFilter>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <setCANFilterAcceptAll+0x3a>
		ErrorAppHandler();
 8000962:	f7ff ff9f 	bl	80008a4 <ErrorAppHandler>
	}
}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	@ 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000078 	.word	0x20000078

08000974 <setCANFilterAcceptSingleStandardID>:


void setCANFilterAcceptSingleStandardID(uint32_t filterBank, uint16_t acceptedID){
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	@ 0x30
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	807b      	strh	r3, [r7, #2]
	/* Default filter - accept all to CAN_FIFO*/
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterBank = filterBank;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800098c:	2301      	movs	r3, #1
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
	sFilterConfig.FilterIdHigh = acceptedID << 5; //11-bit ID, in top bits 6= 16-11 bits
 8000990:	887b      	ldrh	r3, [r7, #2]
 8000992:	015b      	lsls	r3, r3, #5
 8000994:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = 0x0000;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = 0x7FF << 5;
 800099a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800099e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 80009a8:	2301      	movs	r3, #1
 80009aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80009ac:	f107 0308 	add.w	r3, r7, #8
 80009b0:	4619      	mov	r1, r3
 80009b2:	4806      	ldr	r0, [pc, #24]	@ (80009cc <setCANFilterAcceptSingleStandardID+0x58>)
 80009b4:	f001 fbba 	bl	800212c <HAL_CAN_ConfigFilter>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <setCANFilterAcceptSingleStandardID+0x4e>
		ErrorAppHandler();
 80009be:	f7ff ff71 	bl	80008a4 <ErrorAppHandler>
	}
}
 80009c2:	bf00      	nop
 80009c4:	3730      	adds	r7, #48	@ 0x30
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000078 	.word	0x20000078

080009d0 <setCANFilterAcceptSingleExtendedID>:




void setCANFilterAcceptSingleExtendedID(uint32_t filterBank, uint32_t acceptedID){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08e      	sub	sp, #56	@ 0x38
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
	uint16_t low16bits = acceptedID & 0xFFFF;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
	uint16_t high16Bits = (acceptedID >> 16) & 0xFFFF;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	0c1b      	lsrs	r3, r3, #16
 80009e2:	86bb      	strh	r3, [r7, #52]	@ 0x34
    /* Default filter - accept all to CAN_FIFO*/
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterBank = filterBank;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80009f0:	2301      	movs	r3, #1
 80009f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	sFilterConfig.FilterIdHigh = high16Bits;
 80009f4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80009f6:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterIdLow = low16bits << 3; //11-bit ID, in top bits 3=(32-29)
 80009f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80009fa:	00db      	lsls	r3, r3, #3
 80009fc:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdHigh = 0xFFFF;
 80009fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a02:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdLow = 0xFFF8;
 8000a04:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000a08:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <setCANFilterAcceptSingleExtendedID+0x60>)
 8000a1a:	f001 fb87 	bl	800212c <HAL_CAN_ConfigFilter>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <setCANFilterAcceptSingleExtendedID+0x58>
		ErrorAppHandler();
 8000a24:	f7ff ff3e 	bl	80008a4 <ErrorAppHandler>
	}
}
 8000a28:	bf00      	nop
 8000a2a:	3738      	adds	r7, #56	@ 0x38
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000078 	.word	0x20000078

08000a34 <setDatagramTypeIdentifer>:
 * @param pCursor - pointer to an integer representing the current position of the cursor in the buffer
 *
 * @return void
 */
void setDatagramTypeIdentifer(uint32_t ide, uint32_t rtr, uint8_t *pExitBuffer,
		uint8_t *pCursor) {
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
 8000a40:	603b      	str	r3, [r7, #0]
	if (ide == CAN_ID_STD) {
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d115      	bne.n	8000a74 <setDatagramTypeIdentifer+0x40>
		if (rtr == CAN_RTR_DATA) {
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d107      	bne.n	8000a5e <setDatagramTypeIdentifer+0x2a>
			pExitBuffer[*pCursor] = 't';
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4413      	add	r3, r2
 8000a58:	2274      	movs	r2, #116	@ 0x74
 8000a5a:	701a      	strb	r2, [r3, #0]
 8000a5c:	e022      	b.n	8000aa4 <setDatagramTypeIdentifer+0x70>
		} else if (rtr == CAN_RTR_REMOTE) {
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d11f      	bne.n	8000aa4 <setDatagramTypeIdentifer+0x70>
			pExitBuffer[*pCursor] = 'r';
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	2272      	movs	r2, #114	@ 0x72
 8000a70:	701a      	strb	r2, [r3, #0]
 8000a72:	e017      	b.n	8000aa4 <setDatagramTypeIdentifer+0x70>
		}
	} else if (ide == CAN_ID_EXT) {
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	d114      	bne.n	8000aa4 <setDatagramTypeIdentifer+0x70>

		if (rtr == CAN_RTR_DATA) {
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d107      	bne.n	8000a90 <setDatagramTypeIdentifer+0x5c>
			pExitBuffer[*pCursor] = 'T';
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	2254      	movs	r2, #84	@ 0x54
 8000a8c:	701a      	strb	r2, [r3, #0]
 8000a8e:	e009      	b.n	8000aa4 <setDatagramTypeIdentifer+0x70>
		} else if (rtr == CAN_RTR_REMOTE) {
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d106      	bne.n	8000aa4 <setDatagramTypeIdentifer+0x70>
			pExitBuffer[*pCursor] = 'R';
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	2252      	movs	r2, #82	@ 0x52
 8000aa2:	701a      	strb	r2, [r3, #0]
		}
	}
	*pCursor = *pCursor + 1;
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	701a      	strb	r2, [r3, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <setFormatedDatagramIdentifer>:
* @param  pExitBuffer: pointer to the buffer where the formatted ID will be copied
* @param  pCursor: pointer to the cursor position in the buffer
* @param  len: the desired length of the formatted ID
* @retval None
*/
void setFormatedDatagramIdentifer(uint32_t idNum, uint8_t *pExitBuffer,uint8_t *pCursor, int len) {
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b089      	sub	sp, #36	@ 0x24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
 8000ac8:	603b      	str	r3, [r7, #0]

	char *id = (char*) malloc(sizeof(char) * (len + 1));
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	3301      	adds	r3, #1
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f005 f876 	bl	8005bc0 <malloc>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	613b      	str	r3, [r7, #16]
	int numOfDigits = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
	int valueToConsume = idNum;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	61bb      	str	r3, [r7, #24]

	while (valueToConsume != 0) {
 8000ae0:	e00a      	b.n	8000af8 <setFormatedDatagramIdentifer+0x3c>
		valueToConsume /= 10;     // n = n/10
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	4a23      	ldr	r2, [pc, #140]	@ (8000b74 <setFormatedDatagramIdentifer+0xb8>)
 8000ae6:	fb82 1203 	smull	r1, r2, r2, r3
 8000aea:	1092      	asrs	r2, r2, #2
 8000aec:	17db      	asrs	r3, r3, #31
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	61bb      	str	r3, [r7, #24]
		++numOfDigits;
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3301      	adds	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
	while (valueToConsume != 0) {
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1f1      	bne.n	8000ae2 <setFormatedDatagramIdentifer+0x26>
	}

	sprintf(id + (len - numOfDigits), "%d", (int) idNum);
 8000afe:	683a      	ldr	r2, [r7, #0]
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	461a      	mov	r2, r3
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	4413      	add	r3, r2
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	491a      	ldr	r1, [pc, #104]	@ (8000b78 <setFormatedDatagramIdentifer+0xbc>)
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f005 f998 	bl	8005e44 <siprintf>
	for (int eraser = 0; eraser < (len - numOfDigits); eraser++) {
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	e007      	b.n	8000b2a <setFormatedDatagramIdentifer+0x6e>
		id[eraser] = '0';
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4413      	add	r3, r2
 8000b20:	2230      	movs	r2, #48	@ 0x30
 8000b22:	701a      	strb	r2, [r3, #0]
	for (int eraser = 0; eraser < (len - numOfDigits); eraser++) {
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	3301      	adds	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	683a      	ldr	r2, [r7, #0]
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	dbf1      	blt.n	8000b1a <setFormatedDatagramIdentifer+0x5e>
	}
	memcpy((char*) pExitBuffer + *pCursor, id, strlen(id)+1);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	189c      	adds	r4, r3, r2
 8000b40:	6938      	ldr	r0, [r7, #16]
 8000b42:	f7ff fb4f 	bl	80001e4 <strlen>
 8000b46:	4603      	mov	r3, r0
 8000b48:	3301      	adds	r3, #1
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	6939      	ldr	r1, [r7, #16]
 8000b4e:	4620      	mov	r0, r4
 8000b50:	f005 f9dc 	bl	8005f0c <memcpy>
	free(id);
 8000b54:	6938      	ldr	r0, [r7, #16]
 8000b56:	f005 f83b 	bl	8005bd0 <free>
	*pCursor = *pCursor + len;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	781a      	ldrb	r2, [r3, #0]
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	4413      	add	r3, r2
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	701a      	strb	r2, [r3, #0]
}
 8000b6a:	bf00      	nop
 8000b6c:	3724      	adds	r7, #36	@ 0x24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd90      	pop	{r4, r7, pc}
 8000b72:	bf00      	nop
 8000b74:	66666667 	.word	0x66666667
 8000b78:	08006648 	.word	0x08006648

08000b7c <setDatagramIdentifer>:
* @param  pExitBuffer: pointer to the buffer where the formatted ID will be copied
* @param  pCursor: pointer to the cursor position in the buffer
* @retval None
*/
void setDatagramIdentifer(CAN_RxHeaderTypeDef receivedCANHeader,
		uint8_t *pExitBuffer, uint8_t *pCursor) {
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	f107 0c08 	add.w	ip, r7, #8
 8000b86:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (receivedCANHeader.IDE == CAN_ID_EXT) {
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	2b04      	cmp	r3, #4
 8000b8e:	d105      	bne.n	8000b9c <setDatagramIdentifer+0x20>
		setFormatedDatagramIdentifer(receivedCANHeader.ExtId, pExitBuffer,
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	2309      	movs	r3, #9
 8000b94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000b98:	f7ff ff90 	bl	8000abc <setFormatedDatagramIdentifer>
				pCursor, 9);
	}
	if (receivedCANHeader.IDE == CAN_ID_STD) {
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d105      	bne.n	8000bae <setDatagramIdentifer+0x32>
		setFormatedDatagramIdentifer(receivedCANHeader.StdId, pExitBuffer,
 8000ba2:	68b8      	ldr	r0, [r7, #8]
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ba8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000baa:	f7ff ff87 	bl	8000abc <setFormatedDatagramIdentifer>
				pCursor, 4);

	}
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bb6:	b004      	add	sp, #16
 8000bb8:	4770      	bx	lr
	...

08000bbc <setDLC>:
 * @param  dlc: the data length code of the received message
 * @param  pExitBuffer: pointer to the buffer where the DLC will be copied
 * @param  pCursor: pointer to the cursor position in the buffer
 * @retval None
 */
void setDLC(uint32_t dlc, uint8_t *pExitBuffer, uint8_t *pCursor) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
    sprintf((char*) pExitBuffer + *pCursor, "%d", (int) dlc);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	4906      	ldr	r1, [pc, #24]	@ (8000bf0 <setDLC+0x34>)
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f005 f934 	bl	8005e44 <siprintf>
	*pCursor = *pCursor + 1;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	3301      	adds	r3, #1
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	701a      	strb	r2, [r3, #0]
}
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	08006648 	.word	0x08006648

08000bf4 <setData>:
 * @param  dlc: data length code
 * @param  pExitBuffer: pointer to the destination buffer
 * @param  pCursor: pointer to the cursor position in the destination buffer
 * @retval None
 */
void setData(uint8_t *data, int dlc, uint8_t *pExitBuffer, uint8_t *pCursor) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b087      	sub	sp, #28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
 8000c00:	603b      	str	r3, [r7, #0]
	for (int counter = 0; counter < dlc; counter++) {
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	e00f      	b.n	8000c28 <setData+0x34>
		pExitBuffer[*pCursor + counter] = data[counter];
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	441a      	add	r2, r3
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	4619      	mov	r1, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	440b      	add	r3, r1
 8000c18:	4619      	mov	r1, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	440b      	add	r3, r1
 8000c1e:	7812      	ldrb	r2, [r2, #0]
 8000c20:	701a      	strb	r2, [r3, #0]
	for (int counter = 0; counter < dlc; counter++) {
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3301      	adds	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	dbeb      	blt.n	8000c08 <setData+0x14>
	}
	*pCursor = *pCursor + dlc;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	781a      	ldrb	r2, [r3, #0]
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	4413      	add	r3, r2
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	701a      	strb	r2, [r3, #0]
}
 8000c40:	bf00      	nop
 8000c42:	371c      	adds	r7, #28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <serializeDatagram>:
 * @param receivedCANHeader: struct containing the header information of the received CAN message
 * @param rxData: pointer to the received data payload
 * @retval cursor: the final position of the cursor in the buffer
 */
uint8_t serializeDatagram(uint8_t *pExitBuffer,
		CAN_RxHeaderTypeDef receivedCANHeader, uint8_t *rxData) {
 8000c4c:	b084      	sub	sp, #16
 8000c4e:	b590      	push	{r4, r7, lr}
 8000c50:	b08b      	sub	sp, #44	@ 0x2c
 8000c52:	af06      	add	r7, sp, #24
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000c5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	uint8_t cursor = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73fb      	strb	r3, [r7, #15]
	setDatagramTypeIdentifer(receivedCANHeader.IDE, receivedCANHeader.RTR,
 8000c62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000c64:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000c66:	f107 030f 	add.w	r3, r7, #15
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	f7ff fee2 	bl	8000a34 <setDatagramTypeIdentifer>
			pExitBuffer, &cursor);
	setDatagramIdentifer(receivedCANHeader, pExitBuffer, &cursor);
 8000c70:	f107 030f 	add.w	r3, r7, #15
 8000c74:	9304      	str	r3, [sp, #16]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	9303      	str	r3, [sp, #12]
 8000c7a:	466c      	mov	r4, sp
 8000c7c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c8e:	f7ff ff75 	bl	8000b7c <setDatagramIdentifer>
	setDLC(receivedCANHeader.DLC, pExitBuffer, &cursor);
 8000c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c94:	f107 020f 	add.w	r2, r7, #15
 8000c98:	6879      	ldr	r1, [r7, #4]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff8e 	bl	8000bbc <setDLC>
	if (receivedCANHeader.RTR == CAN_RTR_DATA) {
 8000ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d107      	bne.n	8000cb6 <serializeDatagram+0x6a>
		setData(rxData, receivedCANHeader.DLC, pExitBuffer, &cursor);
 8000ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f107 030f 	add.w	r3, r7, #15
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000cb2:	f7ff ff9f 	bl	8000bf4 <setData>
	}

	return cursor;
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4770      	bx	lr
	...

08000cc8 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief Interrupt callback function for CAN RX FIFO0 message pending. For each received Messsge a new
 *        EncuedCANMsg is created and stored in the Queue to be processed when corresponding
 * @param hcan1: pointer to the CAN handle
 * @retval None
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1) {
 8000cc8:	b5b0      	push	{r4, r5, r7, lr}
 8000cca:	b08c      	sub	sp, #48	@ 0x30
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

	if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxMessageHeader,rxDataReceived) == HAL_OK) {
 8000cd0:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000cd2:	4a19      	ldr	r2, [pc, #100]	@ (8000d38 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f001 fc65 	bl	80025a6 <HAL_CAN_GetRxMessage>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d121      	bne.n	8000d26 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
		HAL_GPIO_TogglePin(PIN3_GPIO_Port, PIN3_Pin);
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	4815      	ldr	r0, [pc, #84]	@ (8000d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000ce6:	f002 fc84 	bl	80035f2 <HAL_GPIO_TogglePin>

		// STM32F407 보드에서 CAN 메시지 수신 시 LED 토글
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8000cea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cee:	4814      	ldr	r0, [pc, #80]	@ (8000d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000cf0:	f002 fc7f 	bl	80035f2 <HAL_GPIO_TogglePin>
//		// UART를 통해 CAN ID 전송 (너무 빠른 전송을 피하기 위해 적절한 크기)
//		HAL_UART_Transmit(&huart3, (uint8_t*)data, strlen(data), HAL_MAX_DELAY);


		EncuedCANMsg msg;
		msg.header = rxMessageHeader;
 8000cf4:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000cf6:	f107 0414 	add.w	r4, r7, #20
 8000cfa:	461d      	mov	r5, r3
 8000cfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		memcpy((char*) msg.data, (char*) rxDataReceived,rxMessageHeader.DLC);
 8000d08:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000d0a:	691a      	ldr	r2, [r3, #16]
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	4908      	ldr	r1, [pc, #32]	@ (8000d34 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000d12:	4618      	mov	r0, r3
 8000d14:	f005 f8fa 	bl	8005f0c <memcpy>
		q_push(&canMsgQueue, &msg);
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4809      	ldr	r0, [pc, #36]	@ (8000d44 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000d20:	f004 fe51 	bl	80059c6 <q_push>
	} else {
		ErrorAppHandler();
	}

}
 8000d24:	e001      	b.n	8000d2a <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
		ErrorAppHandler();
 8000d26:	f7ff fdbd 	bl	80008a4 <ErrorAppHandler>
}
 8000d2a:	bf00      	nop
 8000d2c:	3730      	adds	r7, #48	@ 0x30
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bdb0      	pop	{r4, r5, r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000014c 	.word	0x2000014c
 8000d38:	20000130 	.word	0x20000130
 8000d3c:	40020000 	.word	0x40020000
 8000d40:	40020c00 	.word	0x40020c00
 8000d44:	200001d0 	.word	0x200001d0

08000d48 <processCANMsg>:
/**
 * @brief Process a received CAN message extracted from the Queue serializing it and then
 *        applying COBS encoding to sent it using UART
 * @retval None
 */
void processCANMsg() {
 8000d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4a:	b097      	sub	sp, #92	@ 0x5c
 8000d4c:	af06      	add	r7, sp, #24

	uint8_t parsedDatagram[24] = { 0 };
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]
	uint8_t lenParsed = serializeDatagram(parsedDatagram, decuedCANMssg.header,
 8000d62:	4d23      	ldr	r5, [pc, #140]	@ (8000df0 <processCANMsg+0xa8>)
 8000d64:	f107 0624 	add.w	r6, r7, #36	@ 0x24
 8000d68:	4b21      	ldr	r3, [pc, #132]	@ (8000df0 <processCANMsg+0xa8>)
 8000d6a:	9304      	str	r3, [sp, #16]
 8000d6c:	466c      	mov	r4, sp
 8000d6e:	f105 0314 	add.w	r3, r5, #20
 8000d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000d78:	f105 0308 	add.w	r3, r5, #8
 8000d7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d7e:	4630      	mov	r0, r6
 8000d80:	f7ff ff64 	bl	8000c4c <serializeDatagram>
 8000d84:	4603      	mov	r3, r0
 8000d86:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			decuedCANMssg.data);

	uint8_t encodedDatagram[24] = { 0 };
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	f107 0310 	add.w	r3, r7, #16
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
	cobs_encode_result result = cobs_encode(encodedDatagram, 24, parsedDatagram,
			lenParsed + 1);
 8000d9e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000da2:	3301      	adds	r3, #1
	cobs_encode_result result = cobs_encode(encodedDatagram, 24, parsedDatagram,
 8000da4:	461a      	mov	r2, r3
 8000da6:	1d38      	adds	r0, r7, #4
 8000da8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dac:	f107 010c 	add.w	r1, r7, #12
 8000db0:	9200      	str	r2, [sp, #0]
 8000db2:	2218      	movs	r2, #24
 8000db4:	f7ff fbec 	bl	8000590 <cobs_encode>

	if (result.status == COBS_ENCODE_OK) {
 8000db8:	7a3b      	ldrb	r3, [r7, #8]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d114      	bne.n	8000de8 <processCANMsg+0xa0>
		// Append Zero byte to delimiter frame boundary
		encodedDatagram[result.out_len + 1] = 0x00;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	3340      	adds	r3, #64	@ 0x40
 8000dc4:	443b      	add	r3, r7
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f803 2c34 	strb.w	r2, [r3, #-52]
		HAL_UART_Transmit(&huart3, encodedDatagram, result.out_len + 1, 50);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	f107 010c 	add.w	r1, r7, #12
 8000dd8:	2332      	movs	r3, #50	@ 0x32
 8000dda:	4806      	ldr	r0, [pc, #24]	@ (8000df4 <processCANMsg+0xac>)
 8000ddc:	f003 fd82 	bl	80048e4 <HAL_UART_Transmit>

		// Toggle monitoring line to indicate a successful datagram retransmission
		HAL_GPIO_TogglePin(PIN2_GPIO_Port, PIN2_Pin);
 8000de0:	2108      	movs	r1, #8
 8000de2:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <processCANMsg+0xb0>)
 8000de4:	f002 fc05 	bl	80035f2 <HAL_GPIO_TogglePin>
	}
}
 8000de8:	bf00      	nop
 8000dea:	3744      	adds	r7, #68	@ 0x44
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df0:	200001e8 	.word	0x200001e8
 8000df4:	200000e8 	.word	0x200000e8
 8000df8:	40020000 	.word	0x40020000

08000dfc <HAL_UART_RxCpltCallback>:
 *        rxCommandBuff is used t create a new EnueuedCommand that is stored ant te Queue pending to
 *        be processed.
 * @param huart: pointer to the UART handle
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	@ 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart3.Instance) {
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b2b      	ldr	r3, [pc, #172]	@ (8000eb8 <HAL_UART_RxCpltCallback+0xbc>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d14f      	bne.n	8000eb0 <HAL_UART_RxCpltCallback+0xb4>
		HAL_GPIO_TogglePin(PIN1_GPIO_Port, PIN1_Pin);
 8000e10:	2110      	movs	r1, #16
 8000e12:	482a      	ldr	r0, [pc, #168]	@ (8000ebc <HAL_UART_RxCpltCallback+0xc0>)
 8000e14:	f002 fbed 	bl	80035f2 <HAL_GPIO_TogglePin>
		rxCommandBuff[cursor] = rxUARTBuff[0];
 8000e18:	4b29      	ldr	r3, [pc, #164]	@ (8000ec0 <HAL_UART_RxCpltCallback+0xc4>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b28      	ldr	r3, [pc, #160]	@ (8000ec4 <HAL_UART_RxCpltCallback+0xc8>)
 8000e22:	7819      	ldrb	r1, [r3, #0]
 8000e24:	4b28      	ldr	r3, [pc, #160]	@ (8000ec8 <HAL_UART_RxCpltCallback+0xcc>)
 8000e26:	5499      	strb	r1, [r3, r2]
		cursor++;
 8000e28:	4b25      	ldr	r3, [pc, #148]	@ (8000ec0 <HAL_UART_RxCpltCallback+0xc4>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	3301      	adds	r3, #1
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4b23      	ldr	r3, [pc, #140]	@ (8000ec0 <HAL_UART_RxCpltCallback+0xc4>)
 8000e34:	701a      	strb	r2, [r3, #0]
		if (cursor >= SIZE_RX) {
 8000e36:	4b22      	ldr	r3, [pc, #136]	@ (8000ec0 <HAL_UART_RxCpltCallback+0xc4>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	2b1d      	cmp	r3, #29
 8000e3e:	d902      	bls.n	8000e46 <HAL_UART_RxCpltCallback+0x4a>
			cursor = 0;
 8000e40:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec0 <HAL_UART_RxCpltCallback+0xc4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
		}
		if (rxUARTBuff[0] == 0x00) {
 8000e46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec4 <HAL_UART_RxCpltCallback+0xc8>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d12b      	bne.n	8000ea6 <HAL_UART_RxCpltCallback+0xaa>
			EnueuedCommand pendingCmd;
			memcpy((char*) pendingCmd.commnddBuff, (char*) rxCommandBuff, cursor);
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec0 <HAL_UART_RxCpltCallback+0xc4>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	461a      	mov	r2, r3
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	491b      	ldr	r1, [pc, #108]	@ (8000ec8 <HAL_UART_RxCpltCallback+0xcc>)
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f005 f855 	bl	8005f0c <memcpy>
			pendingCmd.commandSize = cursor - 1;
 8000e62:	4b17      	ldr	r3, [pc, #92]	@ (8000ec0 <HAL_UART_RxCpltCallback+0xc4>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
**	\return Queue fullness status
**	\retval true if queue is full
**	\retval false is not full
**/
inline bool __attribute__((nonnull, always_inline)) q_isFull(const Queue_t * const q) {
	return (q->cnt == q->rec_nb) ? true : false; }
 8000e70:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <HAL_UART_RxCpltCallback+0xd0>)
 8000e72:	8a9a      	ldrh	r2, [r3, #20]
 8000e74:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <HAL_UART_RxCpltCallback+0xd0>)
 8000e76:	885b      	ldrh	r3, [r3, #2]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	bf0c      	ite	eq
 8000e7c:	2301      	moveq	r3, #1
 8000e7e:	2300      	movne	r3, #0
 8000e80:	b2db      	uxtb	r3, r3
			if (!q_isFull(&commandQueue)) {
 8000e82:	f083 0301 	eor.w	r3, r3, #1
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d005      	beq.n	8000e98 <HAL_UART_RxCpltCallback+0x9c>
				q_push(&commandQueue, &pendingCmd);
 8000e8c:	f107 0308 	add.w	r3, r7, #8
 8000e90:	4619      	mov	r1, r3
 8000e92:	480e      	ldr	r0, [pc, #56]	@ (8000ecc <HAL_UART_RxCpltCallback+0xd0>)
 8000e94:	f004 fd97 	bl	80059c6 <q_push>
			}
			cursor = 0;
 8000e98:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <HAL_UART_RxCpltCallback+0xc4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(PIN2_GPIO_Port, PIN2_Pin);
 8000e9e:	2108      	movs	r1, #8
 8000ea0:	480b      	ldr	r0, [pc, #44]	@ (8000ed0 <HAL_UART_RxCpltCallback+0xd4>)
 8000ea2:	f002 fba6 	bl	80035f2 <HAL_GPIO_TogglePin>
		}
		// Enable interrupt for again to be able to continue receiving data
		HAL_UART_Receive_IT(&huart3, rxUARTBuff, 1);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4906      	ldr	r1, [pc, #24]	@ (8000ec4 <HAL_UART_RxCpltCallback+0xc8>)
 8000eaa:	4803      	ldr	r0, [pc, #12]	@ (8000eb8 <HAL_UART_RxCpltCallback+0xbc>)
 8000eac:	f003 fda5 	bl	80049fa <HAL_UART_Receive_IT>
	}

}
 8000eb0:	bf00      	nop
 8000eb2:	3728      	adds	r7, #40	@ 0x28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	200000e8 	.word	0x200000e8
 8000ebc:	40020400 	.word	0x40020400
 8000ec0:	20000176 	.word	0x20000176
 8000ec4:	20000154 	.word	0x20000154
 8000ec8:	20000158 	.word	0x20000158
 8000ecc:	20000198 	.word	0x20000198
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <substr>:
 * @param sub: pointer to the substring buffer
 * @param start: starting index of the substring
 * @param len: length of the substring
 * @retval None
 */
void substr(char *str, char *sub, int start, int len) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	603b      	str	r3, [r7, #0]
	memcpy(sub, &str[start], len);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	4619      	mov	r1, r3
 8000eec:	68b8      	ldr	r0, [r7, #8]
 8000eee:	f005 f80d 	bl	8005f0c <memcpy>
	sub[len] = '\0';
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	68ba      	ldr	r2, [r7, #8]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <toInteger>:
 * @brief Converts a string of digits to an integer
 * @param stringToConvert: pointer to the string of digits
 * @param len: length of the string
 * @retval The integer value of the string
 */
int toInteger(uint8_t *stringToConvert, int len) {
 8000f04:	b480      	push	{r7}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
	int counter = len - 1;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	3b01      	subs	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
	int exp = 1;
 8000f14:	2301      	movs	r3, #1
 8000f16:	613b      	str	r3, [r7, #16]
	int value = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
	while (counter >= 0) {
 8000f1c:	e013      	b.n	8000f46 <toInteger+0x42>
		value = value + (stringToConvert[counter] - '0') * exp;
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	3b30      	subs	r3, #48	@ 0x30
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	fb02 f303 	mul.w	r3, r2, r3
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	4413      	add	r3, r2
 8000f32:	60fb      	str	r3, [r7, #12]
		exp = exp * 10;
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4613      	mov	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	613b      	str	r3, [r7, #16]
		counter--;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	617b      	str	r3, [r7, #20]
	while (counter >= 0) {
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	dae8      	bge.n	8000f1e <toInteger+0x1a>
	}
	return value;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	371c      	adds	r7, #28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <processMessageComand>:
 * @brief Process each Message command received from  the UART interface and
 *        send the apropiate CAN Message.
 * @retval None
 * @retval None
 */
void processMessageComand() {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b09a      	sub	sp, #104	@ 0x68
 8000f60:	af02      	add	r7, sp, #8
	uint8_t cursor = 1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	if (decodedCommand[cursor] == 'T') {
 8000f68:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000f6c:	4a7f      	ldr	r2, [pc, #508]	@ (800116c <processMessageComand+0x210>)
 8000f6e:	5cd3      	ldrb	r3, [r2, r3]
 8000f70:	2b54      	cmp	r3, #84	@ 0x54
 8000f72:	d140      	bne.n	8000ff6 <processMessageComand+0x9a>
		cursor++;
 8000f74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000f78:	3301      	adds	r3, #1
 8000f7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		uint8_t messageID_str[9];
		substr((char*) decodedCommand, (char*) messageID_str, cursor, 9);
 8000f7e:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8000f82:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000f86:	2309      	movs	r3, #9
 8000f88:	4878      	ldr	r0, [pc, #480]	@ (800116c <processMessageComand+0x210>)
 8000f8a:	f7ff ffa3 	bl	8000ed4 <substr>

		int msgID = toInteger(messageID_str, 9);
 8000f8e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f92:	2109      	movs	r1, #9
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ffb5 	bl	8000f04 <toInteger>
 8000f9a:	6438      	str	r0, [r7, #64]	@ 0x40
		cursor += 9;
 8000f9c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000fa0:	3309      	adds	r3, #9
 8000fa2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		uint8_t dlc_str[1];
		substr((char*) decodedCommand, (char*) dlc_str, cursor, 1);
 8000fa6:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8000faa:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000fae:	2301      	movs	r3, #1
 8000fb0:	486e      	ldr	r0, [pc, #440]	@ (800116c <processMessageComand+0x210>)
 8000fb2:	f7ff ff8f 	bl	8000ed4 <substr>
		uint8_t dlc = atoi((char*) dlc_str);
 8000fb6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f004 fdfc 	bl	8005bb8 <atoi>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		cursor++;
 8000fc6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000fca:	3301      	adds	r3, #1
 8000fcc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		uint8_t data[8];
		substr((char*) decodedCommand, (char*) data, cursor, 8);
 8000fd0:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8000fd4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000fd8:	2308      	movs	r3, #8
 8000fda:	4864      	ldr	r0, [pc, #400]	@ (800116c <processMessageComand+0x210>)
 8000fdc:	f7ff ff7a 	bl	8000ed4 <substr>

		sendCANMessage(dlc, msgID, false, false, data);
 8000fe0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000fe2:	f897 003f 	ldrb.w	r0, [r7, #63]	@ 0x3f
 8000fe6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2300      	movs	r3, #0
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f7ff fc5e 	bl	80008b0 <sendCANMessage>
		uint8_t dlc = atoi((char*) dlc_str);

		sendCANMessage(dlc, msgID, true, true, 0x00);
	}

}
 8000ff4:	e0b5      	b.n	8001162 <processMessageComand+0x206>
	} else if (decodedCommand[cursor] == 'R') {
 8000ff6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000ffa:	4a5c      	ldr	r2, [pc, #368]	@ (800116c <processMessageComand+0x210>)
 8000ffc:	5cd3      	ldrb	r3, [r2, r3]
 8000ffe:	2b52      	cmp	r3, #82	@ 0x52
 8001000:	d133      	bne.n	800106a <processMessageComand+0x10e>
		cursor++;
 8001002:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001006:	3301      	adds	r3, #1
 8001008:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		substr((char*) decodedCommand, (char*) messageID_str, cursor, 9);
 800100c:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8001010:	f107 011c 	add.w	r1, r7, #28
 8001014:	2309      	movs	r3, #9
 8001016:	4855      	ldr	r0, [pc, #340]	@ (800116c <processMessageComand+0x210>)
 8001018:	f7ff ff5c 	bl	8000ed4 <substr>
		int msgID = toInteger(messageID_str, 9);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	2109      	movs	r1, #9
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff6e 	bl	8000f04 <toInteger>
 8001028:	64b8      	str	r0, [r7, #72]	@ 0x48
		cursor += 9;
 800102a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800102e:	3309      	adds	r3, #9
 8001030:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		substr((char*) decodedCommand, (char*) dlc_str, cursor, 1);
 8001034:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8001038:	f107 0118 	add.w	r1, r7, #24
 800103c:	2301      	movs	r3, #1
 800103e:	484b      	ldr	r0, [pc, #300]	@ (800116c <processMessageComand+0x210>)
 8001040:	f7ff ff48 	bl	8000ed4 <substr>
		uint8_t dlc = toInteger(dlc_str, 1);
 8001044:	f107 0318 	add.w	r3, r7, #24
 8001048:	2101      	movs	r1, #1
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff5a 	bl	8000f04 <toInteger>
 8001050:	4603      	mov	r3, r0
 8001052:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		sendCANMessage(dlc, msgID, true, false, 0x00);
 8001056:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001058:	f897 0047 	ldrb.w	r0, [r7, #71]	@ 0x47
 800105c:	2300      	movs	r3, #0
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2300      	movs	r3, #0
 8001062:	2201      	movs	r2, #1
 8001064:	f7ff fc24 	bl	80008b0 <sendCANMessage>
}
 8001068:	e07b      	b.n	8001162 <processMessageComand+0x206>
	} else if (decodedCommand[cursor] == 't') {
 800106a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800106e:	4a3f      	ldr	r2, [pc, #252]	@ (800116c <processMessageComand+0x210>)
 8001070:	5cd3      	ldrb	r3, [r2, r3]
 8001072:	2b74      	cmp	r3, #116	@ 0x74
 8001074:	d141      	bne.n	80010fa <processMessageComand+0x19e>
		cursor++;
 8001076:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800107a:	3301      	adds	r3, #1
 800107c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		substr((char*) decodedCommand, (char*) messageID_str, cursor, 4);
 8001080:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8001084:	f107 0114 	add.w	r1, r7, #20
 8001088:	2304      	movs	r3, #4
 800108a:	4838      	ldr	r0, [pc, #224]	@ (800116c <processMessageComand+0x210>)
 800108c:	f7ff ff22 	bl	8000ed4 <substr>
		int msgID = toInteger(messageID_str, 4);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2104      	movs	r1, #4
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff34 	bl	8000f04 <toInteger>
 800109c:	6538      	str	r0, [r7, #80]	@ 0x50
		cursor += 4;
 800109e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80010a2:	3304      	adds	r3, #4
 80010a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		substr((char*) decodedCommand, (char*) dlc_str, cursor, 1);
 80010a8:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80010ac:	f107 0110 	add.w	r1, r7, #16
 80010b0:	2301      	movs	r3, #1
 80010b2:	482e      	ldr	r0, [pc, #184]	@ (800116c <processMessageComand+0x210>)
 80010b4:	f7ff ff0e 	bl	8000ed4 <substr>
		uint8_t dlc = toInteger(dlc_str, 1);
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	2101      	movs	r1, #1
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff20 	bl	8000f04 <toInteger>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		cursor++;
 80010ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80010ce:	3301      	adds	r3, #1
 80010d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		substr((char*) decodedCommand, (char*) data, cursor, 8);
 80010d4:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80010d8:	f107 0108 	add.w	r1, r7, #8
 80010dc:	2308      	movs	r3, #8
 80010de:	4823      	ldr	r0, [pc, #140]	@ (800116c <processMessageComand+0x210>)
 80010e0:	f7ff fef8 	bl	8000ed4 <substr>
		sendCANMessage(dlc, msgID, false, true, data);
 80010e4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80010e6:	f897 004f 	ldrb.w	r0, [r7, #79]	@ 0x4f
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	2200      	movs	r2, #0
 80010f4:	f7ff fbdc 	bl	80008b0 <sendCANMessage>
}
 80010f8:	e033      	b.n	8001162 <processMessageComand+0x206>
	} else if (decodedCommand[cursor] == 'r') {
 80010fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80010fe:	4a1b      	ldr	r2, [pc, #108]	@ (800116c <processMessageComand+0x210>)
 8001100:	5cd3      	ldrb	r3, [r2, r3]
 8001102:	2b72      	cmp	r3, #114	@ 0x72
 8001104:	d12d      	bne.n	8001162 <processMessageComand+0x206>
		cursor++;
 8001106:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800110a:	3301      	adds	r3, #1
 800110c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		substr((char*) decodedCommand, (char*) messageID_str, cursor, 4);
 8001110:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8001114:	1d39      	adds	r1, r7, #4
 8001116:	2304      	movs	r3, #4
 8001118:	4814      	ldr	r0, [pc, #80]	@ (800116c <processMessageComand+0x210>)
 800111a:	f7ff fedb 	bl	8000ed4 <substr>
		int msgID = toInteger(messageID_str, 4);
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2104      	movs	r1, #4
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff feee 	bl	8000f04 <toInteger>
 8001128:	65b8      	str	r0, [r7, #88]	@ 0x58
		cursor += 4;
 800112a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800112e:	3304      	adds	r3, #4
 8001130:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		substr((char*) decodedCommand, (char*) dlc_str, cursor, 1);
 8001134:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8001138:	4639      	mov	r1, r7
 800113a:	2301      	movs	r3, #1
 800113c:	480b      	ldr	r0, [pc, #44]	@ (800116c <processMessageComand+0x210>)
 800113e:	f7ff fec9 	bl	8000ed4 <substr>
		uint8_t dlc = atoi((char*) dlc_str);
 8001142:	463b      	mov	r3, r7
 8001144:	4618      	mov	r0, r3
 8001146:	f004 fd37 	bl	8005bb8 <atoi>
 800114a:	4603      	mov	r3, r0
 800114c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		sendCANMessage(dlc, msgID, true, true, 0x00);
 8001150:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001152:	f897 0057 	ldrb.w	r0, [r7, #87]	@ 0x57
 8001156:	2300      	movs	r3, #0
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2301      	movs	r3, #1
 800115c:	2201      	movs	r2, #1
 800115e:	f7ff fba7 	bl	80008b0 <sendCANMessage>
}
 8001162:	bf00      	nop
 8001164:	3760      	adds	r7, #96	@ 0x60
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000178 	.word	0x20000178

08001170 <processBitRateCommand>:

void processBitRateCommand() {
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
	uint8_t bitrateSrt[3];
	substr((char*) decodedCommand, (char*) bitrateSrt, 1, 3);
 8001176:	1d39      	adds	r1, r7, #4
 8001178:	2303      	movs	r3, #3
 800117a:	2201      	movs	r2, #1
 800117c:	484b      	ldr	r0, [pc, #300]	@ (80012ac <processBitRateCommand+0x13c>)
 800117e:	f7ff fea9 	bl	8000ed4 <substr>
	int bitRate = toInteger(bitrateSrt, 3);
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2103      	movs	r1, #3
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff febc 	bl	8000f04 <toInteger>
 800118c:	60b8      	str	r0, [r7, #8]

	bool idetified = false;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]

	switch (bitRate) {
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001198:	d054      	beq.n	8001244 <processBitRateCommand+0xd4>
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011a0:	dc56      	bgt.n	8001250 <processBitRateCommand+0xe0>
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011a8:	d046      	beq.n	8001238 <processBitRateCommand+0xc8>
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011b0:	dc4e      	bgt.n	8001250 <processBitRateCommand+0xe0>
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	2bfa      	cmp	r3, #250	@ 0xfa
 80011b6:	d039      	beq.n	800122c <processBitRateCommand+0xbc>
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	2bfa      	cmp	r3, #250	@ 0xfa
 80011bc:	dc48      	bgt.n	8001250 <processBitRateCommand+0xe0>
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	2b7d      	cmp	r3, #125	@ 0x7d
 80011c2:	d02d      	beq.n	8001220 <processBitRateCommand+0xb0>
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	2b7d      	cmp	r3, #125	@ 0x7d
 80011c8:	dc42      	bgt.n	8001250 <processBitRateCommand+0xe0>
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	2b64      	cmp	r3, #100	@ 0x64
 80011ce:	d021      	beq.n	8001214 <processBitRateCommand+0xa4>
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	2b64      	cmp	r3, #100	@ 0x64
 80011d4:	dc3c      	bgt.n	8001250 <processBitRateCommand+0xe0>
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	2b32      	cmp	r3, #50	@ 0x32
 80011da:	d015      	beq.n	8001208 <processBitRateCommand+0x98>
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	2b32      	cmp	r3, #50	@ 0x32
 80011e0:	dc36      	bgt.n	8001250 <processBitRateCommand+0xe0>
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	2b0a      	cmp	r3, #10
 80011e6:	d003      	beq.n	80011f0 <processBitRateCommand+0x80>
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	2b14      	cmp	r3, #20
 80011ec:	d006      	beq.n	80011fc <processBitRateCommand+0x8c>
 80011ee:	e02f      	b.n	8001250 <processBitRateCommand+0xe0>
	case 10:
		hcan1.Init.Prescaler = 200;
 80011f0:	4b2f      	ldr	r3, [pc, #188]	@ (80012b0 <processBitRateCommand+0x140>)
 80011f2:	22c8      	movs	r2, #200	@ 0xc8
 80011f4:	605a      	str	r2, [r3, #4]
		idetified = true;
 80011f6:	2301      	movs	r3, #1
 80011f8:	73fb      	strb	r3, [r7, #15]
		break;
 80011fa:	e029      	b.n	8001250 <processBitRateCommand+0xe0>
	case 20:
		hcan1.Init.Prescaler = 100;
 80011fc:	4b2c      	ldr	r3, [pc, #176]	@ (80012b0 <processBitRateCommand+0x140>)
 80011fe:	2264      	movs	r2, #100	@ 0x64
 8001200:	605a      	str	r2, [r3, #4]
		idetified = true;
 8001202:	2301      	movs	r3, #1
 8001204:	73fb      	strb	r3, [r7, #15]
		break;
 8001206:	e023      	b.n	8001250 <processBitRateCommand+0xe0>
	case 50:
		hcan1.Init.Prescaler = 40;
 8001208:	4b29      	ldr	r3, [pc, #164]	@ (80012b0 <processBitRateCommand+0x140>)
 800120a:	2228      	movs	r2, #40	@ 0x28
 800120c:	605a      	str	r2, [r3, #4]
		idetified = true;
 800120e:	2301      	movs	r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]
		break;
 8001212:	e01d      	b.n	8001250 <processBitRateCommand+0xe0>
	case 100:
		hcan1.Init.Prescaler = 20;
 8001214:	4b26      	ldr	r3, [pc, #152]	@ (80012b0 <processBitRateCommand+0x140>)
 8001216:	2214      	movs	r2, #20
 8001218:	605a      	str	r2, [r3, #4]
		idetified = true;
 800121a:	2301      	movs	r3, #1
 800121c:	73fb      	strb	r3, [r7, #15]
		break;
 800121e:	e017      	b.n	8001250 <processBitRateCommand+0xe0>
	case 125:
		hcan1.Init.Prescaler = 16;
 8001220:	4b23      	ldr	r3, [pc, #140]	@ (80012b0 <processBitRateCommand+0x140>)
 8001222:	2210      	movs	r2, #16
 8001224:	605a      	str	r2, [r3, #4]
		idetified = true;
 8001226:	2301      	movs	r3, #1
 8001228:	73fb      	strb	r3, [r7, #15]
		break;
 800122a:	e011      	b.n	8001250 <processBitRateCommand+0xe0>
	case 250:
		hcan1.Init.Prescaler = 8;
 800122c:	4b20      	ldr	r3, [pc, #128]	@ (80012b0 <processBitRateCommand+0x140>)
 800122e:	2208      	movs	r2, #8
 8001230:	605a      	str	r2, [r3, #4]
		idetified = true;
 8001232:	2301      	movs	r3, #1
 8001234:	73fb      	strb	r3, [r7, #15]
		break;
 8001236:	e00b      	b.n	8001250 <processBitRateCommand+0xe0>
	case 500:
		hcan1.Init.Prescaler = 4;
 8001238:	4b1d      	ldr	r3, [pc, #116]	@ (80012b0 <processBitRateCommand+0x140>)
 800123a:	2204      	movs	r2, #4
 800123c:	605a      	str	r2, [r3, #4]
		idetified = true;
 800123e:	2301      	movs	r3, #1
 8001240:	73fb      	strb	r3, [r7, #15]
		break;
 8001242:	e005      	b.n	8001250 <processBitRateCommand+0xe0>
	case 1000:
		hcan1.Init.Prescaler = 2;
 8001244:	4b1a      	ldr	r3, [pc, #104]	@ (80012b0 <processBitRateCommand+0x140>)
 8001246:	2202      	movs	r2, #2
 8001248:	605a      	str	r2, [r3, #4]
		idetified = true;
 800124a:	2301      	movs	r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]
		break;
 800124e:	bf00      	nop
	}
	if (idetified) {
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d026      	beq.n	80012a4 <processBitRateCommand+0x134>
		if (HAL_CAN_DeInit(&hcan1) != HAL_OK) {
 8001256:	4816      	ldr	r0, [pc, #88]	@ (80012b0 <processBitRateCommand+0x140>)
 8001258:	f000 ff45 	bl	80020e6 <HAL_CAN_DeInit>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <processBitRateCommand+0xf6>
			ErrorAppHandler();
 8001262:	f7ff fb1f 	bl	80008a4 <ErrorAppHandler>
		}
		if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8001266:	4812      	ldr	r0, [pc, #72]	@ (80012b0 <processBitRateCommand+0x140>)
 8001268:	f000 fe42 	bl	8001ef0 <HAL_CAN_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <processBitRateCommand+0x106>
			ErrorAppHandler();
 8001272:	f7ff fb17 	bl	80008a4 <ErrorAppHandler>
		}
		setCANFilterAcceptAll();
 8001276:	f7ff fb59 	bl	800092c <setCANFilterAcceptAll>
		if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800127a:	480d      	ldr	r0, [pc, #52]	@ (80012b0 <processBitRateCommand+0x140>)
 800127c:	f001 f836 	bl	80022ec <HAL_CAN_Start>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <processBitRateCommand+0x11a>
			ErrorAppHandler();
 8001286:	f7ff fb0d 	bl	80008a4 <ErrorAppHandler>
		}
		if (snifferAtivityStatus != SNIFFER_STOPPED) {
 800128a:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <processBitRateCommand+0x144>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d008      	beq.n	80012a4 <processBitRateCommand+0x134>
			if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8001292:	2102      	movs	r1, #2
 8001294:	4806      	ldr	r0, [pc, #24]	@ (80012b0 <processBitRateCommand+0x140>)
 8001296:	f001 faa8 	bl	80027ea <HAL_CAN_ActivateNotification>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <processBitRateCommand+0x134>
					!= HAL_OK) {
				ErrorAppHandler();
 80012a0:	f7ff fb00 	bl	80008a4 <ErrorAppHandler>
			}
		}
	}
}
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000178 	.word	0x20000178
 80012b0:	20000078 	.word	0x20000078
 80012b4:	2000020c 	.word	0x2000020c

080012b8 <processLoopBackModeCommand>:

void processLoopBackModeCommand() {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
	uint8_t mode[2];
	bool idetified = false;
 80012be:	2300      	movs	r3, #0
 80012c0:	71fb      	strb	r3, [r7, #7]
	substr((char*) decodedCommand, (char*) mode, 1, 2);
 80012c2:	1d39      	adds	r1, r7, #4
 80012c4:	2302      	movs	r3, #2
 80012c6:	2201      	movs	r2, #1
 80012c8:	4835      	ldr	r0, [pc, #212]	@ (80013a0 <processLoopBackModeCommand+0xe8>)
 80012ca:	f7ff fe03 	bl	8000ed4 <substr>
	if (!strcmp((char*) mode, "LB")) {
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4934      	ldr	r1, [pc, #208]	@ (80013a4 <processLoopBackModeCommand+0xec>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7fe ff7c 	bl	80001d0 <strcmp>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d106      	bne.n	80012ec <processLoopBackModeCommand+0x34>
		hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80012de:	4b32      	ldr	r3, [pc, #200]	@ (80013a8 <processLoopBackModeCommand+0xf0>)
 80012e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012e4:	609a      	str	r2, [r3, #8]
		idetified = true;
 80012e6:	2301      	movs	r3, #1
 80012e8:	71fb      	strb	r3, [r7, #7]
 80012ea:	e02a      	b.n	8001342 <processLoopBackModeCommand+0x8a>
	} else if (!strcmp((char*) mode, "SM")) {
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	492f      	ldr	r1, [pc, #188]	@ (80013ac <processLoopBackModeCommand+0xf4>)
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7fe ff6d 	bl	80001d0 <strcmp>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d106      	bne.n	800130a <processLoopBackModeCommand+0x52>
		hcan1.Init.Mode = CAN_MODE_SILENT;
 80012fc:	4b2a      	ldr	r3, [pc, #168]	@ (80013a8 <processLoopBackModeCommand+0xf0>)
 80012fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001302:	609a      	str	r2, [r3, #8]
		idetified = true;
 8001304:	2301      	movs	r3, #1
 8001306:	71fb      	strb	r3, [r7, #7]
 8001308:	e01b      	b.n	8001342 <processLoopBackModeCommand+0x8a>
	} else if (!strcmp((char*) mode, "NM")) {
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	4928      	ldr	r1, [pc, #160]	@ (80013b0 <processLoopBackModeCommand+0xf8>)
 800130e:	4618      	mov	r0, r3
 8001310:	f7fe ff5e 	bl	80001d0 <strcmp>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d105      	bne.n	8001326 <processLoopBackModeCommand+0x6e>
		hcan1.Init.Mode = CAN_MODE_NORMAL;
 800131a:	4b23      	ldr	r3, [pc, #140]	@ (80013a8 <processLoopBackModeCommand+0xf0>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
		idetified = true;
 8001320:	2301      	movs	r3, #1
 8001322:	71fb      	strb	r3, [r7, #7]
 8001324:	e00d      	b.n	8001342 <processLoopBackModeCommand+0x8a>
	} else if (!strcmp((char*) mode, "SL")) {
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	4922      	ldr	r1, [pc, #136]	@ (80013b4 <processLoopBackModeCommand+0xfc>)
 800132a:	4618      	mov	r0, r3
 800132c:	f7fe ff50 	bl	80001d0 <strcmp>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d105      	bne.n	8001342 <processLoopBackModeCommand+0x8a>
		hcan1.Init.Mode = CAN_MODE_SILENT_LOOPBACK;
 8001336:	4b1c      	ldr	r3, [pc, #112]	@ (80013a8 <processLoopBackModeCommand+0xf0>)
 8001338:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 800133c:	609a      	str	r2, [r3, #8]
		idetified = true;
 800133e:	2301      	movs	r3, #1
 8001340:	71fb      	strb	r3, [r7, #7]
	}
	if (idetified) {
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d026      	beq.n	8001396 <processLoopBackModeCommand+0xde>
		if (HAL_CAN_DeInit(&hcan1) != HAL_OK) {
 8001348:	4817      	ldr	r0, [pc, #92]	@ (80013a8 <processLoopBackModeCommand+0xf0>)
 800134a:	f000 fecc 	bl	80020e6 <HAL_CAN_DeInit>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <processLoopBackModeCommand+0xa0>
			ErrorAppHandler();
 8001354:	f7ff faa6 	bl	80008a4 <ErrorAppHandler>
		}
		if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8001358:	4813      	ldr	r0, [pc, #76]	@ (80013a8 <processLoopBackModeCommand+0xf0>)
 800135a:	f000 fdc9 	bl	8001ef0 <HAL_CAN_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <processLoopBackModeCommand+0xb0>
			ErrorAppHandler();
 8001364:	f7ff fa9e 	bl	80008a4 <ErrorAppHandler>
		}
		setCANFilterAcceptAll();
 8001368:	f7ff fae0 	bl	800092c <setCANFilterAcceptAll>
		if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800136c:	480e      	ldr	r0, [pc, #56]	@ (80013a8 <processLoopBackModeCommand+0xf0>)
 800136e:	f000 ffbd 	bl	80022ec <HAL_CAN_Start>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <processLoopBackModeCommand+0xc4>
			ErrorAppHandler();
 8001378:	f7ff fa94 	bl	80008a4 <ErrorAppHandler>
		}
		if (snifferAtivityStatus != SNIFFER_STOPPED) {
 800137c:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <processLoopBackModeCommand+0x100>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d008      	beq.n	8001396 <processLoopBackModeCommand+0xde>
			if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8001384:	2102      	movs	r1, #2
 8001386:	4808      	ldr	r0, [pc, #32]	@ (80013a8 <processLoopBackModeCommand+0xf0>)
 8001388:	f001 fa2f 	bl	80027ea <HAL_CAN_ActivateNotification>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <processLoopBackModeCommand+0xde>
					!= HAL_OK) {
				ErrorAppHandler();
 8001392:	f7ff fa87 	bl	80008a4 <ErrorAppHandler>
			}
		}
	}
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000178 	.word	0x20000178
 80013a4:	0800664c 	.word	0x0800664c
 80013a8:	20000078 	.word	0x20000078
 80013ac:	08006650 	.word	0x08006650
 80013b0:	08006654 	.word	0x08006654
 80013b4:	08006658 	.word	0x08006658
 80013b8:	2000020c 	.word	0x2000020c

080013bc <processActivitySniferComand>:

void processActivitySniferComand() {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
	uint8_t activityMode[2];
	substr((char*) decodedCommand, (char*) activityMode, 1, 3);
 80013c2:	1d39      	adds	r1, r7, #4
 80013c4:	2303      	movs	r3, #3
 80013c6:	2201      	movs	r2, #1
 80013c8:	4817      	ldr	r0, [pc, #92]	@ (8001428 <processActivitySniferComand+0x6c>)
 80013ca:	f7ff fd83 	bl	8000ed4 <substr>
	if (!strcmp((char*) activityMode, "ON_")) {
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	4916      	ldr	r1, [pc, #88]	@ (800142c <processActivitySniferComand+0x70>)
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7fe fefc 	bl	80001d0 <strcmp>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10c      	bne.n	80013f8 <processActivitySniferComand+0x3c>
		if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80013de:	2102      	movs	r1, #2
 80013e0:	4813      	ldr	r0, [pc, #76]	@ (8001430 <processActivitySniferComand+0x74>)
 80013e2:	f001 fa02 	bl	80027ea <HAL_CAN_ActivateNotification>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <processActivitySniferComand+0x34>
			ErrorAppHandler();
 80013ec:	f7ff fa5a 	bl	80008a4 <ErrorAppHandler>
		}
		snifferAtivityStatus = SNIFFER_ACTIVE;
 80013f0:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <processActivitySniferComand+0x78>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
		snifferAtivityStatus = SNIFFER_STOPPED;
		if (HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
			ErrorAppHandler();
		}
	}
}
 80013f6:	e013      	b.n	8001420 <processActivitySniferComand+0x64>
	else if (!strcmp((char*) activityMode, "OFF")) {
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	490f      	ldr	r1, [pc, #60]	@ (8001438 <processActivitySniferComand+0x7c>)
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7fe fee7 	bl	80001d0 <strcmp>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d10b      	bne.n	8001420 <processActivitySniferComand+0x64>
		snifferAtivityStatus = SNIFFER_STOPPED;
 8001408:	4b0a      	ldr	r3, [pc, #40]	@ (8001434 <processActivitySniferComand+0x78>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
		if (HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 800140e:	2102      	movs	r1, #2
 8001410:	4807      	ldr	r0, [pc, #28]	@ (8001430 <processActivitySniferComand+0x74>)
 8001412:	f001 fa10 	bl	8002836 <HAL_CAN_DeactivateNotification>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <processActivitySniferComand+0x64>
			ErrorAppHandler();
 800141c:	f7ff fa42 	bl	80008a4 <ErrorAppHandler>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000178 	.word	0x20000178
 800142c:	0800665c 	.word	0x0800665c
 8001430:	20000078 	.word	0x20000078
 8001434:	2000020c 	.word	0x2000020c
 8001438:	08006660 	.word	0x08006660

0800143c <processFilterCommand>:
void processFilterCommand(){
 800143c:	b580      	push	{r7, lr}
 800143e:	b08c      	sub	sp, #48	@ 0x30
 8001440:	af00      	add	r7, sp, #0
	uint8_t  cursor = 1;
 8001442:	2301      	movs	r3, #1
 8001444:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t  idType[1];
	uint8_t  filterBankStr[2];
	substr((char*) decodedCommand, (char*) idType, cursor, 1);
 8001448:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800144c:	f107 0118 	add.w	r1, r7, #24
 8001450:	2301      	movs	r3, #1
 8001452:	483b      	ldr	r0, [pc, #236]	@ (8001540 <processFilterCommand+0x104>)
 8001454:	f7ff fd3e 	bl	8000ed4 <substr>
	// We have a filter for Standard IDs
	if (!strcmp((char*) idType, "S")) {
 8001458:	f107 0318 	add.w	r3, r7, #24
 800145c:	4939      	ldr	r1, [pc, #228]	@ (8001544 <processFilterCommand+0x108>)
 800145e:	4618      	mov	r0, r3
 8001460:	f7fe feb6 	bl	80001d0 <strcmp>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d12f      	bne.n	80014ca <processFilterCommand+0x8e>
		cursor += 1;
 800146a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800146e:	3301      	adds	r3, #1
 8001470:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		substr((char*) decodedCommand, (char*) filterBankStr, cursor, 2);
 8001474:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001478:	f107 0114 	add.w	r1, r7, #20
 800147c:	2302      	movs	r3, #2
 800147e:	4830      	ldr	r0, [pc, #192]	@ (8001540 <processFilterCommand+0x104>)
 8001480:	f7ff fd28 	bl	8000ed4 <substr>
		cursor += 2;
 8001484:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001488:	3302      	adds	r3, #2
 800148a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		int filterBank = toInteger(filterBankStr, 2);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	2102      	movs	r1, #2
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fd35 	bl	8000f04 <toInteger>
 800149a:	6238      	str	r0, [r7, #32]
		uint8_t messageID_str[4];
		substr((char*) decodedCommand, (char*) messageID_str, cursor, 4);
 800149c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80014a0:	f107 0110 	add.w	r1, r7, #16
 80014a4:	2304      	movs	r3, #4
 80014a6:	4826      	ldr	r0, [pc, #152]	@ (8001540 <processFilterCommand+0x104>)
 80014a8:	f7ff fd14 	bl	8000ed4 <substr>
		int msgID = toInteger(messageID_str, 4);
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	2104      	movs	r1, #4
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fd26 	bl	8000f04 <toInteger>
 80014b8:	61f8      	str	r0, [r7, #28]
		setCANFilterAcceptSingleStandardID(filterBank, msgID);
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	69fa      	ldr	r2, [r7, #28]
 80014be:	b292      	uxth	r2, r2
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fa56 	bl	8000974 <setCANFilterAcceptSingleStandardID>
 80014c8:	e036      	b.n	8001538 <processFilterCommand+0xfc>

	}
	// We have a filter for Extended IDs
	else if (!strcmp((char*) idType, "E")) {
 80014ca:	f107 0318 	add.w	r3, r7, #24
 80014ce:	491e      	ldr	r1, [pc, #120]	@ (8001548 <processFilterCommand+0x10c>)
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7fe fe7d 	bl	80001d0 <strcmp>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d12c      	bne.n	8001536 <processFilterCommand+0xfa>
		cursor += 1;
 80014dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014e0:	3301      	adds	r3, #1
 80014e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		substr((char*) decodedCommand, (char*) filterBankStr, cursor, 2);
 80014e6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80014ea:	f107 0114 	add.w	r1, r7, #20
 80014ee:	2302      	movs	r3, #2
 80014f0:	4813      	ldr	r0, [pc, #76]	@ (8001540 <processFilterCommand+0x104>)
 80014f2:	f7ff fcef 	bl	8000ed4 <substr>
		int filterBank = toInteger(filterBankStr, 2);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	2102      	movs	r1, #2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fd01 	bl	8000f04 <toInteger>
 8001502:	62b8      	str	r0, [r7, #40]	@ 0x28
		cursor += 2;
 8001504:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001508:	3302      	adds	r3, #2
 800150a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		uint8_t messageID_str[9];
		substr((char*) decodedCommand, (char*) messageID_str, cursor, 9);
 800150e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001512:	1d39      	adds	r1, r7, #4
 8001514:	2309      	movs	r3, #9
 8001516:	480a      	ldr	r0, [pc, #40]	@ (8001540 <processFilterCommand+0x104>)
 8001518:	f7ff fcdc 	bl	8000ed4 <substr>
		int msgID = toInteger(messageID_str, 9);
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2109      	movs	r1, #9
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fcef 	bl	8000f04 <toInteger>
 8001526:	6278      	str	r0, [r7, #36]	@ 0x24
		setCANFilterAcceptSingleExtendedID(filterBank, msgID);
 8001528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800152a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800152c:	4611      	mov	r1, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fa4e 	bl	80009d0 <setCANFilterAcceptSingleExtendedID>
 8001534:	e000      	b.n	8001538 <processFilterCommand+0xfc>
	}
	else {
		return;
 8001536:	bf00      	nop
	}
}
 8001538:	3730      	adds	r7, #48	@ 0x30
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000178 	.word	0x20000178
 8001544:	08006664 	.word	0x08006664
 8001548:	08006668 	.word	0x08006668

0800154c <processRebootCommand>:


void processRebootCommand() {
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 8001550:	f7ff f966 	bl	8000820 <__NVIC_SystemReset>

08001554 <processComand>:
}

void processComand(void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af02      	add	r7, sp, #8

	cobs_decode_result resutlt = cobs_decode(decodedCommand, 20,
			decuedComand.commnddBuff, decuedComand.commandSize);
 800155a:	4b1c      	ldr	r3, [pc, #112]	@ (80015cc <processComand+0x78>)
 800155c:	7f9b      	ldrb	r3, [r3, #30]
	cobs_decode_result resutlt = cobs_decode(decodedCommand, 20,
 800155e:	4638      	mov	r0, r7
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	4b1a      	ldr	r3, [pc, #104]	@ (80015cc <processComand+0x78>)
 8001564:	2214      	movs	r2, #20
 8001566:	491a      	ldr	r1, [pc, #104]	@ (80015d0 <processComand+0x7c>)
 8001568:	f7ff f8aa 	bl	80006c0 <cobs_decode>

	if (resutlt.status == COBS_DECODE_OK) {
 800156c:	793b      	ldrb	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d127      	bne.n	80015c2 <processComand+0x6e>

		if (decodedCommand[0] == 'A') {
 8001572:	4b17      	ldr	r3, [pc, #92]	@ (80015d0 <processComand+0x7c>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b41      	cmp	r3, #65	@ 0x41
 8001578:	d101      	bne.n	800157e <processComand+0x2a>
			// Change
			processActivitySniferComand();
 800157a:	f7ff ff1f 	bl	80013bc <processActivitySniferComand>
		}
		if (decodedCommand[0] == 'M') {
 800157e:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <processComand+0x7c>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b4d      	cmp	r3, #77	@ 0x4d
 8001584:	d102      	bne.n	800158c <processComand+0x38>
			// Send a datagram to the CAN Bus
			processMessageComand();
 8001586:	f7ff fce9 	bl	8000f5c <processMessageComand>
		}
		else if (decodedCommand[0] == 'R') {
			processRebootCommand();
		}
	}
}
 800158a:	e01a      	b.n	80015c2 <processComand+0x6e>
		} else if (decodedCommand[0] == 'S') {
 800158c:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <processComand+0x7c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b53      	cmp	r3, #83	@ 0x53
 8001592:	d102      	bne.n	800159a <processComand+0x46>
			processBitRateCommand();
 8001594:	f7ff fdec 	bl	8001170 <processBitRateCommand>
}
 8001598:	e013      	b.n	80015c2 <processComand+0x6e>
		} else if (decodedCommand[0] == 'N') {
 800159a:	4b0d      	ldr	r3, [pc, #52]	@ (80015d0 <processComand+0x7c>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b4e      	cmp	r3, #78	@ 0x4e
 80015a0:	d102      	bne.n	80015a8 <processComand+0x54>
			processLoopBackModeCommand();
 80015a2:	f7ff fe89 	bl	80012b8 <processLoopBackModeCommand>
}
 80015a6:	e00c      	b.n	80015c2 <processComand+0x6e>
		else if (decodedCommand[0] == 'F') {
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <processComand+0x7c>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b46      	cmp	r3, #70	@ 0x46
 80015ae:	d102      	bne.n	80015b6 <processComand+0x62>
			processFilterCommand();
 80015b0:	f7ff ff44 	bl	800143c <processFilterCommand>
}
 80015b4:	e005      	b.n	80015c2 <processComand+0x6e>
		else if (decodedCommand[0] == 'R') {
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <processComand+0x7c>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b52      	cmp	r3, #82	@ 0x52
 80015bc:	d101      	bne.n	80015c2 <processComand+0x6e>
			processRebootCommand();
 80015be:	f7ff ffc5 	bl	800154c <processRebootCommand>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200001b0 	.word	0x200001b0
 80015d0:	20000178 	.word	0x20000178

080015d4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015e4:	d10d      	bne.n	8001602 <HAL_TIM_PeriodElapsedCallback+0x2e>
		miliseconds++;
 80015e6:	4b09      	ldr	r3, [pc, #36]	@ (800160c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	4a07      	ldr	r2, [pc, #28]	@ (800160c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80015ee:	6013      	str	r3, [r2, #0]
		if (snifferAtivityStatus == SNIFFER_STOPPED) {
 80015f0:	4b07      	ldr	r3, [pc, #28]	@ (8001610 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d104      	bne.n	8001602 <HAL_TIM_PeriodElapsedCallback+0x2e>
			HAL_GPIO_TogglePin(PIN4_GPIO_Port, PIN4_Pin);
 80015f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015fc:	4805      	ldr	r0, [pc, #20]	@ (8001614 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80015fe:	f001 fff8 	bl	80035f2 <HAL_GPIO_TogglePin>
		}
	}
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000210 	.word	0x20000210
 8001610:	2000020c 	.word	0x2000020c
 8001614:	40020000 	.word	0x40020000

08001618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161e:	f000 fbd1 	bl	8001dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001622:	f000 f855 	bl	80016d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001626:	f000 f967 	bl	80018f8 <MX_GPIO_Init>
  MX_CAN1_Init();
 800162a:	f000 f8b9 	bl	80017a0 <MX_CAN1_Init>
  MX_TIM2_Init();
 800162e:	f000 f8ed 	bl	800180c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001632:	f000 f937 	bl	80018a4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	// Enable interrupt for to be able to receiving data via UART
	HAL_UART_Receive_IT(&huart3, rxUARTBuff, 1);
 8001636:	2201      	movs	r2, #1
 8001638:	491c      	ldr	r1, [pc, #112]	@ (80016ac <main+0x94>)
 800163a:	481d      	ldr	r0, [pc, #116]	@ (80016b0 <main+0x98>)
 800163c:	f003 f9dd 	bl	80049fa <HAL_UART_Receive_IT>
	// Set CAN Filter to receive all messages
	setCANFilterAcceptAll();
 8001640:	f7ff f974 	bl	800092c <setCANFilterAcceptAll>

	//원래코드
	HAL_CAN_Start(&hcan1);
 8001644:	481b      	ldr	r0, [pc, #108]	@ (80016b4 <main+0x9c>)
 8001646:	f000 fe51 	bl	80022ec <HAL_CAN_Start>
	if (snifferAtivityStatus != SNIFFER_STOPPED) {
 800164a:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <main+0xa0>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <main+0x42>
		HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001652:	2102      	movs	r1, #2
 8001654:	4817      	ldr	r0, [pc, #92]	@ (80016b4 <main+0x9c>)
 8001656:	f001 f8c8 	bl	80027ea <HAL_CAN_ActivateNotification>
//	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
//		ErrorAppHandler();  // 에러 처리
//	}

	// Initialize EncuedCANMsg
	q_init(&canMsgQueue, sizeof(EncuedCANMsg), CAN_MSSG_QUEUE_SIZE,
 800165a:	2300      	movs	r3, #0
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2300      	movs	r3, #0
 8001660:	2264      	movs	r2, #100	@ 0x64
 8001662:	2124      	movs	r1, #36	@ 0x24
 8001664:	4815      	ldr	r0, [pc, #84]	@ (80016bc <main+0xa4>)
 8001666:	f004 f943 	bl	80058f0 <q_init>
			IMPLEMENTATION, false);
	// Initialize EnueuedCommand
	q_init(&commandQueue, sizeof(EnueuedCommand), CMD_QUEUE_SIZE,
 800166a:	2301      	movs	r3, #1
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2300      	movs	r3, #0
 8001670:	2264      	movs	r2, #100	@ 0x64
 8001672:	211f      	movs	r1, #31
 8001674:	4812      	ldr	r0, [pc, #72]	@ (80016c0 <main+0xa8>)
 8001676:	f004 f93b 	bl	80058f0 <q_init>
			IMPLEMENTATION, true);
	// Displays we are starting the main loop
	blueLEDIndicator();
 800167a:	f7ff f8e7 	bl	800084c <blueLEDIndicator>
	HAL_TIM_Base_Start_IT(&htim2);
 800167e:	4811      	ldr	r0, [pc, #68]	@ (80016c4 <main+0xac>)
 8001680:	f002 fcba 	bl	8003ff8 <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN 3 */

		// Use this function to make it a a dummy traffic generator
		//generateDummyCANTraffic(10);

		if (q_pop(&commandQueue, &decuedComand)) {
 8001684:	4910      	ldr	r1, [pc, #64]	@ (80016c8 <main+0xb0>)
 8001686:	480e      	ldr	r0, [pc, #56]	@ (80016c0 <main+0xa8>)
 8001688:	f004 fa20 	bl	8005acc <q_pop>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <main+0x7e>
			processComand();
 8001692:	f7ff ff5f 	bl	8001554 <processComand>
		}
		if (q_pop(&canMsgQueue, &decuedCANMssg)) {
 8001696:	490d      	ldr	r1, [pc, #52]	@ (80016cc <main+0xb4>)
 8001698:	4808      	ldr	r0, [pc, #32]	@ (80016bc <main+0xa4>)
 800169a:	f004 fa17 	bl	8005acc <q_pop>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0ef      	beq.n	8001684 <main+0x6c>
			processCANMsg();
 80016a4:	f7ff fb50 	bl	8000d48 <processCANMsg>
		if (q_pop(&commandQueue, &decuedComand)) {
 80016a8:	e7ec      	b.n	8001684 <main+0x6c>
 80016aa:	bf00      	nop
 80016ac:	20000154 	.word	0x20000154
 80016b0:	200000e8 	.word	0x200000e8
 80016b4:	20000078 	.word	0x20000078
 80016b8:	2000020c 	.word	0x2000020c
 80016bc:	200001d0 	.word	0x200001d0
 80016c0:	20000198 	.word	0x20000198
 80016c4:	200000a0 	.word	0x200000a0
 80016c8:	200001b0 	.word	0x200001b0
 80016cc:	200001e8 	.word	0x200001e8

080016d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b094      	sub	sp, #80	@ 0x50
 80016d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d6:	f107 0320 	add.w	r3, r7, #32
 80016da:	2230      	movs	r2, #48	@ 0x30
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f004 fbd0 	bl	8005e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	4b27      	ldr	r3, [pc, #156]	@ (8001798 <SystemClock_Config+0xc8>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fc:	4a26      	ldr	r2, [pc, #152]	@ (8001798 <SystemClock_Config+0xc8>)
 80016fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001702:	6413      	str	r3, [r2, #64]	@ 0x40
 8001704:	4b24      	ldr	r3, [pc, #144]	@ (8001798 <SystemClock_Config+0xc8>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001710:	2300      	movs	r3, #0
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	4b21      	ldr	r3, [pc, #132]	@ (800179c <SystemClock_Config+0xcc>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a20      	ldr	r2, [pc, #128]	@ (800179c <SystemClock_Config+0xcc>)
 800171a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b1e      	ldr	r3, [pc, #120]	@ (800179c <SystemClock_Config+0xcc>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800172c:	2302      	movs	r3, #2
 800172e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001730:	2301      	movs	r3, #1
 8001732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001734:	2310      	movs	r3, #16
 8001736:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001738:	2302      	movs	r3, #2
 800173a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800173c:	2300      	movs	r3, #0
 800173e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001740:	2310      	movs	r3, #16
 8001742:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001744:	2380      	movs	r3, #128	@ 0x80
 8001746:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001748:	2302      	movs	r3, #2
 800174a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800174c:	2304      	movs	r3, #4
 800174e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001750:	f107 0320 	add.w	r3, r7, #32
 8001754:	4618      	mov	r0, r3
 8001756:	f001 ff67 	bl	8003628 <HAL_RCC_OscConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001760:	f000 f958 	bl	8001a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001764:	230f      	movs	r3, #15
 8001766:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001768:	2302      	movs	r3, #2
 800176a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001774:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	2102      	movs	r1, #2
 8001780:	4618      	mov	r0, r3
 8001782:	f002 f9c9 	bl	8003b18 <HAL_RCC_ClockConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800178c:	f000 f942 	bl	8001a14 <Error_Handler>
  }
}
 8001790:	bf00      	nop
 8001792:	3750      	adds	r7, #80	@ 0x50
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40023800 	.word	0x40023800
 800179c:	40007000 	.word	0x40007000

080017a0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_Init 0 */
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */
  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80017a4:	4b17      	ldr	r3, [pc, #92]	@ (8001804 <MX_CAN1_Init+0x64>)
 80017a6:	4a18      	ldr	r2, [pc, #96]	@ (8001808 <MX_CAN1_Init+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 80017aa:	4b16      	ldr	r3, [pc, #88]	@ (8001804 <MX_CAN1_Init+0x64>)
 80017ac:	2208      	movs	r2, #8
 80017ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80017b0:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <MX_CAN1_Init+0x64>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017b6:	4b13      	ldr	r3, [pc, #76]	@ (8001804 <MX_CAN1_Init+0x64>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80017bc:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <MX_CAN1_Init+0x64>)
 80017be:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80017c2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <MX_CAN1_Init+0x64>)
 80017c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80017ca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80017cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <MX_CAN1_Init+0x64>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80017d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <MX_CAN1_Init+0x64>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80017d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <MX_CAN1_Init+0x64>)
 80017da:	2200      	movs	r2, #0
 80017dc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80017de:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <MX_CAN1_Init+0x64>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80017e4:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <MX_CAN1_Init+0x64>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <MX_CAN1_Init+0x64>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80017f0:	4804      	ldr	r0, [pc, #16]	@ (8001804 <MX_CAN1_Init+0x64>)
 80017f2:	f000 fb7d 	bl	8001ef0 <HAL_CAN_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80017fc:	f000 f90a 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  /* USER CODE END CAN1_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000078 	.word	0x20000078
 8001808:	40006400 	.word	0x40006400

0800180c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001820:	463b      	mov	r3, r7
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001828:	4b1d      	ldr	r3, [pc, #116]	@ (80018a0 <MX_TIM2_Init+0x94>)
 800182a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800182e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <MX_TIM2_Init+0x94>)
 8001832:	221f      	movs	r2, #31
 8001834:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001836:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <MX_TIM2_Init+0x94>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800183c:	4b18      	ldr	r3, [pc, #96]	@ (80018a0 <MX_TIM2_Init+0x94>)
 800183e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001842:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001844:	4b16      	ldr	r3, [pc, #88]	@ (80018a0 <MX_TIM2_Init+0x94>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184a:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <MX_TIM2_Init+0x94>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001850:	4813      	ldr	r0, [pc, #76]	@ (80018a0 <MX_TIM2_Init+0x94>)
 8001852:	f002 fb81 	bl	8003f58 <HAL_TIM_Base_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800185c:	f000 f8da 	bl	8001a14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001860:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001864:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	4619      	mov	r1, r3
 800186c:	480c      	ldr	r0, [pc, #48]	@ (80018a0 <MX_TIM2_Init+0x94>)
 800186e:	f002 fd23 	bl	80042b8 <HAL_TIM_ConfigClockSource>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001878:	f000 f8cc 	bl	8001a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187c:	2300      	movs	r3, #0
 800187e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001884:	463b      	mov	r3, r7
 8001886:	4619      	mov	r1, r3
 8001888:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <MX_TIM2_Init+0x94>)
 800188a:	f002 ff4b 	bl	8004724 <HAL_TIMEx_MasterConfigSynchronization>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001894:	f000 f8be 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	200000a0 	.word	0x200000a0

080018a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <MX_USART3_UART_Init+0x4c>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	@ (80018f4 <MX_USART3_UART_Init+0x50>)
 80018ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <MX_USART3_UART_Init+0x4c>)
 80018b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <MX_USART3_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <MX_USART3_UART_Init+0x4c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <MX_USART3_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018c8:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <MX_USART3_UART_Init+0x4c>)
 80018ca:	220c      	movs	r2, #12
 80018cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ce:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <MX_USART3_UART_Init+0x4c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <MX_USART3_UART_Init+0x4c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	@ (80018f0 <MX_USART3_UART_Init+0x4c>)
 80018dc:	f002 ffb2 	bl	8004844 <HAL_UART_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018e6:	f000 f895 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200000e8 	.word	0x200000e8
 80018f4:	40004800 	.word	0x40004800

080018f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	@ 0x28
 80018fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	4b3c      	ldr	r3, [pc, #240]	@ (8001a04 <MX_GPIO_Init+0x10c>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	4a3b      	ldr	r2, [pc, #236]	@ (8001a04 <MX_GPIO_Init+0x10c>)
 8001918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800191c:	6313      	str	r3, [r2, #48]	@ 0x30
 800191e:	4b39      	ldr	r3, [pc, #228]	@ (8001a04 <MX_GPIO_Init+0x10c>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4b35      	ldr	r3, [pc, #212]	@ (8001a04 <MX_GPIO_Init+0x10c>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	4a34      	ldr	r2, [pc, #208]	@ (8001a04 <MX_GPIO_Init+0x10c>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6313      	str	r3, [r2, #48]	@ 0x30
 800193a:	4b32      	ldr	r3, [pc, #200]	@ (8001a04 <MX_GPIO_Init+0x10c>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a04 <MX_GPIO_Init+0x10c>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	4a2d      	ldr	r2, [pc, #180]	@ (8001a04 <MX_GPIO_Init+0x10c>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6313      	str	r3, [r2, #48]	@ 0x30
 8001956:	4b2b      	ldr	r3, [pc, #172]	@ (8001a04 <MX_GPIO_Init+0x10c>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	4b27      	ldr	r3, [pc, #156]	@ (8001a04 <MX_GPIO_Init+0x10c>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	4a26      	ldr	r2, [pc, #152]	@ (8001a04 <MX_GPIO_Init+0x10c>)
 800196c:	f043 0308 	orr.w	r3, r3, #8
 8001970:	6313      	str	r3, [r2, #48]	@ 0x30
 8001972:	4b24      	ldr	r3, [pc, #144]	@ (8001a04 <MX_GPIO_Init+0x10c>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN3_Pin|PIN2_Pin|PIN4_Pin, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	f240 1109 	movw	r1, #265	@ 0x109
 8001984:	4820      	ldr	r0, [pc, #128]	@ (8001a08 <MX_GPIO_Init+0x110>)
 8001986:	f001 fe1b 	bl	80035c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PIN5_Pin|PIN1_Pin, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	f241 0110 	movw	r1, #4112	@ 0x1010
 8001990:	481e      	ldr	r0, [pc, #120]	@ (8001a0c <MX_GPIO_Init+0x114>)
 8001992:	f001 fe15 	bl	80035c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001996:	2200      	movs	r2, #0
 8001998:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800199c:	481c      	ldr	r0, [pc, #112]	@ (8001a10 <MX_GPIO_Init+0x118>)
 800199e:	f001 fe0f 	bl	80035c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIN3_Pin PIN2_Pin PIN4_Pin */
  GPIO_InitStruct.Pin = PIN3_Pin|PIN2_Pin|PIN4_Pin;
 80019a2:	f240 1309 	movw	r3, #265	@ 0x109
 80019a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a8:	2301      	movs	r3, #1
 80019aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4619      	mov	r1, r3
 80019ba:	4813      	ldr	r0, [pc, #76]	@ (8001a08 <MX_GPIO_Init+0x110>)
 80019bc:	f001 fb68 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN5_Pin PIN1_Pin */
  GPIO_InitStruct.Pin = PIN5_Pin|PIN1_Pin;
 80019c0:	f241 0310 	movw	r3, #4112	@ 0x1010
 80019c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c6:	2301      	movs	r3, #1
 80019c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	480c      	ldr	r0, [pc, #48]	@ (8001a0c <MX_GPIO_Init+0x114>)
 80019da:	f001 fb59 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin ORANGE_LED_Pin RED_LED_Pin BLUE_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 80019de:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80019e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e4:	2301      	movs	r3, #1
 80019e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ec:	2300      	movs	r3, #0
 80019ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4619      	mov	r1, r3
 80019f6:	4806      	ldr	r0, [pc, #24]	@ (8001a10 <MX_GPIO_Init+0x118>)
 80019f8:	f001 fb4a 	bl	8003090 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019fc:	bf00      	nop
 80019fe:	3728      	adds	r7, #40	@ 0x28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40020000 	.word	0x40020000
 8001a0c:	40020400 	.word	0x40020400
 8001a10:	40020c00 	.word	0x40020c00

08001a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	4b10      	ldr	r3, [pc, #64]	@ (8001a70 <HAL_MspInit+0x4c>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	4a0f      	ldr	r2, [pc, #60]	@ (8001a70 <HAL_MspInit+0x4c>)
 8001a34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a70 <HAL_MspInit+0x4c>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	603b      	str	r3, [r7, #0]
 8001a4a:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <HAL_MspInit+0x4c>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	4a08      	ldr	r2, [pc, #32]	@ (8001a70 <HAL_MspInit+0x4c>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a56:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <HAL_MspInit+0x4c>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800

08001a74 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	@ 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a1d      	ldr	r2, [pc, #116]	@ (8001b08 <HAL_CAN_MspInit+0x94>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d134      	bne.n	8001b00 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b0c <HAL_CAN_MspInit+0x98>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	4a1b      	ldr	r2, [pc, #108]	@ (8001b0c <HAL_CAN_MspInit+0x98>)
 8001aa0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa6:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <HAL_CAN_MspInit+0x98>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b15      	ldr	r3, [pc, #84]	@ (8001b0c <HAL_CAN_MspInit+0x98>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	4a14      	ldr	r2, [pc, #80]	@ (8001b0c <HAL_CAN_MspInit+0x98>)
 8001abc:	f043 0302 	orr.w	r3, r3, #2
 8001ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac2:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <HAL_CAN_MspInit+0x98>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ace:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ae0:	2309      	movs	r3, #9
 8001ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4809      	ldr	r0, [pc, #36]	@ (8001b10 <HAL_CAN_MspInit+0x9c>)
 8001aec:	f001 fad0 	bl	8003090 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2100      	movs	r1, #0
 8001af4:	2014      	movs	r0, #20
 8001af6:	f001 f9f4 	bl	8002ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001afa:	2014      	movs	r0, #20
 8001afc:	f001 fa0d 	bl	8002f1a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001b00:	bf00      	nop
 8001b02:	3728      	adds	r7, #40	@ 0x28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40006400 	.word	0x40006400
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020400 	.word	0x40020400

08001b14 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0a      	ldr	r2, [pc, #40]	@ (8001b4c <HAL_CAN_MspDeInit+0x38>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d10d      	bne.n	8001b42 <HAL_CAN_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8001b26:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <HAL_CAN_MspDeInit+0x3c>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	4a09      	ldr	r2, [pc, #36]	@ (8001b50 <HAL_CAN_MspDeInit+0x3c>)
 8001b2c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8001b30:	6413      	str	r3, [r2, #64]	@ 0x40

    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8001b32:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001b36:	4807      	ldr	r0, [pc, #28]	@ (8001b54 <HAL_CAN_MspDeInit+0x40>)
 8001b38:	f001 fc46 	bl	80033c8 <HAL_GPIO_DeInit>

    /* CAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8001b3c:	2014      	movs	r0, #20
 8001b3e:	f001 f9fa 	bl	8002f36 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40006400 	.word	0x40006400
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020400 	.word	0x40020400

08001b58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b68:	d115      	bne.n	8001b96 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <HAL_TIM_Base_MspInit+0x48>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	4a0b      	ldr	r2, [pc, #44]	@ (8001ba0 <HAL_TIM_Base_MspInit+0x48>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <HAL_TIM_Base_MspInit+0x48>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	201c      	movs	r0, #28
 8001b8c:	f001 f9a9 	bl	8002ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b90:	201c      	movs	r0, #28
 8001b92:	f001 f9c2 	bl	8002f1a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	@ 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c38 <HAL_UART_MspInit+0x94>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d134      	bne.n	8001c30 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	4b1c      	ldr	r3, [pc, #112]	@ (8001c3c <HAL_UART_MspInit+0x98>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	4a1b      	ldr	r2, [pc, #108]	@ (8001c3c <HAL_UART_MspInit+0x98>)
 8001bd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd6:	4b19      	ldr	r3, [pc, #100]	@ (8001c3c <HAL_UART_MspInit+0x98>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <HAL_UART_MspInit+0x98>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	4a14      	ldr	r2, [pc, #80]	@ (8001c3c <HAL_UART_MspInit+0x98>)
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf2:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <HAL_UART_MspInit+0x98>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bfe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c10:	2307      	movs	r3, #7
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4809      	ldr	r0, [pc, #36]	@ (8001c40 <HAL_UART_MspInit+0x9c>)
 8001c1c:	f001 fa38 	bl	8003090 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2100      	movs	r1, #0
 8001c24:	2027      	movs	r0, #39	@ 0x27
 8001c26:	f001 f95c 	bl	8002ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c2a:	2027      	movs	r0, #39	@ 0x27
 8001c2c:	f001 f975 	bl	8002f1a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001c30:	bf00      	nop
 8001c32:	3728      	adds	r7, #40	@ 0x28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40004800 	.word	0x40004800
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40020400 	.word	0x40020400

08001c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <NMI_Handler+0x4>

08001c4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <HardFault_Handler+0x4>

08001c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <MemManage_Handler+0x4>

08001c5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <BusFault_Handler+0x4>

08001c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <UsageFault_Handler+0x4>

08001c6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c9a:	f000 f8e5 	bl	8001e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ca8:	4802      	ldr	r0, [pc, #8]	@ (8001cb4 <CAN1_RX0_IRQHandler+0x10>)
 8001caa:	f000 fdeb 	bl	8002884 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000078 	.word	0x20000078

08001cb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cbc:	4802      	ldr	r0, [pc, #8]	@ (8001cc8 <TIM2_IRQHandler+0x10>)
 8001cbe:	f002 fa0b 	bl	80040d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200000a0 	.word	0x200000a0

08001ccc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cd0:	4802      	ldr	r0, [pc, #8]	@ (8001cdc <USART3_IRQHandler+0x10>)
 8001cd2:	f002 feb7 	bl	8004a44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200000e8 	.word	0x200000e8

08001ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce8:	4a14      	ldr	r2, [pc, #80]	@ (8001d3c <_sbrk+0x5c>)
 8001cea:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <_sbrk+0x60>)
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf4:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <_sbrk+0x64>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <_sbrk+0x64>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	@ (8001d48 <_sbrk+0x68>)
 8001d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d02:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d207      	bcs.n	8001d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d10:	f004 f8d0 	bl	8005eb4 <__errno>
 8001d14:	4603      	mov	r3, r0
 8001d16:	220c      	movs	r2, #12
 8001d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	e009      	b.n	8001d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d26:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4a05      	ldr	r2, [pc, #20]	@ (8001d44 <_sbrk+0x64>)
 8001d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d32:	68fb      	ldr	r3, [r7, #12]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20020000 	.word	0x20020000
 8001d40:	00000400 	.word	0x00000400
 8001d44:	20000214 	.word	0x20000214
 8001d48:	20000368 	.word	0x20000368

08001d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <SystemInit+0x20>)
 8001d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d56:	4a05      	ldr	r2, [pc, #20]	@ (8001d6c <SystemInit+0x20>)
 8001d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001da8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d74:	f7ff ffea 	bl	8001d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d78:	480c      	ldr	r0, [pc, #48]	@ (8001dac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d7a:	490d      	ldr	r1, [pc, #52]	@ (8001db0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001db4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d80:	e002      	b.n	8001d88 <LoopCopyDataInit>

08001d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d86:	3304      	adds	r3, #4

08001d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d8c:	d3f9      	bcc.n	8001d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001db8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d90:	4c0a      	ldr	r4, [pc, #40]	@ (8001dbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d94:	e001      	b.n	8001d9a <LoopFillZerobss>

08001d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d98:	3204      	adds	r2, #4

08001d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d9c:	d3fb      	bcc.n	8001d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d9e:	f004 f88f 	bl	8005ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001da2:	f7ff fc39 	bl	8001618 <main>
  bx  lr    
 8001da6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001da8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001db4:	080067d8 	.word	0x080067d8
  ldr r2, =_sbss
 8001db8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001dbc:	20000364 	.word	0x20000364

08001dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC_IRQHandler>
	...

08001dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <HAL_Init+0x40>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001e04 <HAL_Init+0x40>)
 8001dce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001e04 <HAL_Init+0x40>)
 8001dda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de0:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a07      	ldr	r2, [pc, #28]	@ (8001e04 <HAL_Init+0x40>)
 8001de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dec:	2003      	movs	r0, #3
 8001dee:	f001 f86d 	bl	8002ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001df2:	200f      	movs	r0, #15
 8001df4:	f000 f808 	bl	8001e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df8:	f7ff fe14 	bl	8001a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023c00 	.word	0x40023c00

08001e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e10:	4b12      	ldr	r3, [pc, #72]	@ (8001e5c <HAL_InitTick+0x54>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <HAL_InitTick+0x58>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	f001 f893 	bl	8002f52 <HAL_SYSTICK_Config>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00e      	b.n	8001e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b0f      	cmp	r3, #15
 8001e3a:	d80a      	bhi.n	8001e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f001 f84d 	bl	8002ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e48:	4a06      	ldr	r2, [pc, #24]	@ (8001e64 <HAL_InitTick+0x5c>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e000      	b.n	8001e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	20000008 	.word	0x20000008
 8001e64:	20000004 	.word	0x20000004

08001e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_IncTick+0x20>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_IncTick+0x24>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	4a04      	ldr	r2, [pc, #16]	@ (8001e8c <HAL_IncTick+0x24>)
 8001e7a:	6013      	str	r3, [r2, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20000008 	.word	0x20000008
 8001e8c:	20000218 	.word	0x20000218

08001e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return uwTick;
 8001e94:	4b03      	ldr	r3, [pc, #12]	@ (8001ea4 <HAL_GetTick+0x14>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20000218 	.word	0x20000218

08001ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb0:	f7ff ffee 	bl	8001e90 <HAL_GetTick>
 8001eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec0:	d005      	beq.n	8001ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8001eec <HAL_Delay+0x44>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4413      	add	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ece:	bf00      	nop
 8001ed0:	f7ff ffde 	bl	8001e90 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d8f7      	bhi.n	8001ed0 <HAL_Delay+0x28>
  {
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000008 	.word	0x20000008

08001ef0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0ed      	b.n	80020de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d102      	bne.n	8001f14 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff fdb0 	bl	8001a74 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f24:	f7ff ffb4 	bl	8001e90 <HAL_GetTick>
 8001f28:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f2a:	e012      	b.n	8001f52 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f2c:	f7ff ffb0 	bl	8001e90 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b0a      	cmp	r3, #10
 8001f38:	d90b      	bls.n	8001f52 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2205      	movs	r2, #5
 8001f4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e0c5      	b.n	80020de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0e5      	beq.n	8001f2c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0202 	bic.w	r2, r2, #2
 8001f6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f70:	f7ff ff8e 	bl	8001e90 <HAL_GetTick>
 8001f74:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f76:	e012      	b.n	8001f9e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f78:	f7ff ff8a 	bl	8001e90 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b0a      	cmp	r3, #10
 8001f84:	d90b      	bls.n	8001f9e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2205      	movs	r2, #5
 8001f96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e09f      	b.n	80020de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1e5      	bne.n	8001f78 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	7e1b      	ldrb	r3, [r3, #24]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d108      	bne.n	8001fc6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e007      	b.n	8001fd6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7e5b      	ldrb	r3, [r3, #25]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d108      	bne.n	8001ff0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	e007      	b.n	8002000 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ffe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	7e9b      	ldrb	r3, [r3, #26]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d108      	bne.n	800201a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0220 	orr.w	r2, r2, #32
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	e007      	b.n	800202a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0220 	bic.w	r2, r2, #32
 8002028:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7edb      	ldrb	r3, [r3, #27]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d108      	bne.n	8002044 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0210 	bic.w	r2, r2, #16
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	e007      	b.n	8002054 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0210 	orr.w	r2, r2, #16
 8002052:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	7f1b      	ldrb	r3, [r3, #28]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d108      	bne.n	800206e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0208 	orr.w	r2, r2, #8
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	e007      	b.n	800207e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0208 	bic.w	r2, r2, #8
 800207c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	7f5b      	ldrb	r3, [r3, #29]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d108      	bne.n	8002098 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f042 0204 	orr.w	r2, r2, #4
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	e007      	b.n	80020a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0204 	bic.w	r2, r2, #4
 80020a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	ea42 0103 	orr.w	r1, r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	1e5a      	subs	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e015      	b.n	8002124 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f93b 	bl	8002374 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff fd08 	bl	8001b14 <HAL_CAN_MspDeInit>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002112:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800212c:	b480      	push	{r7}
 800212e:	b087      	sub	sp, #28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002142:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d003      	beq.n	8002152 <HAL_CAN_ConfigFilter+0x26>
 800214a:	7cfb      	ldrb	r3, [r7, #19]
 800214c:	2b02      	cmp	r3, #2
 800214e:	f040 80be 	bne.w	80022ce <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002152:	4b65      	ldr	r3, [pc, #404]	@ (80022e8 <HAL_CAN_ConfigFilter+0x1bc>)
 8002154:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800215c:	f043 0201 	orr.w	r2, r3, #1
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800216c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	431a      	orrs	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	2201      	movs	r2, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	401a      	ands	r2, r3
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d123      	bne.n	80021fc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	43db      	mvns	r3, r3
 80021be:	401a      	ands	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80021d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	3248      	adds	r2, #72	@ 0x48
 80021dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021f2:	6979      	ldr	r1, [r7, #20]
 80021f4:	3348      	adds	r3, #72	@ 0x48
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	440b      	add	r3, r1
 80021fa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d122      	bne.n	800224a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	431a      	orrs	r2, r3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002224:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	3248      	adds	r2, #72	@ 0x48
 800222a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800223e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002240:	6979      	ldr	r1, [r7, #20]
 8002242:	3348      	adds	r3, #72	@ 0x48
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	440b      	add	r3, r1
 8002248:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d109      	bne.n	8002266 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	43db      	mvns	r3, r3
 800225c:	401a      	ands	r2, r3
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002264:	e007      	b.n	8002276 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	431a      	orrs	r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d109      	bne.n	8002292 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	43db      	mvns	r3, r3
 8002288:	401a      	ands	r2, r3
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002290:	e007      	b.n	80022a2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	431a      	orrs	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d107      	bne.n	80022ba <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80022c0:	f023 0201 	bic.w	r2, r3, #1
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e006      	b.n	80022dc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
  }
}
 80022dc:	4618      	mov	r0, r3
 80022de:	371c      	adds	r7, #28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	40006400 	.word	0x40006400

080022ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d12e      	bne.n	800235e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0201 	bic.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002318:	f7ff fdba 	bl	8001e90 <HAL_GetTick>
 800231c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800231e:	e012      	b.n	8002346 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002320:	f7ff fdb6 	bl	8001e90 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b0a      	cmp	r3, #10
 800232c:	d90b      	bls.n	8002346 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2205      	movs	r2, #5
 800233e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e012      	b.n	800236c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1e5      	bne.n	8002320 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	e006      	b.n	800236c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
  }
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d133      	bne.n	80023f0 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002398:	f7ff fd7a 	bl	8001e90 <HAL_GetTick>
 800239c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800239e:	e012      	b.n	80023c6 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023a0:	f7ff fd76 	bl	8001e90 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b0a      	cmp	r3, #10
 80023ac:	d90b      	bls.n	80023c6 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2205      	movs	r2, #5
 80023be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e01b      	b.n	80023fe <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0e5      	beq.n	80023a0 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0202 	bic.w	r2, r2, #2
 80023e2:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	e006      	b.n	80023fe <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
  }
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002406:	b480      	push	{r7}
 8002408:	b089      	sub	sp, #36	@ 0x24
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 3020 	ldrb.w	r3, [r3, #32]
 800241a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002424:	7ffb      	ldrb	r3, [r7, #31]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d003      	beq.n	8002432 <HAL_CAN_AddTxMessage+0x2c>
 800242a:	7ffb      	ldrb	r3, [r7, #31]
 800242c:	2b02      	cmp	r3, #2
 800242e:	f040 80ad 	bne.w	800258c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10a      	bne.n	8002452 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002442:	2b00      	cmp	r3, #0
 8002444:	d105      	bne.n	8002452 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 8095 	beq.w	800257c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	0e1b      	lsrs	r3, r3, #24
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800245c:	2201      	movs	r2, #1
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	409a      	lsls	r2, r3
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10d      	bne.n	800248a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002478:	68f9      	ldr	r1, [r7, #12]
 800247a:	6809      	ldr	r1, [r1, #0]
 800247c:	431a      	orrs	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	3318      	adds	r3, #24
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	440b      	add	r3, r1
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	e00f      	b.n	80024aa <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002494:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800249a:	68f9      	ldr	r1, [r7, #12]
 800249c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800249e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	3318      	adds	r3, #24
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	440b      	add	r3, r1
 80024a8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6819      	ldr	r1, [r3, #0]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	3318      	adds	r3, #24
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	440b      	add	r3, r1
 80024ba:	3304      	adds	r3, #4
 80024bc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	7d1b      	ldrb	r3, [r3, #20]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d111      	bne.n	80024ea <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	3318      	adds	r3, #24
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	4413      	add	r3, r2
 80024d2:	3304      	adds	r3, #4
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	6811      	ldr	r1, [r2, #0]
 80024da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	3318      	adds	r3, #24
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	440b      	add	r3, r1
 80024e6:	3304      	adds	r3, #4
 80024e8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3307      	adds	r3, #7
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	061a      	lsls	r2, r3, #24
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3306      	adds	r3, #6
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	041b      	lsls	r3, r3, #16
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3305      	adds	r3, #5
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	021b      	lsls	r3, r3, #8
 8002504:	4313      	orrs	r3, r2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	3204      	adds	r2, #4
 800250a:	7812      	ldrb	r2, [r2, #0]
 800250c:	4610      	mov	r0, r2
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	6811      	ldr	r1, [r2, #0]
 8002512:	ea43 0200 	orr.w	r2, r3, r0
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	440b      	add	r3, r1
 800251c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002520:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3303      	adds	r3, #3
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	061a      	lsls	r2, r3, #24
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3302      	adds	r3, #2
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	041b      	lsls	r3, r3, #16
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3301      	adds	r3, #1
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	021b      	lsls	r3, r3, #8
 800253c:	4313      	orrs	r3, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	7812      	ldrb	r2, [r2, #0]
 8002542:	4610      	mov	r0, r2
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	6811      	ldr	r1, [r2, #0]
 8002548:	ea43 0200 	orr.w	r2, r3, r0
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	440b      	add	r3, r1
 8002552:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002556:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	3318      	adds	r3, #24
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	4413      	add	r3, r2
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	6811      	ldr	r1, [r2, #0]
 800256a:	f043 0201 	orr.w	r2, r3, #1
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	3318      	adds	r3, #24
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	440b      	add	r3, r1
 8002576:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	e00e      	b.n	800259a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e006      	b.n	800259a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
  }
}
 800259a:	4618      	mov	r0, r3
 800259c:	3724      	adds	r7, #36	@ 0x24
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80025a6:	b480      	push	{r7}
 80025a8:	b087      	sub	sp, #28
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	60f8      	str	r0, [r7, #12]
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ba:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80025bc:	7dfb      	ldrb	r3, [r7, #23]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d003      	beq.n	80025ca <HAL_CAN_GetRxMessage+0x24>
 80025c2:	7dfb      	ldrb	r3, [r7, #23]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	f040 8103 	bne.w	80027d0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10e      	bne.n	80025ee <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d116      	bne.n	800260c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e0f7      	b.n	80027de <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d107      	bne.n	800260c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002600:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0e8      	b.n	80027de <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	331b      	adds	r3, #27
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	4413      	add	r3, r2
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0204 	and.w	r2, r3, #4
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10c      	bne.n	8002644 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	331b      	adds	r3, #27
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	4413      	add	r3, r2
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	0d5b      	lsrs	r3, r3, #21
 800263a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	e00b      	b.n	800265c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	331b      	adds	r3, #27
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	4413      	add	r3, r2
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	08db      	lsrs	r3, r3, #3
 8002654:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	331b      	adds	r3, #27
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	4413      	add	r3, r2
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0202 	and.w	r2, r3, #2
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	331b      	adds	r3, #27
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	4413      	add	r3, r2
 800267e:	3304      	adds	r3, #4
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2208      	movs	r2, #8
 800268e:	611a      	str	r2, [r3, #16]
 8002690:	e00b      	b.n	80026aa <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	331b      	adds	r3, #27
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	4413      	add	r3, r2
 800269e:	3304      	adds	r3, #4
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 020f 	and.w	r2, r3, #15
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	331b      	adds	r3, #27
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	4413      	add	r3, r2
 80026b6:	3304      	adds	r3, #4
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	331b      	adds	r3, #27
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	4413      	add	r3, r2
 80026ce:	3304      	adds	r3, #4
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	0c1b      	lsrs	r3, r3, #16
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	0a1a      	lsrs	r2, r3, #8
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	3301      	adds	r3, #1
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	4413      	add	r3, r2
 8002714:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	0c1a      	lsrs	r2, r3, #16
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	3302      	adds	r3, #2
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	4413      	add	r3, r2
 800272e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	0e1a      	lsrs	r2, r3, #24
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	3303      	adds	r3, #3
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	4413      	add	r3, r2
 8002748:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	3304      	adds	r3, #4
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	4413      	add	r3, r2
 8002760:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	0a1a      	lsrs	r2, r3, #8
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	3305      	adds	r3, #5
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	4413      	add	r3, r2
 800277a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	0c1a      	lsrs	r2, r3, #16
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	3306      	adds	r3, #6
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	4413      	add	r3, r2
 8002794:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	0e1a      	lsrs	r2, r3, #24
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	3307      	adds	r3, #7
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d108      	bne.n	80027bc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0220 	orr.w	r2, r2, #32
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	e007      	b.n	80027cc <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0220 	orr.w	r2, r2, #32
 80027ca:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	e006      	b.n	80027de <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
  }
}
 80027de:	4618      	mov	r0, r3
 80027e0:	371c      	adds	r7, #28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b085      	sub	sp, #20
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027fa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d002      	beq.n	8002808 <HAL_CAN_ActivateNotification+0x1e>
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d109      	bne.n	800281c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6959      	ldr	r1, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	e006      	b.n	800282a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002820:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
  }
}
 800282a:	4618      	mov	r0, r3
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8002836:	b480      	push	{r7}
 8002838:	b085      	sub	sp, #20
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002846:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d002      	beq.n	8002854 <HAL_CAN_DeactivateNotification+0x1e>
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d10a      	bne.n	800286a <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6959      	ldr	r1, [r3, #20]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	43da      	mvns	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	400a      	ands	r2, r1
 8002864:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	e006      	b.n	8002878 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
  }
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08a      	sub	sp, #40	@ 0x28
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800288c:	2300      	movs	r3, #0
 800288e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d07c      	beq.n	80029c4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d023      	beq.n	800291c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2201      	movs	r2, #1
 80028da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f983 	bl	8002bf2 <HAL_CAN_TxMailbox0CompleteCallback>
 80028ec:	e016      	b.n	800291c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d004      	beq.n	8002902 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80028f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002900:	e00c      	b.n	800291c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d004      	beq.n	8002916 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800290c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24
 8002914:	e002      	b.n	800291c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f989 	bl	8002c2e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d024      	beq.n	8002970 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800292e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f963 	bl	8002c06 <HAL_CAN_TxMailbox1CompleteCallback>
 8002940:	e016      	b.n	8002970 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002948:	2b00      	cmp	r3, #0
 800294a:	d004      	beq.n	8002956 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800294c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002952:	627b      	str	r3, [r7, #36]	@ 0x24
 8002954:	e00c      	b.n	8002970 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800295c:	2b00      	cmp	r3, #0
 800295e:	d004      	beq.n	800296a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002962:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002966:	627b      	str	r3, [r7, #36]	@ 0x24
 8002968:	e002      	b.n	8002970 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f969 	bl	8002c42 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d024      	beq.n	80029c4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002982:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f943 	bl	8002c1a <HAL_CAN_TxMailbox2CompleteCallback>
 8002994:	e016      	b.n	80029c4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d004      	beq.n	80029aa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80029a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a8:	e00c      	b.n	80029c4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d004      	beq.n	80029be <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80029b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80029bc:	e002      	b.n	80029c4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f949 	bl	8002c56 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00c      	beq.n	80029e8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d007      	beq.n	80029e8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029de:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2210      	movs	r2, #16
 80029e6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00b      	beq.n	8002a0a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d006      	beq.n	8002a0a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2208      	movs	r2, #8
 8002a02:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f930 	bl	8002c6a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d009      	beq.n	8002a28 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7fe f950 	bl	8000cc8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00c      	beq.n	8002a4c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d007      	beq.n	8002a4c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a42:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2210      	movs	r2, #16
 8002a4a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d006      	beq.n	8002a6e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2208      	movs	r2, #8
 8002a66:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f912 	bl	8002c92 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d009      	beq.n	8002a8c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f8f9 	bl	8002c7e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d006      	beq.n	8002aae <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2210      	movs	r2, #16
 8002aa6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f8fc 	bl	8002ca6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00b      	beq.n	8002ad0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d006      	beq.n	8002ad0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2208      	movs	r2, #8
 8002ac8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f8f5 	bl	8002cba <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d07b      	beq.n	8002bd2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d072      	beq.n	8002bca <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d008      	beq.n	8002b00 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d008      	beq.n	8002b1c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b16:	f043 0302 	orr.w	r3, r3, #2
 8002b1a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d008      	beq.n	8002b38 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	f043 0304 	orr.w	r3, r3, #4
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d043      	beq.n	8002bca <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d03e      	beq.n	8002bca <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b52:	2b60      	cmp	r3, #96	@ 0x60
 8002b54:	d02b      	beq.n	8002bae <HAL_CAN_IRQHandler+0x32a>
 8002b56:	2b60      	cmp	r3, #96	@ 0x60
 8002b58:	d82e      	bhi.n	8002bb8 <HAL_CAN_IRQHandler+0x334>
 8002b5a:	2b50      	cmp	r3, #80	@ 0x50
 8002b5c:	d022      	beq.n	8002ba4 <HAL_CAN_IRQHandler+0x320>
 8002b5e:	2b50      	cmp	r3, #80	@ 0x50
 8002b60:	d82a      	bhi.n	8002bb8 <HAL_CAN_IRQHandler+0x334>
 8002b62:	2b40      	cmp	r3, #64	@ 0x40
 8002b64:	d019      	beq.n	8002b9a <HAL_CAN_IRQHandler+0x316>
 8002b66:	2b40      	cmp	r3, #64	@ 0x40
 8002b68:	d826      	bhi.n	8002bb8 <HAL_CAN_IRQHandler+0x334>
 8002b6a:	2b30      	cmp	r3, #48	@ 0x30
 8002b6c:	d010      	beq.n	8002b90 <HAL_CAN_IRQHandler+0x30c>
 8002b6e:	2b30      	cmp	r3, #48	@ 0x30
 8002b70:	d822      	bhi.n	8002bb8 <HAL_CAN_IRQHandler+0x334>
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d002      	beq.n	8002b7c <HAL_CAN_IRQHandler+0x2f8>
 8002b76:	2b20      	cmp	r3, #32
 8002b78:	d005      	beq.n	8002b86 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002b7a:	e01d      	b.n	8002bb8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7e:	f043 0308 	orr.w	r3, r3, #8
 8002b82:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b84:	e019      	b.n	8002bba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	f043 0310 	orr.w	r3, r3, #16
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b8e:	e014      	b.n	8002bba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b92:	f043 0320 	orr.w	r3, r3, #32
 8002b96:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b98:	e00f      	b.n	8002bba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ba0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ba2:	e00a      	b.n	8002bba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002baa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bac:	e005      	b.n	8002bba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bb4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bb6:	e000      	b.n	8002bba <HAL_CAN_IRQHandler+0x336>
            break;
 8002bb8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699a      	ldr	r2, [r3, #24]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002bc8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2204      	movs	r2, #4
 8002bd0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f872 	bl	8002cce <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002bea:	bf00      	nop
 8002bec:	3728      	adds	r7, #40	@ 0x28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <__NVIC_SetPriorityGrouping>:
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d28 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d00:	4013      	ands	r3, r2
 8002d02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d16:	4a04      	ldr	r2, [pc, #16]	@ (8002d28 <__NVIC_SetPriorityGrouping+0x44>)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	60d3      	str	r3, [r2, #12]
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <__NVIC_GetPriorityGrouping>:
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d30:	4b04      	ldr	r3, [pc, #16]	@ (8002d44 <__NVIC_GetPriorityGrouping+0x18>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	f003 0307 	and.w	r3, r3, #7
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <__NVIC_EnableIRQ>:
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	db0b      	blt.n	8002d72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	f003 021f 	and.w	r2, r3, #31
 8002d60:	4907      	ldr	r1, [pc, #28]	@ (8002d80 <__NVIC_EnableIRQ+0x38>)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	2001      	movs	r0, #1
 8002d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	e000e100 	.word	0xe000e100

08002d84 <__NVIC_DisableIRQ>:
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	db12      	blt.n	8002dbc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	f003 021f 	and.w	r2, r3, #31
 8002d9c:	490a      	ldr	r1, [pc, #40]	@ (8002dc8 <__NVIC_DisableIRQ+0x44>)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	2001      	movs	r0, #1
 8002da6:	fa00 f202 	lsl.w	r2, r0, r2
 8002daa:	3320      	adds	r3, #32
 8002dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002db0:	f3bf 8f4f 	dsb	sy
}
 8002db4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002db6:	f3bf 8f6f 	isb	sy
}
 8002dba:	bf00      	nop
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	e000e100 	.word	0xe000e100

08002dcc <__NVIC_SetPriority>:
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	6039      	str	r1, [r7, #0]
 8002dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	db0a      	blt.n	8002df6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	490c      	ldr	r1, [pc, #48]	@ (8002e18 <__NVIC_SetPriority+0x4c>)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	0112      	lsls	r2, r2, #4
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	440b      	add	r3, r1
 8002df0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002df4:	e00a      	b.n	8002e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	4908      	ldr	r1, [pc, #32]	@ (8002e1c <__NVIC_SetPriority+0x50>)
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	3b04      	subs	r3, #4
 8002e04:	0112      	lsls	r2, r2, #4
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	440b      	add	r3, r1
 8002e0a:	761a      	strb	r2, [r3, #24]
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	e000e100 	.word	0xe000e100
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <NVIC_EncodePriority>:
{
 8002e20:	b480      	push	{r7}
 8002e22:	b089      	sub	sp, #36	@ 0x24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f1c3 0307 	rsb	r3, r3, #7
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	bf28      	it	cs
 8002e3e:	2304      	movcs	r3, #4
 8002e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3304      	adds	r3, #4
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	d902      	bls.n	8002e50 <NVIC_EncodePriority+0x30>
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3b03      	subs	r3, #3
 8002e4e:	e000      	b.n	8002e52 <NVIC_EncodePriority+0x32>
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	f04f 32ff 	mov.w	r2, #4294967295
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	401a      	ands	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e68:	f04f 31ff 	mov.w	r1, #4294967295
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e72:	43d9      	mvns	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e78:	4313      	orrs	r3, r2
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3724      	adds	r7, #36	@ 0x24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
	...

08002e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e98:	d301      	bcc.n	8002e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e00f      	b.n	8002ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec8 <SysTick_Config+0x40>)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ea6:	210f      	movs	r1, #15
 8002ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eac:	f7ff ff8e 	bl	8002dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eb0:	4b05      	ldr	r3, [pc, #20]	@ (8002ec8 <SysTick_Config+0x40>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eb6:	4b04      	ldr	r3, [pc, #16]	@ (8002ec8 <SysTick_Config+0x40>)
 8002eb8:	2207      	movs	r2, #7
 8002eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	e000e010 	.word	0xe000e010

08002ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff ff05 	bl	8002ce4 <__NVIC_SetPriorityGrouping>
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	4603      	mov	r3, r0
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ef4:	f7ff ff1a 	bl	8002d2c <__NVIC_GetPriorityGrouping>
 8002ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	6978      	ldr	r0, [r7, #20]
 8002f00:	f7ff ff8e 	bl	8002e20 <NVIC_EncodePriority>
 8002f04:	4602      	mov	r2, r0
 8002f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff ff5d 	bl	8002dcc <__NVIC_SetPriority>
}
 8002f12:	bf00      	nop
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	4603      	mov	r3, r0
 8002f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff0d 	bl	8002d48 <__NVIC_EnableIRQ>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff1d 	bl	8002d84 <__NVIC_DisableIRQ>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff ff94 	bl	8002e88 <SysTick_Config>
 8002f60:	4603      	mov	r3, r0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f78:	f7fe ff8a 	bl	8001e90 <HAL_GetTick>
 8002f7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d008      	beq.n	8002f9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2280      	movs	r2, #128	@ 0x80
 8002f8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e052      	b.n	8003042 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0216 	bic.w	r2, r2, #22
 8002faa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d103      	bne.n	8002fcc <HAL_DMA_Abort+0x62>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d007      	beq.n	8002fdc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0208 	bic.w	r2, r2, #8
 8002fda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fec:	e013      	b.n	8003016 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fee:	f7fe ff4f 	bl	8001e90 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d90c      	bls.n	8003016 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2203      	movs	r2, #3
 8003006:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e015      	b.n	8003042 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e4      	bne.n	8002fee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003028:	223f      	movs	r2, #63	@ 0x3f
 800302a:	409a      	lsls	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d004      	beq.n	8003068 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2280      	movs	r2, #128	@ 0x80
 8003062:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e00c      	b.n	8003082 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2205      	movs	r2, #5
 800306c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
	...

08003090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003090:	b480      	push	{r7}
 8003092:	b089      	sub	sp, #36	@ 0x24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800309e:	2300      	movs	r3, #0
 80030a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	e16b      	b.n	8003384 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030ac:	2201      	movs	r2, #1
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4013      	ands	r3, r2
 80030be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	f040 815a 	bne.w	800337e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d005      	beq.n	80030e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d130      	bne.n	8003144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	2203      	movs	r2, #3
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003118:	2201      	movs	r2, #1
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 0201 	and.w	r2, r3, #1
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	2b03      	cmp	r3, #3
 800314e:	d017      	beq.n	8003180 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2203      	movs	r2, #3
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d123      	bne.n	80031d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	08da      	lsrs	r2, r3, #3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3208      	adds	r2, #8
 8003194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	220f      	movs	r2, #15
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	08da      	lsrs	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3208      	adds	r2, #8
 80031ce:	69b9      	ldr	r1, [r7, #24]
 80031d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	2203      	movs	r2, #3
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 0203 	and.w	r2, r3, #3
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80b4 	beq.w	800337e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	4b60      	ldr	r3, [pc, #384]	@ (800339c <HAL_GPIO_Init+0x30c>)
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	4a5f      	ldr	r2, [pc, #380]	@ (800339c <HAL_GPIO_Init+0x30c>)
 8003220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003224:	6453      	str	r3, [r2, #68]	@ 0x44
 8003226:	4b5d      	ldr	r3, [pc, #372]	@ (800339c <HAL_GPIO_Init+0x30c>)
 8003228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003232:	4a5b      	ldr	r2, [pc, #364]	@ (80033a0 <HAL_GPIO_Init+0x310>)
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	089b      	lsrs	r3, r3, #2
 8003238:	3302      	adds	r3, #2
 800323a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800323e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	220f      	movs	r2, #15
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4013      	ands	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a52      	ldr	r2, [pc, #328]	@ (80033a4 <HAL_GPIO_Init+0x314>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d02b      	beq.n	80032b6 <HAL_GPIO_Init+0x226>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a51      	ldr	r2, [pc, #324]	@ (80033a8 <HAL_GPIO_Init+0x318>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d025      	beq.n	80032b2 <HAL_GPIO_Init+0x222>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a50      	ldr	r2, [pc, #320]	@ (80033ac <HAL_GPIO_Init+0x31c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d01f      	beq.n	80032ae <HAL_GPIO_Init+0x21e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a4f      	ldr	r2, [pc, #316]	@ (80033b0 <HAL_GPIO_Init+0x320>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d019      	beq.n	80032aa <HAL_GPIO_Init+0x21a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a4e      	ldr	r2, [pc, #312]	@ (80033b4 <HAL_GPIO_Init+0x324>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d013      	beq.n	80032a6 <HAL_GPIO_Init+0x216>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a4d      	ldr	r2, [pc, #308]	@ (80033b8 <HAL_GPIO_Init+0x328>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00d      	beq.n	80032a2 <HAL_GPIO_Init+0x212>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a4c      	ldr	r2, [pc, #304]	@ (80033bc <HAL_GPIO_Init+0x32c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d007      	beq.n	800329e <HAL_GPIO_Init+0x20e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a4b      	ldr	r2, [pc, #300]	@ (80033c0 <HAL_GPIO_Init+0x330>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d101      	bne.n	800329a <HAL_GPIO_Init+0x20a>
 8003296:	2307      	movs	r3, #7
 8003298:	e00e      	b.n	80032b8 <HAL_GPIO_Init+0x228>
 800329a:	2308      	movs	r3, #8
 800329c:	e00c      	b.n	80032b8 <HAL_GPIO_Init+0x228>
 800329e:	2306      	movs	r3, #6
 80032a0:	e00a      	b.n	80032b8 <HAL_GPIO_Init+0x228>
 80032a2:	2305      	movs	r3, #5
 80032a4:	e008      	b.n	80032b8 <HAL_GPIO_Init+0x228>
 80032a6:	2304      	movs	r3, #4
 80032a8:	e006      	b.n	80032b8 <HAL_GPIO_Init+0x228>
 80032aa:	2303      	movs	r3, #3
 80032ac:	e004      	b.n	80032b8 <HAL_GPIO_Init+0x228>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e002      	b.n	80032b8 <HAL_GPIO_Init+0x228>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <HAL_GPIO_Init+0x228>
 80032b6:	2300      	movs	r3, #0
 80032b8:	69fa      	ldr	r2, [r7, #28]
 80032ba:	f002 0203 	and.w	r2, r2, #3
 80032be:	0092      	lsls	r2, r2, #2
 80032c0:	4093      	lsls	r3, r2
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032c8:	4935      	ldr	r1, [pc, #212]	@ (80033a0 <HAL_GPIO_Init+0x310>)
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	089b      	lsrs	r3, r3, #2
 80032ce:	3302      	adds	r3, #2
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032d6:	4b3b      	ldr	r3, [pc, #236]	@ (80033c4 <HAL_GPIO_Init+0x334>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	43db      	mvns	r3, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4013      	ands	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032fa:	4a32      	ldr	r2, [pc, #200]	@ (80033c4 <HAL_GPIO_Init+0x334>)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003300:	4b30      	ldr	r3, [pc, #192]	@ (80033c4 <HAL_GPIO_Init+0x334>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003324:	4a27      	ldr	r2, [pc, #156]	@ (80033c4 <HAL_GPIO_Init+0x334>)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800332a:	4b26      	ldr	r3, [pc, #152]	@ (80033c4 <HAL_GPIO_Init+0x334>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	43db      	mvns	r3, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4013      	ands	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800334e:	4a1d      	ldr	r2, [pc, #116]	@ (80033c4 <HAL_GPIO_Init+0x334>)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003354:	4b1b      	ldr	r3, [pc, #108]	@ (80033c4 <HAL_GPIO_Init+0x334>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003378:	4a12      	ldr	r2, [pc, #72]	@ (80033c4 <HAL_GPIO_Init+0x334>)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	3301      	adds	r3, #1
 8003382:	61fb      	str	r3, [r7, #28]
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	2b0f      	cmp	r3, #15
 8003388:	f67f ae90 	bls.w	80030ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800338c:	bf00      	nop
 800338e:	bf00      	nop
 8003390:	3724      	adds	r7, #36	@ 0x24
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800
 80033a0:	40013800 	.word	0x40013800
 80033a4:	40020000 	.word	0x40020000
 80033a8:	40020400 	.word	0x40020400
 80033ac:	40020800 	.word	0x40020800
 80033b0:	40020c00 	.word	0x40020c00
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40021400 	.word	0x40021400
 80033bc:	40021800 	.word	0x40021800
 80033c0:	40021c00 	.word	0x40021c00
 80033c4:	40013c00 	.word	0x40013c00

080033c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80033da:	2300      	movs	r3, #0
 80033dc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	e0cd      	b.n	8003580 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033e4:	2201      	movs	r2, #1
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	4013      	ands	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	f040 80bd 	bne.w	800357a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003400:	4a65      	ldr	r2, [pc, #404]	@ (8003598 <HAL_GPIO_DeInit+0x1d0>)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	089b      	lsrs	r3, r3, #2
 8003406:	3302      	adds	r3, #2
 8003408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	220f      	movs	r2, #15
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	4013      	ands	r3, r2
 8003420:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a5d      	ldr	r2, [pc, #372]	@ (800359c <HAL_GPIO_DeInit+0x1d4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d02b      	beq.n	8003482 <HAL_GPIO_DeInit+0xba>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a5c      	ldr	r2, [pc, #368]	@ (80035a0 <HAL_GPIO_DeInit+0x1d8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d025      	beq.n	800347e <HAL_GPIO_DeInit+0xb6>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a5b      	ldr	r2, [pc, #364]	@ (80035a4 <HAL_GPIO_DeInit+0x1dc>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d01f      	beq.n	800347a <HAL_GPIO_DeInit+0xb2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a5a      	ldr	r2, [pc, #360]	@ (80035a8 <HAL_GPIO_DeInit+0x1e0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d019      	beq.n	8003476 <HAL_GPIO_DeInit+0xae>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a59      	ldr	r2, [pc, #356]	@ (80035ac <HAL_GPIO_DeInit+0x1e4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d013      	beq.n	8003472 <HAL_GPIO_DeInit+0xaa>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a58      	ldr	r2, [pc, #352]	@ (80035b0 <HAL_GPIO_DeInit+0x1e8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00d      	beq.n	800346e <HAL_GPIO_DeInit+0xa6>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a57      	ldr	r2, [pc, #348]	@ (80035b4 <HAL_GPIO_DeInit+0x1ec>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d007      	beq.n	800346a <HAL_GPIO_DeInit+0xa2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a56      	ldr	r2, [pc, #344]	@ (80035b8 <HAL_GPIO_DeInit+0x1f0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d101      	bne.n	8003466 <HAL_GPIO_DeInit+0x9e>
 8003462:	2307      	movs	r3, #7
 8003464:	e00e      	b.n	8003484 <HAL_GPIO_DeInit+0xbc>
 8003466:	2308      	movs	r3, #8
 8003468:	e00c      	b.n	8003484 <HAL_GPIO_DeInit+0xbc>
 800346a:	2306      	movs	r3, #6
 800346c:	e00a      	b.n	8003484 <HAL_GPIO_DeInit+0xbc>
 800346e:	2305      	movs	r3, #5
 8003470:	e008      	b.n	8003484 <HAL_GPIO_DeInit+0xbc>
 8003472:	2304      	movs	r3, #4
 8003474:	e006      	b.n	8003484 <HAL_GPIO_DeInit+0xbc>
 8003476:	2303      	movs	r3, #3
 8003478:	e004      	b.n	8003484 <HAL_GPIO_DeInit+0xbc>
 800347a:	2302      	movs	r3, #2
 800347c:	e002      	b.n	8003484 <HAL_GPIO_DeInit+0xbc>
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <HAL_GPIO_DeInit+0xbc>
 8003482:	2300      	movs	r3, #0
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	f002 0203 	and.w	r2, r2, #3
 800348a:	0092      	lsls	r2, r2, #2
 800348c:	4093      	lsls	r3, r2
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	429a      	cmp	r2, r3
 8003492:	d132      	bne.n	80034fa <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003494:	4b49      	ldr	r3, [pc, #292]	@ (80035bc <HAL_GPIO_DeInit+0x1f4>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	43db      	mvns	r3, r3
 800349c:	4947      	ldr	r1, [pc, #284]	@ (80035bc <HAL_GPIO_DeInit+0x1f4>)
 800349e:	4013      	ands	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80034a2:	4b46      	ldr	r3, [pc, #280]	@ (80035bc <HAL_GPIO_DeInit+0x1f4>)
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	4944      	ldr	r1, [pc, #272]	@ (80035bc <HAL_GPIO_DeInit+0x1f4>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80034b0:	4b42      	ldr	r3, [pc, #264]	@ (80035bc <HAL_GPIO_DeInit+0x1f4>)
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	43db      	mvns	r3, r3
 80034b8:	4940      	ldr	r1, [pc, #256]	@ (80035bc <HAL_GPIO_DeInit+0x1f4>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80034be:	4b3f      	ldr	r3, [pc, #252]	@ (80035bc <HAL_GPIO_DeInit+0x1f4>)
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	493d      	ldr	r1, [pc, #244]	@ (80035bc <HAL_GPIO_DeInit+0x1f4>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	220f      	movs	r2, #15
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80034dc:	4a2e      	ldr	r2, [pc, #184]	@ (8003598 <HAL_GPIO_DeInit+0x1d0>)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	3302      	adds	r3, #2
 80034e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	43da      	mvns	r2, r3
 80034ec:	482a      	ldr	r0, [pc, #168]	@ (8003598 <HAL_GPIO_DeInit+0x1d0>)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	089b      	lsrs	r3, r3, #2
 80034f2:	400a      	ands	r2, r1
 80034f4:	3302      	adds	r3, #2
 80034f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	2103      	movs	r1, #3
 8003504:	fa01 f303 	lsl.w	r3, r1, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	401a      	ands	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	08da      	lsrs	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3208      	adds	r2, #8
 8003518:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	220f      	movs	r2, #15
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	08d2      	lsrs	r2, r2, #3
 8003530:	4019      	ands	r1, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3208      	adds	r2, #8
 8003536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	2103      	movs	r1, #3
 8003544:	fa01 f303 	lsl.w	r3, r1, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	401a      	ands	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	2101      	movs	r1, #1
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	fa01 f303 	lsl.w	r3, r1, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	401a      	ands	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	2103      	movs	r1, #3
 800356e:	fa01 f303 	lsl.w	r3, r1, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	401a      	ands	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	3301      	adds	r3, #1
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2b0f      	cmp	r3, #15
 8003584:	f67f af2e 	bls.w	80033e4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003588:	bf00      	nop
 800358a:	bf00      	nop
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40013800 	.word	0x40013800
 800359c:	40020000 	.word	0x40020000
 80035a0:	40020400 	.word	0x40020400
 80035a4:	40020800 	.word	0x40020800
 80035a8:	40020c00 	.word	0x40020c00
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40021400 	.word	0x40021400
 80035b4:	40021800 	.word	0x40021800
 80035b8:	40021c00 	.word	0x40021c00
 80035bc:	40013c00 	.word	0x40013c00

080035c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	807b      	strh	r3, [r7, #2]
 80035cc:	4613      	mov	r3, r2
 80035ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035d0:	787b      	ldrb	r3, [r7, #1]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035d6:	887a      	ldrh	r2, [r7, #2]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035dc:	e003      	b.n	80035e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035de:	887b      	ldrh	r3, [r7, #2]
 80035e0:	041a      	lsls	r2, r3, #16
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	619a      	str	r2, [r3, #24]
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b085      	sub	sp, #20
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	460b      	mov	r3, r1
 80035fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003604:	887a      	ldrh	r2, [r7, #2]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4013      	ands	r3, r2
 800360a:	041a      	lsls	r2, r3, #16
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	43d9      	mvns	r1, r3
 8003610:	887b      	ldrh	r3, [r7, #2]
 8003612:	400b      	ands	r3, r1
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	619a      	str	r2, [r3, #24]
}
 800361a:	bf00      	nop
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e267      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d075      	beq.n	8003732 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003646:	4b88      	ldr	r3, [pc, #544]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	2b04      	cmp	r3, #4
 8003650:	d00c      	beq.n	800366c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003652:	4b85      	ldr	r3, [pc, #532]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800365a:	2b08      	cmp	r3, #8
 800365c:	d112      	bne.n	8003684 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800365e:	4b82      	ldr	r3, [pc, #520]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003666:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800366a:	d10b      	bne.n	8003684 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800366c:	4b7e      	ldr	r3, [pc, #504]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d05b      	beq.n	8003730 <HAL_RCC_OscConfig+0x108>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d157      	bne.n	8003730 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e242      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800368c:	d106      	bne.n	800369c <HAL_RCC_OscConfig+0x74>
 800368e:	4b76      	ldr	r3, [pc, #472]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a75      	ldr	r2, [pc, #468]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 8003694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	e01d      	b.n	80036d8 <HAL_RCC_OscConfig+0xb0>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036a4:	d10c      	bne.n	80036c0 <HAL_RCC_OscConfig+0x98>
 80036a6:	4b70      	ldr	r3, [pc, #448]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a6f      	ldr	r2, [pc, #444]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 80036ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a6c      	ldr	r2, [pc, #432]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 80036b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	e00b      	b.n	80036d8 <HAL_RCC_OscConfig+0xb0>
 80036c0:	4b69      	ldr	r3, [pc, #420]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a68      	ldr	r2, [pc, #416]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 80036c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	4b66      	ldr	r3, [pc, #408]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a65      	ldr	r2, [pc, #404]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 80036d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d013      	beq.n	8003708 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7fe fbd6 	bl	8001e90 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e8:	f7fe fbd2 	bl	8001e90 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b64      	cmp	r3, #100	@ 0x64
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e207      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fa:	4b5b      	ldr	r3, [pc, #364]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0xc0>
 8003706:	e014      	b.n	8003732 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003708:	f7fe fbc2 	bl	8001e90 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003710:	f7fe fbbe 	bl	8001e90 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	@ 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e1f3      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003722:	4b51      	ldr	r3, [pc, #324]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0xe8>
 800372e:	e000      	b.n	8003732 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d063      	beq.n	8003806 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800373e:	4b4a      	ldr	r3, [pc, #296]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00b      	beq.n	8003762 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800374a:	4b47      	ldr	r3, [pc, #284]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003752:	2b08      	cmp	r3, #8
 8003754:	d11c      	bne.n	8003790 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003756:	4b44      	ldr	r3, [pc, #272]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d116      	bne.n	8003790 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003762:	4b41      	ldr	r3, [pc, #260]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <HAL_RCC_OscConfig+0x152>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d001      	beq.n	800377a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e1c7      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377a:	4b3b      	ldr	r3, [pc, #236]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	4937      	ldr	r1, [pc, #220]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 800378a:	4313      	orrs	r3, r2
 800378c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378e:	e03a      	b.n	8003806 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d020      	beq.n	80037da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003798:	4b34      	ldr	r3, [pc, #208]	@ (800386c <HAL_RCC_OscConfig+0x244>)
 800379a:	2201      	movs	r2, #1
 800379c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379e:	f7fe fb77 	bl	8001e90 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a6:	f7fe fb73 	bl	8001e90 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e1a8      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c4:	4b28      	ldr	r3, [pc, #160]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	4925      	ldr	r1, [pc, #148]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	600b      	str	r3, [r1, #0]
 80037d8:	e015      	b.n	8003806 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037da:	4b24      	ldr	r3, [pc, #144]	@ (800386c <HAL_RCC_OscConfig+0x244>)
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fe fb56 	bl	8001e90 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e8:	f7fe fb52 	bl	8001e90 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e187      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d036      	beq.n	8003880 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d016      	beq.n	8003848 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800381a:	4b15      	ldr	r3, [pc, #84]	@ (8003870 <HAL_RCC_OscConfig+0x248>)
 800381c:	2201      	movs	r2, #1
 800381e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003820:	f7fe fb36 	bl	8001e90 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003828:	f7fe fb32 	bl	8001e90 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e167      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800383a:	4b0b      	ldr	r3, [pc, #44]	@ (8003868 <HAL_RCC_OscConfig+0x240>)
 800383c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCC_OscConfig+0x200>
 8003846:	e01b      	b.n	8003880 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003848:	4b09      	ldr	r3, [pc, #36]	@ (8003870 <HAL_RCC_OscConfig+0x248>)
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384e:	f7fe fb1f 	bl	8001e90 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003854:	e00e      	b.n	8003874 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003856:	f7fe fb1b 	bl	8001e90 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d907      	bls.n	8003874 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e150      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
 8003868:	40023800 	.word	0x40023800
 800386c:	42470000 	.word	0x42470000
 8003870:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003874:	4b88      	ldr	r3, [pc, #544]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1ea      	bne.n	8003856 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 8097 	beq.w	80039bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800388e:	2300      	movs	r3, #0
 8003890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003892:	4b81      	ldr	r3, [pc, #516]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10f      	bne.n	80038be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	4b7d      	ldr	r3, [pc, #500]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	4a7c      	ldr	r2, [pc, #496]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 80038a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80038ae:	4b7a      	ldr	r3, [pc, #488]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b6:	60bb      	str	r3, [r7, #8]
 80038b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ba:	2301      	movs	r3, #1
 80038bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038be:	4b77      	ldr	r3, [pc, #476]	@ (8003a9c <HAL_RCC_OscConfig+0x474>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d118      	bne.n	80038fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ca:	4b74      	ldr	r3, [pc, #464]	@ (8003a9c <HAL_RCC_OscConfig+0x474>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a73      	ldr	r2, [pc, #460]	@ (8003a9c <HAL_RCC_OscConfig+0x474>)
 80038d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d6:	f7fe fadb 	bl	8001e90 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038de:	f7fe fad7 	bl	8001e90 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e10c      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f0:	4b6a      	ldr	r3, [pc, #424]	@ (8003a9c <HAL_RCC_OscConfig+0x474>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d106      	bne.n	8003912 <HAL_RCC_OscConfig+0x2ea>
 8003904:	4b64      	ldr	r3, [pc, #400]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003908:	4a63      	ldr	r2, [pc, #396]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003910:	e01c      	b.n	800394c <HAL_RCC_OscConfig+0x324>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2b05      	cmp	r3, #5
 8003918:	d10c      	bne.n	8003934 <HAL_RCC_OscConfig+0x30c>
 800391a:	4b5f      	ldr	r3, [pc, #380]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391e:	4a5e      	ldr	r2, [pc, #376]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003920:	f043 0304 	orr.w	r3, r3, #4
 8003924:	6713      	str	r3, [r2, #112]	@ 0x70
 8003926:	4b5c      	ldr	r3, [pc, #368]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392a:	4a5b      	ldr	r2, [pc, #364]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	6713      	str	r3, [r2, #112]	@ 0x70
 8003932:	e00b      	b.n	800394c <HAL_RCC_OscConfig+0x324>
 8003934:	4b58      	ldr	r3, [pc, #352]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003938:	4a57      	ldr	r2, [pc, #348]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 800393a:	f023 0301 	bic.w	r3, r3, #1
 800393e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003940:	4b55      	ldr	r3, [pc, #340]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003944:	4a54      	ldr	r2, [pc, #336]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003946:	f023 0304 	bic.w	r3, r3, #4
 800394a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d015      	beq.n	8003980 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003954:	f7fe fa9c 	bl	8001e90 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395a:	e00a      	b.n	8003972 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395c:	f7fe fa98 	bl	8001e90 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e0cb      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003972:	4b49      	ldr	r3, [pc, #292]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0ee      	beq.n	800395c <HAL_RCC_OscConfig+0x334>
 800397e:	e014      	b.n	80039aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003980:	f7fe fa86 	bl	8001e90 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003986:	e00a      	b.n	800399e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003988:	f7fe fa82 	bl	8001e90 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e0b5      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800399e:	4b3e      	ldr	r3, [pc, #248]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 80039a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1ee      	bne.n	8003988 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d105      	bne.n	80039bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b0:	4b39      	ldr	r3, [pc, #228]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 80039b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b4:	4a38      	ldr	r2, [pc, #224]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 80039b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80a1 	beq.w	8003b08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039c6:	4b34      	ldr	r3, [pc, #208]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d05c      	beq.n	8003a8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d141      	bne.n	8003a5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039da:	4b31      	ldr	r3, [pc, #196]	@ (8003aa0 <HAL_RCC_OscConfig+0x478>)
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e0:	f7fe fa56 	bl	8001e90 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e8:	f7fe fa52 	bl	8001e90 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e087      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fa:	4b27      	ldr	r3, [pc, #156]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69da      	ldr	r2, [r3, #28]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	019b      	lsls	r3, r3, #6
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1c:	085b      	lsrs	r3, r3, #1
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	041b      	lsls	r3, r3, #16
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a28:	061b      	lsls	r3, r3, #24
 8003a2a:	491b      	ldr	r1, [pc, #108]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a30:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa0 <HAL_RCC_OscConfig+0x478>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a36:	f7fe fa2b 	bl	8001e90 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3e:	f7fe fa27 	bl	8001e90 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e05c      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a50:	4b11      	ldr	r3, [pc, #68]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x416>
 8003a5c:	e054      	b.n	8003b08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5e:	4b10      	ldr	r3, [pc, #64]	@ (8003aa0 <HAL_RCC_OscConfig+0x478>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a64:	f7fe fa14 	bl	8001e90 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6c:	f7fe fa10 	bl	8001e90 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e045      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7e:	4b06      	ldr	r3, [pc, #24]	@ (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x444>
 8003a8a:	e03d      	b.n	8003b08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d107      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e038      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	40007000 	.word	0x40007000
 8003aa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b14 <HAL_RCC_OscConfig+0x4ec>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d028      	beq.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d121      	bne.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d11a      	bne.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ada:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d111      	bne.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aea:	085b      	lsrs	r3, r3, #1
 8003aec:	3b01      	subs	r3, #1
 8003aee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d107      	bne.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d001      	beq.n	8003b08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800

08003b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0cc      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b2c:	4b68      	ldr	r3, [pc, #416]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d90c      	bls.n	8003b54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3a:	4b65      	ldr	r3, [pc, #404]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b42:	4b63      	ldr	r3, [pc, #396]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d001      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0b8      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d020      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b6c:	4b59      	ldr	r3, [pc, #356]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4a58      	ldr	r2, [pc, #352]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b84:	4b53      	ldr	r3, [pc, #332]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	4a52      	ldr	r2, [pc, #328]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b90:	4b50      	ldr	r3, [pc, #320]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	494d      	ldr	r1, [pc, #308]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d044      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d107      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb6:	4b47      	ldr	r3, [pc, #284]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d119      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e07f      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d003      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d107      	bne.n	8003be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd6:	4b3f      	ldr	r3, [pc, #252]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d109      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e06f      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be6:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e067      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bf6:	4b37      	ldr	r3, [pc, #220]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f023 0203 	bic.w	r2, r3, #3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	4934      	ldr	r1, [pc, #208]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c08:	f7fe f942 	bl	8001e90 <HAL_GetTick>
 8003c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0e:	e00a      	b.n	8003c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c10:	f7fe f93e 	bl	8001e90 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e04f      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c26:	4b2b      	ldr	r3, [pc, #172]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 020c 	and.w	r2, r3, #12
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d1eb      	bne.n	8003c10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c38:	4b25      	ldr	r3, [pc, #148]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d20c      	bcs.n	8003c60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c46:	4b22      	ldr	r3, [pc, #136]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4e:	4b20      	ldr	r3, [pc, #128]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e032      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c6c:	4b19      	ldr	r3, [pc, #100]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4916      	ldr	r1, [pc, #88]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d009      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c8a:	4b12      	ldr	r3, [pc, #72]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	490e      	ldr	r1, [pc, #56]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c9e:	f000 f821 	bl	8003ce4 <HAL_RCC_GetSysClockFreq>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	490a      	ldr	r1, [pc, #40]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb0:	5ccb      	ldrb	r3, [r1, r3]
 8003cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb6:	4a09      	ldr	r2, [pc, #36]	@ (8003cdc <HAL_RCC_ClockConfig+0x1c4>)
 8003cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003cba:	4b09      	ldr	r3, [pc, #36]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe f8a2 	bl	8001e08 <HAL_InitTick>

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40023c00 	.word	0x40023c00
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	0800667c 	.word	0x0800667c
 8003cdc:	20000000 	.word	0x20000000
 8003ce0:	20000004 	.word	0x20000004

08003ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ce8:	b094      	sub	sp, #80	@ 0x50
 8003cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cfc:	4b79      	ldr	r3, [pc, #484]	@ (8003ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 030c 	and.w	r3, r3, #12
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d00d      	beq.n	8003d24 <HAL_RCC_GetSysClockFreq+0x40>
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	f200 80e1 	bhi.w	8003ed0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x34>
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d003      	beq.n	8003d1e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d16:	e0db      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d18:	4b73      	ldr	r3, [pc, #460]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d1c:	e0db      	b.n	8003ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d1e:	4b73      	ldr	r3, [pc, #460]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x208>)
 8003d20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d22:	e0d8      	b.n	8003ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d24:	4b6f      	ldr	r3, [pc, #444]	@ (8003ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d2c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d2e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d063      	beq.n	8003e02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d3a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	099b      	lsrs	r3, r3, #6
 8003d40:	2200      	movs	r2, #0
 8003d42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d4e:	2300      	movs	r3, #0
 8003d50:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d56:	4622      	mov	r2, r4
 8003d58:	462b      	mov	r3, r5
 8003d5a:	f04f 0000 	mov.w	r0, #0
 8003d5e:	f04f 0100 	mov.w	r1, #0
 8003d62:	0159      	lsls	r1, r3, #5
 8003d64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d68:	0150      	lsls	r0, r2, #5
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4621      	mov	r1, r4
 8003d70:	1a51      	subs	r1, r2, r1
 8003d72:	6139      	str	r1, [r7, #16]
 8003d74:	4629      	mov	r1, r5
 8003d76:	eb63 0301 	sbc.w	r3, r3, r1
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d88:	4659      	mov	r1, fp
 8003d8a:	018b      	lsls	r3, r1, #6
 8003d8c:	4651      	mov	r1, sl
 8003d8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d92:	4651      	mov	r1, sl
 8003d94:	018a      	lsls	r2, r1, #6
 8003d96:	4651      	mov	r1, sl
 8003d98:	ebb2 0801 	subs.w	r8, r2, r1
 8003d9c:	4659      	mov	r1, fp
 8003d9e:	eb63 0901 	sbc.w	r9, r3, r1
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003db2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003db6:	4690      	mov	r8, r2
 8003db8:	4699      	mov	r9, r3
 8003dba:	4623      	mov	r3, r4
 8003dbc:	eb18 0303 	adds.w	r3, r8, r3
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	462b      	mov	r3, r5
 8003dc4:	eb49 0303 	adc.w	r3, r9, r3
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003dd6:	4629      	mov	r1, r5
 8003dd8:	024b      	lsls	r3, r1, #9
 8003dda:	4621      	mov	r1, r4
 8003ddc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003de0:	4621      	mov	r1, r4
 8003de2:	024a      	lsls	r2, r1, #9
 8003de4:	4610      	mov	r0, r2
 8003de6:	4619      	mov	r1, r3
 8003de8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dea:	2200      	movs	r2, #0
 8003dec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003df0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003df4:	f7fc fa54 	bl	80002a0 <__aeabi_uldivmod>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e00:	e058      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e02:	4b38      	ldr	r3, [pc, #224]	@ (8003ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	099b      	lsrs	r3, r3, #6
 8003e08:	2200      	movs	r2, #0
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e12:	623b      	str	r3, [r7, #32]
 8003e14:	2300      	movs	r3, #0
 8003e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e1c:	4642      	mov	r2, r8
 8003e1e:	464b      	mov	r3, r9
 8003e20:	f04f 0000 	mov.w	r0, #0
 8003e24:	f04f 0100 	mov.w	r1, #0
 8003e28:	0159      	lsls	r1, r3, #5
 8003e2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e2e:	0150      	lsls	r0, r2, #5
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4641      	mov	r1, r8
 8003e36:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e54:	ebb2 040a 	subs.w	r4, r2, sl
 8003e58:	eb63 050b 	sbc.w	r5, r3, fp
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	00eb      	lsls	r3, r5, #3
 8003e66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e6a:	00e2      	lsls	r2, r4, #3
 8003e6c:	4614      	mov	r4, r2
 8003e6e:	461d      	mov	r5, r3
 8003e70:	4643      	mov	r3, r8
 8003e72:	18e3      	adds	r3, r4, r3
 8003e74:	603b      	str	r3, [r7, #0]
 8003e76:	464b      	mov	r3, r9
 8003e78:	eb45 0303 	adc.w	r3, r5, r3
 8003e7c:	607b      	str	r3, [r7, #4]
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	028b      	lsls	r3, r1, #10
 8003e8e:	4621      	mov	r1, r4
 8003e90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e94:	4621      	mov	r1, r4
 8003e96:	028a      	lsls	r2, r1, #10
 8003e98:	4610      	mov	r0, r2
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	61fa      	str	r2, [r7, #28]
 8003ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ea8:	f7fc f9fa 	bl	80002a0 <__aeabi_uldivmod>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	0c1b      	lsrs	r3, r3, #16
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003ec4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ece:	e002      	b.n	8003ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ed0:	4b05      	ldr	r3, [pc, #20]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ed4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ed6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3750      	adds	r7, #80	@ 0x50
 8003edc:	46bd      	mov	sp, r7
 8003ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	00f42400 	.word	0x00f42400
 8003eec:	007a1200 	.word	0x007a1200

08003ef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef4:	4b03      	ldr	r3, [pc, #12]	@ (8003f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	20000000 	.word	0x20000000

08003f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f0c:	f7ff fff0 	bl	8003ef0 <HAL_RCC_GetHCLKFreq>
 8003f10:	4602      	mov	r2, r0
 8003f12:	4b05      	ldr	r3, [pc, #20]	@ (8003f28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	0a9b      	lsrs	r3, r3, #10
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	4903      	ldr	r1, [pc, #12]	@ (8003f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f1e:	5ccb      	ldrb	r3, [r1, r3]
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	0800668c 	.word	0x0800668c

08003f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f34:	f7ff ffdc 	bl	8003ef0 <HAL_RCC_GetHCLKFreq>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	4b05      	ldr	r3, [pc, #20]	@ (8003f50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	0b5b      	lsrs	r3, r3, #13
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	4903      	ldr	r1, [pc, #12]	@ (8003f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f46:	5ccb      	ldrb	r3, [r1, r3]
 8003f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40023800 	.word	0x40023800
 8003f54:	0800668c 	.word	0x0800668c

08003f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e041      	b.n	8003fee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d106      	bne.n	8003f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7fd fdea 	bl	8001b58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3304      	adds	r3, #4
 8003f94:	4619      	mov	r1, r3
 8003f96:	4610      	mov	r0, r2
 8003f98:	f000 fa7e 	bl	8004498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b01      	cmp	r3, #1
 800400a:	d001      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e04e      	b.n	80040ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a23      	ldr	r2, [pc, #140]	@ (80040bc <HAL_TIM_Base_Start_IT+0xc4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d022      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800403a:	d01d      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a1f      	ldr	r2, [pc, #124]	@ (80040c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d018      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a1e      	ldr	r2, [pc, #120]	@ (80040c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d013      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a1c      	ldr	r2, [pc, #112]	@ (80040c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00e      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1b      	ldr	r2, [pc, #108]	@ (80040cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d009      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a19      	ldr	r2, [pc, #100]	@ (80040d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d004      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a18      	ldr	r2, [pc, #96]	@ (80040d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d111      	bne.n	800409c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b06      	cmp	r3, #6
 8004088:	d010      	beq.n	80040ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409a:	e007      	b.n	80040ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40010000 	.word	0x40010000
 80040c0:	40000400 	.word	0x40000400
 80040c4:	40000800 	.word	0x40000800
 80040c8:	40000c00 	.word	0x40000c00
 80040cc:	40010400 	.word	0x40010400
 80040d0:	40014000 	.word	0x40014000
 80040d4:	40001800 	.word	0x40001800

080040d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d020      	beq.n	800413c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01b      	beq.n	800413c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0202 	mvn.w	r2, #2
 800410c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f999 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 8004128:	e005      	b.n	8004136 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f98b 	bl	8004446 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f99c 	bl	800446e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b00      	cmp	r3, #0
 8004144:	d020      	beq.n	8004188 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01b      	beq.n	8004188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0204 	mvn.w	r2, #4
 8004158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2202      	movs	r2, #2
 800415e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f973 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 8004174:	e005      	b.n	8004182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f965 	bl	8004446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f976 	bl	800446e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d020      	beq.n	80041d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01b      	beq.n	80041d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0208 	mvn.w	r2, #8
 80041a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2204      	movs	r2, #4
 80041aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f94d 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 80041c0:	e005      	b.n	80041ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f93f 	bl	8004446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f950 	bl	800446e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d020      	beq.n	8004220 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f003 0310 	and.w	r3, r3, #16
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01b      	beq.n	8004220 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0210 	mvn.w	r2, #16
 80041f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2208      	movs	r2, #8
 80041f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f927 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 800420c:	e005      	b.n	800421a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f919 	bl	8004446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f92a 	bl	800446e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00c      	beq.n	8004244 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d007      	beq.n	8004244 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f06f 0201 	mvn.w	r2, #1
 800423c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fd f9c8 	bl	80015d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00c      	beq.n	8004268 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004254:	2b00      	cmp	r3, #0
 8004256:	d007      	beq.n	8004268 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fae4 	bl	8004830 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00c      	beq.n	800428c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f8fb 	bl	8004482 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00c      	beq.n	80042b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b00      	cmp	r3, #0
 800429e:	d007      	beq.n	80042b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0220 	mvn.w	r2, #32
 80042a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fab6 	bl	800481c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042b0:	bf00      	nop
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_TIM_ConfigClockSource+0x1c>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e0b4      	b.n	800443e <HAL_TIM_ConfigClockSource+0x186>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800430c:	d03e      	beq.n	800438c <HAL_TIM_ConfigClockSource+0xd4>
 800430e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004312:	f200 8087 	bhi.w	8004424 <HAL_TIM_ConfigClockSource+0x16c>
 8004316:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800431a:	f000 8086 	beq.w	800442a <HAL_TIM_ConfigClockSource+0x172>
 800431e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004322:	d87f      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x16c>
 8004324:	2b70      	cmp	r3, #112	@ 0x70
 8004326:	d01a      	beq.n	800435e <HAL_TIM_ConfigClockSource+0xa6>
 8004328:	2b70      	cmp	r3, #112	@ 0x70
 800432a:	d87b      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x16c>
 800432c:	2b60      	cmp	r3, #96	@ 0x60
 800432e:	d050      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x11a>
 8004330:	2b60      	cmp	r3, #96	@ 0x60
 8004332:	d877      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x16c>
 8004334:	2b50      	cmp	r3, #80	@ 0x50
 8004336:	d03c      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0xfa>
 8004338:	2b50      	cmp	r3, #80	@ 0x50
 800433a:	d873      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x16c>
 800433c:	2b40      	cmp	r3, #64	@ 0x40
 800433e:	d058      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x13a>
 8004340:	2b40      	cmp	r3, #64	@ 0x40
 8004342:	d86f      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x16c>
 8004344:	2b30      	cmp	r3, #48	@ 0x30
 8004346:	d064      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x15a>
 8004348:	2b30      	cmp	r3, #48	@ 0x30
 800434a:	d86b      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x16c>
 800434c:	2b20      	cmp	r3, #32
 800434e:	d060      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x15a>
 8004350:	2b20      	cmp	r3, #32
 8004352:	d867      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x16c>
 8004354:	2b00      	cmp	r3, #0
 8004356:	d05c      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x15a>
 8004358:	2b10      	cmp	r3, #16
 800435a:	d05a      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x15a>
 800435c:	e062      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800436e:	f000 f9b9 	bl	80046e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004380:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	609a      	str	r2, [r3, #8]
      break;
 800438a:	e04f      	b.n	800442c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800439c:	f000 f9a2 	bl	80046e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043ae:	609a      	str	r2, [r3, #8]
      break;
 80043b0:	e03c      	b.n	800442c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043be:	461a      	mov	r2, r3
 80043c0:	f000 f916 	bl	80045f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2150      	movs	r1, #80	@ 0x50
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 f96f 	bl	80046ae <TIM_ITRx_SetConfig>
      break;
 80043d0:	e02c      	b.n	800442c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043de:	461a      	mov	r2, r3
 80043e0:	f000 f935 	bl	800464e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2160      	movs	r1, #96	@ 0x60
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 f95f 	bl	80046ae <TIM_ITRx_SetConfig>
      break;
 80043f0:	e01c      	b.n	800442c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043fe:	461a      	mov	r2, r3
 8004400:	f000 f8f6 	bl	80045f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2140      	movs	r1, #64	@ 0x40
 800440a:	4618      	mov	r0, r3
 800440c:	f000 f94f 	bl	80046ae <TIM_ITRx_SetConfig>
      break;
 8004410:	e00c      	b.n	800442c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4619      	mov	r1, r3
 800441c:	4610      	mov	r0, r2
 800441e:	f000 f946 	bl	80046ae <TIM_ITRx_SetConfig>
      break;
 8004422:	e003      	b.n	800442c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
      break;
 8004428:	e000      	b.n	800442c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800442a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800443c:	7bfb      	ldrb	r3, [r7, #15]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
	...

08004498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a46      	ldr	r2, [pc, #280]	@ (80045c4 <TIM_Base_SetConfig+0x12c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d013      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b6:	d00f      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a43      	ldr	r2, [pc, #268]	@ (80045c8 <TIM_Base_SetConfig+0x130>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00b      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a42      	ldr	r2, [pc, #264]	@ (80045cc <TIM_Base_SetConfig+0x134>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d007      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a41      	ldr	r2, [pc, #260]	@ (80045d0 <TIM_Base_SetConfig+0x138>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d003      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a40      	ldr	r2, [pc, #256]	@ (80045d4 <TIM_Base_SetConfig+0x13c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d108      	bne.n	80044ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a35      	ldr	r2, [pc, #212]	@ (80045c4 <TIM_Base_SetConfig+0x12c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d02b      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044f8:	d027      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a32      	ldr	r2, [pc, #200]	@ (80045c8 <TIM_Base_SetConfig+0x130>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d023      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a31      	ldr	r2, [pc, #196]	@ (80045cc <TIM_Base_SetConfig+0x134>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d01f      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a30      	ldr	r2, [pc, #192]	@ (80045d0 <TIM_Base_SetConfig+0x138>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d01b      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2f      	ldr	r2, [pc, #188]	@ (80045d4 <TIM_Base_SetConfig+0x13c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d017      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a2e      	ldr	r2, [pc, #184]	@ (80045d8 <TIM_Base_SetConfig+0x140>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d013      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a2d      	ldr	r2, [pc, #180]	@ (80045dc <TIM_Base_SetConfig+0x144>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00f      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a2c      	ldr	r2, [pc, #176]	@ (80045e0 <TIM_Base_SetConfig+0x148>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00b      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a2b      	ldr	r2, [pc, #172]	@ (80045e4 <TIM_Base_SetConfig+0x14c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d007      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a2a      	ldr	r2, [pc, #168]	@ (80045e8 <TIM_Base_SetConfig+0x150>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d003      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a29      	ldr	r2, [pc, #164]	@ (80045ec <TIM_Base_SetConfig+0x154>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d108      	bne.n	800455c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a10      	ldr	r2, [pc, #64]	@ (80045c4 <TIM_Base_SetConfig+0x12c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d003      	beq.n	8004590 <TIM_Base_SetConfig+0xf8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a12      	ldr	r2, [pc, #72]	@ (80045d4 <TIM_Base_SetConfig+0x13c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d103      	bne.n	8004598 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d105      	bne.n	80045b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f023 0201 	bic.w	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	611a      	str	r2, [r3, #16]
  }
}
 80045b6:	bf00      	nop
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800
 80045d0:	40000c00 	.word	0x40000c00
 80045d4:	40010400 	.word	0x40010400
 80045d8:	40014000 	.word	0x40014000
 80045dc:	40014400 	.word	0x40014400
 80045e0:	40014800 	.word	0x40014800
 80045e4:	40001800 	.word	0x40001800
 80045e8:	40001c00 	.word	0x40001c00
 80045ec:	40002000 	.word	0x40002000

080045f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f023 0201 	bic.w	r2, r3, #1
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800461a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4313      	orrs	r3, r2
 8004624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f023 030a 	bic.w	r3, r3, #10
 800462c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4313      	orrs	r3, r2
 8004634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	621a      	str	r2, [r3, #32]
}
 8004642:	bf00      	nop
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800464e:	b480      	push	{r7}
 8004650:	b087      	sub	sp, #28
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	f023 0210 	bic.w	r2, r3, #16
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004678:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	031b      	lsls	r3, r3, #12
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800468a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	621a      	str	r2, [r3, #32]
}
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b085      	sub	sp, #20
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f043 0307 	orr.w	r3, r3, #7
 80046d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	609a      	str	r2, [r3, #8]
}
 80046d8:	bf00      	nop
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	021a      	lsls	r2, r3, #8
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	431a      	orrs	r2, r3
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4313      	orrs	r3, r2
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	609a      	str	r2, [r3, #8]
}
 8004718:	bf00      	nop
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004738:	2302      	movs	r3, #2
 800473a:	e05a      	b.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004762:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	4313      	orrs	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a21      	ldr	r2, [pc, #132]	@ (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d022      	beq.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004788:	d01d      	beq.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a1d      	ldr	r2, [pc, #116]	@ (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d018      	beq.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a1b      	ldr	r2, [pc, #108]	@ (8004808 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d013      	beq.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a1a      	ldr	r2, [pc, #104]	@ (800480c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00e      	beq.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a18      	ldr	r2, [pc, #96]	@ (8004810 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d009      	beq.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a17      	ldr	r2, [pc, #92]	@ (8004814 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d004      	beq.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a15      	ldr	r2, [pc, #84]	@ (8004818 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d10c      	bne.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40010000 	.word	0x40010000
 8004804:	40000400 	.word	0x40000400
 8004808:	40000800 	.word	0x40000800
 800480c:	40000c00 	.word	0x40000c00
 8004810:	40010400 	.word	0x40010400
 8004814:	40014000 	.word	0x40014000
 8004818:	40001800 	.word	0x40001800

0800481c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e042      	b.n	80048dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fd f99a 	bl	8001ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2224      	movs	r2, #36	@ 0x24
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004886:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 fdbd 	bl	8005408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800489c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695a      	ldr	r2, [r3, #20]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08a      	sub	sp, #40	@ 0x28
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	4613      	mov	r3, r2
 80048f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b20      	cmp	r3, #32
 8004902:	d175      	bne.n	80049f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <HAL_UART_Transmit+0x2c>
 800490a:	88fb      	ldrh	r3, [r7, #6]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e06e      	b.n	80049f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2221      	movs	r2, #33	@ 0x21
 800491e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004922:	f7fd fab5 	bl	8001e90 <HAL_GetTick>
 8004926:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	88fa      	ldrh	r2, [r7, #6]
 800492c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	88fa      	ldrh	r2, [r7, #6]
 8004932:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800493c:	d108      	bne.n	8004950 <HAL_UART_Transmit+0x6c>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d104      	bne.n	8004950 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	61bb      	str	r3, [r7, #24]
 800494e:	e003      	b.n	8004958 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004954:	2300      	movs	r3, #0
 8004956:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004958:	e02e      	b.n	80049b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2200      	movs	r2, #0
 8004962:	2180      	movs	r1, #128	@ 0x80
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 fb1f 	bl	8004fa8 <UART_WaitOnFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e03a      	b.n	80049f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10b      	bne.n	800499a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	461a      	mov	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004990:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	3302      	adds	r3, #2
 8004996:	61bb      	str	r3, [r7, #24]
 8004998:	e007      	b.n	80049aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	781a      	ldrb	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	3301      	adds	r3, #1
 80049a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1cb      	bne.n	800495a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2200      	movs	r2, #0
 80049ca:	2140      	movs	r1, #64	@ 0x40
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 faeb 	bl	8004fa8 <UART_WaitOnFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e006      	b.n	80049f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	e000      	b.n	80049f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80049f0:	2302      	movs	r3, #2
  }
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3720      	adds	r7, #32
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	4613      	mov	r3, r2
 8004a06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b20      	cmp	r3, #32
 8004a12:	d112      	bne.n	8004a3a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <HAL_UART_Receive_IT+0x26>
 8004a1a:	88fb      	ldrh	r3, [r7, #6]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e00b      	b.n	8004a3c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a2a:	88fb      	ldrh	r3, [r7, #6]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	68b9      	ldr	r1, [r7, #8]
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 fb12 	bl	800505a <UART_Start_Receive_IT>
 8004a36:	4603      	mov	r3, r0
 8004a38:	e000      	b.n	8004a3c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004a3a:	2302      	movs	r3, #2
  }
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b0ba      	sub	sp, #232	@ 0xe8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10f      	bne.n	8004aaa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d009      	beq.n	8004aaa <HAL_UART_IRQHandler+0x66>
 8004a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fbf2 	bl	800528c <UART_Receive_IT>
      return;
 8004aa8:	e25b      	b.n	8004f62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004aaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 80de 	beq.w	8004c70 <HAL_UART_IRQHandler+0x22c>
 8004ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d106      	bne.n	8004ace <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ac4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 80d1 	beq.w	8004c70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00b      	beq.n	8004af2 <HAL_UART_IRQHandler+0xae>
 8004ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aea:	f043 0201 	orr.w	r2, r3, #1
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00b      	beq.n	8004b16 <HAL_UART_IRQHandler+0xd2>
 8004afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0e:	f043 0202 	orr.w	r2, r3, #2
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00b      	beq.n	8004b3a <HAL_UART_IRQHandler+0xf6>
 8004b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b32:	f043 0204 	orr.w	r2, r3, #4
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d011      	beq.n	8004b6a <HAL_UART_IRQHandler+0x126>
 8004b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d105      	bne.n	8004b5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b62:	f043 0208 	orr.w	r2, r3, #8
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 81f2 	beq.w	8004f58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <HAL_UART_IRQHandler+0x14e>
 8004b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b84:	f003 0320 	and.w	r3, r3, #32
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 fb7d 	bl	800528c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b9c:	2b40      	cmp	r3, #64	@ 0x40
 8004b9e:	bf0c      	ite	eq
 8004ba0:	2301      	moveq	r3, #1
 8004ba2:	2300      	movne	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d103      	bne.n	8004bbe <HAL_UART_IRQHandler+0x17a>
 8004bb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d04f      	beq.n	8004c5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fa85 	bl	80050ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bce:	2b40      	cmp	r3, #64	@ 0x40
 8004bd0:	d141      	bne.n	8004c56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3314      	adds	r3, #20
 8004bd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004be8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3314      	adds	r3, #20
 8004bfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004bfe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c0e:	e841 2300 	strex	r3, r2, [r1]
 8004c12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1d9      	bne.n	8004bd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d013      	beq.n	8004c4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e24 <HAL_UART_IRQHandler+0x3e0>)
 8004c2c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fe fa09 	bl	800304a <HAL_DMA_Abort_IT>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d016      	beq.n	8004c6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c48:	4610      	mov	r0, r2
 8004c4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4c:	e00e      	b.n	8004c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f994 	bl	8004f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c54:	e00a      	b.n	8004c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f990 	bl	8004f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c5c:	e006      	b.n	8004c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f98c 	bl	8004f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004c6a:	e175      	b.n	8004f58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c6c:	bf00      	nop
    return;
 8004c6e:	e173      	b.n	8004f58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	f040 814f 	bne.w	8004f18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 8148 	beq.w	8004f18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 8141 	beq.w	8004f18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c96:	2300      	movs	r3, #0
 8004c98:	60bb      	str	r3, [r7, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	60bb      	str	r3, [r7, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	60bb      	str	r3, [r7, #8]
 8004caa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb6:	2b40      	cmp	r3, #64	@ 0x40
 8004cb8:	f040 80b6 	bne.w	8004e28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 8145 	beq.w	8004f5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	f080 813e 	bcs.w	8004f5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ce6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cf2:	f000 8088 	beq.w	8004e06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	330c      	adds	r3, #12
 8004cfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	330c      	adds	r3, #12
 8004d1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004d22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1d9      	bne.n	8004cf6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3314      	adds	r3, #20
 8004d48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d4c:	e853 3f00 	ldrex	r3, [r3]
 8004d50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d54:	f023 0301 	bic.w	r3, r3, #1
 8004d58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3314      	adds	r3, #20
 8004d62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1e1      	bne.n	8004d42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3314      	adds	r3, #20
 8004d84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3314      	adds	r3, #20
 8004d9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004da2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004da4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004da8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004daa:	e841 2300 	strex	r3, r2, [r1]
 8004dae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004db0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1e3      	bne.n	8004d7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	330c      	adds	r3, #12
 8004dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004dd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dd6:	f023 0310 	bic.w	r3, r3, #16
 8004dda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	330c      	adds	r3, #12
 8004de4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004de8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004dea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004dee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004df6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e3      	bne.n	8004dc4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7fe f8b2 	bl	8002f6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f8b7 	bl	8004f90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e22:	e09b      	b.n	8004f5c <HAL_UART_IRQHandler+0x518>
 8004e24:	08005195 	.word	0x08005195
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 808e 	beq.w	8004f60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 8089 	beq.w	8004f60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	330c      	adds	r3, #12
 8004e54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	330c      	adds	r3, #12
 8004e6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004e72:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e3      	bne.n	8004e4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3314      	adds	r3, #20
 8004e8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	623b      	str	r3, [r7, #32]
   return(result);
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	f023 0301 	bic.w	r3, r3, #1
 8004e9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3314      	adds	r3, #20
 8004ea6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004eaa:	633a      	str	r2, [r7, #48]	@ 0x30
 8004eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e3      	bne.n	8004e86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	330c      	adds	r3, #12
 8004ed2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	e853 3f00 	ldrex	r3, [r3]
 8004eda:	60fb      	str	r3, [r7, #12]
   return(result);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0310 	bic.w	r3, r3, #16
 8004ee2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	330c      	adds	r3, #12
 8004eec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ef0:	61fa      	str	r2, [r7, #28]
 8004ef2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef4:	69b9      	ldr	r1, [r7, #24]
 8004ef6:	69fa      	ldr	r2, [r7, #28]
 8004ef8:	e841 2300 	strex	r3, r2, [r1]
 8004efc:	617b      	str	r3, [r7, #20]
   return(result);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e3      	bne.n	8004ecc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f83d 	bl	8004f90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f16:	e023      	b.n	8004f60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d009      	beq.n	8004f38 <HAL_UART_IRQHandler+0x4f4>
 8004f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f943 	bl	80051bc <UART_Transmit_IT>
    return;
 8004f36:	e014      	b.n	8004f62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00e      	beq.n	8004f62 <HAL_UART_IRQHandler+0x51e>
 8004f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f983 	bl	800525c <UART_EndTransmit_IT>
    return;
 8004f56:	e004      	b.n	8004f62 <HAL_UART_IRQHandler+0x51e>
    return;
 8004f58:	bf00      	nop
 8004f5a:	e002      	b.n	8004f62 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f5c:	bf00      	nop
 8004f5e:	e000      	b.n	8004f62 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f60:	bf00      	nop
  }
}
 8004f62:	37e8      	adds	r7, #232	@ 0xe8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb8:	e03b      	b.n	8005032 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc0:	d037      	beq.n	8005032 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc2:	f7fc ff65 	bl	8001e90 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	6a3a      	ldr	r2, [r7, #32]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d302      	bcc.n	8004fd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e03a      	b.n	8005052 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d023      	beq.n	8005032 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b80      	cmp	r3, #128	@ 0x80
 8004fee:	d020      	beq.n	8005032 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b40      	cmp	r3, #64	@ 0x40
 8004ff4:	d01d      	beq.n	8005032 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
 8005000:	2b08      	cmp	r3, #8
 8005002:	d116      	bne.n	8005032 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 f857 	bl	80050ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2208      	movs	r2, #8
 8005024:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e00f      	b.n	8005052 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4013      	ands	r3, r2
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	429a      	cmp	r2, r3
 8005040:	bf0c      	ite	eq
 8005042:	2301      	moveq	r3, #1
 8005044:	2300      	movne	r3, #0
 8005046:	b2db      	uxtb	r3, r3
 8005048:	461a      	mov	r2, r3
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	429a      	cmp	r2, r3
 800504e:	d0b4      	beq.n	8004fba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800505a:	b480      	push	{r7}
 800505c:	b085      	sub	sp, #20
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	4613      	mov	r3, r2
 8005066:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	88fa      	ldrh	r2, [r7, #6]
 8005072:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	88fa      	ldrh	r2, [r7, #6]
 8005078:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2222      	movs	r2, #34	@ 0x22
 8005084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d007      	beq.n	80050a0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800509e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695a      	ldr	r2, [r3, #20]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0220 	orr.w	r2, r2, #32
 80050be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b095      	sub	sp, #84	@ 0x54
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	330c      	adds	r3, #12
 80050dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	330c      	adds	r3, #12
 80050f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80050f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050fe:	e841 2300 	strex	r3, r2, [r1]
 8005102:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1e5      	bne.n	80050d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3314      	adds	r3, #20
 8005110:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	61fb      	str	r3, [r7, #28]
   return(result);
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	f023 0301 	bic.w	r3, r3, #1
 8005120:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3314      	adds	r3, #20
 8005128:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800512a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800512c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005130:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e5      	bne.n	800510a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005142:	2b01      	cmp	r3, #1
 8005144:	d119      	bne.n	800517a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	330c      	adds	r3, #12
 800514c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	60bb      	str	r3, [r7, #8]
   return(result);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f023 0310 	bic.w	r3, r3, #16
 800515c:	647b      	str	r3, [r7, #68]	@ 0x44
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	330c      	adds	r3, #12
 8005164:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005166:	61ba      	str	r2, [r7, #24]
 8005168:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	6979      	ldr	r1, [r7, #20]
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	613b      	str	r3, [r7, #16]
   return(result);
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e5      	bne.n	8005146 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2220      	movs	r2, #32
 800517e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005188:	bf00      	nop
 800518a:	3754      	adds	r7, #84	@ 0x54
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f7ff fee4 	bl	8004f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051b4:	bf00      	nop
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b21      	cmp	r3, #33	@ 0x21
 80051ce:	d13e      	bne.n	800524e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051d8:	d114      	bne.n	8005204 <UART_Transmit_IT+0x48>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d110      	bne.n	8005204 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	461a      	mov	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	1c9a      	adds	r2, r3, #2
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	621a      	str	r2, [r3, #32]
 8005202:	e008      	b.n	8005216 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	1c59      	adds	r1, r3, #1
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6211      	str	r1, [r2, #32]
 800520e:	781a      	ldrb	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800521a:	b29b      	uxth	r3, r3
 800521c:	3b01      	subs	r3, #1
 800521e:	b29b      	uxth	r3, r3
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	4619      	mov	r1, r3
 8005224:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10f      	bne.n	800524a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005238:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68da      	ldr	r2, [r3, #12]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005248:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	e000      	b.n	8005250 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800524e:	2302      	movs	r3, #2
  }
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005272:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff fe73 	bl	8004f68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08c      	sub	sp, #48	@ 0x30
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b22      	cmp	r3, #34	@ 0x22
 800529e:	f040 80ae 	bne.w	80053fe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052aa:	d117      	bne.n	80052dc <UART_Receive_IT+0x50>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d113      	bne.n	80052dc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052b4:	2300      	movs	r3, #0
 80052b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d4:	1c9a      	adds	r2, r3, #2
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80052da:	e026      	b.n	800532a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80052e2:	2300      	movs	r3, #0
 80052e4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ee:	d007      	beq.n	8005300 <UART_Receive_IT+0x74>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10a      	bne.n	800530e <UART_Receive_IT+0x82>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d106      	bne.n	800530e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	b2da      	uxtb	r2, r3
 8005308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800530a:	701a      	strb	r2, [r3, #0]
 800530c:	e008      	b.n	8005320 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800531a:	b2da      	uxtb	r2, r3
 800531c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b01      	subs	r3, #1
 8005332:	b29b      	uxth	r3, r3
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	4619      	mov	r1, r3
 8005338:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800533a:	2b00      	cmp	r3, #0
 800533c:	d15d      	bne.n	80053fa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0220 	bic.w	r2, r2, #32
 800534c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800535c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	695a      	ldr	r2, [r3, #20]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0201 	bic.w	r2, r2, #1
 800536c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2220      	movs	r2, #32
 8005372:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005380:	2b01      	cmp	r3, #1
 8005382:	d135      	bne.n	80053f0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	330c      	adds	r3, #12
 8005390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	e853 3f00 	ldrex	r3, [r3]
 8005398:	613b      	str	r3, [r7, #16]
   return(result);
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f023 0310 	bic.w	r3, r3, #16
 80053a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	330c      	adds	r3, #12
 80053a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053aa:	623a      	str	r2, [r7, #32]
 80053ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	69f9      	ldr	r1, [r7, #28]
 80053b0:	6a3a      	ldr	r2, [r7, #32]
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1e5      	bne.n	800538a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	2b10      	cmp	r3, #16
 80053ca:	d10a      	bne.n	80053e2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053cc:	2300      	movs	r3, #0
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053e6:	4619      	mov	r1, r3
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7ff fdd1 	bl	8004f90 <HAL_UARTEx_RxEventCallback>
 80053ee:	e002      	b.n	80053f6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7fb fd03 	bl	8000dfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	e002      	b.n	8005400 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e000      	b.n	8005400 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80053fe:	2302      	movs	r3, #2
  }
}
 8005400:	4618      	mov	r0, r3
 8005402:	3730      	adds	r7, #48	@ 0x30
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800540c:	b0c0      	sub	sp, #256	@ 0x100
 800540e:	af00      	add	r7, sp, #0
 8005410:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005424:	68d9      	ldr	r1, [r3, #12]
 8005426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	ea40 0301 	orr.w	r3, r0, r1
 8005430:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	431a      	orrs	r2, r3
 8005440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	431a      	orrs	r2, r3
 8005448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005460:	f021 010c 	bic.w	r1, r1, #12
 8005464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800546e:	430b      	orrs	r3, r1
 8005470:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800547e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005482:	6999      	ldr	r1, [r3, #24]
 8005484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	ea40 0301 	orr.w	r3, r0, r1
 800548e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4b8f      	ldr	r3, [pc, #572]	@ (80056d4 <UART_SetConfig+0x2cc>)
 8005498:	429a      	cmp	r2, r3
 800549a:	d005      	beq.n	80054a8 <UART_SetConfig+0xa0>
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	4b8d      	ldr	r3, [pc, #564]	@ (80056d8 <UART_SetConfig+0x2d0>)
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d104      	bne.n	80054b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054a8:	f7fe fd42 	bl	8003f30 <HAL_RCC_GetPCLK2Freq>
 80054ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80054b0:	e003      	b.n	80054ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054b2:	f7fe fd29 	bl	8003f08 <HAL_RCC_GetPCLK1Freq>
 80054b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054c4:	f040 810c 	bne.w	80056e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054cc:	2200      	movs	r2, #0
 80054ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80054d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80054d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80054da:	4622      	mov	r2, r4
 80054dc:	462b      	mov	r3, r5
 80054de:	1891      	adds	r1, r2, r2
 80054e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80054e2:	415b      	adcs	r3, r3
 80054e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80054ea:	4621      	mov	r1, r4
 80054ec:	eb12 0801 	adds.w	r8, r2, r1
 80054f0:	4629      	mov	r1, r5
 80054f2:	eb43 0901 	adc.w	r9, r3, r1
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	f04f 0300 	mov.w	r3, #0
 80054fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005502:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005506:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800550a:	4690      	mov	r8, r2
 800550c:	4699      	mov	r9, r3
 800550e:	4623      	mov	r3, r4
 8005510:	eb18 0303 	adds.w	r3, r8, r3
 8005514:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005518:	462b      	mov	r3, r5
 800551a:	eb49 0303 	adc.w	r3, r9, r3
 800551e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800552e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005532:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005536:	460b      	mov	r3, r1
 8005538:	18db      	adds	r3, r3, r3
 800553a:	653b      	str	r3, [r7, #80]	@ 0x50
 800553c:	4613      	mov	r3, r2
 800553e:	eb42 0303 	adc.w	r3, r2, r3
 8005542:	657b      	str	r3, [r7, #84]	@ 0x54
 8005544:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005548:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800554c:	f7fa fea8 	bl	80002a0 <__aeabi_uldivmod>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	4b61      	ldr	r3, [pc, #388]	@ (80056dc <UART_SetConfig+0x2d4>)
 8005556:	fba3 2302 	umull	r2, r3, r3, r2
 800555a:	095b      	lsrs	r3, r3, #5
 800555c:	011c      	lsls	r4, r3, #4
 800555e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005562:	2200      	movs	r2, #0
 8005564:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005568:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800556c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005570:	4642      	mov	r2, r8
 8005572:	464b      	mov	r3, r9
 8005574:	1891      	adds	r1, r2, r2
 8005576:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005578:	415b      	adcs	r3, r3
 800557a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800557c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005580:	4641      	mov	r1, r8
 8005582:	eb12 0a01 	adds.w	sl, r2, r1
 8005586:	4649      	mov	r1, r9
 8005588:	eb43 0b01 	adc.w	fp, r3, r1
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005598:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800559c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055a0:	4692      	mov	sl, r2
 80055a2:	469b      	mov	fp, r3
 80055a4:	4643      	mov	r3, r8
 80055a6:	eb1a 0303 	adds.w	r3, sl, r3
 80055aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055ae:	464b      	mov	r3, r9
 80055b0:	eb4b 0303 	adc.w	r3, fp, r3
 80055b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80055b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80055c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80055cc:	460b      	mov	r3, r1
 80055ce:	18db      	adds	r3, r3, r3
 80055d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80055d2:	4613      	mov	r3, r2
 80055d4:	eb42 0303 	adc.w	r3, r2, r3
 80055d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80055da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80055de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80055e2:	f7fa fe5d 	bl	80002a0 <__aeabi_uldivmod>
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4611      	mov	r1, r2
 80055ec:	4b3b      	ldr	r3, [pc, #236]	@ (80056dc <UART_SetConfig+0x2d4>)
 80055ee:	fba3 2301 	umull	r2, r3, r3, r1
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	2264      	movs	r2, #100	@ 0x64
 80055f6:	fb02 f303 	mul.w	r3, r2, r3
 80055fa:	1acb      	subs	r3, r1, r3
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005602:	4b36      	ldr	r3, [pc, #216]	@ (80056dc <UART_SetConfig+0x2d4>)
 8005604:	fba3 2302 	umull	r2, r3, r3, r2
 8005608:	095b      	lsrs	r3, r3, #5
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005610:	441c      	add	r4, r3
 8005612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005616:	2200      	movs	r2, #0
 8005618:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800561c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005620:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005624:	4642      	mov	r2, r8
 8005626:	464b      	mov	r3, r9
 8005628:	1891      	adds	r1, r2, r2
 800562a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800562c:	415b      	adcs	r3, r3
 800562e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005630:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005634:	4641      	mov	r1, r8
 8005636:	1851      	adds	r1, r2, r1
 8005638:	6339      	str	r1, [r7, #48]	@ 0x30
 800563a:	4649      	mov	r1, r9
 800563c:	414b      	adcs	r3, r1
 800563e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005640:	f04f 0200 	mov.w	r2, #0
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800564c:	4659      	mov	r1, fp
 800564e:	00cb      	lsls	r3, r1, #3
 8005650:	4651      	mov	r1, sl
 8005652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005656:	4651      	mov	r1, sl
 8005658:	00ca      	lsls	r2, r1, #3
 800565a:	4610      	mov	r0, r2
 800565c:	4619      	mov	r1, r3
 800565e:	4603      	mov	r3, r0
 8005660:	4642      	mov	r2, r8
 8005662:	189b      	adds	r3, r3, r2
 8005664:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005668:	464b      	mov	r3, r9
 800566a:	460a      	mov	r2, r1
 800566c:	eb42 0303 	adc.w	r3, r2, r3
 8005670:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005680:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005684:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005688:	460b      	mov	r3, r1
 800568a:	18db      	adds	r3, r3, r3
 800568c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800568e:	4613      	mov	r3, r2
 8005690:	eb42 0303 	adc.w	r3, r2, r3
 8005694:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005696:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800569a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800569e:	f7fa fdff 	bl	80002a0 <__aeabi_uldivmod>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	4b0d      	ldr	r3, [pc, #52]	@ (80056dc <UART_SetConfig+0x2d4>)
 80056a8:	fba3 1302 	umull	r1, r3, r3, r2
 80056ac:	095b      	lsrs	r3, r3, #5
 80056ae:	2164      	movs	r1, #100	@ 0x64
 80056b0:	fb01 f303 	mul.w	r3, r1, r3
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	3332      	adds	r3, #50	@ 0x32
 80056ba:	4a08      	ldr	r2, [pc, #32]	@ (80056dc <UART_SetConfig+0x2d4>)
 80056bc:	fba2 2303 	umull	r2, r3, r2, r3
 80056c0:	095b      	lsrs	r3, r3, #5
 80056c2:	f003 0207 	and.w	r2, r3, #7
 80056c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4422      	add	r2, r4
 80056ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056d0:	e106      	b.n	80058e0 <UART_SetConfig+0x4d8>
 80056d2:	bf00      	nop
 80056d4:	40011000 	.word	0x40011000
 80056d8:	40011400 	.word	0x40011400
 80056dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056e4:	2200      	movs	r2, #0
 80056e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80056ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80056ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80056f2:	4642      	mov	r2, r8
 80056f4:	464b      	mov	r3, r9
 80056f6:	1891      	adds	r1, r2, r2
 80056f8:	6239      	str	r1, [r7, #32]
 80056fa:	415b      	adcs	r3, r3
 80056fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80056fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005702:	4641      	mov	r1, r8
 8005704:	1854      	adds	r4, r2, r1
 8005706:	4649      	mov	r1, r9
 8005708:	eb43 0501 	adc.w	r5, r3, r1
 800570c:	f04f 0200 	mov.w	r2, #0
 8005710:	f04f 0300 	mov.w	r3, #0
 8005714:	00eb      	lsls	r3, r5, #3
 8005716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800571a:	00e2      	lsls	r2, r4, #3
 800571c:	4614      	mov	r4, r2
 800571e:	461d      	mov	r5, r3
 8005720:	4643      	mov	r3, r8
 8005722:	18e3      	adds	r3, r4, r3
 8005724:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005728:	464b      	mov	r3, r9
 800572a:	eb45 0303 	adc.w	r3, r5, r3
 800572e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800573e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	f04f 0300 	mov.w	r3, #0
 800574a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800574e:	4629      	mov	r1, r5
 8005750:	008b      	lsls	r3, r1, #2
 8005752:	4621      	mov	r1, r4
 8005754:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005758:	4621      	mov	r1, r4
 800575a:	008a      	lsls	r2, r1, #2
 800575c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005760:	f7fa fd9e 	bl	80002a0 <__aeabi_uldivmod>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4b60      	ldr	r3, [pc, #384]	@ (80058ec <UART_SetConfig+0x4e4>)
 800576a:	fba3 2302 	umull	r2, r3, r3, r2
 800576e:	095b      	lsrs	r3, r3, #5
 8005770:	011c      	lsls	r4, r3, #4
 8005772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005776:	2200      	movs	r2, #0
 8005778:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800577c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005780:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005784:	4642      	mov	r2, r8
 8005786:	464b      	mov	r3, r9
 8005788:	1891      	adds	r1, r2, r2
 800578a:	61b9      	str	r1, [r7, #24]
 800578c:	415b      	adcs	r3, r3
 800578e:	61fb      	str	r3, [r7, #28]
 8005790:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005794:	4641      	mov	r1, r8
 8005796:	1851      	adds	r1, r2, r1
 8005798:	6139      	str	r1, [r7, #16]
 800579a:	4649      	mov	r1, r9
 800579c:	414b      	adcs	r3, r1
 800579e:	617b      	str	r3, [r7, #20]
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	f04f 0300 	mov.w	r3, #0
 80057a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057ac:	4659      	mov	r1, fp
 80057ae:	00cb      	lsls	r3, r1, #3
 80057b0:	4651      	mov	r1, sl
 80057b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057b6:	4651      	mov	r1, sl
 80057b8:	00ca      	lsls	r2, r1, #3
 80057ba:	4610      	mov	r0, r2
 80057bc:	4619      	mov	r1, r3
 80057be:	4603      	mov	r3, r0
 80057c0:	4642      	mov	r2, r8
 80057c2:	189b      	adds	r3, r3, r2
 80057c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057c8:	464b      	mov	r3, r9
 80057ca:	460a      	mov	r2, r1
 80057cc:	eb42 0303 	adc.w	r3, r2, r3
 80057d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80057d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	f04f 0300 	mov.w	r3, #0
 80057e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80057ec:	4649      	mov	r1, r9
 80057ee:	008b      	lsls	r3, r1, #2
 80057f0:	4641      	mov	r1, r8
 80057f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057f6:	4641      	mov	r1, r8
 80057f8:	008a      	lsls	r2, r1, #2
 80057fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80057fe:	f7fa fd4f 	bl	80002a0 <__aeabi_uldivmod>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	4611      	mov	r1, r2
 8005808:	4b38      	ldr	r3, [pc, #224]	@ (80058ec <UART_SetConfig+0x4e4>)
 800580a:	fba3 2301 	umull	r2, r3, r3, r1
 800580e:	095b      	lsrs	r3, r3, #5
 8005810:	2264      	movs	r2, #100	@ 0x64
 8005812:	fb02 f303 	mul.w	r3, r2, r3
 8005816:	1acb      	subs	r3, r1, r3
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	3332      	adds	r3, #50	@ 0x32
 800581c:	4a33      	ldr	r2, [pc, #204]	@ (80058ec <UART_SetConfig+0x4e4>)
 800581e:	fba2 2303 	umull	r2, r3, r2, r3
 8005822:	095b      	lsrs	r3, r3, #5
 8005824:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005828:	441c      	add	r4, r3
 800582a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800582e:	2200      	movs	r2, #0
 8005830:	673b      	str	r3, [r7, #112]	@ 0x70
 8005832:	677a      	str	r2, [r7, #116]	@ 0x74
 8005834:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005838:	4642      	mov	r2, r8
 800583a:	464b      	mov	r3, r9
 800583c:	1891      	adds	r1, r2, r2
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	415b      	adcs	r3, r3
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005848:	4641      	mov	r1, r8
 800584a:	1851      	adds	r1, r2, r1
 800584c:	6039      	str	r1, [r7, #0]
 800584e:	4649      	mov	r1, r9
 8005850:	414b      	adcs	r3, r1
 8005852:	607b      	str	r3, [r7, #4]
 8005854:	f04f 0200 	mov.w	r2, #0
 8005858:	f04f 0300 	mov.w	r3, #0
 800585c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005860:	4659      	mov	r1, fp
 8005862:	00cb      	lsls	r3, r1, #3
 8005864:	4651      	mov	r1, sl
 8005866:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800586a:	4651      	mov	r1, sl
 800586c:	00ca      	lsls	r2, r1, #3
 800586e:	4610      	mov	r0, r2
 8005870:	4619      	mov	r1, r3
 8005872:	4603      	mov	r3, r0
 8005874:	4642      	mov	r2, r8
 8005876:	189b      	adds	r3, r3, r2
 8005878:	66bb      	str	r3, [r7, #104]	@ 0x68
 800587a:	464b      	mov	r3, r9
 800587c:	460a      	mov	r2, r1
 800587e:	eb42 0303 	adc.w	r3, r2, r3
 8005882:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	663b      	str	r3, [r7, #96]	@ 0x60
 800588e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	f04f 0300 	mov.w	r3, #0
 8005898:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800589c:	4649      	mov	r1, r9
 800589e:	008b      	lsls	r3, r1, #2
 80058a0:	4641      	mov	r1, r8
 80058a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058a6:	4641      	mov	r1, r8
 80058a8:	008a      	lsls	r2, r1, #2
 80058aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80058ae:	f7fa fcf7 	bl	80002a0 <__aeabi_uldivmod>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4b0d      	ldr	r3, [pc, #52]	@ (80058ec <UART_SetConfig+0x4e4>)
 80058b8:	fba3 1302 	umull	r1, r3, r3, r2
 80058bc:	095b      	lsrs	r3, r3, #5
 80058be:	2164      	movs	r1, #100	@ 0x64
 80058c0:	fb01 f303 	mul.w	r3, r1, r3
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	3332      	adds	r3, #50	@ 0x32
 80058ca:	4a08      	ldr	r2, [pc, #32]	@ (80058ec <UART_SetConfig+0x4e4>)
 80058cc:	fba2 2303 	umull	r2, r3, r2, r3
 80058d0:	095b      	lsrs	r3, r3, #5
 80058d2:	f003 020f 	and.w	r2, r3, #15
 80058d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4422      	add	r2, r4
 80058de:	609a      	str	r2, [r3, #8]
}
 80058e0:	bf00      	nop
 80058e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80058e6:	46bd      	mov	sp, r7
 80058e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058ec:	51eb851f 	.word	0x51eb851f

080058f0 <q_init>:
	else					{ *pIdx = end - 1; }
}


void * __attribute__((nonnull)) q_init(Queue_t * const q, const uint16_t size_rec, const uint16_t nb_recs, const QueueType type, const bool overwrite)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	4608      	mov	r0, r1
 80058fa:	4611      	mov	r1, r2
 80058fc:	461a      	mov	r2, r3
 80058fe:	4603      	mov	r3, r0
 8005900:	817b      	strh	r3, [r7, #10]
 8005902:	460b      	mov	r3, r1
 8005904:	813b      	strh	r3, [r7, #8]
 8005906:	4613      	mov	r3, r2
 8005908:	71fb      	strb	r3, [r7, #7]
	const uint32_t size = nb_recs * size_rec;
 800590a:	893b      	ldrh	r3, [r7, #8]
 800590c:	897a      	ldrh	r2, [r7, #10]
 800590e:	fb02 f303 	mul.w	r3, r2, r3
 8005912:	617b      	str	r3, [r7, #20]

	q->rec_nb = nb_recs;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	893a      	ldrh	r2, [r7, #8]
 8005918:	805a      	strh	r2, [r3, #2]
	q->rec_sz = size_rec;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	897a      	ldrh	r2, [r7, #10]
 800591e:	809a      	strh	r2, [r3, #4]
	q->impl = type;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	79fa      	ldrb	r2, [r7, #7]
 8005924:	701a      	strb	r2, [r3, #0]
	q->ovw = overwrite;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f897 2020 	ldrb.w	r2, [r7, #32]
 800592c:	705a      	strb	r2, [r3, #1]

	q_kill(q);	// Free existing data (if any)
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 f820 	bl	8005974 <q_kill>
	q->queue = (uint8_t *) malloc(size);
 8005934:	6978      	ldr	r0, [r7, #20]
 8005936:	f000 f943 	bl	8005bc0 <malloc>
 800593a:	4603      	mov	r3, r0
 800593c:	461a      	mov	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	60da      	str	r2, [r3, #12]

	if (q->queue == NULL)	{ q->queue_sz = 0; return 0; }	// Return here if Queue not allocated
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d104      	bne.n	8005954 <q_init+0x64>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	609a      	str	r2, [r3, #8]
 8005950:	2300      	movs	r3, #0
 8005952:	e00b      	b.n	800596c <q_init+0x7c>
	else					{ q->queue_sz = size; }
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	609a      	str	r2, [r3, #8]

	q->init = QUEUE_INITIALIZED;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f645 22a5 	movw	r2, #23205	@ 0x5aa5
 8005960:	82da      	strh	r2, [r3, #22]
	q_flush(q);
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 f81c 	bl	80059a0 <q_flush>

	return q->queue;	// return NULL when queue not allocated (beside), Queue address otherwise
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	68db      	ldr	r3, [r3, #12]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <q_kill>:

void __attribute__((nonnull)) q_kill(Queue_t * const q)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
	if (q->init == QUEUE_INITIALIZED)	{ free(q->queue); }	// Free existing data (if already initialized)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	8adb      	ldrh	r3, [r3, #22]
 8005980:	f645 22a5 	movw	r2, #23205	@ 0x5aa5
 8005984:	4293      	cmp	r3, r2
 8005986:	d104      	bne.n	8005992 <q_kill+0x1e>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	4618      	mov	r0, r3
 800598e:	f000 f91f 	bl	8005bd0 <free>
	q->init = 0;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	82da      	strh	r2, [r3, #22]
}
 8005998:	bf00      	nop
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <q_flush>:


void __attribute__((nonnull)) q_flush(Queue_t * const q)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
	q->in = 0;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	821a      	strh	r2, [r3, #16]
	q->out = 0;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	825a      	strh	r2, [r3, #18]
	q->cnt = 0;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	829a      	strh	r2, [r3, #20]
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <q_push>:


bool __attribute__((nonnull)) q_push(Queue_t * const q, const void * const record)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b08a      	sub	sp, #40	@ 0x28
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	6039      	str	r1, [r7, #0]
	if ((!q->ovw) && q_isFull(q))	{ return false; }
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	785b      	ldrb	r3, [r3, #1]
 80059d4:	f083 0301 	eor.w	r3, r3, #1
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00e      	beq.n	80059fc <q_push+0x36>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	623b      	str	r3, [r7, #32]
 80059e2:	6a3b      	ldr	r3, [r7, #32]
 80059e4:	8a9a      	ldrh	r2, [r3, #20]
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	885b      	ldrh	r3, [r3, #2]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	bf0c      	ite	eq
 80059ee:	2301      	moveq	r3, #1
 80059f0:	2300      	movne	r3, #0
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <q_push+0x36>
 80059f8:	2300      	movs	r3, #0
 80059fa:	e063      	b.n	8005ac4 <q_push+0xfe>

	uint8_t * const pStart = q->queue + (q->rec_sz * q->in);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	8892      	ldrh	r2, [r2, #4]
 8005a04:	4611      	mov	r1, r2
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	8a12      	ldrh	r2, [r2, #16]
 8005a0a:	fb01 f202 	mul.w	r2, r1, r2
 8005a0e:	4413      	add	r3, r2
 8005a10:	627b      	str	r3, [r7, #36]	@ 0x24
	memcpy(pStart, record, q->rec_sz);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	889b      	ldrh	r3, [r3, #4]
 8005a16:	461a      	mov	r2, r3
 8005a18:	6839      	ldr	r1, [r7, #0]
 8005a1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a1c:	f000 fa76 	bl	8005f0c <memcpy>

	inc_idx(&q->in, q->rec_nb, 0);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3310      	adds	r3, #16
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	8852      	ldrh	r2, [r2, #2]
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	82fb      	strh	r3, [r7, #22]
	if (*pIdx < end - 1)	{ (*pIdx)++; }
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	8afb      	ldrh	r3, [r7, #22]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	da06      	bge.n	8005a4a <q_push+0x84>
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	3301      	adds	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	801a      	strh	r2, [r3, #0]
}
 8005a48:	e002      	b.n	8005a50 <q_push+0x8a>
	else					{ *pIdx = start; }
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	801a      	strh	r2, [r3, #0]
}
 8005a50:	bf00      	nop
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	61fb      	str	r3, [r7, #28]
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	8a9a      	ldrh	r2, [r3, #20]
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	885b      	ldrh	r3, [r3, #2]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	bf0c      	ite	eq
 8005a62:	2301      	moveq	r3, #1
 8005a64:	2300      	movne	r3, #0
 8005a66:	b2db      	uxtb	r3, r3

	if (!q_isFull(q))	{ q->cnt++; }	// Increase records count
 8005a68:	f083 0301 	eor.w	r3, r3, #1
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d006      	beq.n	8005a80 <q_push+0xba>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	8a9b      	ldrh	r3, [r3, #20]
 8005a76:	3301      	adds	r3, #1
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	829a      	strh	r2, [r3, #20]
 8005a7e:	e020      	b.n	8005ac2 <q_push+0xfc>
	else if (q->ovw)					// Queue is full and overwrite is allowed
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	785b      	ldrb	r3, [r3, #1]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01c      	beq.n	8005ac2 <q_push+0xfc>
	{
		if (q->impl == FIFO)			{ inc_idx(&q->out, q->rec_nb, 0); }	// as oldest record is overwritten, increment out
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d118      	bne.n	8005ac2 <q_push+0xfc>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3312      	adds	r3, #18
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	8852      	ldrh	r2, [r2, #2]
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	81fb      	strh	r3, [r7, #14]
	if (*pIdx < end - 1)	{ (*pIdx)++; }
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	89fb      	ldrh	r3, [r7, #14]
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	da06      	bge.n	8005aba <q_push+0xf4>
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	801a      	strh	r2, [r3, #0]
}
 8005ab8:	e002      	b.n	8005ac0 <q_push+0xfa>
	else					{ *pIdx = start; }
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	2200      	movs	r2, #0
 8005abe:	801a      	strh	r2, [r3, #0]
}
 8005ac0:	bf00      	nop
		//else if (q->impl == LIFO)	{}										// Nothing to do in this case
	}

	return true;
 8005ac2:	2301      	movs	r3, #1
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3728      	adds	r7, #40	@ 0x28
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <q_pop>:

bool __attribute__((nonnull)) q_pop(Queue_t * const q, void * const record)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	61bb      	str	r3, [r7, #24]
	return (!q->cnt) ? true : false; }
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	8a9b      	ldrh	r3, [r3, #20]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	bf0c      	ite	eq
 8005ae2:	2301      	moveq	r3, #1
 8005ae4:	2300      	movne	r3, #0
 8005ae6:	b2db      	uxtb	r3, r3
	const uint8_t * pStart;

	if (q_isEmpty(q))	{ return false; }	// No more records
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <q_pop+0x24>
 8005aec:	2300      	movs	r3, #0
 8005aee:	e05f      	b.n	8005bb0 <q_pop+0xe4>

	if (q->impl == FIFO)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d123      	bne.n	8005b40 <q_pop+0x74>
	{
		pStart = q->queue + (q->rec_sz * q->out);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	8892      	ldrh	r2, [r2, #4]
 8005b00:	4611      	mov	r1, r2
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	8a52      	ldrh	r2, [r2, #18]
 8005b06:	fb01 f202 	mul.w	r2, r1, r2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	61fb      	str	r3, [r7, #28]
		inc_idx(&q->out, q->rec_nb, 0);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	3312      	adds	r3, #18
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	8852      	ldrh	r2, [r2, #2]
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	827b      	strh	r3, [r7, #18]
	if (*pIdx < end - 1)	{ (*pIdx)++; }
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	461a      	mov	r2, r3
 8005b22:	8a7b      	ldrh	r3, [r7, #18]
 8005b24:	3b01      	subs	r3, #1
 8005b26:	429a      	cmp	r2, r3
 8005b28:	da06      	bge.n	8005b38 <q_pop+0x6c>
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	801a      	strh	r2, [r3, #0]
}
 8005b36:	e02d      	b.n	8005b94 <q_pop+0xc8>
	else					{ *pIdx = start; }
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	801a      	strh	r2, [r3, #0]
}
 8005b3e:	e029      	b.n	8005b94 <q_pop+0xc8>
	}
	else if (q->impl == LIFO)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d123      	bne.n	8005b90 <q_pop+0xc4>
	{
		dec_idx(&q->in, q->rec_nb, 0);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3310      	adds	r3, #16
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	8852      	ldrh	r2, [r2, #2]
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	4613      	mov	r3, r2
 8005b54:	817b      	strh	r3, [r7, #10]
	if (*pIdx > start)		{ (*pIdx)--; }
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d006      	beq.n	8005b6c <q_pop+0xa0>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	801a      	strh	r2, [r3, #0]
}
 8005b6a:	e004      	b.n	8005b76 <q_pop+0xaa>
	else					{ *pIdx = end - 1; }
 8005b6c:	897b      	ldrh	r3, [r7, #10]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	801a      	strh	r2, [r3, #0]
}
 8005b76:	bf00      	nop
		pStart = q->queue + (q->rec_sz * q->in);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	8892      	ldrh	r2, [r2, #4]
 8005b80:	4611      	mov	r1, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	8a12      	ldrh	r2, [r2, #16]
 8005b86:	fb01 f202 	mul.w	r2, r1, r2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	61fb      	str	r3, [r7, #28]
 8005b8e:	e001      	b.n	8005b94 <q_pop+0xc8>
	}
	else	{ return false; }
 8005b90:	2300      	movs	r3, #0
 8005b92:	e00d      	b.n	8005bb0 <q_pop+0xe4>

	memcpy(record, pStart, q->rec_sz);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	889b      	ldrh	r3, [r3, #4]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	69f9      	ldr	r1, [r7, #28]
 8005b9c:	6838      	ldr	r0, [r7, #0]
 8005b9e:	f000 f9b5 	bl	8005f0c <memcpy>
	q->cnt--;	// Decrease records count
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	8a9b      	ldrh	r3, [r3, #20]
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	829a      	strh	r2, [r3, #20]
	return true;
 8005bae:	2301      	movs	r3, #1
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3720      	adds	r7, #32
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <atoi>:
 8005bb8:	220a      	movs	r2, #10
 8005bba:	2100      	movs	r1, #0
 8005bbc:	f000 b938 	b.w	8005e30 <strtol>

08005bc0 <malloc>:
 8005bc0:	4b02      	ldr	r3, [pc, #8]	@ (8005bcc <malloc+0xc>)
 8005bc2:	4601      	mov	r1, r0
 8005bc4:	6818      	ldr	r0, [r3, #0]
 8005bc6:	f000 b82d 	b.w	8005c24 <_malloc_r>
 8005bca:	bf00      	nop
 8005bcc:	2000000c 	.word	0x2000000c

08005bd0 <free>:
 8005bd0:	4b02      	ldr	r3, [pc, #8]	@ (8005bdc <free+0xc>)
 8005bd2:	4601      	mov	r1, r0
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	f000 b9a7 	b.w	8005f28 <_free_r>
 8005bda:	bf00      	nop
 8005bdc:	2000000c 	.word	0x2000000c

08005be0 <sbrk_aligned>:
 8005be0:	b570      	push	{r4, r5, r6, lr}
 8005be2:	4e0f      	ldr	r6, [pc, #60]	@ (8005c20 <sbrk_aligned+0x40>)
 8005be4:	460c      	mov	r4, r1
 8005be6:	6831      	ldr	r1, [r6, #0]
 8005be8:	4605      	mov	r5, r0
 8005bea:	b911      	cbnz	r1, 8005bf2 <sbrk_aligned+0x12>
 8005bec:	f000 f952 	bl	8005e94 <_sbrk_r>
 8005bf0:	6030      	str	r0, [r6, #0]
 8005bf2:	4621      	mov	r1, r4
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	f000 f94d 	bl	8005e94 <_sbrk_r>
 8005bfa:	1c43      	adds	r3, r0, #1
 8005bfc:	d103      	bne.n	8005c06 <sbrk_aligned+0x26>
 8005bfe:	f04f 34ff 	mov.w	r4, #4294967295
 8005c02:	4620      	mov	r0, r4
 8005c04:	bd70      	pop	{r4, r5, r6, pc}
 8005c06:	1cc4      	adds	r4, r0, #3
 8005c08:	f024 0403 	bic.w	r4, r4, #3
 8005c0c:	42a0      	cmp	r0, r4
 8005c0e:	d0f8      	beq.n	8005c02 <sbrk_aligned+0x22>
 8005c10:	1a21      	subs	r1, r4, r0
 8005c12:	4628      	mov	r0, r5
 8005c14:	f000 f93e 	bl	8005e94 <_sbrk_r>
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d1f2      	bne.n	8005c02 <sbrk_aligned+0x22>
 8005c1c:	e7ef      	b.n	8005bfe <sbrk_aligned+0x1e>
 8005c1e:	bf00      	nop
 8005c20:	2000021c 	.word	0x2000021c

08005c24 <_malloc_r>:
 8005c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c28:	1ccd      	adds	r5, r1, #3
 8005c2a:	f025 0503 	bic.w	r5, r5, #3
 8005c2e:	3508      	adds	r5, #8
 8005c30:	2d0c      	cmp	r5, #12
 8005c32:	bf38      	it	cc
 8005c34:	250c      	movcc	r5, #12
 8005c36:	2d00      	cmp	r5, #0
 8005c38:	4606      	mov	r6, r0
 8005c3a:	db01      	blt.n	8005c40 <_malloc_r+0x1c>
 8005c3c:	42a9      	cmp	r1, r5
 8005c3e:	d904      	bls.n	8005c4a <_malloc_r+0x26>
 8005c40:	230c      	movs	r3, #12
 8005c42:	6033      	str	r3, [r6, #0]
 8005c44:	2000      	movs	r0, #0
 8005c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d20 <_malloc_r+0xfc>
 8005c4e:	f000 f869 	bl	8005d24 <__malloc_lock>
 8005c52:	f8d8 3000 	ldr.w	r3, [r8]
 8005c56:	461c      	mov	r4, r3
 8005c58:	bb44      	cbnz	r4, 8005cac <_malloc_r+0x88>
 8005c5a:	4629      	mov	r1, r5
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	f7ff ffbf 	bl	8005be0 <sbrk_aligned>
 8005c62:	1c43      	adds	r3, r0, #1
 8005c64:	4604      	mov	r4, r0
 8005c66:	d158      	bne.n	8005d1a <_malloc_r+0xf6>
 8005c68:	f8d8 4000 	ldr.w	r4, [r8]
 8005c6c:	4627      	mov	r7, r4
 8005c6e:	2f00      	cmp	r7, #0
 8005c70:	d143      	bne.n	8005cfa <_malloc_r+0xd6>
 8005c72:	2c00      	cmp	r4, #0
 8005c74:	d04b      	beq.n	8005d0e <_malloc_r+0xea>
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	4639      	mov	r1, r7
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	eb04 0903 	add.w	r9, r4, r3
 8005c80:	f000 f908 	bl	8005e94 <_sbrk_r>
 8005c84:	4581      	cmp	r9, r0
 8005c86:	d142      	bne.n	8005d0e <_malloc_r+0xea>
 8005c88:	6821      	ldr	r1, [r4, #0]
 8005c8a:	1a6d      	subs	r5, r5, r1
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	4630      	mov	r0, r6
 8005c90:	f7ff ffa6 	bl	8005be0 <sbrk_aligned>
 8005c94:	3001      	adds	r0, #1
 8005c96:	d03a      	beq.n	8005d0e <_malloc_r+0xea>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	442b      	add	r3, r5
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	bb62      	cbnz	r2, 8005d00 <_malloc_r+0xdc>
 8005ca6:	f8c8 7000 	str.w	r7, [r8]
 8005caa:	e00f      	b.n	8005ccc <_malloc_r+0xa8>
 8005cac:	6822      	ldr	r2, [r4, #0]
 8005cae:	1b52      	subs	r2, r2, r5
 8005cb0:	d420      	bmi.n	8005cf4 <_malloc_r+0xd0>
 8005cb2:	2a0b      	cmp	r2, #11
 8005cb4:	d917      	bls.n	8005ce6 <_malloc_r+0xc2>
 8005cb6:	1961      	adds	r1, r4, r5
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	6025      	str	r5, [r4, #0]
 8005cbc:	bf18      	it	ne
 8005cbe:	6059      	strne	r1, [r3, #4]
 8005cc0:	6863      	ldr	r3, [r4, #4]
 8005cc2:	bf08      	it	eq
 8005cc4:	f8c8 1000 	streq.w	r1, [r8]
 8005cc8:	5162      	str	r2, [r4, r5]
 8005cca:	604b      	str	r3, [r1, #4]
 8005ccc:	4630      	mov	r0, r6
 8005cce:	f000 f82f 	bl	8005d30 <__malloc_unlock>
 8005cd2:	f104 000b 	add.w	r0, r4, #11
 8005cd6:	1d23      	adds	r3, r4, #4
 8005cd8:	f020 0007 	bic.w	r0, r0, #7
 8005cdc:	1ac2      	subs	r2, r0, r3
 8005cde:	bf1c      	itt	ne
 8005ce0:	1a1b      	subne	r3, r3, r0
 8005ce2:	50a3      	strne	r3, [r4, r2]
 8005ce4:	e7af      	b.n	8005c46 <_malloc_r+0x22>
 8005ce6:	6862      	ldr	r2, [r4, #4]
 8005ce8:	42a3      	cmp	r3, r4
 8005cea:	bf0c      	ite	eq
 8005cec:	f8c8 2000 	streq.w	r2, [r8]
 8005cf0:	605a      	strne	r2, [r3, #4]
 8005cf2:	e7eb      	b.n	8005ccc <_malloc_r+0xa8>
 8005cf4:	4623      	mov	r3, r4
 8005cf6:	6864      	ldr	r4, [r4, #4]
 8005cf8:	e7ae      	b.n	8005c58 <_malloc_r+0x34>
 8005cfa:	463c      	mov	r4, r7
 8005cfc:	687f      	ldr	r7, [r7, #4]
 8005cfe:	e7b6      	b.n	8005c6e <_malloc_r+0x4a>
 8005d00:	461a      	mov	r2, r3
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	42a3      	cmp	r3, r4
 8005d06:	d1fb      	bne.n	8005d00 <_malloc_r+0xdc>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	6053      	str	r3, [r2, #4]
 8005d0c:	e7de      	b.n	8005ccc <_malloc_r+0xa8>
 8005d0e:	230c      	movs	r3, #12
 8005d10:	6033      	str	r3, [r6, #0]
 8005d12:	4630      	mov	r0, r6
 8005d14:	f000 f80c 	bl	8005d30 <__malloc_unlock>
 8005d18:	e794      	b.n	8005c44 <_malloc_r+0x20>
 8005d1a:	6005      	str	r5, [r0, #0]
 8005d1c:	e7d6      	b.n	8005ccc <_malloc_r+0xa8>
 8005d1e:	bf00      	nop
 8005d20:	20000220 	.word	0x20000220

08005d24 <__malloc_lock>:
 8005d24:	4801      	ldr	r0, [pc, #4]	@ (8005d2c <__malloc_lock+0x8>)
 8005d26:	f000 b8ef 	b.w	8005f08 <__retarget_lock_acquire_recursive>
 8005d2a:	bf00      	nop
 8005d2c:	20000360 	.word	0x20000360

08005d30 <__malloc_unlock>:
 8005d30:	4801      	ldr	r0, [pc, #4]	@ (8005d38 <__malloc_unlock+0x8>)
 8005d32:	f000 b8ea 	b.w	8005f0a <__retarget_lock_release_recursive>
 8005d36:	bf00      	nop
 8005d38:	20000360 	.word	0x20000360

08005d3c <_strtol_l.constprop.0>:
 8005d3c:	2b24      	cmp	r3, #36	@ 0x24
 8005d3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d42:	4686      	mov	lr, r0
 8005d44:	4690      	mov	r8, r2
 8005d46:	d801      	bhi.n	8005d4c <_strtol_l.constprop.0+0x10>
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d106      	bne.n	8005d5a <_strtol_l.constprop.0+0x1e>
 8005d4c:	f000 f8b2 	bl	8005eb4 <__errno>
 8005d50:	2316      	movs	r3, #22
 8005d52:	6003      	str	r3, [r0, #0]
 8005d54:	2000      	movs	r0, #0
 8005d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d5a:	4834      	ldr	r0, [pc, #208]	@ (8005e2c <_strtol_l.constprop.0+0xf0>)
 8005d5c:	460d      	mov	r5, r1
 8005d5e:	462a      	mov	r2, r5
 8005d60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d64:	5d06      	ldrb	r6, [r0, r4]
 8005d66:	f016 0608 	ands.w	r6, r6, #8
 8005d6a:	d1f8      	bne.n	8005d5e <_strtol_l.constprop.0+0x22>
 8005d6c:	2c2d      	cmp	r4, #45	@ 0x2d
 8005d6e:	d12d      	bne.n	8005dcc <_strtol_l.constprop.0+0x90>
 8005d70:	782c      	ldrb	r4, [r5, #0]
 8005d72:	2601      	movs	r6, #1
 8005d74:	1c95      	adds	r5, r2, #2
 8005d76:	f033 0210 	bics.w	r2, r3, #16
 8005d7a:	d109      	bne.n	8005d90 <_strtol_l.constprop.0+0x54>
 8005d7c:	2c30      	cmp	r4, #48	@ 0x30
 8005d7e:	d12a      	bne.n	8005dd6 <_strtol_l.constprop.0+0x9a>
 8005d80:	782a      	ldrb	r2, [r5, #0]
 8005d82:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005d86:	2a58      	cmp	r2, #88	@ 0x58
 8005d88:	d125      	bne.n	8005dd6 <_strtol_l.constprop.0+0x9a>
 8005d8a:	786c      	ldrb	r4, [r5, #1]
 8005d8c:	2310      	movs	r3, #16
 8005d8e:	3502      	adds	r5, #2
 8005d90:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005d94:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005d98:	2200      	movs	r2, #0
 8005d9a:	fbbc f9f3 	udiv	r9, ip, r3
 8005d9e:	4610      	mov	r0, r2
 8005da0:	fb03 ca19 	mls	sl, r3, r9, ip
 8005da4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005da8:	2f09      	cmp	r7, #9
 8005daa:	d81b      	bhi.n	8005de4 <_strtol_l.constprop.0+0xa8>
 8005dac:	463c      	mov	r4, r7
 8005dae:	42a3      	cmp	r3, r4
 8005db0:	dd27      	ble.n	8005e02 <_strtol_l.constprop.0+0xc6>
 8005db2:	1c57      	adds	r7, r2, #1
 8005db4:	d007      	beq.n	8005dc6 <_strtol_l.constprop.0+0x8a>
 8005db6:	4581      	cmp	r9, r0
 8005db8:	d320      	bcc.n	8005dfc <_strtol_l.constprop.0+0xc0>
 8005dba:	d101      	bne.n	8005dc0 <_strtol_l.constprop.0+0x84>
 8005dbc:	45a2      	cmp	sl, r4
 8005dbe:	db1d      	blt.n	8005dfc <_strtol_l.constprop.0+0xc0>
 8005dc0:	fb00 4003 	mla	r0, r0, r3, r4
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005dca:	e7eb      	b.n	8005da4 <_strtol_l.constprop.0+0x68>
 8005dcc:	2c2b      	cmp	r4, #43	@ 0x2b
 8005dce:	bf04      	itt	eq
 8005dd0:	782c      	ldrbeq	r4, [r5, #0]
 8005dd2:	1c95      	addeq	r5, r2, #2
 8005dd4:	e7cf      	b.n	8005d76 <_strtol_l.constprop.0+0x3a>
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1da      	bne.n	8005d90 <_strtol_l.constprop.0+0x54>
 8005dda:	2c30      	cmp	r4, #48	@ 0x30
 8005ddc:	bf0c      	ite	eq
 8005dde:	2308      	moveq	r3, #8
 8005de0:	230a      	movne	r3, #10
 8005de2:	e7d5      	b.n	8005d90 <_strtol_l.constprop.0+0x54>
 8005de4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005de8:	2f19      	cmp	r7, #25
 8005dea:	d801      	bhi.n	8005df0 <_strtol_l.constprop.0+0xb4>
 8005dec:	3c37      	subs	r4, #55	@ 0x37
 8005dee:	e7de      	b.n	8005dae <_strtol_l.constprop.0+0x72>
 8005df0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005df4:	2f19      	cmp	r7, #25
 8005df6:	d804      	bhi.n	8005e02 <_strtol_l.constprop.0+0xc6>
 8005df8:	3c57      	subs	r4, #87	@ 0x57
 8005dfa:	e7d8      	b.n	8005dae <_strtol_l.constprop.0+0x72>
 8005dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8005e00:	e7e1      	b.n	8005dc6 <_strtol_l.constprop.0+0x8a>
 8005e02:	1c53      	adds	r3, r2, #1
 8005e04:	d108      	bne.n	8005e18 <_strtol_l.constprop.0+0xdc>
 8005e06:	2322      	movs	r3, #34	@ 0x22
 8005e08:	f8ce 3000 	str.w	r3, [lr]
 8005e0c:	4660      	mov	r0, ip
 8005e0e:	f1b8 0f00 	cmp.w	r8, #0
 8005e12:	d0a0      	beq.n	8005d56 <_strtol_l.constprop.0+0x1a>
 8005e14:	1e69      	subs	r1, r5, #1
 8005e16:	e006      	b.n	8005e26 <_strtol_l.constprop.0+0xea>
 8005e18:	b106      	cbz	r6, 8005e1c <_strtol_l.constprop.0+0xe0>
 8005e1a:	4240      	negs	r0, r0
 8005e1c:	f1b8 0f00 	cmp.w	r8, #0
 8005e20:	d099      	beq.n	8005d56 <_strtol_l.constprop.0+0x1a>
 8005e22:	2a00      	cmp	r2, #0
 8005e24:	d1f6      	bne.n	8005e14 <_strtol_l.constprop.0+0xd8>
 8005e26:	f8c8 1000 	str.w	r1, [r8]
 8005e2a:	e794      	b.n	8005d56 <_strtol_l.constprop.0+0x1a>
 8005e2c:	08006695 	.word	0x08006695

08005e30 <strtol>:
 8005e30:	4613      	mov	r3, r2
 8005e32:	460a      	mov	r2, r1
 8005e34:	4601      	mov	r1, r0
 8005e36:	4802      	ldr	r0, [pc, #8]	@ (8005e40 <strtol+0x10>)
 8005e38:	6800      	ldr	r0, [r0, #0]
 8005e3a:	f7ff bf7f 	b.w	8005d3c <_strtol_l.constprop.0>
 8005e3e:	bf00      	nop
 8005e40:	2000000c 	.word	0x2000000c

08005e44 <siprintf>:
 8005e44:	b40e      	push	{r1, r2, r3}
 8005e46:	b500      	push	{lr}
 8005e48:	b09c      	sub	sp, #112	@ 0x70
 8005e4a:	ab1d      	add	r3, sp, #116	@ 0x74
 8005e4c:	9002      	str	r0, [sp, #8]
 8005e4e:	9006      	str	r0, [sp, #24]
 8005e50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005e54:	4809      	ldr	r0, [pc, #36]	@ (8005e7c <siprintf+0x38>)
 8005e56:	9107      	str	r1, [sp, #28]
 8005e58:	9104      	str	r1, [sp, #16]
 8005e5a:	4909      	ldr	r1, [pc, #36]	@ (8005e80 <siprintf+0x3c>)
 8005e5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e60:	9105      	str	r1, [sp, #20]
 8005e62:	6800      	ldr	r0, [r0, #0]
 8005e64:	9301      	str	r3, [sp, #4]
 8005e66:	a902      	add	r1, sp, #8
 8005e68:	f000 f904 	bl	8006074 <_svfiprintf_r>
 8005e6c:	9b02      	ldr	r3, [sp, #8]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	b01c      	add	sp, #112	@ 0x70
 8005e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e78:	b003      	add	sp, #12
 8005e7a:	4770      	bx	lr
 8005e7c:	2000000c 	.word	0x2000000c
 8005e80:	ffff0208 	.word	0xffff0208

08005e84 <memset>:
 8005e84:	4402      	add	r2, r0
 8005e86:	4603      	mov	r3, r0
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d100      	bne.n	8005e8e <memset+0xa>
 8005e8c:	4770      	bx	lr
 8005e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e92:	e7f9      	b.n	8005e88 <memset+0x4>

08005e94 <_sbrk_r>:
 8005e94:	b538      	push	{r3, r4, r5, lr}
 8005e96:	4d06      	ldr	r5, [pc, #24]	@ (8005eb0 <_sbrk_r+0x1c>)
 8005e98:	2300      	movs	r3, #0
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	4608      	mov	r0, r1
 8005e9e:	602b      	str	r3, [r5, #0]
 8005ea0:	f7fb ff1e 	bl	8001ce0 <_sbrk>
 8005ea4:	1c43      	adds	r3, r0, #1
 8005ea6:	d102      	bne.n	8005eae <_sbrk_r+0x1a>
 8005ea8:	682b      	ldr	r3, [r5, #0]
 8005eaa:	b103      	cbz	r3, 8005eae <_sbrk_r+0x1a>
 8005eac:	6023      	str	r3, [r4, #0]
 8005eae:	bd38      	pop	{r3, r4, r5, pc}
 8005eb0:	2000035c 	.word	0x2000035c

08005eb4 <__errno>:
 8005eb4:	4b01      	ldr	r3, [pc, #4]	@ (8005ebc <__errno+0x8>)
 8005eb6:	6818      	ldr	r0, [r3, #0]
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	2000000c 	.word	0x2000000c

08005ec0 <__libc_init_array>:
 8005ec0:	b570      	push	{r4, r5, r6, lr}
 8005ec2:	4d0d      	ldr	r5, [pc, #52]	@ (8005ef8 <__libc_init_array+0x38>)
 8005ec4:	4c0d      	ldr	r4, [pc, #52]	@ (8005efc <__libc_init_array+0x3c>)
 8005ec6:	1b64      	subs	r4, r4, r5
 8005ec8:	10a4      	asrs	r4, r4, #2
 8005eca:	2600      	movs	r6, #0
 8005ecc:	42a6      	cmp	r6, r4
 8005ece:	d109      	bne.n	8005ee4 <__libc_init_array+0x24>
 8005ed0:	4d0b      	ldr	r5, [pc, #44]	@ (8005f00 <__libc_init_array+0x40>)
 8005ed2:	4c0c      	ldr	r4, [pc, #48]	@ (8005f04 <__libc_init_array+0x44>)
 8005ed4:	f000 fba8 	bl	8006628 <_init>
 8005ed8:	1b64      	subs	r4, r4, r5
 8005eda:	10a4      	asrs	r4, r4, #2
 8005edc:	2600      	movs	r6, #0
 8005ede:	42a6      	cmp	r6, r4
 8005ee0:	d105      	bne.n	8005eee <__libc_init_array+0x2e>
 8005ee2:	bd70      	pop	{r4, r5, r6, pc}
 8005ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ee8:	4798      	blx	r3
 8005eea:	3601      	adds	r6, #1
 8005eec:	e7ee      	b.n	8005ecc <__libc_init_array+0xc>
 8005eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef2:	4798      	blx	r3
 8005ef4:	3601      	adds	r6, #1
 8005ef6:	e7f2      	b.n	8005ede <__libc_init_array+0x1e>
 8005ef8:	080067d0 	.word	0x080067d0
 8005efc:	080067d0 	.word	0x080067d0
 8005f00:	080067d0 	.word	0x080067d0
 8005f04:	080067d4 	.word	0x080067d4

08005f08 <__retarget_lock_acquire_recursive>:
 8005f08:	4770      	bx	lr

08005f0a <__retarget_lock_release_recursive>:
 8005f0a:	4770      	bx	lr

08005f0c <memcpy>:
 8005f0c:	440a      	add	r2, r1
 8005f0e:	4291      	cmp	r1, r2
 8005f10:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f14:	d100      	bne.n	8005f18 <memcpy+0xc>
 8005f16:	4770      	bx	lr
 8005f18:	b510      	push	{r4, lr}
 8005f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f22:	4291      	cmp	r1, r2
 8005f24:	d1f9      	bne.n	8005f1a <memcpy+0xe>
 8005f26:	bd10      	pop	{r4, pc}

08005f28 <_free_r>:
 8005f28:	b538      	push	{r3, r4, r5, lr}
 8005f2a:	4605      	mov	r5, r0
 8005f2c:	2900      	cmp	r1, #0
 8005f2e:	d041      	beq.n	8005fb4 <_free_r+0x8c>
 8005f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f34:	1f0c      	subs	r4, r1, #4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	bfb8      	it	lt
 8005f3a:	18e4      	addlt	r4, r4, r3
 8005f3c:	f7ff fef2 	bl	8005d24 <__malloc_lock>
 8005f40:	4a1d      	ldr	r2, [pc, #116]	@ (8005fb8 <_free_r+0x90>)
 8005f42:	6813      	ldr	r3, [r2, #0]
 8005f44:	b933      	cbnz	r3, 8005f54 <_free_r+0x2c>
 8005f46:	6063      	str	r3, [r4, #4]
 8005f48:	6014      	str	r4, [r2, #0]
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f50:	f7ff beee 	b.w	8005d30 <__malloc_unlock>
 8005f54:	42a3      	cmp	r3, r4
 8005f56:	d908      	bls.n	8005f6a <_free_r+0x42>
 8005f58:	6820      	ldr	r0, [r4, #0]
 8005f5a:	1821      	adds	r1, r4, r0
 8005f5c:	428b      	cmp	r3, r1
 8005f5e:	bf01      	itttt	eq
 8005f60:	6819      	ldreq	r1, [r3, #0]
 8005f62:	685b      	ldreq	r3, [r3, #4]
 8005f64:	1809      	addeq	r1, r1, r0
 8005f66:	6021      	streq	r1, [r4, #0]
 8005f68:	e7ed      	b.n	8005f46 <_free_r+0x1e>
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	b10b      	cbz	r3, 8005f74 <_free_r+0x4c>
 8005f70:	42a3      	cmp	r3, r4
 8005f72:	d9fa      	bls.n	8005f6a <_free_r+0x42>
 8005f74:	6811      	ldr	r1, [r2, #0]
 8005f76:	1850      	adds	r0, r2, r1
 8005f78:	42a0      	cmp	r0, r4
 8005f7a:	d10b      	bne.n	8005f94 <_free_r+0x6c>
 8005f7c:	6820      	ldr	r0, [r4, #0]
 8005f7e:	4401      	add	r1, r0
 8005f80:	1850      	adds	r0, r2, r1
 8005f82:	4283      	cmp	r3, r0
 8005f84:	6011      	str	r1, [r2, #0]
 8005f86:	d1e0      	bne.n	8005f4a <_free_r+0x22>
 8005f88:	6818      	ldr	r0, [r3, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	6053      	str	r3, [r2, #4]
 8005f8e:	4408      	add	r0, r1
 8005f90:	6010      	str	r0, [r2, #0]
 8005f92:	e7da      	b.n	8005f4a <_free_r+0x22>
 8005f94:	d902      	bls.n	8005f9c <_free_r+0x74>
 8005f96:	230c      	movs	r3, #12
 8005f98:	602b      	str	r3, [r5, #0]
 8005f9a:	e7d6      	b.n	8005f4a <_free_r+0x22>
 8005f9c:	6820      	ldr	r0, [r4, #0]
 8005f9e:	1821      	adds	r1, r4, r0
 8005fa0:	428b      	cmp	r3, r1
 8005fa2:	bf04      	itt	eq
 8005fa4:	6819      	ldreq	r1, [r3, #0]
 8005fa6:	685b      	ldreq	r3, [r3, #4]
 8005fa8:	6063      	str	r3, [r4, #4]
 8005faa:	bf04      	itt	eq
 8005fac:	1809      	addeq	r1, r1, r0
 8005fae:	6021      	streq	r1, [r4, #0]
 8005fb0:	6054      	str	r4, [r2, #4]
 8005fb2:	e7ca      	b.n	8005f4a <_free_r+0x22>
 8005fb4:	bd38      	pop	{r3, r4, r5, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20000220 	.word	0x20000220

08005fbc <__ssputs_r>:
 8005fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc0:	688e      	ldr	r6, [r1, #8]
 8005fc2:	461f      	mov	r7, r3
 8005fc4:	42be      	cmp	r6, r7
 8005fc6:	680b      	ldr	r3, [r1, #0]
 8005fc8:	4682      	mov	sl, r0
 8005fca:	460c      	mov	r4, r1
 8005fcc:	4690      	mov	r8, r2
 8005fce:	d82d      	bhi.n	800602c <__ssputs_r+0x70>
 8005fd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005fd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005fd8:	d026      	beq.n	8006028 <__ssputs_r+0x6c>
 8005fda:	6965      	ldr	r5, [r4, #20]
 8005fdc:	6909      	ldr	r1, [r1, #16]
 8005fde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fe2:	eba3 0901 	sub.w	r9, r3, r1
 8005fe6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fea:	1c7b      	adds	r3, r7, #1
 8005fec:	444b      	add	r3, r9
 8005fee:	106d      	asrs	r5, r5, #1
 8005ff0:	429d      	cmp	r5, r3
 8005ff2:	bf38      	it	cc
 8005ff4:	461d      	movcc	r5, r3
 8005ff6:	0553      	lsls	r3, r2, #21
 8005ff8:	d527      	bpl.n	800604a <__ssputs_r+0x8e>
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	f7ff fe12 	bl	8005c24 <_malloc_r>
 8006000:	4606      	mov	r6, r0
 8006002:	b360      	cbz	r0, 800605e <__ssputs_r+0xa2>
 8006004:	6921      	ldr	r1, [r4, #16]
 8006006:	464a      	mov	r2, r9
 8006008:	f7ff ff80 	bl	8005f0c <memcpy>
 800600c:	89a3      	ldrh	r3, [r4, #12]
 800600e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006016:	81a3      	strh	r3, [r4, #12]
 8006018:	6126      	str	r6, [r4, #16]
 800601a:	6165      	str	r5, [r4, #20]
 800601c:	444e      	add	r6, r9
 800601e:	eba5 0509 	sub.w	r5, r5, r9
 8006022:	6026      	str	r6, [r4, #0]
 8006024:	60a5      	str	r5, [r4, #8]
 8006026:	463e      	mov	r6, r7
 8006028:	42be      	cmp	r6, r7
 800602a:	d900      	bls.n	800602e <__ssputs_r+0x72>
 800602c:	463e      	mov	r6, r7
 800602e:	6820      	ldr	r0, [r4, #0]
 8006030:	4632      	mov	r2, r6
 8006032:	4641      	mov	r1, r8
 8006034:	f000 faa8 	bl	8006588 <memmove>
 8006038:	68a3      	ldr	r3, [r4, #8]
 800603a:	1b9b      	subs	r3, r3, r6
 800603c:	60a3      	str	r3, [r4, #8]
 800603e:	6823      	ldr	r3, [r4, #0]
 8006040:	4433      	add	r3, r6
 8006042:	6023      	str	r3, [r4, #0]
 8006044:	2000      	movs	r0, #0
 8006046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800604a:	462a      	mov	r2, r5
 800604c:	f000 fab6 	bl	80065bc <_realloc_r>
 8006050:	4606      	mov	r6, r0
 8006052:	2800      	cmp	r0, #0
 8006054:	d1e0      	bne.n	8006018 <__ssputs_r+0x5c>
 8006056:	6921      	ldr	r1, [r4, #16]
 8006058:	4650      	mov	r0, sl
 800605a:	f7ff ff65 	bl	8005f28 <_free_r>
 800605e:	230c      	movs	r3, #12
 8006060:	f8ca 3000 	str.w	r3, [sl]
 8006064:	89a3      	ldrh	r3, [r4, #12]
 8006066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800606a:	81a3      	strh	r3, [r4, #12]
 800606c:	f04f 30ff 	mov.w	r0, #4294967295
 8006070:	e7e9      	b.n	8006046 <__ssputs_r+0x8a>
	...

08006074 <_svfiprintf_r>:
 8006074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006078:	4698      	mov	r8, r3
 800607a:	898b      	ldrh	r3, [r1, #12]
 800607c:	061b      	lsls	r3, r3, #24
 800607e:	b09d      	sub	sp, #116	@ 0x74
 8006080:	4607      	mov	r7, r0
 8006082:	460d      	mov	r5, r1
 8006084:	4614      	mov	r4, r2
 8006086:	d510      	bpl.n	80060aa <_svfiprintf_r+0x36>
 8006088:	690b      	ldr	r3, [r1, #16]
 800608a:	b973      	cbnz	r3, 80060aa <_svfiprintf_r+0x36>
 800608c:	2140      	movs	r1, #64	@ 0x40
 800608e:	f7ff fdc9 	bl	8005c24 <_malloc_r>
 8006092:	6028      	str	r0, [r5, #0]
 8006094:	6128      	str	r0, [r5, #16]
 8006096:	b930      	cbnz	r0, 80060a6 <_svfiprintf_r+0x32>
 8006098:	230c      	movs	r3, #12
 800609a:	603b      	str	r3, [r7, #0]
 800609c:	f04f 30ff 	mov.w	r0, #4294967295
 80060a0:	b01d      	add	sp, #116	@ 0x74
 80060a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a6:	2340      	movs	r3, #64	@ 0x40
 80060a8:	616b      	str	r3, [r5, #20]
 80060aa:	2300      	movs	r3, #0
 80060ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80060ae:	2320      	movs	r3, #32
 80060b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80060b8:	2330      	movs	r3, #48	@ 0x30
 80060ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006258 <_svfiprintf_r+0x1e4>
 80060be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060c2:	f04f 0901 	mov.w	r9, #1
 80060c6:	4623      	mov	r3, r4
 80060c8:	469a      	mov	sl, r3
 80060ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060ce:	b10a      	cbz	r2, 80060d4 <_svfiprintf_r+0x60>
 80060d0:	2a25      	cmp	r2, #37	@ 0x25
 80060d2:	d1f9      	bne.n	80060c8 <_svfiprintf_r+0x54>
 80060d4:	ebba 0b04 	subs.w	fp, sl, r4
 80060d8:	d00b      	beq.n	80060f2 <_svfiprintf_r+0x7e>
 80060da:	465b      	mov	r3, fp
 80060dc:	4622      	mov	r2, r4
 80060de:	4629      	mov	r1, r5
 80060e0:	4638      	mov	r0, r7
 80060e2:	f7ff ff6b 	bl	8005fbc <__ssputs_r>
 80060e6:	3001      	adds	r0, #1
 80060e8:	f000 80a7 	beq.w	800623a <_svfiprintf_r+0x1c6>
 80060ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060ee:	445a      	add	r2, fp
 80060f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80060f2:	f89a 3000 	ldrb.w	r3, [sl]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 809f 	beq.w	800623a <_svfiprintf_r+0x1c6>
 80060fc:	2300      	movs	r3, #0
 80060fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006102:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006106:	f10a 0a01 	add.w	sl, sl, #1
 800610a:	9304      	str	r3, [sp, #16]
 800610c:	9307      	str	r3, [sp, #28]
 800610e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006112:	931a      	str	r3, [sp, #104]	@ 0x68
 8006114:	4654      	mov	r4, sl
 8006116:	2205      	movs	r2, #5
 8006118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800611c:	484e      	ldr	r0, [pc, #312]	@ (8006258 <_svfiprintf_r+0x1e4>)
 800611e:	f7fa f86f 	bl	8000200 <memchr>
 8006122:	9a04      	ldr	r2, [sp, #16]
 8006124:	b9d8      	cbnz	r0, 800615e <_svfiprintf_r+0xea>
 8006126:	06d0      	lsls	r0, r2, #27
 8006128:	bf44      	itt	mi
 800612a:	2320      	movmi	r3, #32
 800612c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006130:	0711      	lsls	r1, r2, #28
 8006132:	bf44      	itt	mi
 8006134:	232b      	movmi	r3, #43	@ 0x2b
 8006136:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800613a:	f89a 3000 	ldrb.w	r3, [sl]
 800613e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006140:	d015      	beq.n	800616e <_svfiprintf_r+0xfa>
 8006142:	9a07      	ldr	r2, [sp, #28]
 8006144:	4654      	mov	r4, sl
 8006146:	2000      	movs	r0, #0
 8006148:	f04f 0c0a 	mov.w	ip, #10
 800614c:	4621      	mov	r1, r4
 800614e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006152:	3b30      	subs	r3, #48	@ 0x30
 8006154:	2b09      	cmp	r3, #9
 8006156:	d94b      	bls.n	80061f0 <_svfiprintf_r+0x17c>
 8006158:	b1b0      	cbz	r0, 8006188 <_svfiprintf_r+0x114>
 800615a:	9207      	str	r2, [sp, #28]
 800615c:	e014      	b.n	8006188 <_svfiprintf_r+0x114>
 800615e:	eba0 0308 	sub.w	r3, r0, r8
 8006162:	fa09 f303 	lsl.w	r3, r9, r3
 8006166:	4313      	orrs	r3, r2
 8006168:	9304      	str	r3, [sp, #16]
 800616a:	46a2      	mov	sl, r4
 800616c:	e7d2      	b.n	8006114 <_svfiprintf_r+0xa0>
 800616e:	9b03      	ldr	r3, [sp, #12]
 8006170:	1d19      	adds	r1, r3, #4
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	9103      	str	r1, [sp, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	bfbb      	ittet	lt
 800617a:	425b      	neglt	r3, r3
 800617c:	f042 0202 	orrlt.w	r2, r2, #2
 8006180:	9307      	strge	r3, [sp, #28]
 8006182:	9307      	strlt	r3, [sp, #28]
 8006184:	bfb8      	it	lt
 8006186:	9204      	strlt	r2, [sp, #16]
 8006188:	7823      	ldrb	r3, [r4, #0]
 800618a:	2b2e      	cmp	r3, #46	@ 0x2e
 800618c:	d10a      	bne.n	80061a4 <_svfiprintf_r+0x130>
 800618e:	7863      	ldrb	r3, [r4, #1]
 8006190:	2b2a      	cmp	r3, #42	@ 0x2a
 8006192:	d132      	bne.n	80061fa <_svfiprintf_r+0x186>
 8006194:	9b03      	ldr	r3, [sp, #12]
 8006196:	1d1a      	adds	r2, r3, #4
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	9203      	str	r2, [sp, #12]
 800619c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061a0:	3402      	adds	r4, #2
 80061a2:	9305      	str	r3, [sp, #20]
 80061a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006268 <_svfiprintf_r+0x1f4>
 80061a8:	7821      	ldrb	r1, [r4, #0]
 80061aa:	2203      	movs	r2, #3
 80061ac:	4650      	mov	r0, sl
 80061ae:	f7fa f827 	bl	8000200 <memchr>
 80061b2:	b138      	cbz	r0, 80061c4 <_svfiprintf_r+0x150>
 80061b4:	9b04      	ldr	r3, [sp, #16]
 80061b6:	eba0 000a 	sub.w	r0, r0, sl
 80061ba:	2240      	movs	r2, #64	@ 0x40
 80061bc:	4082      	lsls	r2, r0
 80061be:	4313      	orrs	r3, r2
 80061c0:	3401      	adds	r4, #1
 80061c2:	9304      	str	r3, [sp, #16]
 80061c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061c8:	4824      	ldr	r0, [pc, #144]	@ (800625c <_svfiprintf_r+0x1e8>)
 80061ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061ce:	2206      	movs	r2, #6
 80061d0:	f7fa f816 	bl	8000200 <memchr>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	d036      	beq.n	8006246 <_svfiprintf_r+0x1d2>
 80061d8:	4b21      	ldr	r3, [pc, #132]	@ (8006260 <_svfiprintf_r+0x1ec>)
 80061da:	bb1b      	cbnz	r3, 8006224 <_svfiprintf_r+0x1b0>
 80061dc:	9b03      	ldr	r3, [sp, #12]
 80061de:	3307      	adds	r3, #7
 80061e0:	f023 0307 	bic.w	r3, r3, #7
 80061e4:	3308      	adds	r3, #8
 80061e6:	9303      	str	r3, [sp, #12]
 80061e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061ea:	4433      	add	r3, r6
 80061ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80061ee:	e76a      	b.n	80060c6 <_svfiprintf_r+0x52>
 80061f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80061f4:	460c      	mov	r4, r1
 80061f6:	2001      	movs	r0, #1
 80061f8:	e7a8      	b.n	800614c <_svfiprintf_r+0xd8>
 80061fa:	2300      	movs	r3, #0
 80061fc:	3401      	adds	r4, #1
 80061fe:	9305      	str	r3, [sp, #20]
 8006200:	4619      	mov	r1, r3
 8006202:	f04f 0c0a 	mov.w	ip, #10
 8006206:	4620      	mov	r0, r4
 8006208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800620c:	3a30      	subs	r2, #48	@ 0x30
 800620e:	2a09      	cmp	r2, #9
 8006210:	d903      	bls.n	800621a <_svfiprintf_r+0x1a6>
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0c6      	beq.n	80061a4 <_svfiprintf_r+0x130>
 8006216:	9105      	str	r1, [sp, #20]
 8006218:	e7c4      	b.n	80061a4 <_svfiprintf_r+0x130>
 800621a:	fb0c 2101 	mla	r1, ip, r1, r2
 800621e:	4604      	mov	r4, r0
 8006220:	2301      	movs	r3, #1
 8006222:	e7f0      	b.n	8006206 <_svfiprintf_r+0x192>
 8006224:	ab03      	add	r3, sp, #12
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	462a      	mov	r2, r5
 800622a:	4b0e      	ldr	r3, [pc, #56]	@ (8006264 <_svfiprintf_r+0x1f0>)
 800622c:	a904      	add	r1, sp, #16
 800622e:	4638      	mov	r0, r7
 8006230:	f3af 8000 	nop.w
 8006234:	1c42      	adds	r2, r0, #1
 8006236:	4606      	mov	r6, r0
 8006238:	d1d6      	bne.n	80061e8 <_svfiprintf_r+0x174>
 800623a:	89ab      	ldrh	r3, [r5, #12]
 800623c:	065b      	lsls	r3, r3, #25
 800623e:	f53f af2d 	bmi.w	800609c <_svfiprintf_r+0x28>
 8006242:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006244:	e72c      	b.n	80060a0 <_svfiprintf_r+0x2c>
 8006246:	ab03      	add	r3, sp, #12
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	462a      	mov	r2, r5
 800624c:	4b05      	ldr	r3, [pc, #20]	@ (8006264 <_svfiprintf_r+0x1f0>)
 800624e:	a904      	add	r1, sp, #16
 8006250:	4638      	mov	r0, r7
 8006252:	f000 f879 	bl	8006348 <_printf_i>
 8006256:	e7ed      	b.n	8006234 <_svfiprintf_r+0x1c0>
 8006258:	08006795 	.word	0x08006795
 800625c:	0800679f 	.word	0x0800679f
 8006260:	00000000 	.word	0x00000000
 8006264:	08005fbd 	.word	0x08005fbd
 8006268:	0800679b 	.word	0x0800679b

0800626c <_printf_common>:
 800626c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006270:	4616      	mov	r6, r2
 8006272:	4698      	mov	r8, r3
 8006274:	688a      	ldr	r2, [r1, #8]
 8006276:	690b      	ldr	r3, [r1, #16]
 8006278:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800627c:	4293      	cmp	r3, r2
 800627e:	bfb8      	it	lt
 8006280:	4613      	movlt	r3, r2
 8006282:	6033      	str	r3, [r6, #0]
 8006284:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006288:	4607      	mov	r7, r0
 800628a:	460c      	mov	r4, r1
 800628c:	b10a      	cbz	r2, 8006292 <_printf_common+0x26>
 800628e:	3301      	adds	r3, #1
 8006290:	6033      	str	r3, [r6, #0]
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	0699      	lsls	r1, r3, #26
 8006296:	bf42      	ittt	mi
 8006298:	6833      	ldrmi	r3, [r6, #0]
 800629a:	3302      	addmi	r3, #2
 800629c:	6033      	strmi	r3, [r6, #0]
 800629e:	6825      	ldr	r5, [r4, #0]
 80062a0:	f015 0506 	ands.w	r5, r5, #6
 80062a4:	d106      	bne.n	80062b4 <_printf_common+0x48>
 80062a6:	f104 0a19 	add.w	sl, r4, #25
 80062aa:	68e3      	ldr	r3, [r4, #12]
 80062ac:	6832      	ldr	r2, [r6, #0]
 80062ae:	1a9b      	subs	r3, r3, r2
 80062b0:	42ab      	cmp	r3, r5
 80062b2:	dc26      	bgt.n	8006302 <_printf_common+0x96>
 80062b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80062b8:	6822      	ldr	r2, [r4, #0]
 80062ba:	3b00      	subs	r3, #0
 80062bc:	bf18      	it	ne
 80062be:	2301      	movne	r3, #1
 80062c0:	0692      	lsls	r2, r2, #26
 80062c2:	d42b      	bmi.n	800631c <_printf_common+0xb0>
 80062c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80062c8:	4641      	mov	r1, r8
 80062ca:	4638      	mov	r0, r7
 80062cc:	47c8      	blx	r9
 80062ce:	3001      	adds	r0, #1
 80062d0:	d01e      	beq.n	8006310 <_printf_common+0xa4>
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	6922      	ldr	r2, [r4, #16]
 80062d6:	f003 0306 	and.w	r3, r3, #6
 80062da:	2b04      	cmp	r3, #4
 80062dc:	bf02      	ittt	eq
 80062de:	68e5      	ldreq	r5, [r4, #12]
 80062e0:	6833      	ldreq	r3, [r6, #0]
 80062e2:	1aed      	subeq	r5, r5, r3
 80062e4:	68a3      	ldr	r3, [r4, #8]
 80062e6:	bf0c      	ite	eq
 80062e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062ec:	2500      	movne	r5, #0
 80062ee:	4293      	cmp	r3, r2
 80062f0:	bfc4      	itt	gt
 80062f2:	1a9b      	subgt	r3, r3, r2
 80062f4:	18ed      	addgt	r5, r5, r3
 80062f6:	2600      	movs	r6, #0
 80062f8:	341a      	adds	r4, #26
 80062fa:	42b5      	cmp	r5, r6
 80062fc:	d11a      	bne.n	8006334 <_printf_common+0xc8>
 80062fe:	2000      	movs	r0, #0
 8006300:	e008      	b.n	8006314 <_printf_common+0xa8>
 8006302:	2301      	movs	r3, #1
 8006304:	4652      	mov	r2, sl
 8006306:	4641      	mov	r1, r8
 8006308:	4638      	mov	r0, r7
 800630a:	47c8      	blx	r9
 800630c:	3001      	adds	r0, #1
 800630e:	d103      	bne.n	8006318 <_printf_common+0xac>
 8006310:	f04f 30ff 	mov.w	r0, #4294967295
 8006314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006318:	3501      	adds	r5, #1
 800631a:	e7c6      	b.n	80062aa <_printf_common+0x3e>
 800631c:	18e1      	adds	r1, r4, r3
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	2030      	movs	r0, #48	@ 0x30
 8006322:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006326:	4422      	add	r2, r4
 8006328:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800632c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006330:	3302      	adds	r3, #2
 8006332:	e7c7      	b.n	80062c4 <_printf_common+0x58>
 8006334:	2301      	movs	r3, #1
 8006336:	4622      	mov	r2, r4
 8006338:	4641      	mov	r1, r8
 800633a:	4638      	mov	r0, r7
 800633c:	47c8      	blx	r9
 800633e:	3001      	adds	r0, #1
 8006340:	d0e6      	beq.n	8006310 <_printf_common+0xa4>
 8006342:	3601      	adds	r6, #1
 8006344:	e7d9      	b.n	80062fa <_printf_common+0x8e>
	...

08006348 <_printf_i>:
 8006348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800634c:	7e0f      	ldrb	r7, [r1, #24]
 800634e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006350:	2f78      	cmp	r7, #120	@ 0x78
 8006352:	4691      	mov	r9, r2
 8006354:	4680      	mov	r8, r0
 8006356:	460c      	mov	r4, r1
 8006358:	469a      	mov	sl, r3
 800635a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800635e:	d807      	bhi.n	8006370 <_printf_i+0x28>
 8006360:	2f62      	cmp	r7, #98	@ 0x62
 8006362:	d80a      	bhi.n	800637a <_printf_i+0x32>
 8006364:	2f00      	cmp	r7, #0
 8006366:	f000 80d2 	beq.w	800650e <_printf_i+0x1c6>
 800636a:	2f58      	cmp	r7, #88	@ 0x58
 800636c:	f000 80b9 	beq.w	80064e2 <_printf_i+0x19a>
 8006370:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006374:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006378:	e03a      	b.n	80063f0 <_printf_i+0xa8>
 800637a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800637e:	2b15      	cmp	r3, #21
 8006380:	d8f6      	bhi.n	8006370 <_printf_i+0x28>
 8006382:	a101      	add	r1, pc, #4	@ (adr r1, 8006388 <_printf_i+0x40>)
 8006384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006388:	080063e1 	.word	0x080063e1
 800638c:	080063f5 	.word	0x080063f5
 8006390:	08006371 	.word	0x08006371
 8006394:	08006371 	.word	0x08006371
 8006398:	08006371 	.word	0x08006371
 800639c:	08006371 	.word	0x08006371
 80063a0:	080063f5 	.word	0x080063f5
 80063a4:	08006371 	.word	0x08006371
 80063a8:	08006371 	.word	0x08006371
 80063ac:	08006371 	.word	0x08006371
 80063b0:	08006371 	.word	0x08006371
 80063b4:	080064f5 	.word	0x080064f5
 80063b8:	0800641f 	.word	0x0800641f
 80063bc:	080064af 	.word	0x080064af
 80063c0:	08006371 	.word	0x08006371
 80063c4:	08006371 	.word	0x08006371
 80063c8:	08006517 	.word	0x08006517
 80063cc:	08006371 	.word	0x08006371
 80063d0:	0800641f 	.word	0x0800641f
 80063d4:	08006371 	.word	0x08006371
 80063d8:	08006371 	.word	0x08006371
 80063dc:	080064b7 	.word	0x080064b7
 80063e0:	6833      	ldr	r3, [r6, #0]
 80063e2:	1d1a      	adds	r2, r3, #4
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6032      	str	r2, [r6, #0]
 80063e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80063f0:	2301      	movs	r3, #1
 80063f2:	e09d      	b.n	8006530 <_printf_i+0x1e8>
 80063f4:	6833      	ldr	r3, [r6, #0]
 80063f6:	6820      	ldr	r0, [r4, #0]
 80063f8:	1d19      	adds	r1, r3, #4
 80063fa:	6031      	str	r1, [r6, #0]
 80063fc:	0606      	lsls	r6, r0, #24
 80063fe:	d501      	bpl.n	8006404 <_printf_i+0xbc>
 8006400:	681d      	ldr	r5, [r3, #0]
 8006402:	e003      	b.n	800640c <_printf_i+0xc4>
 8006404:	0645      	lsls	r5, r0, #25
 8006406:	d5fb      	bpl.n	8006400 <_printf_i+0xb8>
 8006408:	f9b3 5000 	ldrsh.w	r5, [r3]
 800640c:	2d00      	cmp	r5, #0
 800640e:	da03      	bge.n	8006418 <_printf_i+0xd0>
 8006410:	232d      	movs	r3, #45	@ 0x2d
 8006412:	426d      	negs	r5, r5
 8006414:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006418:	4859      	ldr	r0, [pc, #356]	@ (8006580 <_printf_i+0x238>)
 800641a:	230a      	movs	r3, #10
 800641c:	e011      	b.n	8006442 <_printf_i+0xfa>
 800641e:	6821      	ldr	r1, [r4, #0]
 8006420:	6833      	ldr	r3, [r6, #0]
 8006422:	0608      	lsls	r0, r1, #24
 8006424:	f853 5b04 	ldr.w	r5, [r3], #4
 8006428:	d402      	bmi.n	8006430 <_printf_i+0xe8>
 800642a:	0649      	lsls	r1, r1, #25
 800642c:	bf48      	it	mi
 800642e:	b2ad      	uxthmi	r5, r5
 8006430:	2f6f      	cmp	r7, #111	@ 0x6f
 8006432:	4853      	ldr	r0, [pc, #332]	@ (8006580 <_printf_i+0x238>)
 8006434:	6033      	str	r3, [r6, #0]
 8006436:	bf14      	ite	ne
 8006438:	230a      	movne	r3, #10
 800643a:	2308      	moveq	r3, #8
 800643c:	2100      	movs	r1, #0
 800643e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006442:	6866      	ldr	r6, [r4, #4]
 8006444:	60a6      	str	r6, [r4, #8]
 8006446:	2e00      	cmp	r6, #0
 8006448:	bfa2      	ittt	ge
 800644a:	6821      	ldrge	r1, [r4, #0]
 800644c:	f021 0104 	bicge.w	r1, r1, #4
 8006450:	6021      	strge	r1, [r4, #0]
 8006452:	b90d      	cbnz	r5, 8006458 <_printf_i+0x110>
 8006454:	2e00      	cmp	r6, #0
 8006456:	d04b      	beq.n	80064f0 <_printf_i+0x1a8>
 8006458:	4616      	mov	r6, r2
 800645a:	fbb5 f1f3 	udiv	r1, r5, r3
 800645e:	fb03 5711 	mls	r7, r3, r1, r5
 8006462:	5dc7      	ldrb	r7, [r0, r7]
 8006464:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006468:	462f      	mov	r7, r5
 800646a:	42bb      	cmp	r3, r7
 800646c:	460d      	mov	r5, r1
 800646e:	d9f4      	bls.n	800645a <_printf_i+0x112>
 8006470:	2b08      	cmp	r3, #8
 8006472:	d10b      	bne.n	800648c <_printf_i+0x144>
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	07df      	lsls	r7, r3, #31
 8006478:	d508      	bpl.n	800648c <_printf_i+0x144>
 800647a:	6923      	ldr	r3, [r4, #16]
 800647c:	6861      	ldr	r1, [r4, #4]
 800647e:	4299      	cmp	r1, r3
 8006480:	bfde      	ittt	le
 8006482:	2330      	movle	r3, #48	@ 0x30
 8006484:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006488:	f106 36ff 	addle.w	r6, r6, #4294967295
 800648c:	1b92      	subs	r2, r2, r6
 800648e:	6122      	str	r2, [r4, #16]
 8006490:	f8cd a000 	str.w	sl, [sp]
 8006494:	464b      	mov	r3, r9
 8006496:	aa03      	add	r2, sp, #12
 8006498:	4621      	mov	r1, r4
 800649a:	4640      	mov	r0, r8
 800649c:	f7ff fee6 	bl	800626c <_printf_common>
 80064a0:	3001      	adds	r0, #1
 80064a2:	d14a      	bne.n	800653a <_printf_i+0x1f2>
 80064a4:	f04f 30ff 	mov.w	r0, #4294967295
 80064a8:	b004      	add	sp, #16
 80064aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	f043 0320 	orr.w	r3, r3, #32
 80064b4:	6023      	str	r3, [r4, #0]
 80064b6:	4833      	ldr	r0, [pc, #204]	@ (8006584 <_printf_i+0x23c>)
 80064b8:	2778      	movs	r7, #120	@ 0x78
 80064ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	6831      	ldr	r1, [r6, #0]
 80064c2:	061f      	lsls	r7, r3, #24
 80064c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80064c8:	d402      	bmi.n	80064d0 <_printf_i+0x188>
 80064ca:	065f      	lsls	r7, r3, #25
 80064cc:	bf48      	it	mi
 80064ce:	b2ad      	uxthmi	r5, r5
 80064d0:	6031      	str	r1, [r6, #0]
 80064d2:	07d9      	lsls	r1, r3, #31
 80064d4:	bf44      	itt	mi
 80064d6:	f043 0320 	orrmi.w	r3, r3, #32
 80064da:	6023      	strmi	r3, [r4, #0]
 80064dc:	b11d      	cbz	r5, 80064e6 <_printf_i+0x19e>
 80064de:	2310      	movs	r3, #16
 80064e0:	e7ac      	b.n	800643c <_printf_i+0xf4>
 80064e2:	4827      	ldr	r0, [pc, #156]	@ (8006580 <_printf_i+0x238>)
 80064e4:	e7e9      	b.n	80064ba <_printf_i+0x172>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	f023 0320 	bic.w	r3, r3, #32
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	e7f6      	b.n	80064de <_printf_i+0x196>
 80064f0:	4616      	mov	r6, r2
 80064f2:	e7bd      	b.n	8006470 <_printf_i+0x128>
 80064f4:	6833      	ldr	r3, [r6, #0]
 80064f6:	6825      	ldr	r5, [r4, #0]
 80064f8:	6961      	ldr	r1, [r4, #20]
 80064fa:	1d18      	adds	r0, r3, #4
 80064fc:	6030      	str	r0, [r6, #0]
 80064fe:	062e      	lsls	r6, r5, #24
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	d501      	bpl.n	8006508 <_printf_i+0x1c0>
 8006504:	6019      	str	r1, [r3, #0]
 8006506:	e002      	b.n	800650e <_printf_i+0x1c6>
 8006508:	0668      	lsls	r0, r5, #25
 800650a:	d5fb      	bpl.n	8006504 <_printf_i+0x1bc>
 800650c:	8019      	strh	r1, [r3, #0]
 800650e:	2300      	movs	r3, #0
 8006510:	6123      	str	r3, [r4, #16]
 8006512:	4616      	mov	r6, r2
 8006514:	e7bc      	b.n	8006490 <_printf_i+0x148>
 8006516:	6833      	ldr	r3, [r6, #0]
 8006518:	1d1a      	adds	r2, r3, #4
 800651a:	6032      	str	r2, [r6, #0]
 800651c:	681e      	ldr	r6, [r3, #0]
 800651e:	6862      	ldr	r2, [r4, #4]
 8006520:	2100      	movs	r1, #0
 8006522:	4630      	mov	r0, r6
 8006524:	f7f9 fe6c 	bl	8000200 <memchr>
 8006528:	b108      	cbz	r0, 800652e <_printf_i+0x1e6>
 800652a:	1b80      	subs	r0, r0, r6
 800652c:	6060      	str	r0, [r4, #4]
 800652e:	6863      	ldr	r3, [r4, #4]
 8006530:	6123      	str	r3, [r4, #16]
 8006532:	2300      	movs	r3, #0
 8006534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006538:	e7aa      	b.n	8006490 <_printf_i+0x148>
 800653a:	6923      	ldr	r3, [r4, #16]
 800653c:	4632      	mov	r2, r6
 800653e:	4649      	mov	r1, r9
 8006540:	4640      	mov	r0, r8
 8006542:	47d0      	blx	sl
 8006544:	3001      	adds	r0, #1
 8006546:	d0ad      	beq.n	80064a4 <_printf_i+0x15c>
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	079b      	lsls	r3, r3, #30
 800654c:	d413      	bmi.n	8006576 <_printf_i+0x22e>
 800654e:	68e0      	ldr	r0, [r4, #12]
 8006550:	9b03      	ldr	r3, [sp, #12]
 8006552:	4298      	cmp	r0, r3
 8006554:	bfb8      	it	lt
 8006556:	4618      	movlt	r0, r3
 8006558:	e7a6      	b.n	80064a8 <_printf_i+0x160>
 800655a:	2301      	movs	r3, #1
 800655c:	4632      	mov	r2, r6
 800655e:	4649      	mov	r1, r9
 8006560:	4640      	mov	r0, r8
 8006562:	47d0      	blx	sl
 8006564:	3001      	adds	r0, #1
 8006566:	d09d      	beq.n	80064a4 <_printf_i+0x15c>
 8006568:	3501      	adds	r5, #1
 800656a:	68e3      	ldr	r3, [r4, #12]
 800656c:	9903      	ldr	r1, [sp, #12]
 800656e:	1a5b      	subs	r3, r3, r1
 8006570:	42ab      	cmp	r3, r5
 8006572:	dcf2      	bgt.n	800655a <_printf_i+0x212>
 8006574:	e7eb      	b.n	800654e <_printf_i+0x206>
 8006576:	2500      	movs	r5, #0
 8006578:	f104 0619 	add.w	r6, r4, #25
 800657c:	e7f5      	b.n	800656a <_printf_i+0x222>
 800657e:	bf00      	nop
 8006580:	080067a6 	.word	0x080067a6
 8006584:	080067b7 	.word	0x080067b7

08006588 <memmove>:
 8006588:	4288      	cmp	r0, r1
 800658a:	b510      	push	{r4, lr}
 800658c:	eb01 0402 	add.w	r4, r1, r2
 8006590:	d902      	bls.n	8006598 <memmove+0x10>
 8006592:	4284      	cmp	r4, r0
 8006594:	4623      	mov	r3, r4
 8006596:	d807      	bhi.n	80065a8 <memmove+0x20>
 8006598:	1e43      	subs	r3, r0, #1
 800659a:	42a1      	cmp	r1, r4
 800659c:	d008      	beq.n	80065b0 <memmove+0x28>
 800659e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065a6:	e7f8      	b.n	800659a <memmove+0x12>
 80065a8:	4402      	add	r2, r0
 80065aa:	4601      	mov	r1, r0
 80065ac:	428a      	cmp	r2, r1
 80065ae:	d100      	bne.n	80065b2 <memmove+0x2a>
 80065b0:	bd10      	pop	{r4, pc}
 80065b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065ba:	e7f7      	b.n	80065ac <memmove+0x24>

080065bc <_realloc_r>:
 80065bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c0:	4680      	mov	r8, r0
 80065c2:	4615      	mov	r5, r2
 80065c4:	460c      	mov	r4, r1
 80065c6:	b921      	cbnz	r1, 80065d2 <_realloc_r+0x16>
 80065c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065cc:	4611      	mov	r1, r2
 80065ce:	f7ff bb29 	b.w	8005c24 <_malloc_r>
 80065d2:	b92a      	cbnz	r2, 80065e0 <_realloc_r+0x24>
 80065d4:	f7ff fca8 	bl	8005f28 <_free_r>
 80065d8:	2400      	movs	r4, #0
 80065da:	4620      	mov	r0, r4
 80065dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e0:	f000 f81a 	bl	8006618 <_malloc_usable_size_r>
 80065e4:	4285      	cmp	r5, r0
 80065e6:	4606      	mov	r6, r0
 80065e8:	d802      	bhi.n	80065f0 <_realloc_r+0x34>
 80065ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80065ee:	d8f4      	bhi.n	80065da <_realloc_r+0x1e>
 80065f0:	4629      	mov	r1, r5
 80065f2:	4640      	mov	r0, r8
 80065f4:	f7ff fb16 	bl	8005c24 <_malloc_r>
 80065f8:	4607      	mov	r7, r0
 80065fa:	2800      	cmp	r0, #0
 80065fc:	d0ec      	beq.n	80065d8 <_realloc_r+0x1c>
 80065fe:	42b5      	cmp	r5, r6
 8006600:	462a      	mov	r2, r5
 8006602:	4621      	mov	r1, r4
 8006604:	bf28      	it	cs
 8006606:	4632      	movcs	r2, r6
 8006608:	f7ff fc80 	bl	8005f0c <memcpy>
 800660c:	4621      	mov	r1, r4
 800660e:	4640      	mov	r0, r8
 8006610:	f7ff fc8a 	bl	8005f28 <_free_r>
 8006614:	463c      	mov	r4, r7
 8006616:	e7e0      	b.n	80065da <_realloc_r+0x1e>

08006618 <_malloc_usable_size_r>:
 8006618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800661c:	1f18      	subs	r0, r3, #4
 800661e:	2b00      	cmp	r3, #0
 8006620:	bfbc      	itt	lt
 8006622:	580b      	ldrlt	r3, [r1, r0]
 8006624:	18c0      	addlt	r0, r0, r3
 8006626:	4770      	bx	lr

08006628 <_init>:
 8006628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662a:	bf00      	nop
 800662c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800662e:	bc08      	pop	{r3}
 8006630:	469e      	mov	lr, r3
 8006632:	4770      	bx	lr

08006634 <_fini>:
 8006634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006636:	bf00      	nop
 8006638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800663a:	bc08      	pop	{r3}
 800663c:	469e      	mov	lr, r3
 800663e:	4770      	bx	lr
