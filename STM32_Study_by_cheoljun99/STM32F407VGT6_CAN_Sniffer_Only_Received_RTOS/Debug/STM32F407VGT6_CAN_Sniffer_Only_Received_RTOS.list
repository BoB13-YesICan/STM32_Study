
STM32F407VGT6_CAN_Sniffer_Only_Received_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a04  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08007b94  08007b94  00008b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d18  08007d18  00009064  2**0
                  CONTENTS
  4 .ARM          00000008  08007d18  08007d18  00008d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d20  08007d20  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d20  08007d20  00008d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d24  08007d24  00008d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007d28  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009064  2**0
                  CONTENTS
 10 .bss          00004230  20000064  20000064  00009064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004294  20004294  00009064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001330e  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003211  00000000  00000000  0001c3a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001320  00000000  00000000  0001f5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9d  00000000  00000000  000208d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023868  00000000  00000000  00021775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ee1  00000000  00000000  00044fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d61ab  00000000  00000000  00058ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012f069  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000550c  00000000  00000000  0012f0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000092  00000000  00000000  001345b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b7c 	.word	0x08007b7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08007b7c 	.word	0x08007b7c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4a07      	ldr	r2, [pc, #28]	@ (800058c <vApplicationGetIdleTaskMemory+0x2c>)
 8000570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <vApplicationGetIdleTaskMemory+0x30>)
 8000576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2280      	movs	r2, #128	@ 0x80
 800057c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000080 	.word	0x20000080
 8000590:	200000d4 	.word	0x200000d4

08000594 <bootLEDIndicator>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define NUMBER_BLINKS 20

void bootLEDIndicator(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
	int blinkCounter = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
	while (blinkCounter < NUMBER_BLINKS) {
 800059e:	e00a      	b.n	80005b6 <bootLEDIndicator+0x22>
		HAL_GPIO_TogglePin(ORANGE_LED_SYSTEM_GPIO_Port, ORANGE_LED_SYSTEM_Pin);
 80005a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a4:	480a      	ldr	r0, [pc, #40]	@ (80005d0 <bootLEDIndicator+0x3c>)
 80005a6:	f001 fed6 	bl	8002356 <HAL_GPIO_TogglePin>
		HAL_Delay(30);
 80005aa:	201e      	movs	r0, #30
 80005ac:	f000 fe6e 	bl	800128c <HAL_Delay>
		blinkCounter++;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3301      	adds	r3, #1
 80005b4:	607b      	str	r3, [r7, #4]
	while (blinkCounter < NUMBER_BLINKS) {
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b13      	cmp	r3, #19
 80005ba:	ddf1      	ble.n	80005a0 <bootLEDIndicator+0xc>
	}
	HAL_GPIO_WritePin(ORANGE_LED_SYSTEM_GPIO_Port, ORANGE_LED_SYSTEM_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c2:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <bootLEDIndicator+0x3c>)
 80005c4:	f001 feae 	bl	8002324 <HAL_GPIO_WritePin>
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40020c00 	.word	0x40020c00

080005d4 <setSinfferCANFilter>:


void setSinfferCANFilter(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	@ 0x28
 80005d8:	af00      	add	r7, sp, #0
	/* Default filter - accept all to CAN_FIFO*/
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdHigh = 0x00005;
 80005de:	2305      	movs	r3, #5
 80005e0:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterBank = 0x0000;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005ea:	2301      	movs	r3, #1
 80005ec:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x200 << 5;  //11-bit ID, in top bits
 80005ee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005f2:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000608:	463b      	mov	r3, r7
 800060a:	4619      	mov	r1, r3
 800060c:	4803      	ldr	r0, [pc, #12]	@ (800061c <setSinfferCANFilter+0x48>)
 800060e:	f000 ff5d 	bl	80014cc <HAL_CAN_ConfigFilter>
}
 8000612:	bf00      	nop
 8000614:	3728      	adds	r7, #40	@ 0x28
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200002d4 	.word	0x200002d4

08000620 <serializeDatagram>:


uint8_t serializeDatagram(uint8_t *pExitBuffer, CAN_RxHeaderTypeDef receivedCANHeader, uint8_t *rxData) {
 8000620:	b084      	sub	sp, #16
 8000622:	b580      	push	{r7, lr}
 8000624:	b08e      	sub	sp, #56	@ 0x38
 8000626:	af04      	add	r7, sp, #16
 8000628:	6078      	str	r0, [r7, #4]
 800062a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800062e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    uint8_t cursor = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // TIM1의 마이크로초 값을 먼저 읽는다
    uint32_t microseconds = __HAL_TIM_GET_COUNTER(&htim1);  // TIM1 타이머 카운터 값 (마이크로초 단위)
 8000638:	4b67      	ldr	r3, [pc, #412]	@ (80007d8 <serializeDatagram+0x1b8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800063e:	61fb      	str	r3, [r7, #28]

    // 그 후 HAL_GetTick()을 사용해 밀리초 값을 읽는다
    uint32_t millis = HAL_GetTick();
 8000640:	f000 fe18 	bl	8001274 <HAL_GetTick>
 8000644:	61b8      	str	r0, [r7, #24]

    // 밀리초 값을 시/분/초로 변환
    uint32_t ms = millis % 1000;           // 밀리초 (0-999)
 8000646:	69bb      	ldr	r3, [r7, #24]
 8000648:	4a64      	ldr	r2, [pc, #400]	@ (80007dc <serializeDatagram+0x1bc>)
 800064a:	fba2 1203 	umull	r1, r2, r2, r3
 800064e:	0992      	lsrs	r2, r2, #6
 8000650:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000654:	fb01 f202 	mul.w	r2, r1, r2
 8000658:	1a9b      	subs	r3, r3, r2
 800065a:	617b      	str	r3, [r7, #20]
    uint32_t seconds = (millis / 1000) % 60;   // 초 (0-59)
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	4a5f      	ldr	r2, [pc, #380]	@ (80007dc <serializeDatagram+0x1bc>)
 8000660:	fba2 2303 	umull	r2, r3, r2, r3
 8000664:	099a      	lsrs	r2, r3, #6
 8000666:	4b5e      	ldr	r3, [pc, #376]	@ (80007e0 <serializeDatagram+0x1c0>)
 8000668:	fba3 1302 	umull	r1, r3, r3, r2
 800066c:	0959      	lsrs	r1, r3, #5
 800066e:	460b      	mov	r3, r1
 8000670:	011b      	lsls	r3, r3, #4
 8000672:	1a5b      	subs	r3, r3, r1
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	613b      	str	r3, [r7, #16]
    uint32_t minutes = (millis / 60000) % 60;  // 분 (0-59)
 800067a:	69bb      	ldr	r3, [r7, #24]
 800067c:	4a59      	ldr	r2, [pc, #356]	@ (80007e4 <serializeDatagram+0x1c4>)
 800067e:	fba2 2303 	umull	r2, r3, r2, r3
 8000682:	0b9a      	lsrs	r2, r3, #14
 8000684:	4b56      	ldr	r3, [pc, #344]	@ (80007e0 <serializeDatagram+0x1c0>)
 8000686:	fba3 1302 	umull	r1, r3, r3, r2
 800068a:	0959      	lsrs	r1, r3, #5
 800068c:	460b      	mov	r3, r1
 800068e:	011b      	lsls	r3, r3, #4
 8000690:	1a5b      	subs	r3, r3, r1
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	60fb      	str	r3, [r7, #12]
    uint32_t hours = (millis / 3600000) % 24;  // 시간 (0-23)
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	4a53      	ldr	r2, [pc, #332]	@ (80007e8 <serializeDatagram+0x1c8>)
 800069c:	fba2 2303 	umull	r2, r3, r2, r3
 80006a0:	0d5a      	lsrs	r2, r3, #21
 80006a2:	4b52      	ldr	r3, [pc, #328]	@ (80007ec <serializeDatagram+0x1cc>)
 80006a4:	fba3 1302 	umull	r1, r3, r3, r2
 80006a8:	0919      	lsrs	r1, r3, #4
 80006aa:	460b      	mov	r3, r1
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	440b      	add	r3, r1
 80006b0:	00db      	lsls	r3, r3, #3
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	60bb      	str	r3, [r7, #8]

    // HH:MM:SS.mmm.uuu 형식으로 타임스탬프 출력
    cursor += sprintf((char*) pExitBuffer + cursor, "[%02lu:%02lu:%02lu.%03lu.%03lu] ",
 80006b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	18d0      	adds	r0, r2, r3
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	9302      	str	r3, [sp, #8]
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	693b      	ldr	r3, [r7, #16]
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	68ba      	ldr	r2, [r7, #8]
 80006ce:	4948      	ldr	r1, [pc, #288]	@ (80007f0 <serializeDatagram+0x1d0>)
 80006d0:	f006 fdac 	bl	800722c <siprintf>
 80006d4:	4603      	mov	r3, r0
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006dc:	4413      	add	r3, r2
 80006de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                      hours, minutes, seconds, ms, microseconds);

    // CAN 식별자 출력 (확장 ID 또는 표준 ID)
    if (receivedCANHeader.IDE == CAN_ID_EXT) {
 80006e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006e4:	2b04      	cmp	r3, #4
 80006e6:	d110      	bne.n	800070a <serializeDatagram+0xea>
        cursor += sprintf((char*) pExitBuffer + cursor, "EXT CAN ID: 0x%" PRIx32 " ", receivedCANHeader.ExtId);
 80006e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	4413      	add	r3, r2
 80006f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80006f2:	4940      	ldr	r1, [pc, #256]	@ (80007f4 <serializeDatagram+0x1d4>)
 80006f4:	4618      	mov	r0, r3
 80006f6:	f006 fd99 	bl	800722c <siprintf>
 80006fa:	4603      	mov	r3, r0
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000702:	4413      	add	r3, r2
 8000704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000708:	e00f      	b.n	800072a <serializeDatagram+0x10a>
    } else {
        cursor += sprintf((char*) pExitBuffer + cursor, "STD CAN ID: 0x%" PRIx32 " ", receivedCANHeader.StdId);
 800070a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000714:	4938      	ldr	r1, [pc, #224]	@ (80007f8 <serializeDatagram+0x1d8>)
 8000716:	4618      	mov	r0, r3
 8000718:	f006 fd88 	bl	800722c <siprintf>
 800071c:	4603      	mov	r3, r0
 800071e:	b2da      	uxtb	r2, r3
 8000720:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000724:	4413      	add	r3, r2
 8000726:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    // DLC (Data Length Code) 출력
    cursor += sprintf((char*) pExitBuffer + cursor, "DLC: %lu ", (unsigned long)receivedCANHeader.DLC);
 800072a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	4413      	add	r3, r2
 8000732:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000734:	4931      	ldr	r1, [pc, #196]	@ (80007fc <serializeDatagram+0x1dc>)
 8000736:	4618      	mov	r0, r3
 8000738:	f006 fd78 	bl	800722c <siprintf>
 800073c:	4603      	mov	r3, r0
 800073e:	b2da      	uxtb	r2, r3
 8000740:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000744:	4413      	add	r3, r2
 8000746:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // 데이터 출력 (데이터 프레임인 경우)
    if (receivedCANHeader.RTR == CAN_RTR_DATA) {
 800074a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800074c:	2b00      	cmp	r3, #0
 800074e:	d12b      	bne.n	80007a8 <serializeDatagram+0x188>
        cursor += sprintf((char*) pExitBuffer + cursor, "Data: ");
 8000750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	4413      	add	r3, r2
 8000758:	4929      	ldr	r1, [pc, #164]	@ (8000800 <serializeDatagram+0x1e0>)
 800075a:	4618      	mov	r0, r3
 800075c:	f006 fd66 	bl	800722c <siprintf>
 8000760:	4603      	mov	r3, r0
 8000762:	b2da      	uxtb	r2, r3
 8000764:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000768:	4413      	add	r3, r2
 800076a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for (int i = 0; i < receivedCANHeader.DLC; i++) {
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
 8000772:	e015      	b.n	80007a0 <serializeDatagram+0x180>
            cursor += sprintf((char*) pExitBuffer + cursor, "%02X ", rxData[i]);
 8000774:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	18d0      	adds	r0, r2, r3
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000780:	4413      	add	r3, r2
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	491f      	ldr	r1, [pc, #124]	@ (8000804 <serializeDatagram+0x1e4>)
 8000788:	f006 fd50 	bl	800722c <siprintf>
 800078c:	4603      	mov	r3, r0
 800078e:	b2da      	uxtb	r2, r3
 8000790:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000794:	4413      	add	r3, r2
 8000796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for (int i = 0; i < receivedCANHeader.DLC; i++) {
 800079a:	6a3b      	ldr	r3, [r7, #32]
 800079c:	3301      	adds	r3, #1
 800079e:	623b      	str	r3, [r7, #32]
 80007a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80007a2:	6a3b      	ldr	r3, [r7, #32]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d8e5      	bhi.n	8000774 <serializeDatagram+0x154>
        }
    }

    // 끝에 개행 추가
    cursor += sprintf((char*) pExitBuffer + cursor, "\r\n");
 80007a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	4413      	add	r3, r2
 80007b0:	4915      	ldr	r1, [pc, #84]	@ (8000808 <serializeDatagram+0x1e8>)
 80007b2:	4618      	mov	r0, r3
 80007b4:	f006 fd3a 	bl	800722c <siprintf>
 80007b8:	4603      	mov	r3, r0
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80007c0:	4413      	add	r3, r2
 80007c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    return cursor;
 80007c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3728      	adds	r7, #40	@ 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007d4:	b004      	add	sp, #16
 80007d6:	4770      	bx	lr
 80007d8:	200002fc 	.word	0x200002fc
 80007dc:	10624dd3 	.word	0x10624dd3
 80007e0:	88888889 	.word	0x88888889
 80007e4:	45e7b273 	.word	0x45e7b273
 80007e8:	95217cb1 	.word	0x95217cb1
 80007ec:	aaaaaaab 	.word	0xaaaaaaab
 80007f0:	08007b94 	.word	0x08007b94
 80007f4:	08007bb8 	.word	0x08007bb8
 80007f8:	08007bcc 	.word	0x08007bcc
 80007fc:	08007be0 	.word	0x08007be0
 8000800:	08007bec 	.word	0x08007bec
 8000804:	08007bf4 	.word	0x08007bf4
 8000808:	08007bfc 	.word	0x08007bfc

0800080c <HAL_CAN_RxFifo0MsgPendingCallback>:



 void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxMessageHeader,rxDataReceived) == HAL_OK) {
 8000814:	4b0d      	ldr	r3, [pc, #52]	@ (800084c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000816:	4a0e      	ldr	r2, [pc, #56]	@ (8000850 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000818:	2100      	movs	r1, #0
 800081a:	480e      	ldr	r0, [pc, #56]	@ (8000854 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800081c:	f000 ff7a 	bl	8001714 <HAL_CAN_GetRxMessage>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d109      	bne.n	800083a <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
  		if (snifferAtivityStatus == SNIFFER_ACTIVE) {
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d105      	bne.n	800083a <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
  			osSignalSet(receivedDatagramTaskId, osAnySignal);
 800082e:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f003 ff7f 	bl	8004738 <osSignalSet>

  		}
  	}
  	HAL_GPIO_TogglePin(RED_LED_CANRX_GPIO_Port,RED_LED_CANRX_Pin);
 800083a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800083e:	4808      	ldr	r0, [pc, #32]	@ (8000860 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000840:	f001 fd89 	bl	8002356 <HAL_GPIO_TogglePin>

 }
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200003b0 	.word	0x200003b0
 8000850:	20000394 	.word	0x20000394
 8000854:	200002d4 	.word	0x200002d4
 8000858:	20000000 	.word	0x20000000
 800085c:	20000384 	.word	0x20000384
 8000860:	40020c00 	.word	0x40020c00

08000864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000864:	b5b0      	push	{r4, r5, r7, lr}
 8000866:	b09c      	sub	sp, #112	@ 0x70
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086a:	f000 fccd 	bl	8001208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086e:	f000 f883 	bl	8000978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000872:	f000 f99b 	bl	8000bac <MX_GPIO_Init>
  MX_CAN1_Init();
 8000876:	f000 f8e9 	bl	8000a4c <MX_CAN1_Init>
  MX_USART1_UART_Init();
 800087a:	f000 f96d 	bl	8000b58 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800087e:	f000 f91b 	bl	8000ab8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  setSinfferCANFilter();
 8000882:	f7ff fea7 	bl	80005d4 <setSinfferCANFilter>
  HAL_CAN_Start(&hcan1);
 8000886:	4830      	ldr	r0, [pc, #192]	@ (8000948 <main+0xe4>)
 8000888:	f000 ff00 	bl	800168c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800088c:	2102      	movs	r1, #2
 800088e:	482e      	ldr	r0, [pc, #184]	@ (8000948 <main+0xe4>)
 8000890:	f001 f852 	bl	8001938 <HAL_CAN_ActivateNotification>

  // Start TIM1 for microsecond timestamping
  HAL_TIM_Base_Start(&htim1);
 8000894:	482d      	ldr	r0, [pc, #180]	@ (800094c <main+0xe8>)
 8000896:	f002 fa64 	bl	8002d62 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  canDatagramsQueue = osMailCreate(osMailQ(canDatagramsQueue), NULL);
 800089a:	2100      	movs	r1, #0
 800089c:	482c      	ldr	r0, [pc, #176]	@ (8000950 <main+0xec>)
 800089e:	f004 f8d7 	bl	8004a50 <osMailCreate>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4a2b      	ldr	r2, [pc, #172]	@ (8000954 <main+0xf0>)
 80008a6:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80008a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000958 <main+0xf4>)
 80008aa:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80008ae:	461d      	mov	r5, r3
 80008b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80008bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f003 fec5 	bl	8004652 <osThreadCreate>
 80008c8:	4603      	mov	r3, r0
 80008ca:	4a24      	ldr	r2, [pc, #144]	@ (800095c <main+0xf8>)
 80008cc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  osThreadDef(forwardDatagramsTask, fordwardDatagramsThread, osPriorityNormal,0, 640);
 80008ce:	4b24      	ldr	r3, [pc, #144]	@ (8000960 <main+0xfc>)
 80008d0:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80008d4:	461d      	mov	r5, r3
 80008d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  forwardDatagramTaskId = osThreadCreate(osThread(forwardDatagramsTask),NULL);
 80008e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f003 feb2 	bl	8004652 <osThreadCreate>
 80008ee:	4603      	mov	r3, r0
 80008f0:	4a1c      	ldr	r2, [pc, #112]	@ (8000964 <main+0x100>)
 80008f2:	6013      	str	r3, [r2, #0]

  osThreadDef(receiveDatagramsTask, recieivedDatagramsThread,osPriorityNormal, 0, 640);
 80008f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000968 <main+0x104>)
 80008f6:	f107 041c 	add.w	r4, r7, #28
 80008fa:	461d      	mov	r5, r3
 80008fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000900:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000904:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receivedDatagramTaskId = osThreadCreate(osThread(receiveDatagramsTask),NULL);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f003 fe9f 	bl	8004652 <osThreadCreate>
 8000914:	4603      	mov	r3, r0
 8000916:	4a15      	ldr	r2, [pc, #84]	@ (800096c <main+0x108>)
 8000918:	6013      	str	r3, [r2, #0]

  osThreadDef(idleTask, idleThread, osPriorityIdle, 0, 128);
 800091a:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <main+0x10c>)
 800091c:	463c      	mov	r4, r7
 800091e:	461d      	mov	r5, r3
 8000920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000924:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000928:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  idleTaskId = osThreadCreate(osThread(idleTask), NULL);
 800092c:	463b      	mov	r3, r7
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f003 fe8e 	bl	8004652 <osThreadCreate>
 8000936:	4603      	mov	r3, r0
 8000938:	4a0e      	ldr	r2, [pc, #56]	@ (8000974 <main+0x110>)
 800093a:	6013      	str	r3, [r2, #0]

  bootLEDIndicator();
 800093c:	f7ff fe2a 	bl	8000594 <bootLEDIndicator>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000940:	f003 fe80 	bl	8004644 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <main+0xe0>
 8000948:	200002d4 	.word	0x200002d4
 800094c:	200002fc 	.word	0x200002fc
 8000950:	08007cc0 	.word	0x08007cc0
 8000954:	20000390 	.word	0x20000390
 8000958:	08007c0c 	.word	0x08007c0c
 800095c:	2000037c 	.word	0x2000037c
 8000960:	08007c40 	.word	0x08007c40
 8000964:	20000380 	.word	0x20000380
 8000968:	08007c74 	.word	0x08007c74
 800096c:	20000384 	.word	0x20000384
 8000970:	08007c9c 	.word	0x08007c9c
 8000974:	20000388 	.word	0x20000388

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b094      	sub	sp, #80	@ 0x50
 800097c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097e:	f107 0320 	add.w	r3, r7, #32
 8000982:	2230      	movs	r2, #48	@ 0x30
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f006 fc70 	bl	800726c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	4b28      	ldr	r3, [pc, #160]	@ (8000a44 <SystemClock_Config+0xcc>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a4:	4a27      	ldr	r2, [pc, #156]	@ (8000a44 <SystemClock_Config+0xcc>)
 80009a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ac:	4b25      	ldr	r3, [pc, #148]	@ (8000a44 <SystemClock_Config+0xcc>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b8:	2300      	movs	r3, #0
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	4b22      	ldr	r3, [pc, #136]	@ (8000a48 <SystemClock_Config+0xd0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a21      	ldr	r2, [pc, #132]	@ (8000a48 <SystemClock_Config+0xd0>)
 80009c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a48 <SystemClock_Config+0xd0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d4:	2301      	movs	r3, #1
 80009d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009de:	2302      	movs	r3, #2
 80009e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009e8:	2304      	movs	r3, #4
 80009ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009ec:	23a8      	movs	r3, #168	@ 0xa8
 80009ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009f4:	2304      	movs	r3, #4
 80009f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f8:	f107 0320 	add.w	r3, r7, #32
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 fcc5 	bl	800238c <HAL_RCC_OscConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a08:	f000 f9e4 	bl	8000dd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a10:	2302      	movs	r3, #2
 8000a12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a18:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	2105      	movs	r1, #5
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 ff1c 	bl	8002868 <HAL_RCC_ClockConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a36:	f000 f9cd 	bl	8000dd4 <Error_Handler>
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	3750      	adds	r7, #80	@ 0x50
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40007000 	.word	0x40007000

08000a4c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a50:	4b17      	ldr	r3, [pc, #92]	@ (8000ab0 <MX_CAN1_Init+0x64>)
 8000a52:	4a18      	ldr	r2, [pc, #96]	@ (8000ab4 <MX_CAN1_Init+0x68>)
 8000a54:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000a56:	4b16      	ldr	r3, [pc, #88]	@ (8000ab0 <MX_CAN1_Init+0x64>)
 8000a58:	220c      	movs	r2, #12
 8000a5a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <MX_CAN1_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a62:	4b13      	ldr	r3, [pc, #76]	@ (8000ab0 <MX_CAN1_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000a68:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <MX_CAN1_Init+0x64>)
 8000a6a:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000a6e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <MX_CAN1_Init+0x64>)
 8000a72:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000a76:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a78:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab0 <MX_CAN1_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <MX_CAN1_Init+0x64>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <MX_CAN1_Init+0x64>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <MX_CAN1_Init+0x64>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a90:	4b07      	ldr	r3, [pc, #28]	@ (8000ab0 <MX_CAN1_Init+0x64>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <MX_CAN1_Init+0x64>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	@ (8000ab0 <MX_CAN1_Init+0x64>)
 8000a9e:	f000 fc19 	bl	80012d4 <HAL_CAN_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000aa8:	f000 f994 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200002d4 	.word	0x200002d4
 8000ab4:	40006400 	.word	0x40006400

08000ab8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000acc:	463b      	mov	r3, r7
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <MX_TIM1_Init+0x98>)
 8000ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8000b54 <MX_TIM1_Init+0x9c>)
 8000ad8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8000ada:	4b1d      	ldr	r3, [pc, #116]	@ (8000b50 <MX_TIM1_Init+0x98>)
 8000adc:	2253      	movs	r2, #83	@ 0x53
 8000ade:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b50 <MX_TIM1_Init+0x98>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <MX_TIM1_Init+0x98>)
 8000ae8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000aec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aee:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <MX_TIM1_Init+0x98>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000af4:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <MX_TIM1_Init+0x98>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <MX_TIM1_Init+0x98>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b00:	4813      	ldr	r0, [pc, #76]	@ (8000b50 <MX_TIM1_Init+0x98>)
 8000b02:	f002 f903 	bl	8002d0c <HAL_TIM_Base_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b0c:	f000 f962 	bl	8000dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b16:	f107 0308 	add.w	r3, r7, #8
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480c      	ldr	r0, [pc, #48]	@ (8000b50 <MX_TIM1_Init+0x98>)
 8000b1e:	f002 fa70 	bl	8003002 <HAL_TIM_ConfigClockSource>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b28:	f000 f954 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b34:	463b      	mov	r3, r7
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_TIM1_Init+0x98>)
 8000b3a:	f002 fc89 	bl	8003450 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b44:	f000 f946 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200002fc 	.word	0x200002fc
 8000b54:	40010000 	.word	0x40010000

08000b58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ba8 <MX_USART1_UART_Init+0x50>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b62:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b90:	f002 fcee 	bl	8003570 <HAL_UART_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b9a:	f000 f91b 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	2000033c 	.word	0x2000033c
 8000ba8:	40011000 	.word	0x40011000

08000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	@ 0x28
 8000bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b27      	ldr	r3, [pc, #156]	@ (8000c64 <MX_GPIO_Init+0xb8>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a26      	ldr	r2, [pc, #152]	@ (8000c64 <MX_GPIO_Init+0xb8>)
 8000bcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b24      	ldr	r3, [pc, #144]	@ (8000c64 <MX_GPIO_Init+0xb8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b20      	ldr	r3, [pc, #128]	@ (8000c64 <MX_GPIO_Init+0xb8>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a1f      	ldr	r2, [pc, #124]	@ (8000c64 <MX_GPIO_Init+0xb8>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b1d      	ldr	r3, [pc, #116]	@ (8000c64 <MX_GPIO_Init+0xb8>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0308 	and.w	r3, r3, #8
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <MX_GPIO_Init+0xb8>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a18      	ldr	r2, [pc, #96]	@ (8000c64 <MX_GPIO_Init+0xb8>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b16      	ldr	r3, [pc, #88]	@ (8000c64 <MX_GPIO_Init+0xb8>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <MX_GPIO_Init+0xb8>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a11      	ldr	r2, [pc, #68]	@ (8000c64 <MX_GPIO_Init+0xb8>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <MX_GPIO_Init+0xb8>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_IDLE_Pin|ORANGE_LED_SYSTEM_Pin|RED_LED_CANRX_Pin|BLUE_LED_CANTX_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000c38:	480b      	ldr	r0, [pc, #44]	@ (8000c68 <MX_GPIO_Init+0xbc>)
 8000c3a:	f001 fb73 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN_LED_IDLE_Pin ORANGE_LED_SYSTEM_Pin RED_LED_CANRX_Pin BLUE_LED_CANTX_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_IDLE_Pin|ORANGE_LED_SYSTEM_Pin|RED_LED_CANRX_Pin|BLUE_LED_CANTX_Pin;
 8000c3e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	4804      	ldr	r0, [pc, #16]	@ (8000c68 <MX_GPIO_Init+0xbc>)
 8000c58:	f001 f9c8 	bl	8001fec <HAL_GPIO_Init>

}
 8000c5c:	bf00      	nop
 8000c5e:	3728      	adds	r7, #40	@ 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020c00 	.word	0x40020c00

08000c6c <recieivedDatagramsThread>:

/* USER CODE BEGIN 4 */
void recieivedDatagramsThread(void const *argument) {
 8000c6c:	b5b0      	push	{r4, r5, r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	//CAN_RxHeaderTypeDef rxMessageHeader;
	//uint8_t rxDataReceived[8];
	osEvent evt;
	while (true) {
		evt = osSignalWait(osAnySignal, 1);//osWaitForever
 8000c74:	f107 0308 	add.w	r3, r7, #8
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f003 fd9b 	bl	80047b8 <osSignalWait>
		if (evt.status == osEventSignal) {
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	2b08      	cmp	r3, #8
 8000c86:	d122      	bne.n	8000cce <recieivedDatagramsThread+0x62>
			CANMessage *msgToSend = osMailCAlloc(canDatagramsQueue, noWait);
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <recieivedDatagramsThread+0x68>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f003 ff4b 	bl	8004b2a <osMailCAlloc>
 8000c94:	6178      	str	r0, [r7, #20]
			if (msgToSend != NULL) {
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d015      	beq.n	8000cc8 <recieivedDatagramsThread+0x5c>
				 msgToSend->header = rxMessageHeader;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd8 <recieivedDatagramsThread+0x6c>)
 8000ca0:	f103 0408 	add.w	r4, r3, #8
 8000ca4:	4615      	mov	r5, r2
 8000ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000caa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				 strcpy((char*) msgToSend->data, (char*) rxDataReceived);
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	4909      	ldr	r1, [pc, #36]	@ (8000cdc <recieivedDatagramsThread+0x70>)
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f006 fb0c 	bl	80072d4 <strcpy>
				 osMailPut(canDatagramsQueue, msgToSend);
 8000cbc:	4b05      	ldr	r3, [pc, #20]	@ (8000cd4 <recieivedDatagramsThread+0x68>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	6979      	ldr	r1, [r7, #20]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f003 ff54 	bl	8004b70 <osMailPut>
			}
			osThreadYield();
 8000cc8:	f003 fd10 	bl	80046ec <osThreadYield>
 8000ccc:	e7d2      	b.n	8000c74 <recieivedDatagramsThread+0x8>
		}
		else{
			osThreadYield();
 8000cce:	f003 fd0d 	bl	80046ec <osThreadYield>
		evt = osSignalWait(osAnySignal, 1);//osWaitForever
 8000cd2:	e7cf      	b.n	8000c74 <recieivedDatagramsThread+0x8>
 8000cd4:	20000390 	.word	0x20000390
 8000cd8:	20000394 	.word	0x20000394
 8000cdc:	200003b0 	.word	0x200003b0

08000ce0 <fordwardDatagramsThread>:
		}
	}
}
*/

void fordwardDatagramsThread(void const *argument) {
 8000ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ce2:	b0a7      	sub	sp, #156	@ 0x9c
 8000ce4:	af06      	add	r7, sp, #24
 8000ce6:	6078      	str	r0, [r7, #4]
	uint8_t serializedDatagram[100] = { 0 };
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	f107 0318 	add.w	r3, r7, #24
 8000cf0:	2260      	movs	r2, #96	@ 0x60
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f006 fab9 	bl	800726c <memset>
	uint8_t lenSerialized;
	osEvent evt;
	CANMessage *dequeuedMsg;
	while (true) {
		evt = osMailGet(canDatagramsQueue, 1);	//osWaitForever
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000d74 <fordwardDatagramsThread+0x94>)
 8000cfc:	6819      	ldr	r1, [r3, #0]
 8000cfe:	f107 0308 	add.w	r3, r7, #8
 8000d02:	2201      	movs	r2, #1
 8000d04:	4618      	mov	r0, r3
 8000d06:	f003 ff71 	bl	8004bec <osMailGet>
		if (evt.status == osEventMail) {
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	2b20      	cmp	r3, #32
 8000d0e:	d12d      	bne.n	8000d6c <fordwardDatagramsThread+0x8c>
			dequeuedMsg = evt.value.p;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	67fb      	str	r3, [r7, #124]	@ 0x7c
			lenSerialized = serializeDatagram(serializedDatagram,dequeuedMsg->header, dequeuedMsg->data);
 8000d14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000d16:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 8000d18:	f107 0614 	add.w	r6, r7, #20
 8000d1c:	9304      	str	r3, [sp, #16]
 8000d1e:	466d      	mov	r5, sp
 8000d20:	f104 0314 	add.w	r3, r4, #20
 8000d24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d26:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000d2a:	f104 0308 	add.w	r3, r4, #8
 8000d2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d30:	4630      	mov	r0, r6
 8000d32:	f7ff fc75 	bl	8000620 <serializeDatagram>
 8000d36:	4603      	mov	r3, r0
 8000d38:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
			HAL_UART_Transmit(&huart1, serializedDatagram, lenSerialized,HAL_MAX_DELAY);
 8000d3c:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	f107 0114 	add.w	r1, r7, #20
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	480b      	ldr	r0, [pc, #44]	@ (8000d78 <fordwardDatagramsThread+0x98>)
 8000d4c:	f002 fc5d 	bl	800360a <HAL_UART_Transmit>
			HAL_GPIO_TogglePin(BLUE_LED_CANTX_GPIO_Port, BLUE_LED_CANTX_Pin);
 8000d50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d54:	4809      	ldr	r0, [pc, #36]	@ (8000d7c <fordwardDatagramsThread+0x9c>)
 8000d56:	f001 fafe 	bl	8002356 <HAL_GPIO_TogglePin>
			osMailFree(canDatagramsQueue, dequeuedMsg);
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <fordwardDatagramsThread+0x94>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000d60:	4618      	mov	r0, r3
 8000d62:	f003 ffb7 	bl	8004cd4 <osMailFree>
			osThreadYield();
 8000d66:	f003 fcc1 	bl	80046ec <osThreadYield>
 8000d6a:	e7c6      	b.n	8000cfa <fordwardDatagramsThread+0x1a>

		}else{
			osThreadYield();
 8000d6c:	f003 fcbe 	bl	80046ec <osThreadYield>
		evt = osMailGet(canDatagramsQueue, 1);	//osWaitForever
 8000d70:	e7c3      	b.n	8000cfa <fordwardDatagramsThread+0x1a>
 8000d72:	bf00      	nop
 8000d74:	20000390 	.word	0x20000390
 8000d78:	2000033c 	.word	0x2000033c
 8000d7c:	40020c00 	.word	0x40020c00

08000d80 <idleThread>:
		}
	}
}


void idleThread(void const *argument) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	while (true) {
		HAL_GPIO_TogglePin(GREEN_LED_IDLE_GPIO_Port,GREEN_LED_IDLE_Pin);
 8000d88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d8c:	4803      	ldr	r0, [pc, #12]	@ (8000d9c <idleThread+0x1c>)
 8000d8e:	f001 fae2 	bl	8002356 <HAL_GPIO_TogglePin>
		osDelay(100);
 8000d92:	2064      	movs	r0, #100	@ 0x64
 8000d94:	f003 fcbc 	bl	8004710 <osDelay>
		HAL_GPIO_TogglePin(GREEN_LED_IDLE_GPIO_Port,GREEN_LED_IDLE_Pin);
 8000d98:	bf00      	nop
 8000d9a:	e7f5      	b.n	8000d88 <idleThread+0x8>
 8000d9c:	40020c00 	.word	0x40020c00

08000da0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000da8:	2001      	movs	r0, #1
 8000daa:	f003 fcb1 	bl	8004710 <osDelay>
 8000dae:	e7fb      	b.n	8000da8 <StartDefaultTask+0x8>

08000db0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a04      	ldr	r2, [pc, #16]	@ (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d101      	bne.n	8000dc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dc2:	f000 fa43 	bl	800124c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40001000 	.word	0x40001000

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
}
 8000dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <Error_Handler+0x8>

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <HAL_MspInit+0x54>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dee:	4a11      	ldr	r2, [pc, #68]	@ (8000e34 <HAL_MspInit+0x54>)
 8000df0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000df4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000df6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <HAL_MspInit+0x54>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	4b0b      	ldr	r3, [pc, #44]	@ (8000e34 <HAL_MspInit+0x54>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <HAL_MspInit+0x54>)
 8000e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e12:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <HAL_MspInit+0x54>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	210f      	movs	r1, #15
 8000e22:	f06f 0001 	mvn.w	r0, #1
 8000e26:	f001 f895 	bl	8001f54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800

08000e38 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	@ 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a1d      	ldr	r2, [pc, #116]	@ (8000ecc <HAL_CAN_MspInit+0x94>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d134      	bne.n	8000ec4 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed0 <HAL_CAN_MspInit+0x98>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e62:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed0 <HAL_CAN_MspInit+0x98>)
 8000e64:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e6a:	4b19      	ldr	r3, [pc, #100]	@ (8000ed0 <HAL_CAN_MspInit+0x98>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <HAL_CAN_MspInit+0x98>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a14      	ldr	r2, [pc, #80]	@ (8000ed0 <HAL_CAN_MspInit+0x98>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <HAL_CAN_MspInit+0x98>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ea4:	2309      	movs	r3, #9
 8000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	4809      	ldr	r0, [pc, #36]	@ (8000ed4 <HAL_CAN_MspInit+0x9c>)
 8000eb0:	f001 f89c 	bl	8001fec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2105      	movs	r1, #5
 8000eb8:	2014      	movs	r0, #20
 8000eba:	f001 f84b 	bl	8001f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ebe:	2014      	movs	r0, #20
 8000ec0:	f001 f864 	bl	8001f8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	@ 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40006400 	.word	0x40006400
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020400 	.word	0x40020400

08000ed8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0b      	ldr	r2, [pc, #44]	@ (8000f14 <HAL_TIM_Base_MspInit+0x3c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d10d      	bne.n	8000f06 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <HAL_TIM_Base_MspInit+0x40>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef2:	4a09      	ldr	r2, [pc, #36]	@ (8000f18 <HAL_TIM_Base_MspInit+0x40>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000efa:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <HAL_TIM_Base_MspInit+0x40>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40010000 	.word	0x40010000
 8000f18:	40023800 	.word	0x40023800

08000f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	@ 0x28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a2c      	ldr	r2, [pc, #176]	@ (8000fec <HAL_UART_MspInit+0xd0>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d152      	bne.n	8000fe4 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff0 <HAL_UART_MspInit+0xd4>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f46:	4a2a      	ldr	r2, [pc, #168]	@ (8000ff0 <HAL_UART_MspInit+0xd4>)
 8000f48:	f043 0310 	orr.w	r3, r3, #16
 8000f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f4e:	4b28      	ldr	r3, [pc, #160]	@ (8000ff0 <HAL_UART_MspInit+0xd4>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	f003 0310 	and.w	r3, r3, #16
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ff0 <HAL_UART_MspInit+0xd4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	4a23      	ldr	r2, [pc, #140]	@ (8000ff0 <HAL_UART_MspInit+0xd4>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6a:	4b21      	ldr	r3, [pc, #132]	@ (8000ff0 <HAL_UART_MspInit+0xd4>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <HAL_UART_MspInit+0xd4>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff0 <HAL_UART_MspInit+0xd4>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff0 <HAL_UART_MspInit+0xd4>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fa4:	2307      	movs	r3, #7
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	4811      	ldr	r0, [pc, #68]	@ (8000ff4 <HAL_UART_MspInit+0xd8>)
 8000fb0:	f001 f81c 	bl	8001fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fb4:	2340      	movs	r3, #64	@ 0x40
 8000fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fc4:	2307      	movs	r3, #7
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	480a      	ldr	r0, [pc, #40]	@ (8000ff8 <HAL_UART_MspInit+0xdc>)
 8000fd0:	f001 f80c 	bl	8001fec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2105      	movs	r1, #5
 8000fd8:	2025      	movs	r0, #37	@ 0x25
 8000fda:	f000 ffbb 	bl	8001f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fde:	2025      	movs	r0, #37	@ 0x25
 8000fe0:	f000 ffd4 	bl	8001f8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	@ 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40011000 	.word	0x40011000
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	40020400 	.word	0x40020400

08000ffc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	@ 0x30
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800100c:	2200      	movs	r2, #0
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	2036      	movs	r0, #54	@ 0x36
 8001012:	f000 ff9f 	bl	8001f54 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001016:	2036      	movs	r0, #54	@ 0x36
 8001018:	f000 ffb8 	bl	8001f8c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	4b1f      	ldr	r3, [pc, #124]	@ (80010a0 <HAL_InitTick+0xa4>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001024:	4a1e      	ldr	r2, [pc, #120]	@ (80010a0 <HAL_InitTick+0xa4>)
 8001026:	f043 0310 	orr.w	r3, r3, #16
 800102a:	6413      	str	r3, [r2, #64]	@ 0x40
 800102c:	4b1c      	ldr	r3, [pc, #112]	@ (80010a0 <HAL_InitTick+0xa4>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001030:	f003 0310 	and.w	r3, r3, #16
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001038:	f107 0210 	add.w	r2, r7, #16
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4611      	mov	r1, r2
 8001042:	4618      	mov	r0, r3
 8001044:	f001 fe30 	bl	8002ca8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001048:	f001 fe06 	bl	8002c58 <HAL_RCC_GetPCLK1Freq>
 800104c:	4603      	mov	r3, r0
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001054:	4a13      	ldr	r2, [pc, #76]	@ (80010a4 <HAL_InitTick+0xa8>)
 8001056:	fba2 2303 	umull	r2, r3, r2, r3
 800105a:	0c9b      	lsrs	r3, r3, #18
 800105c:	3b01      	subs	r3, #1
 800105e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <HAL_InitTick+0xac>)
 8001062:	4a12      	ldr	r2, [pc, #72]	@ (80010ac <HAL_InitTick+0xb0>)
 8001064:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <HAL_InitTick+0xac>)
 8001068:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800106c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800106e:	4a0e      	ldr	r2, [pc, #56]	@ (80010a8 <HAL_InitTick+0xac>)
 8001070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001072:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001074:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <HAL_InitTick+0xac>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107a:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <HAL_InitTick+0xac>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001080:	4809      	ldr	r0, [pc, #36]	@ (80010a8 <HAL_InitTick+0xac>)
 8001082:	f001 fe43 	bl	8002d0c <HAL_TIM_Base_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d104      	bne.n	8001096 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800108c:	4806      	ldr	r0, [pc, #24]	@ (80010a8 <HAL_InitTick+0xac>)
 800108e:	f001 fe8c 	bl	8002daa <HAL_TIM_Base_Start_IT>
 8001092:	4603      	mov	r3, r0
 8001094:	e000      	b.n	8001098 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	3730      	adds	r7, #48	@ 0x30
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40023800 	.word	0x40023800
 80010a4:	431bde83 	.word	0x431bde83
 80010a8:	200003b8 	.word	0x200003b8
 80010ac:	40001000 	.word	0x40001000

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <NMI_Handler+0x4>

080010b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <MemManage_Handler+0x4>

080010c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <CAN1_RX0_IRQHandler+0x10>)
 80010ee:	f000 fc49 	bl	8001984 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200002d4 	.word	0x200002d4

080010fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <USART1_IRQHandler+0x10>)
 8001102:	f002 fb1b 	bl	800373c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000033c 	.word	0x2000033c

08001110 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <TIM6_DAC_IRQHandler+0x10>)
 8001116:	f001 fe6c 	bl	8002df2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200003b8 	.word	0x200003b8

08001124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800112c:	4a14      	ldr	r2, [pc, #80]	@ (8001180 <_sbrk+0x5c>)
 800112e:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <_sbrk+0x60>)
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001140:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <_sbrk+0x64>)
 8001142:	4a12      	ldr	r2, [pc, #72]	@ (800118c <_sbrk+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001146:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	429a      	cmp	r2, r3
 8001152:	d207      	bcs.n	8001164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001154:	f006 f892 	bl	800727c <__errno>
 8001158:	4603      	mov	r3, r0
 800115a:	220c      	movs	r2, #12
 800115c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	e009      	b.n	8001178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116a:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	4a05      	ldr	r2, [pc, #20]	@ (8001188 <_sbrk+0x64>)
 8001174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20020000 	.word	0x20020000
 8001184:	00000400 	.word	0x00000400
 8001188:	200003f8 	.word	0x200003f8
 800118c:	20004298 	.word	0x20004298

08001190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <SystemInit+0x20>)
 8001196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800119a:	4a05      	ldr	r2, [pc, #20]	@ (80011b0 <SystemInit+0x20>)
 800119c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011b8:	f7ff ffea 	bl	8001190 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011bc:	480c      	ldr	r0, [pc, #48]	@ (80011f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011be:	490d      	ldr	r1, [pc, #52]	@ (80011f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011c0:	4a0d      	ldr	r2, [pc, #52]	@ (80011f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001200 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011e2:	f006 f851 	bl	8007288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e6:	f7ff fb3d 	bl	8000864 <main>
  bx  lr    
 80011ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80011f8:	08007d28 	.word	0x08007d28
  ldr r2, =_sbss
 80011fc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001200:	20004294 	.word	0x20004294

08001204 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001204:	e7fe      	b.n	8001204 <ADC_IRQHandler>
	...

08001208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800120c:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <HAL_Init+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0d      	ldr	r2, [pc, #52]	@ (8001248 <HAL_Init+0x40>)
 8001212:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001216:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001218:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <HAL_Init+0x40>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0a      	ldr	r2, [pc, #40]	@ (8001248 <HAL_Init+0x40>)
 800121e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001222:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001224:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <HAL_Init+0x40>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a07      	ldr	r2, [pc, #28]	@ (8001248 <HAL_Init+0x40>)
 800122a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800122e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001230:	2003      	movs	r0, #3
 8001232:	f000 fe84 	bl	8001f3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001236:	2000      	movs	r0, #0
 8001238:	f7ff fee0 	bl	8000ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800123c:	f7ff fdd0 	bl	8000de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023c00 	.word	0x40023c00

0800124c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001250:	4b06      	ldr	r3, [pc, #24]	@ (800126c <HAL_IncTick+0x20>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <HAL_IncTick+0x24>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a04      	ldr	r2, [pc, #16]	@ (8001270 <HAL_IncTick+0x24>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	2000000c 	.word	0x2000000c
 8001270:	200003fc 	.word	0x200003fc

08001274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b03      	ldr	r3, [pc, #12]	@ (8001288 <HAL_GetTick+0x14>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	200003fc 	.word	0x200003fc

0800128c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff ffee 	bl	8001274 <HAL_GetTick>
 8001298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a4:	d005      	beq.n	80012b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a6:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <HAL_Delay+0x44>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012b2:	bf00      	nop
 80012b4:	f7ff ffde 	bl	8001274 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d8f7      	bhi.n	80012b4 <HAL_Delay+0x28>
  {
  }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000000c 	.word	0x2000000c

080012d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e0ed      	b.n	80014c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d102      	bne.n	80012f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fda0 	bl	8000e38 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0202 	bic.w	r2, r2, #2
 8001306:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001308:	f7ff ffb4 	bl	8001274 <HAL_GetTick>
 800130c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800130e:	e012      	b.n	8001336 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001310:	f7ff ffb0 	bl	8001274 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b0a      	cmp	r3, #10
 800131c:	d90b      	bls.n	8001336 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001322:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2205      	movs	r2, #5
 800132e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e0c5      	b.n	80014c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1e5      	bne.n	8001310 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0201 	orr.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001354:	f7ff ff8e 	bl	8001274 <HAL_GetTick>
 8001358:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800135a:	e012      	b.n	8001382 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800135c:	f7ff ff8a 	bl	8001274 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b0a      	cmp	r3, #10
 8001368:	d90b      	bls.n	8001382 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2205      	movs	r2, #5
 800137a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e09f      	b.n	80014c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0e5      	beq.n	800135c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7e1b      	ldrb	r3, [r3, #24]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d108      	bne.n	80013aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	e007      	b.n	80013ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7e5b      	ldrb	r3, [r3, #25]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d108      	bne.n	80013d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	e007      	b.n	80013e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80013e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7e9b      	ldrb	r3, [r3, #26]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d108      	bne.n	80013fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0220 	orr.w	r2, r2, #32
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e007      	b.n	800140e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0220 	bic.w	r2, r2, #32
 800140c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7edb      	ldrb	r3, [r3, #27]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d108      	bne.n	8001428 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0210 	bic.w	r2, r2, #16
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	e007      	b.n	8001438 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0210 	orr.w	r2, r2, #16
 8001436:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7f1b      	ldrb	r3, [r3, #28]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d108      	bne.n	8001452 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0208 	orr.w	r2, r2, #8
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	e007      	b.n	8001462 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0208 	bic.w	r2, r2, #8
 8001460:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7f5b      	ldrb	r3, [r3, #29]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d108      	bne.n	800147c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f042 0204 	orr.w	r2, r2, #4
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	e007      	b.n	800148c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0204 	bic.w	r2, r2, #4
 800148a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	ea42 0103 	orr.w	r1, r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	1e5a      	subs	r2, r3, #1
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014e4:	7cfb      	ldrb	r3, [r7, #19]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d003      	beq.n	80014f2 <HAL_CAN_ConfigFilter+0x26>
 80014ea:	7cfb      	ldrb	r3, [r7, #19]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	f040 80be 	bne.w	800166e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80014f2:	4b65      	ldr	r3, [pc, #404]	@ (8001688 <HAL_CAN_ConfigFilter+0x1bc>)
 80014f4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014fc:	f043 0201 	orr.w	r2, r3, #1
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800150c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	431a      	orrs	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	f003 031f 	and.w	r3, r3, #31
 8001532:	2201      	movs	r2, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	43db      	mvns	r3, r3
 8001544:	401a      	ands	r2, r3
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d123      	bne.n	800159c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	43db      	mvns	r3, r3
 800155e:	401a      	ands	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001576:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3248      	adds	r2, #72	@ 0x48
 800157c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001590:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001592:	6979      	ldr	r1, [r7, #20]
 8001594:	3348      	adds	r3, #72	@ 0x48
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	440b      	add	r3, r1
 800159a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d122      	bne.n	80015ea <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	431a      	orrs	r2, r3
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015c4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3248      	adds	r2, #72	@ 0x48
 80015ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015de:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015e0:	6979      	ldr	r1, [r7, #20]
 80015e2:	3348      	adds	r3, #72	@ 0x48
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	440b      	add	r3, r1
 80015e8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d109      	bne.n	8001606 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	401a      	ands	r2, r3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001604:	e007      	b.n	8001616 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	431a      	orrs	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d109      	bne.n	8001632 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	43db      	mvns	r3, r3
 8001628:	401a      	ands	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001630:	e007      	b.n	8001642 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	431a      	orrs	r2, r3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d107      	bne.n	800165a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	431a      	orrs	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001660:	f023 0201 	bic.w	r2, r3, #1
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	e006      	b.n	800167c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001672:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
  }
}
 800167c:	4618      	mov	r0, r3
 800167e:	371c      	adds	r7, #28
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	40006400 	.word	0x40006400

0800168c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b01      	cmp	r3, #1
 800169e:	d12e      	bne.n	80016fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2202      	movs	r2, #2
 80016a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0201 	bic.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016b8:	f7ff fddc 	bl	8001274 <HAL_GetTick>
 80016bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016be:	e012      	b.n	80016e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016c0:	f7ff fdd8 	bl	8001274 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b0a      	cmp	r3, #10
 80016cc:	d90b      	bls.n	80016e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2205      	movs	r2, #5
 80016de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e012      	b.n	800170c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1e5      	bne.n	80016c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e006      	b.n	800170c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001702:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
  }
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
 8001720:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001728:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800172a:	7dfb      	ldrb	r3, [r7, #23]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d003      	beq.n	8001738 <HAL_CAN_GetRxMessage+0x24>
 8001730:	7dfb      	ldrb	r3, [r7, #23]
 8001732:	2b02      	cmp	r3, #2
 8001734:	f040 80f3 	bne.w	800191e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10e      	bne.n	800175c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d116      	bne.n	800177a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001750:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0e7      	b.n	800192c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d107      	bne.n	800177a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e0d8      	b.n	800192c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	331b      	adds	r3, #27
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	4413      	add	r3, r2
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0204 	and.w	r2, r3, #4
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10c      	bne.n	80017b2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	331b      	adds	r3, #27
 80017a0:	011b      	lsls	r3, r3, #4
 80017a2:	4413      	add	r3, r2
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	0d5b      	lsrs	r3, r3, #21
 80017a8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	e00b      	b.n	80017ca <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	331b      	adds	r3, #27
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	4413      	add	r3, r2
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	08db      	lsrs	r3, r3, #3
 80017c2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	331b      	adds	r3, #27
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	4413      	add	r3, r2
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0202 	and.w	r2, r3, #2
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	331b      	adds	r3, #27
 80017e8:	011b      	lsls	r3, r3, #4
 80017ea:	4413      	add	r3, r2
 80017ec:	3304      	adds	r3, #4
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 020f 	and.w	r2, r3, #15
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	331b      	adds	r3, #27
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	4413      	add	r3, r2
 8001804:	3304      	adds	r3, #4
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	b2da      	uxtb	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	331b      	adds	r3, #27
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	4413      	add	r3, r2
 800181c:	3304      	adds	r3, #4
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	0c1b      	lsrs	r3, r3, #16
 8001822:	b29a      	uxth	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	4413      	add	r3, r2
 8001832:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	4413      	add	r3, r2
 8001848:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	0a1a      	lsrs	r2, r3, #8
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	4413      	add	r3, r2
 8001862:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	0c1a      	lsrs	r2, r3, #16
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	3302      	adds	r3, #2
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	4413      	add	r3, r2
 800187c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	0e1a      	lsrs	r2, r3, #24
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	3303      	adds	r3, #3
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	4413      	add	r3, r2
 8001896:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	3304      	adds	r3, #4
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	4413      	add	r3, r2
 80018ae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	0a1a      	lsrs	r2, r3, #8
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	3305      	adds	r3, #5
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	4413      	add	r3, r2
 80018c8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	0c1a      	lsrs	r2, r3, #16
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	3306      	adds	r3, #6
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	0e1a      	lsrs	r2, r3, #24
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	3307      	adds	r3, #7
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d108      	bne.n	800190a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0220 	orr.w	r2, r2, #32
 8001906:	60da      	str	r2, [r3, #12]
 8001908:	e007      	b.n	800191a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f042 0220 	orr.w	r2, r2, #32
 8001918:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	e006      	b.n	800192c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001922:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
  }
}
 800192c:	4618      	mov	r0, r3
 800192e:	371c      	adds	r7, #28
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001948:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d002      	beq.n	8001956 <HAL_CAN_ActivateNotification+0x1e>
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d109      	bne.n	800196a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6959      	ldr	r1, [r3, #20]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e006      	b.n	8001978 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
  }
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	@ 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d07c      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d023      	beq.n	8001a1c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2201      	movs	r2, #1
 80019da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 f983 	bl	8001cf2 <HAL_CAN_TxMailbox0CompleteCallback>
 80019ec:	e016      	b.n	8001a1c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d004      	beq.n	8001a02 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80019f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a00:	e00c      	b.n	8001a1c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d004      	beq.n	8001a16 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a14:	e002      	b.n	8001a1c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f989 	bl	8001d2e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d024      	beq.n	8001a70 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f963 	bl	8001d06 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a40:	e016      	b.n	8001a70 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d004      	beq.n	8001a56 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a54:	e00c      	b.n	8001a70 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d004      	beq.n	8001a6a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a68:	e002      	b.n	8001a70 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f969 	bl	8001d42 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d024      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a82:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f943 	bl	8001d1a <HAL_CAN_TxMailbox2CompleteCallback>
 8001a94:	e016      	b.n	8001ac4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d004      	beq.n	8001aaa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa8:	e00c      	b.n	8001ac4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8001abc:	e002      	b.n	8001ac4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f949 	bl	8001d56 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00c      	beq.n	8001ae8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f003 0310 	and.w	r3, r3, #16
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d007      	beq.n	8001ae8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ada:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ade:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2210      	movs	r2, #16
 8001ae6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00b      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2208      	movs	r2, #8
 8001b02:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f930 	bl	8001d6a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d009      	beq.n	8001b28 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7fe fe72 	bl	800080c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00c      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d007      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2210      	movs	r2, #16
 8001b4a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	f003 0320 	and.w	r3, r3, #32
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00b      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2208      	movs	r2, #8
 8001b66:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f912 	bl	8001d92 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	f003 0310 	and.w	r3, r3, #16
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d009      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f8f9 	bl	8001d7e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00b      	beq.n	8001bae <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d006      	beq.n	8001bae <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2210      	movs	r2, #16
 8001ba6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f8fc 	bl	8001da6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00b      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2208      	movs	r2, #8
 8001bc8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f8f5 	bl	8001dba <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d07b      	beq.n	8001cd2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d072      	beq.n	8001cca <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d008      	beq.n	8001c00 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d008      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c16:	f043 0302 	orr.w	r3, r3, #2
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d008      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c32:	f043 0304 	orr.w	r3, r3, #4
 8001c36:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d043      	beq.n	8001cca <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d03e      	beq.n	8001cca <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c52:	2b60      	cmp	r3, #96	@ 0x60
 8001c54:	d02b      	beq.n	8001cae <HAL_CAN_IRQHandler+0x32a>
 8001c56:	2b60      	cmp	r3, #96	@ 0x60
 8001c58:	d82e      	bhi.n	8001cb8 <HAL_CAN_IRQHandler+0x334>
 8001c5a:	2b50      	cmp	r3, #80	@ 0x50
 8001c5c:	d022      	beq.n	8001ca4 <HAL_CAN_IRQHandler+0x320>
 8001c5e:	2b50      	cmp	r3, #80	@ 0x50
 8001c60:	d82a      	bhi.n	8001cb8 <HAL_CAN_IRQHandler+0x334>
 8001c62:	2b40      	cmp	r3, #64	@ 0x40
 8001c64:	d019      	beq.n	8001c9a <HAL_CAN_IRQHandler+0x316>
 8001c66:	2b40      	cmp	r3, #64	@ 0x40
 8001c68:	d826      	bhi.n	8001cb8 <HAL_CAN_IRQHandler+0x334>
 8001c6a:	2b30      	cmp	r3, #48	@ 0x30
 8001c6c:	d010      	beq.n	8001c90 <HAL_CAN_IRQHandler+0x30c>
 8001c6e:	2b30      	cmp	r3, #48	@ 0x30
 8001c70:	d822      	bhi.n	8001cb8 <HAL_CAN_IRQHandler+0x334>
 8001c72:	2b10      	cmp	r3, #16
 8001c74:	d002      	beq.n	8001c7c <HAL_CAN_IRQHandler+0x2f8>
 8001c76:	2b20      	cmp	r3, #32
 8001c78:	d005      	beq.n	8001c86 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c7a:	e01d      	b.n	8001cb8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7e:	f043 0308 	orr.w	r3, r3, #8
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c84:	e019      	b.n	8001cba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c88:	f043 0310 	orr.w	r3, r3, #16
 8001c8c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c8e:	e014      	b.n	8001cba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c92:	f043 0320 	orr.w	r3, r3, #32
 8001c96:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c98:	e00f      	b.n	8001cba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ca0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ca2:	e00a      	b.n	8001cba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cac:	e005      	b.n	8001cba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cb6:	e000      	b.n	8001cba <HAL_CAN_IRQHandler+0x336>
            break;
 8001cb8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	699a      	ldr	r2, [r3, #24]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001cc8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2204      	movs	r2, #4
 8001cd0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f872 	bl	8001dce <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cea:	bf00      	nop
 8001cec:	3728      	adds	r7, #40	@ 0x28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e00:	4013      	ands	r3, r2
 8001e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e16:	4a04      	ldr	r2, [pc, #16]	@ (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	60d3      	str	r3, [r2, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e30:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <__NVIC_GetPriorityGrouping+0x18>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	f003 0307 	and.w	r3, r3, #7
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	db0b      	blt.n	8001e72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	f003 021f 	and.w	r2, r3, #31
 8001e60:	4907      	ldr	r1, [pc, #28]	@ (8001e80 <__NVIC_EnableIRQ+0x38>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	2001      	movs	r0, #1
 8001e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000e100 	.word	0xe000e100

08001e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	6039      	str	r1, [r7, #0]
 8001e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	db0a      	blt.n	8001eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	490c      	ldr	r1, [pc, #48]	@ (8001ed0 <__NVIC_SetPriority+0x4c>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	0112      	lsls	r2, r2, #4
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eac:	e00a      	b.n	8001ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4908      	ldr	r1, [pc, #32]	@ (8001ed4 <__NVIC_SetPriority+0x50>)
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	3b04      	subs	r3, #4
 8001ebc:	0112      	lsls	r2, r2, #4
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	761a      	strb	r2, [r3, #24]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000e100 	.word	0xe000e100
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	@ 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f1c3 0307 	rsb	r3, r3, #7
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	bf28      	it	cs
 8001ef6:	2304      	movcs	r3, #4
 8001ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3304      	adds	r3, #4
 8001efe:	2b06      	cmp	r3, #6
 8001f00:	d902      	bls.n	8001f08 <NVIC_EncodePriority+0x30>
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3b03      	subs	r3, #3
 8001f06:	e000      	b.n	8001f0a <NVIC_EncodePriority+0x32>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43da      	mvns	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f20:	f04f 31ff 	mov.w	r1, #4294967295
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	43d9      	mvns	r1, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	4313      	orrs	r3, r2
         );
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3724      	adds	r7, #36	@ 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ff4c 	bl	8001de4 <__NVIC_SetPriorityGrouping>
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f66:	f7ff ff61 	bl	8001e2c <__NVIC_GetPriorityGrouping>
 8001f6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	68b9      	ldr	r1, [r7, #8]
 8001f70:	6978      	ldr	r0, [r7, #20]
 8001f72:	f7ff ffb1 	bl	8001ed8 <NVIC_EncodePriority>
 8001f76:	4602      	mov	r2, r0
 8001f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ff80 	bl	8001e84 <__NVIC_SetPriority>
}
 8001f84:	bf00      	nop
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff54 	bl	8001e48 <__NVIC_EnableIRQ>
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d004      	beq.n	8001fc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2280      	movs	r2, #128	@ 0x80
 8001fc0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00c      	b.n	8001fe0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2205      	movs	r2, #5
 8001fca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0201 	bic.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	@ 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	e16b      	b.n	80022e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002008:	2201      	movs	r2, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	429a      	cmp	r2, r3
 8002022:	f040 815a 	bne.w	80022da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d00b      	beq.n	8002046 <HAL_GPIO_Init+0x5a>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d007      	beq.n	8002046 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800203a:	2b11      	cmp	r3, #17
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b12      	cmp	r3, #18
 8002044:	d130      	bne.n	80020a8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	2203      	movs	r2, #3
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800207c:	2201      	movs	r2, #1
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	f003 0201 	and.w	r2, r3, #1
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	2203      	movs	r2, #3
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0xfc>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b12      	cmp	r3, #18
 80020e6:	d123      	bne.n	8002130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	08da      	lsrs	r2, r3, #3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3208      	adds	r2, #8
 80020f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	220f      	movs	r2, #15
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	08da      	lsrs	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3208      	adds	r2, #8
 800212a:	69b9      	ldr	r1, [r7, #24]
 800212c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0203 	and.w	r2, r3, #3
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80b4 	beq.w	80022da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	4b60      	ldr	r3, [pc, #384]	@ (80022f8 <HAL_GPIO_Init+0x30c>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	4a5f      	ldr	r2, [pc, #380]	@ (80022f8 <HAL_GPIO_Init+0x30c>)
 800217c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002180:	6453      	str	r3, [r2, #68]	@ 0x44
 8002182:	4b5d      	ldr	r3, [pc, #372]	@ (80022f8 <HAL_GPIO_Init+0x30c>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800218e:	4a5b      	ldr	r2, [pc, #364]	@ (80022fc <HAL_GPIO_Init+0x310>)
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	3302      	adds	r3, #2
 8002196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	220f      	movs	r2, #15
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a52      	ldr	r2, [pc, #328]	@ (8002300 <HAL_GPIO_Init+0x314>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d02b      	beq.n	8002212 <HAL_GPIO_Init+0x226>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a51      	ldr	r2, [pc, #324]	@ (8002304 <HAL_GPIO_Init+0x318>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d025      	beq.n	800220e <HAL_GPIO_Init+0x222>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a50      	ldr	r2, [pc, #320]	@ (8002308 <HAL_GPIO_Init+0x31c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d01f      	beq.n	800220a <HAL_GPIO_Init+0x21e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4f      	ldr	r2, [pc, #316]	@ (800230c <HAL_GPIO_Init+0x320>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d019      	beq.n	8002206 <HAL_GPIO_Init+0x21a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002310 <HAL_GPIO_Init+0x324>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d013      	beq.n	8002202 <HAL_GPIO_Init+0x216>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002314 <HAL_GPIO_Init+0x328>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00d      	beq.n	80021fe <HAL_GPIO_Init+0x212>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4c      	ldr	r2, [pc, #304]	@ (8002318 <HAL_GPIO_Init+0x32c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d007      	beq.n	80021fa <HAL_GPIO_Init+0x20e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4b      	ldr	r2, [pc, #300]	@ (800231c <HAL_GPIO_Init+0x330>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d101      	bne.n	80021f6 <HAL_GPIO_Init+0x20a>
 80021f2:	2307      	movs	r3, #7
 80021f4:	e00e      	b.n	8002214 <HAL_GPIO_Init+0x228>
 80021f6:	2308      	movs	r3, #8
 80021f8:	e00c      	b.n	8002214 <HAL_GPIO_Init+0x228>
 80021fa:	2306      	movs	r3, #6
 80021fc:	e00a      	b.n	8002214 <HAL_GPIO_Init+0x228>
 80021fe:	2305      	movs	r3, #5
 8002200:	e008      	b.n	8002214 <HAL_GPIO_Init+0x228>
 8002202:	2304      	movs	r3, #4
 8002204:	e006      	b.n	8002214 <HAL_GPIO_Init+0x228>
 8002206:	2303      	movs	r3, #3
 8002208:	e004      	b.n	8002214 <HAL_GPIO_Init+0x228>
 800220a:	2302      	movs	r3, #2
 800220c:	e002      	b.n	8002214 <HAL_GPIO_Init+0x228>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <HAL_GPIO_Init+0x228>
 8002212:	2300      	movs	r3, #0
 8002214:	69fa      	ldr	r2, [r7, #28]
 8002216:	f002 0203 	and.w	r2, r2, #3
 800221a:	0092      	lsls	r2, r2, #2
 800221c:	4093      	lsls	r3, r2
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002224:	4935      	ldr	r1, [pc, #212]	@ (80022fc <HAL_GPIO_Init+0x310>)
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	089b      	lsrs	r3, r3, #2
 800222a:	3302      	adds	r3, #2
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002232:	4b3b      	ldr	r3, [pc, #236]	@ (8002320 <HAL_GPIO_Init+0x334>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002256:	4a32      	ldr	r2, [pc, #200]	@ (8002320 <HAL_GPIO_Init+0x334>)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800225c:	4b30      	ldr	r3, [pc, #192]	@ (8002320 <HAL_GPIO_Init+0x334>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002280:	4a27      	ldr	r2, [pc, #156]	@ (8002320 <HAL_GPIO_Init+0x334>)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002286:	4b26      	ldr	r3, [pc, #152]	@ (8002320 <HAL_GPIO_Init+0x334>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002320 <HAL_GPIO_Init+0x334>)
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002320 <HAL_GPIO_Init+0x334>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d4:	4a12      	ldr	r2, [pc, #72]	@ (8002320 <HAL_GPIO_Init+0x334>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3301      	adds	r3, #1
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	2b0f      	cmp	r3, #15
 80022e4:	f67f ae90 	bls.w	8002008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	3724      	adds	r7, #36	@ 0x24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40013800 	.word	0x40013800
 8002300:	40020000 	.word	0x40020000
 8002304:	40020400 	.word	0x40020400
 8002308:	40020800 	.word	0x40020800
 800230c:	40020c00 	.word	0x40020c00
 8002310:	40021000 	.word	0x40021000
 8002314:	40021400 	.word	0x40021400
 8002318:	40021800 	.word	0x40021800
 800231c:	40021c00 	.word	0x40021c00
 8002320:	40013c00 	.word	0x40013c00

08002324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]
 8002330:	4613      	mov	r3, r2
 8002332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002334:	787b      	ldrb	r3, [r7, #1]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002340:	e003      	b.n	800234a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	041a      	lsls	r2, r3, #16
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	619a      	str	r2, [r3, #24]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	460b      	mov	r3, r1
 8002360:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	887b      	ldrh	r3, [r7, #2]
 8002368:	401a      	ands	r2, r3
 800236a:	887b      	ldrh	r3, [r7, #2]
 800236c:	429a      	cmp	r2, r3
 800236e:	d104      	bne.n	800237a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002370:	887b      	ldrh	r3, [r7, #2]
 8002372:	041a      	lsls	r2, r3, #16
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002378:	e002      	b.n	8002380 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800237a:	887a      	ldrh	r2, [r7, #2]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	619a      	str	r2, [r3, #24]
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e25e      	b.n	800285c <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d075      	beq.n	8002496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023aa:	4b88      	ldr	r3, [pc, #544]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d00c      	beq.n	80023d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023b6:	4b85      	ldr	r3, [pc, #532]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d112      	bne.n	80023e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c2:	4b82      	ldr	r3, [pc, #520]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023ce:	d10b      	bne.n	80023e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d0:	4b7e      	ldr	r3, [pc, #504]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d05b      	beq.n	8002494 <HAL_RCC_OscConfig+0x108>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d157      	bne.n	8002494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e239      	b.n	800285c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023f0:	d106      	bne.n	8002400 <HAL_RCC_OscConfig+0x74>
 80023f2:	4b76      	ldr	r3, [pc, #472]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a75      	ldr	r2, [pc, #468]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e01d      	b.n	800243c <HAL_RCC_OscConfig+0xb0>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x98>
 800240a:	4b70      	ldr	r3, [pc, #448]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a6f      	ldr	r2, [pc, #444]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002410:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b6d      	ldr	r3, [pc, #436]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a6c      	ldr	r2, [pc, #432]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 800241c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e00b      	b.n	800243c <HAL_RCC_OscConfig+0xb0>
 8002424:	4b69      	ldr	r3, [pc, #420]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a68      	ldr	r2, [pc, #416]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 800242a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b66      	ldr	r3, [pc, #408]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a65      	ldr	r2, [pc, #404]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002436:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800243a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d013      	beq.n	800246c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7fe ff16 	bl	8001274 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800244c:	f7fe ff12 	bl	8001274 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	@ 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e1fe      	b.n	800285c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	4b5b      	ldr	r3, [pc, #364]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0xc0>
 800246a:	e014      	b.n	8002496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7fe ff02 	bl	8001274 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002474:	f7fe fefe 	bl	8001274 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	@ 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e1ea      	b.n	800285c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002486:	4b51      	ldr	r3, [pc, #324]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0xe8>
 8002492:	e000      	b.n	8002496 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d063      	beq.n	800256a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024a2:	4b4a      	ldr	r3, [pc, #296]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00b      	beq.n	80024c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ae:	4b47      	ldr	r3, [pc, #284]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d11c      	bne.n	80024f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ba:	4b44      	ldr	r3, [pc, #272]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d116      	bne.n	80024f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c6:	4b41      	ldr	r3, [pc, #260]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <HAL_RCC_OscConfig+0x152>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d001      	beq.n	80024de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e1be      	b.n	800285c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024de:	4b3b      	ldr	r3, [pc, #236]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4937      	ldr	r1, [pc, #220]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f2:	e03a      	b.n	800256a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d020      	beq.n	800253e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024fc:	4b34      	ldr	r3, [pc, #208]	@ (80025d0 <HAL_RCC_OscConfig+0x244>)
 80024fe:	2201      	movs	r2, #1
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002502:	f7fe feb7 	bl	8001274 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800250a:	f7fe feb3 	bl	8001274 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e19f      	b.n	800285c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251c:	4b2b      	ldr	r3, [pc, #172]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002528:	4b28      	ldr	r3, [pc, #160]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4925      	ldr	r1, [pc, #148]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002538:	4313      	orrs	r3, r2
 800253a:	600b      	str	r3, [r1, #0]
 800253c:	e015      	b.n	800256a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800253e:	4b24      	ldr	r3, [pc, #144]	@ (80025d0 <HAL_RCC_OscConfig+0x244>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7fe fe96 	bl	8001274 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800254c:	f7fe fe92 	bl	8001274 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e17e      	b.n	800285c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255e:	4b1b      	ldr	r3, [pc, #108]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d036      	beq.n	80025e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d016      	beq.n	80025ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800257e:	4b15      	ldr	r3, [pc, #84]	@ (80025d4 <HAL_RCC_OscConfig+0x248>)
 8002580:	2201      	movs	r2, #1
 8002582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002584:	f7fe fe76 	bl	8001274 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800258c:	f7fe fe72 	bl	8001274 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e15e      	b.n	800285c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259e:	4b0b      	ldr	r3, [pc, #44]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80025a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x200>
 80025aa:	e01b      	b.n	80025e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ac:	4b09      	ldr	r3, [pc, #36]	@ (80025d4 <HAL_RCC_OscConfig+0x248>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b2:	f7fe fe5f 	bl	8001274 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b8:	e00e      	b.n	80025d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ba:	f7fe fe5b 	bl	8001274 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d907      	bls.n	80025d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e147      	b.n	800285c <HAL_RCC_OscConfig+0x4d0>
 80025cc:	40023800 	.word	0x40023800
 80025d0:	42470000 	.word	0x42470000
 80025d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d8:	4b88      	ldr	r3, [pc, #544]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 80025da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1ea      	bne.n	80025ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 8097 	beq.w	8002720 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f6:	4b81      	ldr	r3, [pc, #516]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10f      	bne.n	8002622 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	4b7d      	ldr	r3, [pc, #500]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	4a7c      	ldr	r2, [pc, #496]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002610:	6413      	str	r3, [r2, #64]	@ 0x40
 8002612:	4b7a      	ldr	r3, [pc, #488]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800261e:	2301      	movs	r3, #1
 8002620:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002622:	4b77      	ldr	r3, [pc, #476]	@ (8002800 <HAL_RCC_OscConfig+0x474>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262a:	2b00      	cmp	r3, #0
 800262c:	d118      	bne.n	8002660 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800262e:	4b74      	ldr	r3, [pc, #464]	@ (8002800 <HAL_RCC_OscConfig+0x474>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a73      	ldr	r2, [pc, #460]	@ (8002800 <HAL_RCC_OscConfig+0x474>)
 8002634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263a:	f7fe fe1b 	bl	8001274 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002642:	f7fe fe17 	bl	8001274 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e103      	b.n	800285c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002654:	4b6a      	ldr	r3, [pc, #424]	@ (8002800 <HAL_RCC_OscConfig+0x474>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d106      	bne.n	8002676 <HAL_RCC_OscConfig+0x2ea>
 8002668:	4b64      	ldr	r3, [pc, #400]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800266a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266c:	4a63      	ldr	r2, [pc, #396]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6713      	str	r3, [r2, #112]	@ 0x70
 8002674:	e01c      	b.n	80026b0 <HAL_RCC_OscConfig+0x324>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b05      	cmp	r3, #5
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0x30c>
 800267e:	4b5f      	ldr	r3, [pc, #380]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002682:	4a5e      	ldr	r2, [pc, #376]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002684:	f043 0304 	orr.w	r3, r3, #4
 8002688:	6713      	str	r3, [r2, #112]	@ 0x70
 800268a:	4b5c      	ldr	r3, [pc, #368]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268e:	4a5b      	ldr	r2, [pc, #364]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6713      	str	r3, [r2, #112]	@ 0x70
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0x324>
 8002698:	4b58      	ldr	r3, [pc, #352]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269c:	4a57      	ldr	r2, [pc, #348]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800269e:	f023 0301 	bic.w	r3, r3, #1
 80026a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026a4:	4b55      	ldr	r3, [pc, #340]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a8:	4a54      	ldr	r2, [pc, #336]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 80026aa:	f023 0304 	bic.w	r3, r3, #4
 80026ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d015      	beq.n	80026e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b8:	f7fe fddc 	bl	8001274 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026be:	e00a      	b.n	80026d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c0:	f7fe fdd8 	bl	8001274 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e0c2      	b.n	800285c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d6:	4b49      	ldr	r3, [pc, #292]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0ee      	beq.n	80026c0 <HAL_RCC_OscConfig+0x334>
 80026e2:	e014      	b.n	800270e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e4:	f7fe fdc6 	bl	8001274 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ec:	f7fe fdc2 	bl	8001274 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e0ac      	b.n	800285c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002702:	4b3e      	ldr	r3, [pc, #248]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1ee      	bne.n	80026ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800270e:	7dfb      	ldrb	r3, [r7, #23]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d105      	bne.n	8002720 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002714:	4b39      	ldr	r3, [pc, #228]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002718:	4a38      	ldr	r2, [pc, #224]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800271a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800271e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 8098 	beq.w	800285a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800272a:	4b34      	ldr	r3, [pc, #208]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b08      	cmp	r3, #8
 8002734:	d05c      	beq.n	80027f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d141      	bne.n	80027c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273e:	4b31      	ldr	r3, [pc, #196]	@ (8002804 <HAL_RCC_OscConfig+0x478>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7fe fd96 	bl	8001274 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800274c:	f7fe fd92 	bl	8001274 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e07e      	b.n	800285c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275e:	4b27      	ldr	r3, [pc, #156]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69da      	ldr	r2, [r3, #28]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002778:	019b      	lsls	r3, r3, #6
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002780:	085b      	lsrs	r3, r3, #1
 8002782:	3b01      	subs	r3, #1
 8002784:	041b      	lsls	r3, r3, #16
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278c:	061b      	lsls	r3, r3, #24
 800278e:	491b      	ldr	r1, [pc, #108]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002794:	4b1b      	ldr	r3, [pc, #108]	@ (8002804 <HAL_RCC_OscConfig+0x478>)
 8002796:	2201      	movs	r2, #1
 8002798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279a:	f7fe fd6b 	bl	8001274 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a2:	f7fe fd67 	bl	8001274 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e053      	b.n	800285c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b4:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x416>
 80027c0:	e04b      	b.n	800285a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c2:	4b10      	ldr	r3, [pc, #64]	@ (8002804 <HAL_RCC_OscConfig+0x478>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7fe fd54 	bl	8001274 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d0:	f7fe fd50 	bl	8001274 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e03c      	b.n	800285c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e2:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x444>
 80027ee:	e034      	b.n	800285a <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d107      	bne.n	8002808 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e02f      	b.n	800285c <HAL_RCC_OscConfig+0x4d0>
 80027fc:	40023800 	.word	0x40023800
 8002800:	40007000 	.word	0x40007000
 8002804:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002808:	4b16      	ldr	r3, [pc, #88]	@ (8002864 <HAL_RCC_OscConfig+0x4d8>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	429a      	cmp	r2, r3
 800281a:	d11c      	bne.n	8002856 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d115      	bne.n	8002856 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002830:	4013      	ands	r3, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002836:	4293      	cmp	r3, r2
 8002838:	d10d      	bne.n	8002856 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002844:	429a      	cmp	r2, r3
 8002846:	d106      	bne.n	8002856 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002852:	429a      	cmp	r2, r3
 8002854:	d001      	beq.n	800285a <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40023800 	.word	0x40023800

08002868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0cc      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800287c:	4b68      	ldr	r3, [pc, #416]	@ (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 030f 	and.w	r3, r3, #15
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d90c      	bls.n	80028a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288a:	4b65      	ldr	r3, [pc, #404]	@ (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002892:	4b63      	ldr	r3, [pc, #396]	@ (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0b8      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028bc:	4b59      	ldr	r3, [pc, #356]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	4a58      	ldr	r2, [pc, #352]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d4:	4b53      	ldr	r3, [pc, #332]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	4a52      	ldr	r2, [pc, #328]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e0:	4b50      	ldr	r3, [pc, #320]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	494d      	ldr	r1, [pc, #308]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d044      	beq.n	8002988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d107      	bne.n	8002916 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	4b47      	ldr	r3, [pc, #284]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d119      	bne.n	8002946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e07f      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d003      	beq.n	8002926 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002922:	2b03      	cmp	r3, #3
 8002924:	d107      	bne.n	8002936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002926:	4b3f      	ldr	r3, [pc, #252]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e06f      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002936:	4b3b      	ldr	r3, [pc, #236]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e067      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002946:	4b37      	ldr	r3, [pc, #220]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f023 0203 	bic.w	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	4934      	ldr	r1, [pc, #208]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	4313      	orrs	r3, r2
 8002956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002958:	f7fe fc8c 	bl	8001274 <HAL_GetTick>
 800295c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295e:	e00a      	b.n	8002976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002960:	f7fe fc88 	bl	8001274 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e04f      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002976:	4b2b      	ldr	r3, [pc, #172]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 020c 	and.w	r2, r3, #12
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	429a      	cmp	r2, r3
 8002986:	d1eb      	bne.n	8002960 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002988:	4b25      	ldr	r3, [pc, #148]	@ (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d20c      	bcs.n	80029b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b22      	ldr	r3, [pc, #136]	@ (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299e:	4b20      	ldr	r3, [pc, #128]	@ (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e032      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d008      	beq.n	80029ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029bc:	4b19      	ldr	r3, [pc, #100]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4916      	ldr	r1, [pc, #88]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029da:	4b12      	ldr	r3, [pc, #72]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	490e      	ldr	r1, [pc, #56]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ee:	f000 f821 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 80029f2:	4602      	mov	r2, r0
 80029f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	490a      	ldr	r1, [pc, #40]	@ (8002a28 <HAL_RCC_ClockConfig+0x1c0>)
 8002a00:	5ccb      	ldrb	r3, [r1, r3]
 8002a02:	fa22 f303 	lsr.w	r3, r2, r3
 8002a06:	4a09      	ldr	r2, [pc, #36]	@ (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a0a:	4b09      	ldr	r3, [pc, #36]	@ (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe faf4 	bl	8000ffc <HAL_InitTick>

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40023c00 	.word	0x40023c00
 8002a24:	40023800 	.word	0x40023800
 8002a28:	08007ccc 	.word	0x08007ccc
 8002a2c:	20000004 	.word	0x20000004
 8002a30:	20000008 	.word	0x20000008

08002a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a38:	b094      	sub	sp, #80	@ 0x50
 8002a3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a40:	2300      	movs	r3, #0
 8002a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a44:	2300      	movs	r3, #0
 8002a46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a4c:	4b79      	ldr	r3, [pc, #484]	@ (8002c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d00d      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0x40>
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	f200 80e1 	bhi.w	8002c20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq+0x34>
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d003      	beq.n	8002a6e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a66:	e0db      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a68:	4b73      	ldr	r3, [pc, #460]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002a6c:	e0db      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a6e:	4b73      	ldr	r3, [pc, #460]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0x208>)
 8002a70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a72:	e0d8      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a74:	4b6f      	ldr	r3, [pc, #444]	@ (8002c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a7c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a7e:	4b6d      	ldr	r3, [pc, #436]	@ (8002c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d063      	beq.n	8002b52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8002c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	099b      	lsrs	r3, r3, #6
 8002a90:	2200      	movs	r2, #0
 8002a92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002aa2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002aa6:	4622      	mov	r2, r4
 8002aa8:	462b      	mov	r3, r5
 8002aaa:	f04f 0000 	mov.w	r0, #0
 8002aae:	f04f 0100 	mov.w	r1, #0
 8002ab2:	0159      	lsls	r1, r3, #5
 8002ab4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ab8:	0150      	lsls	r0, r2, #5
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4621      	mov	r1, r4
 8002ac0:	1a51      	subs	r1, r2, r1
 8002ac2:	6139      	str	r1, [r7, #16]
 8002ac4:	4629      	mov	r1, r5
 8002ac6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ad8:	4659      	mov	r1, fp
 8002ada:	018b      	lsls	r3, r1, #6
 8002adc:	4651      	mov	r1, sl
 8002ade:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ae2:	4651      	mov	r1, sl
 8002ae4:	018a      	lsls	r2, r1, #6
 8002ae6:	4651      	mov	r1, sl
 8002ae8:	ebb2 0801 	subs.w	r8, r2, r1
 8002aec:	4659      	mov	r1, fp
 8002aee:	eb63 0901 	sbc.w	r9, r3, r1
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002afe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b06:	4690      	mov	r8, r2
 8002b08:	4699      	mov	r9, r3
 8002b0a:	4623      	mov	r3, r4
 8002b0c:	eb18 0303 	adds.w	r3, r8, r3
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	462b      	mov	r3, r5
 8002b14:	eb49 0303 	adc.w	r3, r9, r3
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b26:	4629      	mov	r1, r5
 8002b28:	024b      	lsls	r3, r1, #9
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b30:	4621      	mov	r1, r4
 8002b32:	024a      	lsls	r2, r1, #9
 8002b34:	4610      	mov	r0, r2
 8002b36:	4619      	mov	r1, r3
 8002b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b44:	f7fd fb94 	bl	8000270 <__aeabi_uldivmod>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b50:	e058      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b52:	4b38      	ldr	r3, [pc, #224]	@ (8002c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	099b      	lsrs	r3, r3, #6
 8002b58:	2200      	movs	r2, #0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	4611      	mov	r1, r2
 8002b5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b62:	623b      	str	r3, [r7, #32]
 8002b64:	2300      	movs	r3, #0
 8002b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b6c:	4642      	mov	r2, r8
 8002b6e:	464b      	mov	r3, r9
 8002b70:	f04f 0000 	mov.w	r0, #0
 8002b74:	f04f 0100 	mov.w	r1, #0
 8002b78:	0159      	lsls	r1, r3, #5
 8002b7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b7e:	0150      	lsls	r0, r2, #5
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4641      	mov	r1, r8
 8002b86:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b8a:	4649      	mov	r1, r9
 8002b8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ba0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ba4:	ebb2 040a 	subs.w	r4, r2, sl
 8002ba8:	eb63 050b 	sbc.w	r5, r3, fp
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	00eb      	lsls	r3, r5, #3
 8002bb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bba:	00e2      	lsls	r2, r4, #3
 8002bbc:	4614      	mov	r4, r2
 8002bbe:	461d      	mov	r5, r3
 8002bc0:	4643      	mov	r3, r8
 8002bc2:	18e3      	adds	r3, r4, r3
 8002bc4:	603b      	str	r3, [r7, #0]
 8002bc6:	464b      	mov	r3, r9
 8002bc8:	eb45 0303 	adc.w	r3, r5, r3
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bda:	4629      	mov	r1, r5
 8002bdc:	028b      	lsls	r3, r1, #10
 8002bde:	4621      	mov	r1, r4
 8002be0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002be4:	4621      	mov	r1, r4
 8002be6:	028a      	lsls	r2, r1, #10
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bee:	2200      	movs	r2, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	61fa      	str	r2, [r7, #28]
 8002bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bf8:	f7fd fb3a 	bl	8000270 <__aeabi_uldivmod>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4613      	mov	r3, r2
 8002c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c04:	4b0b      	ldr	r3, [pc, #44]	@ (8002c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	0c1b      	lsrs	r3, r3, #16
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	3301      	adds	r3, #1
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002c14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c1e:	e002      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c20:	4b05      	ldr	r3, [pc, #20]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3750      	adds	r7, #80	@ 0x50
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800
 8002c38:	00f42400 	.word	0x00f42400
 8002c3c:	007a1200 	.word	0x007a1200

08002c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c44:	4b03      	ldr	r3, [pc, #12]	@ (8002c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20000004 	.word	0x20000004

08002c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c5c:	f7ff fff0 	bl	8002c40 <HAL_RCC_GetHCLKFreq>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4b05      	ldr	r3, [pc, #20]	@ (8002c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	0a9b      	lsrs	r3, r3, #10
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	4903      	ldr	r1, [pc, #12]	@ (8002c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c6e:	5ccb      	ldrb	r3, [r1, r3]
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	08007cdc 	.word	0x08007cdc

08002c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c84:	f7ff ffdc 	bl	8002c40 <HAL_RCC_GetHCLKFreq>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	0b5b      	lsrs	r3, r3, #13
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	4903      	ldr	r1, [pc, #12]	@ (8002ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c96:	5ccb      	ldrb	r3, [r1, r3]
 8002c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	08007cdc 	.word	0x08007cdc

08002ca8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	220f      	movs	r2, #15
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cb8:	4b12      	ldr	r3, [pc, #72]	@ (8002d04 <HAL_RCC_GetClockConfig+0x5c>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 0203 	and.w	r2, r3, #3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d04 <HAL_RCC_GetClockConfig+0x5c>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d04 <HAL_RCC_GetClockConfig+0x5c>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002cdc:	4b09      	ldr	r3, [pc, #36]	@ (8002d04 <HAL_RCC_GetClockConfig+0x5c>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	08db      	lsrs	r3, r3, #3
 8002ce2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002cea:	4b07      	ldr	r3, [pc, #28]	@ (8002d08 <HAL_RCC_GetClockConfig+0x60>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 020f 	and.w	r2, r3, #15
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	601a      	str	r2, [r3, #0]
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40023c00 	.word	0x40023c00

08002d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e01d      	b.n	8002d5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fe f8d0 	bl	8000ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3304      	adds	r3, #4
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	f000 fa46 	bl	80031dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b085      	sub	sp, #20
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2b06      	cmp	r3, #6
 8002d82:	d007      	beq.n	8002d94 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b085      	sub	sp, #20
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 0201 	orr.w	r2, r2, #1
 8002dc0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b06      	cmp	r3, #6
 8002dd2:	d007      	beq.n	8002de4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d122      	bne.n	8002e4e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d11b      	bne.n	8002e4e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f06f 0202 	mvn.w	r2, #2
 8002e1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f9b2 	bl	800319e <HAL_TIM_IC_CaptureCallback>
 8002e3a:	e005      	b.n	8002e48 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f9a4 	bl	800318a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f9b5 	bl	80031b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d122      	bne.n	8002ea2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d11b      	bne.n	8002ea2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f06f 0204 	mvn.w	r2, #4
 8002e72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f988 	bl	800319e <HAL_TIM_IC_CaptureCallback>
 8002e8e:	e005      	b.n	8002e9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f97a 	bl	800318a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f98b 	bl	80031b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d122      	bne.n	8002ef6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d11b      	bne.n	8002ef6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f06f 0208 	mvn.w	r2, #8
 8002ec6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2204      	movs	r2, #4
 8002ecc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f95e 	bl	800319e <HAL_TIM_IC_CaptureCallback>
 8002ee2:	e005      	b.n	8002ef0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f950 	bl	800318a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f961 	bl	80031b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b10      	cmp	r3, #16
 8002f02:	d122      	bne.n	8002f4a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d11b      	bne.n	8002f4a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f06f 0210 	mvn.w	r2, #16
 8002f1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2208      	movs	r2, #8
 8002f20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f934 	bl	800319e <HAL_TIM_IC_CaptureCallback>
 8002f36:	e005      	b.n	8002f44 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f926 	bl	800318a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f937 	bl	80031b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d10e      	bne.n	8002f76 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d107      	bne.n	8002f76 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f06f 0201 	mvn.w	r2, #1
 8002f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7fd ff1d 	bl	8000db0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f80:	2b80      	cmp	r3, #128	@ 0x80
 8002f82:	d10e      	bne.n	8002fa2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f8e:	2b80      	cmp	r3, #128	@ 0x80
 8002f90:	d107      	bne.n	8002fa2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fadd 	bl	800355c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fac:	2b40      	cmp	r3, #64	@ 0x40
 8002fae:	d10e      	bne.n	8002fce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fba:	2b40      	cmp	r3, #64	@ 0x40
 8002fbc:	d107      	bne.n	8002fce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f8fc 	bl	80031c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f003 0320 	and.w	r3, r3, #32
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d10e      	bne.n	8002ffa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d107      	bne.n	8002ffa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f06f 0220 	mvn.w	r2, #32
 8002ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 faa7 	bl	8003548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b084      	sub	sp, #16
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_TIM_ConfigClockSource+0x18>
 8003016:	2302      	movs	r3, #2
 8003018:	e0b3      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x180>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2202      	movs	r2, #2
 8003026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003038:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003040:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003052:	d03e      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0xd0>
 8003054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003058:	f200 8087 	bhi.w	800316a <HAL_TIM_ConfigClockSource+0x168>
 800305c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003060:	f000 8085 	beq.w	800316e <HAL_TIM_ConfigClockSource+0x16c>
 8003064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003068:	d87f      	bhi.n	800316a <HAL_TIM_ConfigClockSource+0x168>
 800306a:	2b70      	cmp	r3, #112	@ 0x70
 800306c:	d01a      	beq.n	80030a4 <HAL_TIM_ConfigClockSource+0xa2>
 800306e:	2b70      	cmp	r3, #112	@ 0x70
 8003070:	d87b      	bhi.n	800316a <HAL_TIM_ConfigClockSource+0x168>
 8003072:	2b60      	cmp	r3, #96	@ 0x60
 8003074:	d050      	beq.n	8003118 <HAL_TIM_ConfigClockSource+0x116>
 8003076:	2b60      	cmp	r3, #96	@ 0x60
 8003078:	d877      	bhi.n	800316a <HAL_TIM_ConfigClockSource+0x168>
 800307a:	2b50      	cmp	r3, #80	@ 0x50
 800307c:	d03c      	beq.n	80030f8 <HAL_TIM_ConfigClockSource+0xf6>
 800307e:	2b50      	cmp	r3, #80	@ 0x50
 8003080:	d873      	bhi.n	800316a <HAL_TIM_ConfigClockSource+0x168>
 8003082:	2b40      	cmp	r3, #64	@ 0x40
 8003084:	d058      	beq.n	8003138 <HAL_TIM_ConfigClockSource+0x136>
 8003086:	2b40      	cmp	r3, #64	@ 0x40
 8003088:	d86f      	bhi.n	800316a <HAL_TIM_ConfigClockSource+0x168>
 800308a:	2b30      	cmp	r3, #48	@ 0x30
 800308c:	d064      	beq.n	8003158 <HAL_TIM_ConfigClockSource+0x156>
 800308e:	2b30      	cmp	r3, #48	@ 0x30
 8003090:	d86b      	bhi.n	800316a <HAL_TIM_ConfigClockSource+0x168>
 8003092:	2b20      	cmp	r3, #32
 8003094:	d060      	beq.n	8003158 <HAL_TIM_ConfigClockSource+0x156>
 8003096:	2b20      	cmp	r3, #32
 8003098:	d867      	bhi.n	800316a <HAL_TIM_ConfigClockSource+0x168>
 800309a:	2b00      	cmp	r3, #0
 800309c:	d05c      	beq.n	8003158 <HAL_TIM_ConfigClockSource+0x156>
 800309e:	2b10      	cmp	r3, #16
 80030a0:	d05a      	beq.n	8003158 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80030a2:	e062      	b.n	800316a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	6899      	ldr	r1, [r3, #8]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f000 f9ac 	bl	8003410 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80030c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	609a      	str	r2, [r3, #8]
      break;
 80030d0:	e04e      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6899      	ldr	r1, [r3, #8]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f000 f995 	bl	8003410 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030f4:	609a      	str	r2, [r3, #8]
      break;
 80030f6:	e03b      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	461a      	mov	r2, r3
 8003106:	f000 f909 	bl	800331c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2150      	movs	r1, #80	@ 0x50
 8003110:	4618      	mov	r0, r3
 8003112:	f000 f962 	bl	80033da <TIM_ITRx_SetConfig>
      break;
 8003116:	e02b      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	6859      	ldr	r1, [r3, #4]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	461a      	mov	r2, r3
 8003126:	f000 f928 	bl	800337a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2160      	movs	r1, #96	@ 0x60
 8003130:	4618      	mov	r0, r3
 8003132:	f000 f952 	bl	80033da <TIM_ITRx_SetConfig>
      break;
 8003136:	e01b      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	461a      	mov	r2, r3
 8003146:	f000 f8e9 	bl	800331c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2140      	movs	r1, #64	@ 0x40
 8003150:	4618      	mov	r0, r3
 8003152:	f000 f942 	bl	80033da <TIM_ITRx_SetConfig>
      break;
 8003156:	e00b      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4619      	mov	r1, r3
 8003162:	4610      	mov	r0, r2
 8003164:	f000 f939 	bl	80033da <TIM_ITRx_SetConfig>
      break;
 8003168:	e002      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800316a:	bf00      	nop
 800316c:	e000      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800316e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a40      	ldr	r2, [pc, #256]	@ (80032f0 <TIM_Base_SetConfig+0x114>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d013      	beq.n	800321c <TIM_Base_SetConfig+0x40>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031fa:	d00f      	beq.n	800321c <TIM_Base_SetConfig+0x40>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a3d      	ldr	r2, [pc, #244]	@ (80032f4 <TIM_Base_SetConfig+0x118>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00b      	beq.n	800321c <TIM_Base_SetConfig+0x40>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a3c      	ldr	r2, [pc, #240]	@ (80032f8 <TIM_Base_SetConfig+0x11c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d007      	beq.n	800321c <TIM_Base_SetConfig+0x40>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a3b      	ldr	r2, [pc, #236]	@ (80032fc <TIM_Base_SetConfig+0x120>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <TIM_Base_SetConfig+0x40>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a3a      	ldr	r2, [pc, #232]	@ (8003300 <TIM_Base_SetConfig+0x124>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d108      	bne.n	800322e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a2f      	ldr	r2, [pc, #188]	@ (80032f0 <TIM_Base_SetConfig+0x114>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d02b      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800323c:	d027      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a2c      	ldr	r2, [pc, #176]	@ (80032f4 <TIM_Base_SetConfig+0x118>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d023      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a2b      	ldr	r2, [pc, #172]	@ (80032f8 <TIM_Base_SetConfig+0x11c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d01f      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a2a      	ldr	r2, [pc, #168]	@ (80032fc <TIM_Base_SetConfig+0x120>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d01b      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a29      	ldr	r2, [pc, #164]	@ (8003300 <TIM_Base_SetConfig+0x124>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d017      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a28      	ldr	r2, [pc, #160]	@ (8003304 <TIM_Base_SetConfig+0x128>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d013      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a27      	ldr	r2, [pc, #156]	@ (8003308 <TIM_Base_SetConfig+0x12c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00f      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a26      	ldr	r2, [pc, #152]	@ (800330c <TIM_Base_SetConfig+0x130>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00b      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a25      	ldr	r2, [pc, #148]	@ (8003310 <TIM_Base_SetConfig+0x134>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d007      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a24      	ldr	r2, [pc, #144]	@ (8003314 <TIM_Base_SetConfig+0x138>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d003      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a23      	ldr	r2, [pc, #140]	@ (8003318 <TIM_Base_SetConfig+0x13c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d108      	bne.n	80032a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a0a      	ldr	r2, [pc, #40]	@ (80032f0 <TIM_Base_SetConfig+0x114>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d003      	beq.n	80032d4 <TIM_Base_SetConfig+0xf8>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003300 <TIM_Base_SetConfig+0x124>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d103      	bne.n	80032dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	615a      	str	r2, [r3, #20]
}
 80032e2:	bf00      	nop
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40010000 	.word	0x40010000
 80032f4:	40000400 	.word	0x40000400
 80032f8:	40000800 	.word	0x40000800
 80032fc:	40000c00 	.word	0x40000c00
 8003300:	40010400 	.word	0x40010400
 8003304:	40014000 	.word	0x40014000
 8003308:	40014400 	.word	0x40014400
 800330c:	40014800 	.word	0x40014800
 8003310:	40001800 	.word	0x40001800
 8003314:	40001c00 	.word	0x40001c00
 8003318:	40002000 	.word	0x40002000

0800331c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	f023 0201 	bic.w	r2, r3, #1
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f023 030a 	bic.w	r3, r3, #10
 8003358:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4313      	orrs	r3, r2
 8003360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	621a      	str	r2, [r3, #32]
}
 800336e:	bf00      	nop
 8003370:	371c      	adds	r7, #28
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800337a:	b480      	push	{r7}
 800337c:	b087      	sub	sp, #28
 800337e:	af00      	add	r7, sp, #0
 8003380:	60f8      	str	r0, [r7, #12]
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	f023 0210 	bic.w	r2, r3, #16
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80033a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	031b      	lsls	r3, r3, #12
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80033b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	621a      	str	r2, [r3, #32]
}
 80033ce:	bf00      	nop
 80033d0:	371c      	adds	r7, #28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033da:	b480      	push	{r7}
 80033dc:	b085      	sub	sp, #20
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f043 0307 	orr.w	r3, r3, #7
 80033fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	609a      	str	r2, [r3, #8]
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800342a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	021a      	lsls	r2, r3, #8
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	431a      	orrs	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4313      	orrs	r3, r2
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	609a      	str	r2, [r3, #8]
}
 8003444:	bf00      	nop
 8003446:	371c      	adds	r7, #28
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003464:	2302      	movs	r3, #2
 8003466:	e05a      	b.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800348e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a21      	ldr	r2, [pc, #132]	@ (800352c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d022      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034b4:	d01d      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003530 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d018      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003534 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00e      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a18      	ldr	r2, [pc, #96]	@ (800353c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d009      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a17      	ldr	r2, [pc, #92]	@ (8003540 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d004      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a15      	ldr	r2, [pc, #84]	@ (8003544 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d10c      	bne.n	800350c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	4313      	orrs	r3, r2
 8003502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40010000 	.word	0x40010000
 8003530:	40000400 	.word	0x40000400
 8003534:	40000800 	.word	0x40000800
 8003538:	40000c00 	.word	0x40000c00
 800353c:	40010400 	.word	0x40010400
 8003540:	40014000 	.word	0x40014000
 8003544:	40001800 	.word	0x40001800

08003548 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e03f      	b.n	8003602 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd fcc0 	bl	8000f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2224      	movs	r2, #36	@ 0x24
 80035a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fb4b 	bl	8003c50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b088      	sub	sp, #32
 800360e:	af02      	add	r7, sp, #8
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	603b      	str	r3, [r7, #0]
 8003616:	4613      	mov	r3, r2
 8003618:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b20      	cmp	r3, #32
 8003628:	f040 8083 	bne.w	8003732 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <HAL_UART_Transmit+0x2e>
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e07b      	b.n	8003734 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_UART_Transmit+0x40>
 8003646:	2302      	movs	r3, #2
 8003648:	e074      	b.n	8003734 <HAL_UART_Transmit+0x12a>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2221      	movs	r2, #33	@ 0x21
 800365c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003660:	f7fd fe08 	bl	8001274 <HAL_GetTick>
 8003664:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	88fa      	ldrh	r2, [r7, #6]
 800366a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	88fa      	ldrh	r2, [r7, #6]
 8003670:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 800367a:	e042      	b.n	8003702 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003692:	d122      	bne.n	80036da <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	2200      	movs	r2, #0
 800369c:	2180      	movs	r1, #128	@ 0x80
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f96a 	bl	8003978 <UART_WaitOnFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e042      	b.n	8003734 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036c0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d103      	bne.n	80036d2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	3302      	adds	r3, #2
 80036ce:	60bb      	str	r3, [r7, #8]
 80036d0:	e017      	b.n	8003702 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	3301      	adds	r3, #1
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	e013      	b.n	8003702 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2200      	movs	r2, #0
 80036e2:	2180      	movs	r1, #128	@ 0x80
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f947 	bl	8003978 <UART_WaitOnFlagUntilTimeout>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e01f      	b.n	8003734 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	60ba      	str	r2, [r7, #8]
 80036fa:	781a      	ldrb	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1b7      	bne.n	800367c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2200      	movs	r2, #0
 8003714:	2140      	movs	r1, #64	@ 0x40
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f92e 	bl	8003978 <UART_WaitOnFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e006      	b.n	8003734 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	e000      	b.n	8003734 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003732:	2302      	movs	r3, #2
  }
}
 8003734:	4618      	mov	r0, r3
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10d      	bne.n	800378e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_UART_IRQHandler+0x52>
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f9e0 	bl	8003b4c <UART_Receive_IT>
      return;
 800378c:	e0d0      	b.n	8003930 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 80b0 	beq.w	80038f6 <HAL_UART_IRQHandler+0x1ba>
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d105      	bne.n	80037ac <HAL_UART_IRQHandler+0x70>
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 80a5 	beq.w	80038f6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_UART_IRQHandler+0x90>
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c4:	f043 0201 	orr.w	r2, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HAL_UART_IRQHandler+0xb0>
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e4:	f043 0202 	orr.w	r2, r3, #2
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_UART_IRQHandler+0xd0>
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003804:	f043 0204 	orr.w	r2, r3, #4
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00f      	beq.n	8003836 <HAL_UART_IRQHandler+0xfa>
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b00      	cmp	r3, #0
 800381e:	d104      	bne.n	800382a <HAL_UART_IRQHandler+0xee>
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800382e:	f043 0208 	orr.w	r2, r3, #8
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800383a:	2b00      	cmp	r3, #0
 800383c:	d077      	beq.n	800392e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f003 0320 	and.w	r3, r3, #32
 8003844:	2b00      	cmp	r3, #0
 8003846:	d007      	beq.n	8003858 <HAL_UART_IRQHandler+0x11c>
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f97a 	bl	8003b4c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003862:	2b40      	cmp	r3, #64	@ 0x40
 8003864:	bf0c      	ite	eq
 8003866:	2301      	moveq	r3, #1
 8003868:	2300      	movne	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d102      	bne.n	8003880 <HAL_UART_IRQHandler+0x144>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d031      	beq.n	80038e4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f8c3 	bl	8003a0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003890:	2b40      	cmp	r3, #64	@ 0x40
 8003892:	d123      	bne.n	80038dc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038a2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d013      	beq.n	80038d4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b0:	4a21      	ldr	r2, [pc, #132]	@ (8003938 <HAL_UART_IRQHandler+0x1fc>)
 80038b2:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fe fb75 	bl	8001fa8 <HAL_DMA_Abort_IT>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d016      	beq.n	80038f2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80038ce:	4610      	mov	r0, r2
 80038d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d2:	e00e      	b.n	80038f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f845 	bl	8003964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038da:	e00a      	b.n	80038f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f841 	bl	8003964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e2:	e006      	b.n	80038f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f83d 	bl	8003964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
    return;
 80038f0:	e01d      	b.n	800392e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f2:	bf00      	nop
    return;
 80038f4:	e01b      	b.n	800392e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_UART_IRQHandler+0x1d6>
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f8b0 	bl	8003a70 <UART_Transmit_IT>
    return;
 8003910:	e00e      	b.n	8003930 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003918:	2b00      	cmp	r3, #0
 800391a:	d009      	beq.n	8003930 <HAL_UART_IRQHandler+0x1f4>
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d004      	beq.n	8003930 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f8f8 	bl	8003b1c <UART_EndTransmit_IT>
    return;
 800392c:	e000      	b.n	8003930 <HAL_UART_IRQHandler+0x1f4>
    return;
 800392e:	bf00      	nop
  }
}
 8003930:	3720      	adds	r7, #32
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	08003a49 	.word	0x08003a49

0800393c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	4613      	mov	r3, r2
 8003986:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003988:	e02c      	b.n	80039e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003990:	d028      	beq.n	80039e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d007      	beq.n	80039a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003998:	f7fd fc6c 	bl	8001274 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d21d      	bcs.n	80039e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80039b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695a      	ldr	r2, [r3, #20]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0201 	bic.w	r2, r2, #1
 80039c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e00f      	b.n	8003a04 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	4013      	ands	r3, r2
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	bf0c      	ite	eq
 80039f4:	2301      	moveq	r3, #1
 80039f6:	2300      	movne	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	79fb      	ldrb	r3, [r7, #7]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d0c3      	beq.n	800398a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8003a22:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695a      	ldr	r2, [r3, #20]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0201 	bic.w	r2, r2, #1
 8003a32:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f7ff ff7e 	bl	8003964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a68:	bf00      	nop
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b21      	cmp	r3, #33	@ 0x21
 8003a82:	d144      	bne.n	8003b0e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a8c:	d11a      	bne.n	8003ac4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aa2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d105      	bne.n	8003ab8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	1c9a      	adds	r2, r3, #2
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	621a      	str	r2, [r3, #32]
 8003ab6:	e00e      	b.n	8003ad6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	621a      	str	r2, [r3, #32]
 8003ac2:	e008      	b.n	8003ad6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	1c59      	adds	r1, r3, #1
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6211      	str	r1, [r2, #32]
 8003ace:	781a      	ldrb	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10f      	bne.n	8003b0a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003af8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b08:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e000      	b.n	8003b10 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003b0e:	2302      	movs	r3, #2
  }
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b32:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff fefd 	bl	800393c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b22      	cmp	r3, #34	@ 0x22
 8003b5e:	d171      	bne.n	8003c44 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b68:	d123      	bne.n	8003bb2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10e      	bne.n	8003b96 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8e:	1c9a      	adds	r2, r3, #2
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b94:	e029      	b.n	8003bea <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bb0:	e01b      	b.n	8003bea <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6858      	ldr	r0, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc4:	1c59      	adds	r1, r3, #1
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6291      	str	r1, [r2, #40]	@ 0x28
 8003bca:	b2c2      	uxtb	r2, r0
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	e00c      	b.n	8003bea <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bdc:	1c58      	adds	r0, r3, #1
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	6288      	str	r0, [r1, #40]	@ 0x28
 8003be2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d120      	bne.n	8003c40 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0220 	bic.w	r2, r2, #32
 8003c0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695a      	ldr	r2, [r3, #20]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff fe8a 	bl	8003950 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	e002      	b.n	8003c46 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	e000      	b.n	8003c46 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003c44:	2302      	movs	r3, #2
  }
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c54:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c5e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c6a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003c6e:	68d9      	ldr	r1, [r3, #12]
 8003c70:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	ea40 0301 	orr.w	r3, r0, r1
 8003c7a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	431a      	orrs	r2, r3
 8003c92:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 8003c9e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003caa:	f021 010c 	bic.w	r1, r1, #12
 8003cae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cbc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003cc8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003ccc:	6999      	ldr	r1, [r3, #24]
 8003cce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	ea40 0301 	orr.w	r3, r0, r1
 8003cd8:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cda:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ce4:	f040 824a 	bne.w	800417c <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ce8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	4b96      	ldr	r3, [pc, #600]	@ (8003f48 <UART_SetConfig+0x2f8>)
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d006      	beq.n	8003d02 <UART_SetConfig+0xb2>
 8003cf4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	4b94      	ldr	r3, [pc, #592]	@ (8003f4c <UART_SetConfig+0x2fc>)
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	f040 8129 	bne.w	8003f54 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d02:	f7fe ffbd 	bl	8002c80 <HAL_RCC_GetPCLK2Freq>
 8003d06:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8003d14:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8003d18:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 8003d1c:	4622      	mov	r2, r4
 8003d1e:	462b      	mov	r3, r5
 8003d20:	1891      	adds	r1, r2, r2
 8003d22:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8003d26:	415b      	adcs	r3, r3
 8003d28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003d2c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8003d30:	4621      	mov	r1, r4
 8003d32:	1851      	adds	r1, r2, r1
 8003d34:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8003d38:	4629      	mov	r1, r5
 8003d3a:	414b      	adcs	r3, r1
 8003d3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 8003d4c:	4649      	mov	r1, r9
 8003d4e:	00cb      	lsls	r3, r1, #3
 8003d50:	4641      	mov	r1, r8
 8003d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d56:	4641      	mov	r1, r8
 8003d58:	00ca      	lsls	r2, r1, #3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4603      	mov	r3, r0
 8003d60:	4622      	mov	r2, r4
 8003d62:	189b      	adds	r3, r3, r2
 8003d64:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8003d68:	462b      	mov	r3, r5
 8003d6a:	460a      	mov	r2, r1
 8003d6c:	eb42 0303 	adc.w	r3, r2, r3
 8003d70:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8003d74:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003d80:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8003d84:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	18db      	adds	r3, r3, r3
 8003d8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d90:	4613      	mov	r3, r2
 8003d92:	eb42 0303 	adc.w	r3, r2, r3
 8003d96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d9a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8003d9e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8003da2:	f7fc fa65 	bl	8000270 <__aeabi_uldivmod>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4b69      	ldr	r3, [pc, #420]	@ (8003f50 <UART_SetConfig+0x300>)
 8003dac:	fba3 2302 	umull	r2, r3, r3, r2
 8003db0:	095b      	lsrs	r3, r3, #5
 8003db2:	011c      	lsls	r4, r3, #4
 8003db4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003db8:	2200      	movs	r2, #0
 8003dba:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8003dbe:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8003dc2:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 8003dc6:	4642      	mov	r2, r8
 8003dc8:	464b      	mov	r3, r9
 8003dca:	1891      	adds	r1, r2, r2
 8003dcc:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8003dd0:	415b      	adcs	r3, r3
 8003dd2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003dd6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8003dda:	4641      	mov	r1, r8
 8003ddc:	1851      	adds	r1, r2, r1
 8003dde:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8003de2:	4649      	mov	r1, r9
 8003de4:	414b      	adcs	r3, r1
 8003de6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 8003df6:	4659      	mov	r1, fp
 8003df8:	00cb      	lsls	r3, r1, #3
 8003dfa:	4651      	mov	r1, sl
 8003dfc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e00:	4651      	mov	r1, sl
 8003e02:	00ca      	lsls	r2, r1, #3
 8003e04:	4610      	mov	r0, r2
 8003e06:	4619      	mov	r1, r3
 8003e08:	4603      	mov	r3, r0
 8003e0a:	4642      	mov	r2, r8
 8003e0c:	189b      	adds	r3, r3, r2
 8003e0e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003e12:	464b      	mov	r3, r9
 8003e14:	460a      	mov	r2, r1
 8003e16:	eb42 0303 	adc.w	r3, r2, r3
 8003e1a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8003e1e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003e2a:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8003e2e:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 8003e32:	460b      	mov	r3, r1
 8003e34:	18db      	adds	r3, r3, r3
 8003e36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	eb42 0303 	adc.w	r3, r2, r3
 8003e40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e44:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8003e48:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8003e4c:	f7fc fa10 	bl	8000270 <__aeabi_uldivmod>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4611      	mov	r1, r2
 8003e56:	4b3e      	ldr	r3, [pc, #248]	@ (8003f50 <UART_SetConfig+0x300>)
 8003e58:	fba3 2301 	umull	r2, r3, r3, r1
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	2264      	movs	r2, #100	@ 0x64
 8003e60:	fb02 f303 	mul.w	r3, r2, r3
 8003e64:	1acb      	subs	r3, r1, r3
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e6c:	4b38      	ldr	r3, [pc, #224]	@ (8003f50 <UART_SetConfig+0x300>)
 8003e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e7a:	441c      	add	r4, r3
 8003e7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003e80:	2200      	movs	r2, #0
 8003e82:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003e86:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8003e8a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8003e8e:	4642      	mov	r2, r8
 8003e90:	464b      	mov	r3, r9
 8003e92:	1891      	adds	r1, r2, r2
 8003e94:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8003e98:	415b      	adcs	r3, r3
 8003e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003e9e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8003ea2:	4641      	mov	r1, r8
 8003ea4:	1851      	adds	r1, r2, r1
 8003ea6:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8003eaa:	4649      	mov	r1, r9
 8003eac:	414b      	adcs	r3, r1
 8003eae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 8003ebe:	4659      	mov	r1, fp
 8003ec0:	00cb      	lsls	r3, r1, #3
 8003ec2:	4651      	mov	r1, sl
 8003ec4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ec8:	4651      	mov	r1, sl
 8003eca:	00ca      	lsls	r2, r1, #3
 8003ecc:	4610      	mov	r0, r2
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	4642      	mov	r2, r8
 8003ed4:	189b      	adds	r3, r3, r2
 8003ed6:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003eda:	464b      	mov	r3, r9
 8003edc:	460a      	mov	r2, r1
 8003ede:	eb42 0303 	adc.w	r3, r2, r3
 8003ee2:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003ee6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003ef2:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8003ef6:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 8003efa:	460b      	mov	r3, r1
 8003efc:	18db      	adds	r3, r3, r3
 8003efe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f02:	4613      	mov	r3, r2
 8003f04:	eb42 0303 	adc.w	r3, r2, r3
 8003f08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f0c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003f10:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8003f14:	f7fc f9ac 	bl	8000270 <__aeabi_uldivmod>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f50 <UART_SetConfig+0x300>)
 8003f1e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	2164      	movs	r1, #100	@ 0x64
 8003f26:	fb01 f303 	mul.w	r3, r1, r3
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	3332      	adds	r3, #50	@ 0x32
 8003f30:	4a07      	ldr	r2, [pc, #28]	@ (8003f50 <UART_SetConfig+0x300>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	f003 0207 	and.w	r2, r3, #7
 8003f3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4422      	add	r2, r4
 8003f44:	609a      	str	r2, [r3, #8]
 8003f46:	e34a      	b.n	80045de <UART_SetConfig+0x98e>
 8003f48:	40011000 	.word	0x40011000
 8003f4c:	40011400 	.word	0x40011400
 8003f50:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f54:	f7fe fe80 	bl	8002c58 <HAL_RCC_GetPCLK1Freq>
 8003f58:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003f60:	2200      	movs	r2, #0
 8003f62:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003f66:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8003f6a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 8003f6e:	4622      	mov	r2, r4
 8003f70:	462b      	mov	r3, r5
 8003f72:	1891      	adds	r1, r2, r2
 8003f74:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8003f78:	415b      	adcs	r3, r3
 8003f7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003f7e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003f82:	4621      	mov	r1, r4
 8003f84:	eb12 0a01 	adds.w	sl, r2, r1
 8003f88:	4629      	mov	r1, r5
 8003f8a:	eb43 0b01 	adc.w	fp, r3, r1
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f9a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fa2:	4692      	mov	sl, r2
 8003fa4:	469b      	mov	fp, r3
 8003fa6:	4623      	mov	r3, r4
 8003fa8:	eb1a 0303 	adds.w	r3, sl, r3
 8003fac:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003fb0:	462b      	mov	r3, r5
 8003fb2:	eb4b 0303 	adc.w	r3, fp, r3
 8003fb6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003fba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003fc6:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8003fca:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 8003fce:	460b      	mov	r3, r1
 8003fd0:	18db      	adds	r3, r3, r3
 8003fd2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	eb42 0303 	adc.w	r3, r2, r3
 8003fdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003fe0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8003fe4:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8003fe8:	f7fc f942 	bl	8000270 <__aeabi_uldivmod>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4b61      	ldr	r3, [pc, #388]	@ (8004178 <UART_SetConfig+0x528>)
 8003ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	011c      	lsls	r4, r3, #4
 8003ffa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003ffe:	2200      	movs	r2, #0
 8004000:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8004004:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8004008:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 800400c:	4642      	mov	r2, r8
 800400e:	464b      	mov	r3, r9
 8004010:	1891      	adds	r1, r2, r2
 8004012:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004014:	415b      	adcs	r3, r3
 8004016:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004018:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800401c:	4641      	mov	r1, r8
 800401e:	1851      	adds	r1, r2, r1
 8004020:	6739      	str	r1, [r7, #112]	@ 0x70
 8004022:	4649      	mov	r1, r9
 8004024:	414b      	adcs	r3, r1
 8004026:	677b      	str	r3, [r7, #116]	@ 0x74
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 8004034:	4659      	mov	r1, fp
 8004036:	00cb      	lsls	r3, r1, #3
 8004038:	4651      	mov	r1, sl
 800403a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800403e:	4651      	mov	r1, sl
 8004040:	00ca      	lsls	r2, r1, #3
 8004042:	4610      	mov	r0, r2
 8004044:	4619      	mov	r1, r3
 8004046:	4603      	mov	r3, r0
 8004048:	4642      	mov	r2, r8
 800404a:	189b      	adds	r3, r3, r2
 800404c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004050:	464b      	mov	r3, r9
 8004052:	460a      	mov	r2, r1
 8004054:	eb42 0303 	adc.w	r3, r2, r3
 8004058:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 800405c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004068:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 800406c:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 8004070:	460b      	mov	r3, r1
 8004072:	18db      	adds	r3, r3, r3
 8004074:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004076:	4613      	mov	r3, r2
 8004078:	eb42 0303 	adc.w	r3, r2, r3
 800407c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800407e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004082:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004086:	f7fc f8f3 	bl	8000270 <__aeabi_uldivmod>
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	4611      	mov	r1, r2
 8004090:	4b39      	ldr	r3, [pc, #228]	@ (8004178 <UART_SetConfig+0x528>)
 8004092:	fba3 2301 	umull	r2, r3, r3, r1
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	2264      	movs	r2, #100	@ 0x64
 800409a:	fb02 f303 	mul.w	r3, r2, r3
 800409e:	1acb      	subs	r3, r1, r3
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80040a6:	4b34      	ldr	r3, [pc, #208]	@ (8004178 <UART_SetConfig+0x528>)
 80040a8:	fba3 2302 	umull	r2, r3, r3, r2
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80040b4:	441c      	add	r4, r3
 80040b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80040ba:	2200      	movs	r2, #0
 80040bc:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80040c0:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80040c4:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 80040c8:	4642      	mov	r2, r8
 80040ca:	464b      	mov	r3, r9
 80040cc:	1891      	adds	r1, r2, r2
 80040ce:	6639      	str	r1, [r7, #96]	@ 0x60
 80040d0:	415b      	adcs	r3, r3
 80040d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80040d4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80040d8:	4641      	mov	r1, r8
 80040da:	1851      	adds	r1, r2, r1
 80040dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80040de:	4649      	mov	r1, r9
 80040e0:	414b      	adcs	r3, r1
 80040e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 80040f0:	4659      	mov	r1, fp
 80040f2:	00cb      	lsls	r3, r1, #3
 80040f4:	4651      	mov	r1, sl
 80040f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040fa:	4651      	mov	r1, sl
 80040fc:	00ca      	lsls	r2, r1, #3
 80040fe:	4610      	mov	r0, r2
 8004100:	4619      	mov	r1, r3
 8004102:	4603      	mov	r3, r0
 8004104:	4642      	mov	r2, r8
 8004106:	189b      	adds	r3, r3, r2
 8004108:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800410c:	464b      	mov	r3, r9
 800410e:	460a      	mov	r2, r1
 8004110:	eb42 0303 	adc.w	r3, r2, r3
 8004114:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8004118:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8004124:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8004128:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 800412c:	460b      	mov	r3, r1
 800412e:	18db      	adds	r3, r3, r3
 8004130:	653b      	str	r3, [r7, #80]	@ 0x50
 8004132:	4613      	mov	r3, r2
 8004134:	eb42 0303 	adc.w	r3, r2, r3
 8004138:	657b      	str	r3, [r7, #84]	@ 0x54
 800413a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800413e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8004142:	f7fc f895 	bl	8000270 <__aeabi_uldivmod>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4b0b      	ldr	r3, [pc, #44]	@ (8004178 <UART_SetConfig+0x528>)
 800414c:	fba3 1302 	umull	r1, r3, r3, r2
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	2164      	movs	r1, #100	@ 0x64
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	3332      	adds	r3, #50	@ 0x32
 800415e:	4a06      	ldr	r2, [pc, #24]	@ (8004178 <UART_SetConfig+0x528>)
 8004160:	fba2 2303 	umull	r2, r3, r2, r3
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	f003 0207 	and.w	r2, r3, #7
 800416a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4422      	add	r2, r4
 8004172:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004174:	e233      	b.n	80045de <UART_SetConfig+0x98e>
 8004176:	bf00      	nop
 8004178:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800417c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	4b8d      	ldr	r3, [pc, #564]	@ (80043b8 <UART_SetConfig+0x768>)
 8004184:	429a      	cmp	r2, r3
 8004186:	d006      	beq.n	8004196 <UART_SetConfig+0x546>
 8004188:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4b8b      	ldr	r3, [pc, #556]	@ (80043bc <UART_SetConfig+0x76c>)
 8004190:	429a      	cmp	r2, r3
 8004192:	f040 8117 	bne.w	80043c4 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004196:	f7fe fd73 	bl	8002c80 <HAL_RCC_GetPCLK2Freq>
 800419a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800419e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80041a8:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 80041ac:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 80041b0:	4622      	mov	r2, r4
 80041b2:	462b      	mov	r3, r5
 80041b4:	1891      	adds	r1, r2, r2
 80041b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041b8:	415b      	adcs	r3, r3
 80041ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041c0:	4621      	mov	r1, r4
 80041c2:	eb12 0801 	adds.w	r8, r2, r1
 80041c6:	4629      	mov	r1, r5
 80041c8:	eb43 0901 	adc.w	r9, r3, r1
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041e0:	4690      	mov	r8, r2
 80041e2:	4699      	mov	r9, r3
 80041e4:	4623      	mov	r3, r4
 80041e6:	eb18 0303 	adds.w	r3, r8, r3
 80041ea:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80041ee:	462b      	mov	r3, r5
 80041f0:	eb49 0303 	adc.w	r3, r9, r3
 80041f4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80041f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004204:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8004214:	4629      	mov	r1, r5
 8004216:	008b      	lsls	r3, r1, #2
 8004218:	4621      	mov	r1, r4
 800421a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800421e:	4621      	mov	r1, r4
 8004220:	008a      	lsls	r2, r1, #2
 8004222:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8004226:	f7fc f823 	bl	8000270 <__aeabi_uldivmod>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4b64      	ldr	r3, [pc, #400]	@ (80043c0 <UART_SetConfig+0x770>)
 8004230:	fba3 2302 	umull	r2, r3, r3, r2
 8004234:	095b      	lsrs	r3, r3, #5
 8004236:	011c      	lsls	r4, r3, #4
 8004238:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800423c:	2200      	movs	r2, #0
 800423e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8004242:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8004246:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 800424a:	4642      	mov	r2, r8
 800424c:	464b      	mov	r3, r9
 800424e:	1891      	adds	r1, r2, r2
 8004250:	6439      	str	r1, [r7, #64]	@ 0x40
 8004252:	415b      	adcs	r3, r3
 8004254:	647b      	str	r3, [r7, #68]	@ 0x44
 8004256:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800425a:	4641      	mov	r1, r8
 800425c:	1851      	adds	r1, r2, r1
 800425e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004260:	4649      	mov	r1, r9
 8004262:	414b      	adcs	r3, r1
 8004264:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 8004272:	4659      	mov	r1, fp
 8004274:	00cb      	lsls	r3, r1, #3
 8004276:	4651      	mov	r1, sl
 8004278:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800427c:	4651      	mov	r1, sl
 800427e:	00ca      	lsls	r2, r1, #3
 8004280:	4610      	mov	r0, r2
 8004282:	4619      	mov	r1, r3
 8004284:	4603      	mov	r3, r0
 8004286:	4642      	mov	r2, r8
 8004288:	189b      	adds	r3, r3, r2
 800428a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800428e:	464b      	mov	r3, r9
 8004290:	460a      	mov	r2, r1
 8004292:	eb42 0303 	adc.w	r3, r2, r3
 8004296:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800429a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80042a6:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 80042b6:	4649      	mov	r1, r9
 80042b8:	008b      	lsls	r3, r1, #2
 80042ba:	4641      	mov	r1, r8
 80042bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042c0:	4641      	mov	r1, r8
 80042c2:	008a      	lsls	r2, r1, #2
 80042c4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80042c8:	f7fb ffd2 	bl	8000270 <__aeabi_uldivmod>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4611      	mov	r1, r2
 80042d2:	4b3b      	ldr	r3, [pc, #236]	@ (80043c0 <UART_SetConfig+0x770>)
 80042d4:	fba3 2301 	umull	r2, r3, r3, r1
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	2264      	movs	r2, #100	@ 0x64
 80042dc:	fb02 f303 	mul.w	r3, r2, r3
 80042e0:	1acb      	subs	r3, r1, r3
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	3332      	adds	r3, #50	@ 0x32
 80042e6:	4a36      	ldr	r2, [pc, #216]	@ (80043c0 <UART_SetConfig+0x770>)
 80042e8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042f2:	441c      	add	r4, r3
 80042f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80042f8:	2200      	movs	r2, #0
 80042fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80042fe:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8004302:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 8004306:	4642      	mov	r2, r8
 8004308:	464b      	mov	r3, r9
 800430a:	1891      	adds	r1, r2, r2
 800430c:	6339      	str	r1, [r7, #48]	@ 0x30
 800430e:	415b      	adcs	r3, r3
 8004310:	637b      	str	r3, [r7, #52]	@ 0x34
 8004312:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004316:	4641      	mov	r1, r8
 8004318:	1851      	adds	r1, r2, r1
 800431a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800431c:	4649      	mov	r1, r9
 800431e:	414b      	adcs	r3, r1
 8004320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 800432e:	4659      	mov	r1, fp
 8004330:	00cb      	lsls	r3, r1, #3
 8004332:	4651      	mov	r1, sl
 8004334:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004338:	4651      	mov	r1, sl
 800433a:	00ca      	lsls	r2, r1, #3
 800433c:	4610      	mov	r0, r2
 800433e:	4619      	mov	r1, r3
 8004340:	4603      	mov	r3, r0
 8004342:	4642      	mov	r2, r8
 8004344:	189b      	adds	r3, r3, r2
 8004346:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800434a:	464b      	mov	r3, r9
 800434c:	460a      	mov	r2, r1
 800434e:	eb42 0303 	adc.w	r3, r2, r3
 8004352:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004356:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004362:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 8004372:	4649      	mov	r1, r9
 8004374:	008b      	lsls	r3, r1, #2
 8004376:	4641      	mov	r1, r8
 8004378:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800437c:	4641      	mov	r1, r8
 800437e:	008a      	lsls	r2, r1, #2
 8004380:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8004384:	f7fb ff74 	bl	8000270 <__aeabi_uldivmod>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4b0c      	ldr	r3, [pc, #48]	@ (80043c0 <UART_SetConfig+0x770>)
 800438e:	fba3 1302 	umull	r1, r3, r3, r2
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	2164      	movs	r1, #100	@ 0x64
 8004396:	fb01 f303 	mul.w	r3, r1, r3
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	3332      	adds	r3, #50	@ 0x32
 80043a0:	4a07      	ldr	r2, [pc, #28]	@ (80043c0 <UART_SetConfig+0x770>)
 80043a2:	fba2 2303 	umull	r2, r3, r2, r3
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	f003 020f 	and.w	r2, r3, #15
 80043ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4422      	add	r2, r4
 80043b4:	609a      	str	r2, [r3, #8]
 80043b6:	e112      	b.n	80045de <UART_SetConfig+0x98e>
 80043b8:	40011000 	.word	0x40011000
 80043bc:	40011400 	.word	0x40011400
 80043c0:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80043c4:	f7fe fc48 	bl	8002c58 <HAL_RCC_GetPCLK1Freq>
 80043c8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80043d0:	2200      	movs	r2, #0
 80043d2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80043d6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80043da:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 80043de:	4642      	mov	r2, r8
 80043e0:	464b      	mov	r3, r9
 80043e2:	1891      	adds	r1, r2, r2
 80043e4:	6239      	str	r1, [r7, #32]
 80043e6:	415b      	adcs	r3, r3
 80043e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043ee:	4641      	mov	r1, r8
 80043f0:	1854      	adds	r4, r2, r1
 80043f2:	4649      	mov	r1, r9
 80043f4:	eb43 0501 	adc.w	r5, r3, r1
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	00eb      	lsls	r3, r5, #3
 8004402:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004406:	00e2      	lsls	r2, r4, #3
 8004408:	4614      	mov	r4, r2
 800440a:	461d      	mov	r5, r3
 800440c:	4643      	mov	r3, r8
 800440e:	18e3      	adds	r3, r4, r3
 8004410:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8004414:	464b      	mov	r3, r9
 8004416:	eb45 0303 	adc.w	r3, r5, r3
 800441a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800441e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800442a:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 800443a:	4629      	mov	r1, r5
 800443c:	008b      	lsls	r3, r1, #2
 800443e:	4621      	mov	r1, r4
 8004440:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004444:	4621      	mov	r1, r4
 8004446:	008a      	lsls	r2, r1, #2
 8004448:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800444c:	f7fb ff10 	bl	8000270 <__aeabi_uldivmod>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4b65      	ldr	r3, [pc, #404]	@ (80045ec <UART_SetConfig+0x99c>)
 8004456:	fba3 2302 	umull	r2, r3, r3, r2
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	011c      	lsls	r4, r3, #4
 800445e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004462:	2200      	movs	r2, #0
 8004464:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004468:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 800446c:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8004470:	4642      	mov	r2, r8
 8004472:	464b      	mov	r3, r9
 8004474:	1891      	adds	r1, r2, r2
 8004476:	61b9      	str	r1, [r7, #24]
 8004478:	415b      	adcs	r3, r3
 800447a:	61fb      	str	r3, [r7, #28]
 800447c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004480:	4641      	mov	r1, r8
 8004482:	1851      	adds	r1, r2, r1
 8004484:	6139      	str	r1, [r7, #16]
 8004486:	4649      	mov	r1, r9
 8004488:	414b      	adcs	r3, r1
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004498:	4659      	mov	r1, fp
 800449a:	00cb      	lsls	r3, r1, #3
 800449c:	4651      	mov	r1, sl
 800449e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044a2:	4651      	mov	r1, sl
 80044a4:	00ca      	lsls	r2, r1, #3
 80044a6:	4610      	mov	r0, r2
 80044a8:	4619      	mov	r1, r3
 80044aa:	4603      	mov	r3, r0
 80044ac:	4642      	mov	r2, r8
 80044ae:	189b      	adds	r3, r3, r2
 80044b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80044b4:	464b      	mov	r3, r9
 80044b6:	460a      	mov	r2, r1
 80044b8:	eb42 0303 	adc.w	r3, r2, r3
 80044bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80044c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80044cc:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 80044dc:	4649      	mov	r1, r9
 80044de:	008b      	lsls	r3, r1, #2
 80044e0:	4641      	mov	r1, r8
 80044e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044e6:	4641      	mov	r1, r8
 80044e8:	008a      	lsls	r2, r1, #2
 80044ea:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 80044ee:	f7fb febf 	bl	8000270 <__aeabi_uldivmod>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	4611      	mov	r1, r2
 80044f8:	4b3c      	ldr	r3, [pc, #240]	@ (80045ec <UART_SetConfig+0x99c>)
 80044fa:	fba3 2301 	umull	r2, r3, r3, r1
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	2264      	movs	r2, #100	@ 0x64
 8004502:	fb02 f303 	mul.w	r3, r2, r3
 8004506:	1acb      	subs	r3, r1, r3
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	3332      	adds	r3, #50	@ 0x32
 800450c:	4a37      	ldr	r2, [pc, #220]	@ (80045ec <UART_SetConfig+0x99c>)
 800450e:	fba2 2303 	umull	r2, r3, r2, r3
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004518:	441c      	add	r4, r3
 800451a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800451e:	2200      	movs	r2, #0
 8004520:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004524:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004528:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800452c:	4642      	mov	r2, r8
 800452e:	464b      	mov	r3, r9
 8004530:	1891      	adds	r1, r2, r2
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	415b      	adcs	r3, r3
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800453c:	4641      	mov	r1, r8
 800453e:	1851      	adds	r1, r2, r1
 8004540:	6039      	str	r1, [r7, #0]
 8004542:	4649      	mov	r1, r9
 8004544:	414b      	adcs	r3, r1
 8004546:	607b      	str	r3, [r7, #4]
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004554:	4659      	mov	r1, fp
 8004556:	00cb      	lsls	r3, r1, #3
 8004558:	4651      	mov	r1, sl
 800455a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800455e:	4651      	mov	r1, sl
 8004560:	00ca      	lsls	r2, r1, #3
 8004562:	4610      	mov	r0, r2
 8004564:	4619      	mov	r1, r3
 8004566:	4603      	mov	r3, r0
 8004568:	4642      	mov	r2, r8
 800456a:	189b      	adds	r3, r3, r2
 800456c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004570:	464b      	mov	r3, r9
 8004572:	460a      	mov	r2, r1
 8004574:	eb42 0303 	adc.w	r3, r2, r3
 8004578:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800457c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004588:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8004598:	4649      	mov	r1, r9
 800459a:	008b      	lsls	r3, r1, #2
 800459c:	4641      	mov	r1, r8
 800459e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045a2:	4641      	mov	r1, r8
 80045a4:	008a      	lsls	r2, r1, #2
 80045a6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80045aa:	f7fb fe61 	bl	8000270 <__aeabi_uldivmod>
 80045ae:	4602      	mov	r2, r0
 80045b0:	460b      	mov	r3, r1
 80045b2:	4b0e      	ldr	r3, [pc, #56]	@ (80045ec <UART_SetConfig+0x99c>)
 80045b4:	fba3 1302 	umull	r1, r3, r3, r2
 80045b8:	095b      	lsrs	r3, r3, #5
 80045ba:	2164      	movs	r1, #100	@ 0x64
 80045bc:	fb01 f303 	mul.w	r3, r1, r3
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	3332      	adds	r3, #50	@ 0x32
 80045c6:	4a09      	ldr	r2, [pc, #36]	@ (80045ec <UART_SetConfig+0x99c>)
 80045c8:	fba2 2303 	umull	r2, r3, r2, r3
 80045cc:	095b      	lsrs	r3, r3, #5
 80045ce:	f003 020f 	and.w	r2, r3, #15
 80045d2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4422      	add	r2, r4
 80045da:	609a      	str	r2, [r3, #8]
}
 80045dc:	e7ff      	b.n	80045de <UART_SetConfig+0x98e>
 80045de:	bf00      	nop
 80045e0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80045e4:	46bd      	mov	sp, r7
 80045e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ea:	bf00      	nop
 80045ec:	51eb851f 	.word	0x51eb851f

080045f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	4603      	mov	r3, r0
 80045f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80045fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004602:	2b84      	cmp	r3, #132	@ 0x84
 8004604:	d005      	beq.n	8004612 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004606:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4413      	add	r3, r2
 800460e:	3303      	adds	r3, #3
 8004610:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004612:	68fb      	ldr	r3, [r7, #12]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004626:	f3ef 8305 	mrs	r3, IPSR
 800462a:	607b      	str	r3, [r7, #4]
  return(result);
 800462c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800462e:	2b00      	cmp	r3, #0
 8004630:	bf14      	ite	ne
 8004632:	2301      	movne	r3, #1
 8004634:	2300      	moveq	r3, #0
 8004636:	b2db      	uxtb	r3, r3
}
 8004638:	4618      	mov	r0, r3
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004648:	f001 fab8 	bl	8005bbc <vTaskStartScheduler>
  
  return osOK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	bd80      	pop	{r7, pc}

08004652 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004652:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004654:	b089      	sub	sp, #36	@ 0x24
 8004656:	af04      	add	r7, sp, #16
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d020      	beq.n	80046a6 <osThreadCreate+0x54>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d01c      	beq.n	80046a6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685c      	ldr	r4, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691e      	ldr	r6, [r3, #16]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff ffb6 	bl	80045f0 <makeFreeRtosPriority>
 8004684:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800468e:	9202      	str	r2, [sp, #8]
 8004690:	9301      	str	r3, [sp, #4]
 8004692:	9100      	str	r1, [sp, #0]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	4632      	mov	r2, r6
 8004698:	4629      	mov	r1, r5
 800469a:	4620      	mov	r0, r4
 800469c:	f001 f8c0 	bl	8005820 <xTaskCreateStatic>
 80046a0:	4603      	mov	r3, r0
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	e01c      	b.n	80046e0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685c      	ldr	r4, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046b2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff ff98 	bl	80045f0 <makeFreeRtosPriority>
 80046c0:	4602      	mov	r2, r0
 80046c2:	f107 030c 	add.w	r3, r7, #12
 80046c6:	9301      	str	r3, [sp, #4]
 80046c8:	9200      	str	r2, [sp, #0]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	4632      	mov	r2, r6
 80046ce:	4629      	mov	r1, r5
 80046d0:	4620      	mov	r0, r4
 80046d2:	f001 f905 	bl	80058e0 <xTaskCreate>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d001      	beq.n	80046e0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80046dc:	2300      	movs	r3, #0
 80046de:	e000      	b.n	80046e2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80046e0:	68fb      	ldr	r3, [r7, #12]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080046ec <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  taskYIELD();
 80046f0:	4b06      	ldr	r3, [pc, #24]	@ (800470c <osThreadYield+0x20>)
 80046f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	f3bf 8f6f 	isb	sy
  
  return osOK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	e000ed04 	.word	0xe000ed04

08004710 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <osDelay+0x16>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	e000      	b.n	8004728 <osDelay+0x18>
 8004726:	2301      	movs	r3, #1
 8004728:	4618      	mov	r0, r3
 800472a:	f001 fa11 	bl	8005b50 <vTaskDelay>
  
  return osOK;
 800472e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af02      	add	r7, sp, #8
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8004746:	2300      	movs	r3, #0
 8004748:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800474a:	f7ff ff69 	bl	8004620 <inHandlerMode>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01c      	beq.n	800478e <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8004754:	6839      	ldr	r1, [r7, #0]
 8004756:	f107 0208 	add.w	r2, r7, #8
 800475a:	f107 030c 	add.w	r3, r7, #12
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	4613      	mov	r3, r2
 8004762:	2201      	movs	r2, #1
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f001 ffeb 	bl	8006740 <xTaskGenericNotifyFromISR>
 800476a:	4603      	mov	r3, r0
 800476c:	2b01      	cmp	r3, #1
 800476e:	d002      	beq.n	8004776 <osSignalSet+0x3e>
      return 0x80000000;
 8004770:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004774:	e019      	b.n	80047aa <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d015      	beq.n	80047a8 <osSignalSet+0x70>
 800477c:	4b0d      	ldr	r3, [pc, #52]	@ (80047b4 <osSignalSet+0x7c>)
 800477e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	e00c      	b.n	80047a8 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800478e:	6839      	ldr	r1, [r7, #0]
 8004790:	f107 0308 	add.w	r3, r7, #8
 8004794:	2201      	movs	r2, #1
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f001 ff1a 	bl	80065d0 <xTaskGenericNotify>
 800479c:	4603      	mov	r3, r0
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d002      	beq.n	80047a8 <osSignalSet+0x70>
    return 0x80000000;
 80047a2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80047a6:	e000      	b.n	80047aa <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80047a8:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	e000ed04 	.word	0xe000ed04

080047b8 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80047b8:	b590      	push	{r4, r7, lr}
 80047ba:	b089      	sub	sp, #36	@ 0x24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80047c8:	2300      	movs	r3, #0
 80047ca:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d2:	d103      	bne.n	80047dc <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80047d4:	f04f 33ff 	mov.w	r3, #4294967295
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	e009      	b.n	80047f0 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d006      	beq.n	80047f0 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <osSignalWait+0x38>
      ticks = 1;
 80047ec:	2301      	movs	r3, #1
 80047ee:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80047f0:	f7ff ff16 	bl	8004620 <inHandlerMode>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80047fa:	2382      	movs	r3, #130	@ 0x82
 80047fc:	613b      	str	r3, [r7, #16]
 80047fe:	e01b      	b.n	8004838 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8004800:	68b9      	ldr	r1, [r7, #8]
 8004802:	f107 0310 	add.w	r3, r7, #16
 8004806:	1d1a      	adds	r2, r3, #4
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	2000      	movs	r0, #0
 800480c:	f001 fe86 	bl	800651c <xTaskNotifyWait>
 8004810:	4603      	mov	r3, r0
 8004812:	2b01      	cmp	r3, #1
 8004814:	d008      	beq.n	8004828 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d102      	bne.n	8004822 <osSignalWait+0x6a>
 800481c:	2300      	movs	r3, #0
 800481e:	613b      	str	r3, [r7, #16]
 8004820:	e00a      	b.n	8004838 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8004822:	2340      	movs	r3, #64	@ 0x40
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	e007      	b.n	8004838 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2b00      	cmp	r3, #0
 800482c:	da02      	bge.n	8004834 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800482e:	2386      	movs	r3, #134	@ 0x86
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	e001      	b.n	8004838 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8004834:	2308      	movs	r3, #8
 8004836:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	461c      	mov	r4, r3
 800483c:	f107 0310 	add.w	r3, r7, #16
 8004840:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004844:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	3724      	adds	r7, #36	@ 0x24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd90      	pop	{r4, r7, pc}

08004850 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	3303      	adds	r3, #3
 800485e:	f023 0303 	bic.w	r3, r3, #3
 8004862:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8004864:	2014      	movs	r0, #20
 8004866:	f002 fb01 	bl	8006e6c <pvPortMalloc>
 800486a:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d046      	beq.n	8004900 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2200      	movs	r2, #0
 8004884:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f002 faee 	bl	8006e6c <pvPortMalloc>
 8004890:	4602      	mov	r2, r0
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d02b      	beq.n	80048f6 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	fb02 f303 	mul.w	r3, r2, r3
 80048a8:	4618      	mov	r0, r3
 80048aa:	f002 fadf 	bl	8006e6c <pvPortMalloc>
 80048ae:	4602      	mov	r2, r0
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d011      	beq.n	80048e0 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80048bc:	2300      	movs	r3, #0
 80048be:	613b      	str	r3, [r7, #16]
 80048c0:	e008      	b.n	80048d4 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	4413      	add	r3, r2
 80048ca:	2200      	movs	r2, #0
 80048cc:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	3301      	adds	r3, #1
 80048d2:	613b      	str	r3, [r7, #16]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d3f1      	bcc.n	80048c2 <osPoolCreate+0x72>
 80048de:	e00f      	b.n	8004900 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f002 fb89 	bl	8006ffc <vPortFree>
        vPortFree(thePool);
 80048ea:	6978      	ldr	r0, [r7, #20]
 80048ec:	f002 fb86 	bl	8006ffc <vPortFree>
        thePool = NULL;
 80048f0:	2300      	movs	r3, #0
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	e004      	b.n	8004900 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80048f6:	6978      	ldr	r0, [r7, #20]
 80048f8:	f002 fb80 	bl	8006ffc <vPortFree>
      thePool = NULL;
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8004900:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8004902:	4618      	mov	r0, r3
 8004904:	3718      	adds	r7, #24
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b08a      	sub	sp, #40	@ 0x28
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8004912:	2300      	movs	r3, #0
 8004914:	627b      	str	r3, [r7, #36]	@ 0x24
  void *p = NULL;
 8004916:	2300      	movs	r3, #0
 8004918:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800491a:	f7ff fe81 	bl	8004620 <inHandlerMode>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00e      	beq.n	8004942 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004924:	f3ef 8211 	mrs	r2, BASEPRI
 8004928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	617a      	str	r2, [r7, #20]
 800493a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800493c:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800493e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004940:	e001      	b.n	8004946 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8004942:	f002 f971 	bl	8006c28 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
 800494a:	e029      	b.n	80049a0 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	4413      	add	r3, r2
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6892      	ldr	r2, [r2, #8]
 8004958:	fbb3 f1f2 	udiv	r1, r3, r2
 800495c:	fb01 f202 	mul.w	r2, r1, r2
 8004960:	1a9b      	subs	r3, r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	4413      	add	r3, r2
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d113      	bne.n	800499a <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	4413      	add	r3, r2
 800497a:	2201      	movs	r2, #1
 800497c:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4619      	mov	r1, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	fb02 f303 	mul.w	r3, r2, r3
 800498e:	440b      	add	r3, r1
 8004990:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	611a      	str	r2, [r3, #16]
      break;
 8004998:	e007      	b.n	80049aa <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	3301      	adds	r3, #1
 800499e:	61fb      	str	r3, [r7, #28]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d3d0      	bcc.n	800494c <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80049aa:	f7ff fe39 	bl	8004620 <inHandlerMode>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d005      	beq.n	80049c0 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80049b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049be:	e001      	b.n	80049c4 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80049c0:	f002 f964 	bl	8006c8c <vPortExitCritical>
  }
  
  return p;
 80049c4:	6a3b      	ldr	r3, [r7, #32]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3728      	adds	r7, #40	@ 0x28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b085      	sub	sp, #20
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
 80049d6:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <osPoolFree+0x14>
    return osErrorParameter;
 80049de:	2380      	movs	r3, #128	@ 0x80
 80049e0:	e030      	b.n	8004a44 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <osPoolFree+0x1e>
    return osErrorParameter;
 80049e8:	2380      	movs	r3, #128	@ 0x80
 80049ea:	e02b      	b.n	8004a44 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d201      	bcs.n	80049fa <osPoolFree+0x2c>
    return osErrorParameter;
 80049f6:	2380      	movs	r3, #128	@ 0x80
 80049f8:	e024      	b.n	8004a44 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6812      	ldr	r2, [r2, #0]
 8004a00:	1a9b      	subs	r3, r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68da      	ldr	r2, [r3, #12]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a0e:	fb01 f202 	mul.w	r2, r1, r2
 8004a12:	1a9b      	subs	r3, r3, r2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <osPoolFree+0x4e>
    return osErrorParameter;
 8004a18:	2380      	movs	r3, #128	@ 0x80
 8004a1a:	e013      	b.n	8004a44 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a26:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d301      	bcc.n	8004a36 <osPoolFree+0x68>
    return osErrorParameter;
 8004a32:	2380      	movs	r3, #128	@ 0x80
 8004a34:	e006      	b.n	8004a44 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	2200      	movs	r2, #0
 8004a40:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8004a50:	b590      	push	{r4, r7, lr}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	2300      	movs	r3, #0
 8004a68:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689c      	ldr	r4, [r3, #8]
 8004a6e:	200c      	movs	r0, #12
 8004a70:	f002 f9fc 	bl	8006e6c <pvPortMalloc>
 8004a74:	4603      	mov	r3, r0
 8004a76:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <osMailCreate+0x36>
    return NULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	e038      	b.n	8004af8 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6818      	ldr	r0, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	681c      	ldr	r4, [r3, #0]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2104      	movs	r1, #4
 8004a9e:	f000 fa4d 	bl	8004f3c <xQueueGenericCreate>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d107      	bne.n	8004ac2 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f002 fa9f 	bl	8006ffc <vPortFree>
    return NULL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	e01a      	b.n	8004af8 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	681c      	ldr	r4, [r3, #0]
 8004ac8:	f107 030c 	add.w	r3, r7, #12
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff febf 	bl	8004850 <osPoolCreate>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d107      	bne.n	8004af2 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f002 fa87 	bl	8006ffc <vPortFree>
    return NULL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	e002      	b.n	8004af8 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd90      	pop	{r4, r7, pc}

08004b00 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <osMailAlloc+0x14>
    return NULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	e006      	b.n	8004b22 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff fef6 	bl	800490a <osPoolAlloc>
 8004b1e:	60f8      	str	r0, [r7, #12]
  
  return p;
 8004b20:	68fb      	ldr	r3, [r7, #12]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <osMailCAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailCAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailCAlloc (osMailQId queue_id, uint32_t millisec)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	6039      	str	r1, [r7, #0]
  uint32_t i;
  void *p = osMailAlloc(queue_id, millisec);
 8004b34:	6839      	ldr	r1, [r7, #0]
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff ffe2 	bl	8004b00 <osMailAlloc>
 8004b3c:	60b8      	str	r0, [r7, #8]
  
  if (p) {
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d010      	beq.n	8004b66 <osMailCAlloc+0x3c>
    for (i = 0; i < queue_id->queue_def->item_sz; i++) {
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	e007      	b.n	8004b5a <osMailCAlloc+0x30>
      ((uint8_t *)p)[i] = 0;
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	2200      	movs	r2, #0
 8004b52:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < queue_id->queue_def->item_sz; i++) {
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3301      	adds	r3, #1
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d3f1      	bcc.n	8004b4a <osMailCAlloc+0x20>
    }
  }
  
  return p;
 8004b66:	68bb      	ldr	r3, [r7, #8]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <osMailPut+0x14>
    return osErrorParameter;
 8004b80:	2380      	movs	r3, #128	@ 0x80
 8004b82:	e02c      	b.n	8004bde <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8004b84:	2300      	movs	r3, #0
 8004b86:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8004b88:	f7ff fd4a 	bl	8004620 <inHandlerMode>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d018      	beq.n	8004bc4 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6858      	ldr	r0, [r3, #4]
 8004b96:	f107 020c 	add.w	r2, r7, #12
 8004b9a:	4639      	mov	r1, r7
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f000 fb2f 	bl	8005200 <xQueueGenericSendFromISR>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d001      	beq.n	8004bac <osMailPut+0x3c>
      return osErrorOS;
 8004ba8:	23ff      	movs	r3, #255	@ 0xff
 8004baa:	e018      	b.n	8004bde <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d014      	beq.n	8004bdc <osMailPut+0x6c>
 8004bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004be8 <osMailPut+0x78>)
 8004bb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	e00b      	b.n	8004bdc <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6858      	ldr	r0, [r3, #4]
 8004bc8:	4639      	mov	r1, r7
 8004bca:	2300      	movs	r3, #0
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f000 fa15 	bl	8004ffc <xQueueGenericSend>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d001      	beq.n	8004bdc <osMailPut+0x6c>
      return osErrorOS;
 8004bd8:	23ff      	movs	r3, #255	@ 0xff
 8004bda:	e000      	b.n	8004bde <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	e000ed04 	.word	0xe000ed04

08004bec <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8004bec:	b590      	push	{r4, r7, lr}
 8004bee:	b08b      	sub	sp, #44	@ 0x2c
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10a      	bne.n	8004c18 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8004c02:	2380      	movs	r3, #128	@ 0x80
 8004c04:	617b      	str	r3, [r7, #20]
    return event;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	461c      	mov	r4, r3
 8004c0a:	f107 0314 	add.w	r3, r7, #20
 8004c0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004c12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004c16:	e056      	b.n	8004cc6 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c26:	d103      	bne.n	8004c30 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8004c28:	f04f 33ff 	mov.w	r3, #4294967295
 8004c2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c2e:	e009      	b.n	8004c44 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d006      	beq.n	8004c44 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <osMailGet+0x58>
      ticks = 1;
 8004c40:	2301      	movs	r3, #1
 8004c42:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004c44:	f7ff fcec 	bl	8004620 <inHandlerMode>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d01d      	beq.n	8004c8a <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	6858      	ldr	r0, [r3, #4]
 8004c52:	f107 0220 	add.w	r2, r7, #32
 8004c56:	f107 0314 	add.w	r3, r7, #20
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	f000 fc4d 	bl	80054fc <xQueueReceiveFromISR>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d102      	bne.n	8004c6e <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8004c68:	2320      	movs	r3, #32
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	e001      	b.n	8004c72 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d01e      	beq.n	8004cb6 <osMailGet+0xca>
 8004c78:	4b15      	ldr	r3, [pc, #84]	@ (8004cd0 <osMailGet+0xe4>)
 8004c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	e015      	b.n	8004cb6 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	6858      	ldr	r0, [r3, #4]
 8004c8e:	f107 0314 	add.w	r3, r7, #20
 8004c92:	3304      	adds	r3, #4
 8004c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c96:	4619      	mov	r1, r3
 8004c98:	f000 fb4e 	bl	8005338 <xQueueReceive>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d102      	bne.n	8004ca8 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8004ca2:	2320      	movs	r3, #32
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	e006      	b.n	8004cb6 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <osMailGet+0xc6>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e000      	b.n	8004cb4 <osMailGet+0xc8>
 8004cb2:	2340      	movs	r3, #64	@ 0x40
 8004cb4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	461c      	mov	r4, r3
 8004cba:	f107 0314 	add.w	r3, r7, #20
 8004cbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004cc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	372c      	adds	r7, #44	@ 0x2c
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd90      	pop	{r4, r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	e000ed04 	.word	0xe000ed04

08004cd4 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <osMailFree+0x14>
    return osErrorParameter;
 8004ce4:	2380      	movs	r3, #128	@ 0x80
 8004ce6:	e006      	b.n	8004cf6 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	6839      	ldr	r1, [r7, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff fe6d 	bl	80049ce <osPoolFree>
 8004cf4:	4603      	mov	r3, r0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f103 0208 	add.w	r2, r3, #8
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f04f 32ff 	mov.w	r2, #4294967295
 8004d16:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f103 0208 	add.w	r2, r3, #8
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f103 0208 	add.w	r2, r3, #8
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	601a      	str	r2, [r3, #0]
}
 8004d94:	bf00      	nop
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db6:	d103      	bne.n	8004dc0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	e00c      	b.n	8004dda <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3308      	adds	r3, #8
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	e002      	b.n	8004dce <vListInsert+0x2e>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d2f6      	bcs.n	8004dc8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	601a      	str	r2, [r3, #0]
}
 8004e06:	bf00      	nop
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e12:	b480      	push	{r7}
 8004e14:	b085      	sub	sp, #20
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6892      	ldr	r2, [r2, #8]
 8004e28:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6852      	ldr	r2, [r2, #4]
 8004e32:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d103      	bne.n	8004e46 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	1e5a      	subs	r2, r3, #1
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
	...

08004e68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10b      	bne.n	8004e94 <xQueueGenericReset+0x2c>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	60bb      	str	r3, [r7, #8]
}
 8004e8e:	bf00      	nop
 8004e90:	bf00      	nop
 8004e92:	e7fd      	b.n	8004e90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e94:	f001 fec8 	bl	8006c28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea0:	68f9      	ldr	r1, [r7, #12]
 8004ea2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ea4:	fb01 f303 	mul.w	r3, r1, r3
 8004ea8:	441a      	add	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	68f9      	ldr	r1, [r7, #12]
 8004ec8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004eca:	fb01 f303 	mul.w	r3, r1, r3
 8004ece:	441a      	add	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	22ff      	movs	r2, #255	@ 0xff
 8004ed8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	22ff      	movs	r2, #255	@ 0xff
 8004ee0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d114      	bne.n	8004f14 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d01a      	beq.n	8004f28 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	3310      	adds	r3, #16
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f001 f8aa 	bl	8006050 <xTaskRemoveFromEventList>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d012      	beq.n	8004f28 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004f02:	4b0d      	ldr	r3, [pc, #52]	@ (8004f38 <xQueueGenericReset+0xd0>)
 8004f04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	e009      	b.n	8004f28 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	3310      	adds	r3, #16
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff fef0 	bl	8004cfe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3324      	adds	r3, #36	@ 0x24
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff feeb 	bl	8004cfe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f28:	f001 feb0 	bl	8006c8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f2c:	2301      	movs	r3, #1
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08a      	sub	sp, #40	@ 0x28
 8004f40:	af02      	add	r7, sp, #8
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	4613      	mov	r3, r2
 8004f48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10b      	bne.n	8004f68 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	613b      	str	r3, [r7, #16]
}
 8004f62:	bf00      	nop
 8004f64:	bf00      	nop
 8004f66:	e7fd      	b.n	8004f64 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d102      	bne.n	8004f74 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	e004      	b.n	8004f7e <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	fb02 f303 	mul.w	r3, r2, r3
 8004f7c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	3348      	adds	r3, #72	@ 0x48
 8004f82:	4618      	mov	r0, r3
 8004f84:	f001 ff72 	bl	8006e6c <pvPortMalloc>
 8004f88:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d011      	beq.n	8004fb4 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	3348      	adds	r3, #72	@ 0x48
 8004f98:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fa2:	79fa      	ldrb	r2, [r7, #7]
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	68b9      	ldr	r1, [r7, #8]
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f805 	bl	8004fbe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fb4:	69bb      	ldr	r3, [r7, #24]
	}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3720      	adds	r7, #32
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	607a      	str	r2, [r7, #4]
 8004fca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d103      	bne.n	8004fda <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	e002      	b.n	8004fe0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004fec:	2101      	movs	r1, #1
 8004fee:	69b8      	ldr	r0, [r7, #24]
 8004ff0:	f7ff ff3a 	bl	8004e68 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ff4:	bf00      	nop
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08e      	sub	sp, #56	@ 0x38
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800500a:	2300      	movs	r3, #0
 800500c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10b      	bne.n	8005030 <xQueueGenericSend+0x34>
	__asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800502a:	bf00      	nop
 800502c:	bf00      	nop
 800502e:	e7fd      	b.n	800502c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d103      	bne.n	800503e <xQueueGenericSend+0x42>
 8005036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <xQueueGenericSend+0x46>
 800503e:	2301      	movs	r3, #1
 8005040:	e000      	b.n	8005044 <xQueueGenericSend+0x48>
 8005042:	2300      	movs	r3, #0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10b      	bne.n	8005060 <xQueueGenericSend+0x64>
	__asm volatile
 8005048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504c:	f383 8811 	msr	BASEPRI, r3
 8005050:	f3bf 8f6f 	isb	sy
 8005054:	f3bf 8f4f 	dsb	sy
 8005058:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800505a:	bf00      	nop
 800505c:	bf00      	nop
 800505e:	e7fd      	b.n	800505c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b02      	cmp	r3, #2
 8005064:	d103      	bne.n	800506e <xQueueGenericSend+0x72>
 8005066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <xQueueGenericSend+0x76>
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <xQueueGenericSend+0x78>
 8005072:	2300      	movs	r3, #0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10b      	bne.n	8005090 <xQueueGenericSend+0x94>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	623b      	str	r3, [r7, #32]
}
 800508a:	bf00      	nop
 800508c:	bf00      	nop
 800508e:	e7fd      	b.n	800508c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005090:	f001 f99e 	bl	80063d0 <xTaskGetSchedulerState>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <xQueueGenericSend+0xa4>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <xQueueGenericSend+0xa8>
 80050a0:	2301      	movs	r3, #1
 80050a2:	e000      	b.n	80050a6 <xQueueGenericSend+0xaa>
 80050a4:	2300      	movs	r3, #0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10b      	bne.n	80050c2 <xQueueGenericSend+0xc6>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	61fb      	str	r3, [r7, #28]
}
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	e7fd      	b.n	80050be <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050c2:	f001 fdb1 	bl	8006c28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d302      	bcc.n	80050d8 <xQueueGenericSend+0xdc>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d129      	bne.n	800512c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	68b9      	ldr	r1, [r7, #8]
 80050dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050de:	f000 fa8f 	bl	8005600 <prvCopyDataToQueue>
 80050e2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d010      	beq.n	800510e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ee:	3324      	adds	r3, #36	@ 0x24
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 ffad 	bl	8006050 <xTaskRemoveFromEventList>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d013      	beq.n	8005124 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80050fc:	4b3f      	ldr	r3, [pc, #252]	@ (80051fc <xQueueGenericSend+0x200>)
 80050fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	e00a      	b.n	8005124 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800510e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005110:	2b00      	cmp	r3, #0
 8005112:	d007      	beq.n	8005124 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005114:	4b39      	ldr	r3, [pc, #228]	@ (80051fc <xQueueGenericSend+0x200>)
 8005116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005124:	f001 fdb2 	bl	8006c8c <vPortExitCritical>
				return pdPASS;
 8005128:	2301      	movs	r3, #1
 800512a:	e063      	b.n	80051f4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d103      	bne.n	800513a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005132:	f001 fdab 	bl	8006c8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005136:	2300      	movs	r3, #0
 8005138:	e05c      	b.n	80051f4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800513a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800513c:	2b00      	cmp	r3, #0
 800513e:	d106      	bne.n	800514e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005140:	f107 0314 	add.w	r3, r7, #20
 8005144:	4618      	mov	r0, r3
 8005146:	f000 ffe7 	bl	8006118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800514a:	2301      	movs	r3, #1
 800514c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800514e:	f001 fd9d 	bl	8006c8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005152:	f000 fd95 	bl	8005c80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005156:	f001 fd67 	bl	8006c28 <vPortEnterCritical>
 800515a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005160:	b25b      	sxtb	r3, r3
 8005162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005166:	d103      	bne.n	8005170 <xQueueGenericSend+0x174>
 8005168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005172:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005176:	b25b      	sxtb	r3, r3
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517c:	d103      	bne.n	8005186 <xQueueGenericSend+0x18a>
 800517e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005186:	f001 fd81 	bl	8006c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800518a:	1d3a      	adds	r2, r7, #4
 800518c:	f107 0314 	add.w	r3, r7, #20
 8005190:	4611      	mov	r1, r2
 8005192:	4618      	mov	r0, r3
 8005194:	f000 ffd6 	bl	8006144 <xTaskCheckForTimeOut>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d124      	bne.n	80051e8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800519e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051a0:	f000 fb26 	bl	80057f0 <prvIsQueueFull>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d018      	beq.n	80051dc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ac:	3310      	adds	r3, #16
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	4611      	mov	r1, r2
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 ff26 	bl	8006004 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80051b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051ba:	f000 fab1 	bl	8005720 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80051be:	f000 fd6d 	bl	8005c9c <xTaskResumeAll>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f47f af7c 	bne.w	80050c2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80051ca:	4b0c      	ldr	r3, [pc, #48]	@ (80051fc <xQueueGenericSend+0x200>)
 80051cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	e772      	b.n	80050c2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80051dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051de:	f000 fa9f 	bl	8005720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051e2:	f000 fd5b 	bl	8005c9c <xTaskResumeAll>
 80051e6:	e76c      	b.n	80050c2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80051e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051ea:	f000 fa99 	bl	8005720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051ee:	f000 fd55 	bl	8005c9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80051f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3738      	adds	r7, #56	@ 0x38
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	e000ed04 	.word	0xe000ed04

08005200 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08e      	sub	sp, #56	@ 0x38
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10b      	bne.n	8005230 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800522a:	bf00      	nop
 800522c:	bf00      	nop
 800522e:	e7fd      	b.n	800522c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d103      	bne.n	800523e <xQueueGenericSendFromISR+0x3e>
 8005236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <xQueueGenericSendFromISR+0x42>
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <xQueueGenericSendFromISR+0x44>
 8005242:	2300      	movs	r3, #0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10b      	bne.n	8005260 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	623b      	str	r3, [r7, #32]
}
 800525a:	bf00      	nop
 800525c:	bf00      	nop
 800525e:	e7fd      	b.n	800525c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d103      	bne.n	800526e <xQueueGenericSendFromISR+0x6e>
 8005266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <xQueueGenericSendFromISR+0x72>
 800526e:	2301      	movs	r3, #1
 8005270:	e000      	b.n	8005274 <xQueueGenericSendFromISR+0x74>
 8005272:	2300      	movs	r3, #0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10b      	bne.n	8005290 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	61fb      	str	r3, [r7, #28]
}
 800528a:	bf00      	nop
 800528c:	bf00      	nop
 800528e:	e7fd      	b.n	800528c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005290:	f001 fdaa 	bl	8006de8 <vPortValidateInterruptPriority>
	__asm volatile
 8005294:	f3ef 8211 	mrs	r2, BASEPRI
 8005298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	61ba      	str	r2, [r7, #24]
 80052aa:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80052ac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d302      	bcc.n	80052c2 <xQueueGenericSendFromISR+0xc2>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d12c      	bne.n	800531c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80052c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	68b9      	ldr	r1, [r7, #8]
 80052d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052d2:	f000 f995 	bl	8005600 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80052d6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80052da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052de:	d112      	bne.n	8005306 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d016      	beq.n	8005316 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ea:	3324      	adds	r3, #36	@ 0x24
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 feaf 	bl	8006050 <xTaskRemoveFromEventList>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00e      	beq.n	8005316 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00b      	beq.n	8005316 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	e007      	b.n	8005316 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005306:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800530a:	3301      	adds	r3, #1
 800530c:	b2db      	uxtb	r3, r3
 800530e:	b25a      	sxtb	r2, r3
 8005310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005316:	2301      	movs	r3, #1
 8005318:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800531a:	e001      	b.n	8005320 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800531c:	2300      	movs	r3, #0
 800531e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005322:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f383 8811 	msr	BASEPRI, r3
}
 800532a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800532c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800532e:	4618      	mov	r0, r3
 8005330:	3738      	adds	r7, #56	@ 0x38
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08c      	sub	sp, #48	@ 0x30
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005344:	2300      	movs	r3, #0
 8005346:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800534c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10b      	bne.n	800536a <xQueueReceive+0x32>
	__asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	623b      	str	r3, [r7, #32]
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop
 8005368:	e7fd      	b.n	8005366 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d103      	bne.n	8005378 <xQueueReceive+0x40>
 8005370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <xQueueReceive+0x44>
 8005378:	2301      	movs	r3, #1
 800537a:	e000      	b.n	800537e <xQueueReceive+0x46>
 800537c:	2300      	movs	r3, #0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10b      	bne.n	800539a <xQueueReceive+0x62>
	__asm volatile
 8005382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	61fb      	str	r3, [r7, #28]
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop
 8005398:	e7fd      	b.n	8005396 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800539a:	f001 f819 	bl	80063d0 <xTaskGetSchedulerState>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d102      	bne.n	80053aa <xQueueReceive+0x72>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <xQueueReceive+0x76>
 80053aa:	2301      	movs	r3, #1
 80053ac:	e000      	b.n	80053b0 <xQueueReceive+0x78>
 80053ae:	2300      	movs	r3, #0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10b      	bne.n	80053cc <xQueueReceive+0x94>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	61bb      	str	r3, [r7, #24]
}
 80053c6:	bf00      	nop
 80053c8:	bf00      	nop
 80053ca:	e7fd      	b.n	80053c8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053cc:	f001 fc2c 	bl	8006c28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d01f      	beq.n	800541c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053e0:	f000 f978 	bl	80056d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	1e5a      	subs	r2, r3, #1
 80053e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00f      	beq.n	8005414 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f6:	3310      	adds	r3, #16
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fe29 	bl	8006050 <xTaskRemoveFromEventList>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d007      	beq.n	8005414 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005404:	4b3c      	ldr	r3, [pc, #240]	@ (80054f8 <xQueueReceive+0x1c0>)
 8005406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005414:	f001 fc3a 	bl	8006c8c <vPortExitCritical>
				return pdPASS;
 8005418:	2301      	movs	r3, #1
 800541a:	e069      	b.n	80054f0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d103      	bne.n	800542a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005422:	f001 fc33 	bl	8006c8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005426:	2300      	movs	r3, #0
 8005428:	e062      	b.n	80054f0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800542a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800542c:	2b00      	cmp	r3, #0
 800542e:	d106      	bne.n	800543e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005430:	f107 0310 	add.w	r3, r7, #16
 8005434:	4618      	mov	r0, r3
 8005436:	f000 fe6f 	bl	8006118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800543a:	2301      	movs	r3, #1
 800543c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800543e:	f001 fc25 	bl	8006c8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005442:	f000 fc1d 	bl	8005c80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005446:	f001 fbef 	bl	8006c28 <vPortEnterCritical>
 800544a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005450:	b25b      	sxtb	r3, r3
 8005452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005456:	d103      	bne.n	8005460 <xQueueReceive+0x128>
 8005458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005462:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005466:	b25b      	sxtb	r3, r3
 8005468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546c:	d103      	bne.n	8005476 <xQueueReceive+0x13e>
 800546e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005476:	f001 fc09 	bl	8006c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800547a:	1d3a      	adds	r2, r7, #4
 800547c:	f107 0310 	add.w	r3, r7, #16
 8005480:	4611      	mov	r1, r2
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fe5e 	bl	8006144 <xTaskCheckForTimeOut>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d123      	bne.n	80054d6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800548e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005490:	f000 f998 	bl	80057c4 <prvIsQueueEmpty>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d017      	beq.n	80054ca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800549a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549c:	3324      	adds	r3, #36	@ 0x24
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	4611      	mov	r1, r2
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 fdae 	bl	8006004 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054aa:	f000 f939 	bl	8005720 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054ae:	f000 fbf5 	bl	8005c9c <xTaskResumeAll>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d189      	bne.n	80053cc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80054b8:	4b0f      	ldr	r3, [pc, #60]	@ (80054f8 <xQueueReceive+0x1c0>)
 80054ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	e780      	b.n	80053cc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80054ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054cc:	f000 f928 	bl	8005720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054d0:	f000 fbe4 	bl	8005c9c <xTaskResumeAll>
 80054d4:	e77a      	b.n	80053cc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80054d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054d8:	f000 f922 	bl	8005720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054dc:	f000 fbde 	bl	8005c9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054e2:	f000 f96f 	bl	80057c4 <prvIsQueueEmpty>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f43f af6f 	beq.w	80053cc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80054ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3730      	adds	r7, #48	@ 0x30
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	e000ed04 	.word	0xe000ed04

080054fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08e      	sub	sp, #56	@ 0x38
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800550c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10b      	bne.n	800552a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	623b      	str	r3, [r7, #32]
}
 8005524:	bf00      	nop
 8005526:	bf00      	nop
 8005528:	e7fd      	b.n	8005526 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d103      	bne.n	8005538 <xQueueReceiveFromISR+0x3c>
 8005530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <xQueueReceiveFromISR+0x40>
 8005538:	2301      	movs	r3, #1
 800553a:	e000      	b.n	800553e <xQueueReceiveFromISR+0x42>
 800553c:	2300      	movs	r3, #0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10b      	bne.n	800555a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005546:	f383 8811 	msr	BASEPRI, r3
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	61fb      	str	r3, [r7, #28]
}
 8005554:	bf00      	nop
 8005556:	bf00      	nop
 8005558:	e7fd      	b.n	8005556 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800555a:	f001 fc45 	bl	8006de8 <vPortValidateInterruptPriority>
	__asm volatile
 800555e:	f3ef 8211 	mrs	r2, BASEPRI
 8005562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	61ba      	str	r2, [r7, #24]
 8005574:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005576:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005578:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800557a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800557e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005582:	2b00      	cmp	r3, #0
 8005584:	d02f      	beq.n	80055e6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005588:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800558c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005594:	f000 f89e 	bl	80056d4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559a:	1e5a      	subs	r2, r3, #1
 800559c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80055a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d112      	bne.n	80055d0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d016      	beq.n	80055e0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b4:	3310      	adds	r3, #16
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fd4a 	bl	8006050 <xTaskRemoveFromEventList>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00e      	beq.n	80055e0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00b      	beq.n	80055e0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	e007      	b.n	80055e0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80055d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055d4:	3301      	adds	r3, #1
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	b25a      	sxtb	r2, r3
 80055da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80055e0:	2301      	movs	r3, #1
 80055e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80055e4:	e001      	b.n	80055ea <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80055ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f383 8811 	msr	BASEPRI, r3
}
 80055f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3738      	adds	r7, #56	@ 0x38
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800560c:	2300      	movs	r3, #0
 800560e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005614:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10d      	bne.n	800563a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d14d      	bne.n	80056c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	4618      	mov	r0, r3
 800562c:	f000 feee 	bl	800640c <xTaskPriorityDisinherit>
 8005630:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	609a      	str	r2, [r3, #8]
 8005638:	e043      	b.n	80056c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d119      	bne.n	8005674 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6858      	ldr	r0, [r3, #4]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005648:	461a      	mov	r2, r3
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	f001 fe4a 	bl	80072e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005658:	441a      	add	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	429a      	cmp	r2, r3
 8005668:	d32b      	bcc.n	80056c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	605a      	str	r2, [r3, #4]
 8005672:	e026      	b.n	80056c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	68d8      	ldr	r0, [r3, #12]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567c:	461a      	mov	r2, r3
 800567e:	68b9      	ldr	r1, [r7, #8]
 8005680:	f001 fe30 	bl	80072e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568c:	425b      	negs	r3, r3
 800568e:	441a      	add	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	429a      	cmp	r2, r3
 800569e:	d207      	bcs.n	80056b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a8:	425b      	negs	r3, r3
 80056aa:	441a      	add	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d105      	bne.n	80056c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	3b01      	subs	r3, #1
 80056c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80056ca:	697b      	ldr	r3, [r7, #20]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d018      	beq.n	8005718 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ee:	441a      	add	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d303      	bcc.n	8005708 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68d9      	ldr	r1, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005710:	461a      	mov	r2, r3
 8005712:	6838      	ldr	r0, [r7, #0]
 8005714:	f001 fde6 	bl	80072e4 <memcpy>
	}
}
 8005718:	bf00      	nop
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005728:	f001 fa7e 	bl	8006c28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005732:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005734:	e011      	b.n	800575a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573a:	2b00      	cmp	r3, #0
 800573c:	d012      	beq.n	8005764 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3324      	adds	r3, #36	@ 0x24
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fc84 	bl	8006050 <xTaskRemoveFromEventList>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800574e:	f000 fd5d 	bl	800620c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	3b01      	subs	r3, #1
 8005756:	b2db      	uxtb	r3, r3
 8005758:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800575a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800575e:	2b00      	cmp	r3, #0
 8005760:	dce9      	bgt.n	8005736 <prvUnlockQueue+0x16>
 8005762:	e000      	b.n	8005766 <prvUnlockQueue+0x46>
					break;
 8005764:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	22ff      	movs	r2, #255	@ 0xff
 800576a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800576e:	f001 fa8d 	bl	8006c8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005772:	f001 fa59 	bl	8006c28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800577c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800577e:	e011      	b.n	80057a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d012      	beq.n	80057ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3310      	adds	r3, #16
 800578c:	4618      	mov	r0, r3
 800578e:	f000 fc5f 	bl	8006050 <xTaskRemoveFromEventList>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005798:	f000 fd38 	bl	800620c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800579c:	7bbb      	ldrb	r3, [r7, #14]
 800579e:	3b01      	subs	r3, #1
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	dce9      	bgt.n	8005780 <prvUnlockQueue+0x60>
 80057ac:	e000      	b.n	80057b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80057ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	22ff      	movs	r2, #255	@ 0xff
 80057b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80057b8:	f001 fa68 	bl	8006c8c <vPortExitCritical>
}
 80057bc:	bf00      	nop
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057cc:	f001 fa2c 	bl	8006c28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80057d8:	2301      	movs	r3, #1
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	e001      	b.n	80057e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057e2:	f001 fa53 	bl	8006c8c <vPortExitCritical>

	return xReturn;
 80057e6:	68fb      	ldr	r3, [r7, #12]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057f8:	f001 fa16 	bl	8006c28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005804:	429a      	cmp	r2, r3
 8005806:	d102      	bne.n	800580e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005808:	2301      	movs	r3, #1
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	e001      	b.n	8005812 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005812:	f001 fa3b 	bl	8006c8c <vPortExitCritical>

	return xReturn;
 8005816:	68fb      	ldr	r3, [r7, #12]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08e      	sub	sp, #56	@ 0x38
 8005824:	af04      	add	r7, sp, #16
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800582e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10b      	bne.n	800584c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	623b      	str	r3, [r7, #32]
}
 8005846:	bf00      	nop
 8005848:	bf00      	nop
 800584a:	e7fd      	b.n	8005848 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800584c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10b      	bne.n	800586a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	61fb      	str	r3, [r7, #28]
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop
 8005868:	e7fd      	b.n	8005866 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800586a:	2354      	movs	r3, #84	@ 0x54
 800586c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b54      	cmp	r3, #84	@ 0x54
 8005872:	d00b      	beq.n	800588c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	61bb      	str	r3, [r7, #24]
}
 8005886:	bf00      	nop
 8005888:	bf00      	nop
 800588a:	e7fd      	b.n	8005888 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800588c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800588e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005890:	2b00      	cmp	r3, #0
 8005892:	d01e      	beq.n	80058d2 <xTaskCreateStatic+0xb2>
 8005894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005896:	2b00      	cmp	r3, #0
 8005898:	d01b      	beq.n	80058d2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800589a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800589e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058a2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058ac:	2300      	movs	r3, #0
 80058ae:	9303      	str	r3, [sp, #12]
 80058b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b2:	9302      	str	r3, [sp, #8]
 80058b4:	f107 0314 	add.w	r3, r7, #20
 80058b8:	9301      	str	r3, [sp, #4]
 80058ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	68b9      	ldr	r1, [r7, #8]
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 f850 	bl	800596a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80058cc:	f000 f8d6 	bl	8005a7c <prvAddNewTaskToReadyList>
 80058d0:	e001      	b.n	80058d6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80058d2:	2300      	movs	r3, #0
 80058d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058d6:	697b      	ldr	r3, [r7, #20]
	}
 80058d8:	4618      	mov	r0, r3
 80058da:	3728      	adds	r7, #40	@ 0x28
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08c      	sub	sp, #48	@ 0x30
 80058e4:	af04      	add	r7, sp, #16
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	4613      	mov	r3, r2
 80058ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058f0:	88fb      	ldrh	r3, [r7, #6]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4618      	mov	r0, r3
 80058f6:	f001 fab9 	bl	8006e6c <pvPortMalloc>
 80058fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00e      	beq.n	8005920 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005902:	2054      	movs	r0, #84	@ 0x54
 8005904:	f001 fab2 	bl	8006e6c <pvPortMalloc>
 8005908:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	631a      	str	r2, [r3, #48]	@ 0x30
 8005916:	e005      	b.n	8005924 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005918:	6978      	ldr	r0, [r7, #20]
 800591a:	f001 fb6f 	bl	8006ffc <vPortFree>
 800591e:	e001      	b.n	8005924 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005920:	2300      	movs	r3, #0
 8005922:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d017      	beq.n	800595a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005932:	88fa      	ldrh	r2, [r7, #6]
 8005934:	2300      	movs	r3, #0
 8005936:	9303      	str	r3, [sp, #12]
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	9302      	str	r3, [sp, #8]
 800593c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f80e 	bl	800596a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800594e:	69f8      	ldr	r0, [r7, #28]
 8005950:	f000 f894 	bl	8005a7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005954:	2301      	movs	r3, #1
 8005956:	61bb      	str	r3, [r7, #24]
 8005958:	e002      	b.n	8005960 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800595a:	f04f 33ff 	mov.w	r3, #4294967295
 800595e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005960:	69bb      	ldr	r3, [r7, #24]
	}
 8005962:	4618      	mov	r0, r3
 8005964:	3720      	adds	r7, #32
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b088      	sub	sp, #32
 800596e:	af00      	add	r7, sp, #0
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	607a      	str	r2, [r7, #4]
 8005976:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005982:	3b01      	subs	r3, #1
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	f023 0307 	bic.w	r3, r3, #7
 8005990:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00b      	beq.n	80059b4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	617b      	str	r3, [r7, #20]
}
 80059ae:	bf00      	nop
 80059b0:	bf00      	nop
 80059b2:	e7fd      	b.n	80059b0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d01f      	beq.n	80059fa <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059ba:	2300      	movs	r3, #0
 80059bc:	61fb      	str	r3, [r7, #28]
 80059be:	e012      	b.n	80059e6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	4413      	add	r3, r2
 80059c6:	7819      	ldrb	r1, [r3, #0]
 80059c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	4413      	add	r3, r2
 80059ce:	3334      	adds	r3, #52	@ 0x34
 80059d0:	460a      	mov	r2, r1
 80059d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	4413      	add	r3, r2
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d006      	beq.n	80059ee <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	3301      	adds	r3, #1
 80059e4:	61fb      	str	r3, [r7, #28]
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	2b0f      	cmp	r3, #15
 80059ea:	d9e9      	bls.n	80059c0 <prvInitialiseNewTask+0x56>
 80059ec:	e000      	b.n	80059f0 <prvInitialiseNewTask+0x86>
			{
				break;
 80059ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059f8:	e003      	b.n	8005a02 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80059fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a04:	2b06      	cmp	r3, #6
 8005a06:	d901      	bls.n	8005a0c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a08:	2306      	movs	r3, #6
 8005a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a10:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a16:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a20:	3304      	adds	r3, #4
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7ff f98b 	bl	8004d3e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2a:	3318      	adds	r3, #24
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff f986 	bl	8004d3e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3a:	f1c3 0207 	rsb	r2, r3, #7
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a46:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	68f9      	ldr	r1, [r7, #12]
 8005a5a:	69b8      	ldr	r0, [r7, #24]
 8005a5c:	f000 ffb4 	bl	80069c8 <pxPortInitialiseStack>
 8005a60:	4602      	mov	r2, r0
 8005a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a64:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a72:	bf00      	nop
 8005a74:	3720      	adds	r7, #32
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
	...

08005a7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a84:	f001 f8d0 	bl	8006c28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a88:	4b2a      	ldr	r3, [pc, #168]	@ (8005b34 <prvAddNewTaskToReadyList+0xb8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	4a29      	ldr	r2, [pc, #164]	@ (8005b34 <prvAddNewTaskToReadyList+0xb8>)
 8005a90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a92:	4b29      	ldr	r3, [pc, #164]	@ (8005b38 <prvAddNewTaskToReadyList+0xbc>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d109      	bne.n	8005aae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a9a:	4a27      	ldr	r2, [pc, #156]	@ (8005b38 <prvAddNewTaskToReadyList+0xbc>)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005aa0:	4b24      	ldr	r3, [pc, #144]	@ (8005b34 <prvAddNewTaskToReadyList+0xb8>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d110      	bne.n	8005aca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005aa8:	f000 fbd4 	bl	8006254 <prvInitialiseTaskLists>
 8005aac:	e00d      	b.n	8005aca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005aae:	4b23      	ldr	r3, [pc, #140]	@ (8005b3c <prvAddNewTaskToReadyList+0xc0>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d109      	bne.n	8005aca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ab6:	4b20      	ldr	r3, [pc, #128]	@ (8005b38 <prvAddNewTaskToReadyList+0xbc>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d802      	bhi.n	8005aca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8005b38 <prvAddNewTaskToReadyList+0xbc>)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005aca:	4b1d      	ldr	r3, [pc, #116]	@ (8005b40 <prvAddNewTaskToReadyList+0xc4>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8005b40 <prvAddNewTaskToReadyList+0xc4>)
 8005ad2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad8:	2201      	movs	r2, #1
 8005ada:	409a      	lsls	r2, r3
 8005adc:	4b19      	ldr	r3, [pc, #100]	@ (8005b44 <prvAddNewTaskToReadyList+0xc8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	4a18      	ldr	r2, [pc, #96]	@ (8005b44 <prvAddNewTaskToReadyList+0xc8>)
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aea:	4613      	mov	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4a15      	ldr	r2, [pc, #84]	@ (8005b48 <prvAddNewTaskToReadyList+0xcc>)
 8005af4:	441a      	add	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3304      	adds	r3, #4
 8005afa:	4619      	mov	r1, r3
 8005afc:	4610      	mov	r0, r2
 8005afe:	f7ff f92b 	bl	8004d58 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b02:	f001 f8c3 	bl	8006c8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b06:	4b0d      	ldr	r3, [pc, #52]	@ (8005b3c <prvAddNewTaskToReadyList+0xc0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00e      	beq.n	8005b2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b38 <prvAddNewTaskToReadyList+0xbc>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d207      	bcs.n	8005b2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b4c <prvAddNewTaskToReadyList+0xd0>)
 8005b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b2c:	bf00      	nop
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	20000500 	.word	0x20000500
 8005b38:	20000400 	.word	0x20000400
 8005b3c:	2000050c 	.word	0x2000050c
 8005b40:	2000051c 	.word	0x2000051c
 8005b44:	20000508 	.word	0x20000508
 8005b48:	20000404 	.word	0x20000404
 8005b4c:	e000ed04 	.word	0xe000ed04

08005b50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d018      	beq.n	8005b94 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b62:	4b14      	ldr	r3, [pc, #80]	@ (8005bb4 <vTaskDelay+0x64>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00b      	beq.n	8005b82 <vTaskDelay+0x32>
	__asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	60bb      	str	r3, [r7, #8]
}
 8005b7c:	bf00      	nop
 8005b7e:	bf00      	nop
 8005b80:	e7fd      	b.n	8005b7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b82:	f000 f87d 	bl	8005c80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b86:	2100      	movs	r1, #0
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 feb7 	bl	80068fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b8e:	f000 f885 	bl	8005c9c <xTaskResumeAll>
 8005b92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d107      	bne.n	8005baa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005b9a:	4b07      	ldr	r3, [pc, #28]	@ (8005bb8 <vTaskDelay+0x68>)
 8005b9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005baa:	bf00      	nop
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20000528 	.word	0x20000528
 8005bb8:	e000ed04 	.word	0xe000ed04

08005bbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b08a      	sub	sp, #40	@ 0x28
 8005bc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005bca:	463a      	mov	r2, r7
 8005bcc:	1d39      	adds	r1, r7, #4
 8005bce:	f107 0308 	add.w	r3, r7, #8
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fa fcc4 	bl	8000560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005bd8:	6839      	ldr	r1, [r7, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	9202      	str	r2, [sp, #8]
 8005be0:	9301      	str	r3, [sp, #4]
 8005be2:	2300      	movs	r3, #0
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	2300      	movs	r3, #0
 8005be8:	460a      	mov	r2, r1
 8005bea:	491f      	ldr	r1, [pc, #124]	@ (8005c68 <vTaskStartScheduler+0xac>)
 8005bec:	481f      	ldr	r0, [pc, #124]	@ (8005c6c <vTaskStartScheduler+0xb0>)
 8005bee:	f7ff fe17 	bl	8005820 <xTaskCreateStatic>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	4a1e      	ldr	r2, [pc, #120]	@ (8005c70 <vTaskStartScheduler+0xb4>)
 8005bf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8005c70 <vTaskStartScheduler+0xb4>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c00:	2301      	movs	r3, #1
 8005c02:	617b      	str	r3, [r7, #20]
 8005c04:	e001      	b.n	8005c0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c06:	2300      	movs	r3, #0
 8005c08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d116      	bne.n	8005c3e <vTaskStartScheduler+0x82>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	613b      	str	r3, [r7, #16]
}
 8005c22:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c24:	4b13      	ldr	r3, [pc, #76]	@ (8005c74 <vTaskStartScheduler+0xb8>)
 8005c26:	f04f 32ff 	mov.w	r2, #4294967295
 8005c2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c2c:	4b12      	ldr	r3, [pc, #72]	@ (8005c78 <vTaskStartScheduler+0xbc>)
 8005c2e:	2201      	movs	r2, #1
 8005c30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c32:	4b12      	ldr	r3, [pc, #72]	@ (8005c7c <vTaskStartScheduler+0xc0>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c38:	f000 ff52 	bl	8006ae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c3c:	e00f      	b.n	8005c5e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c44:	d10b      	bne.n	8005c5e <vTaskStartScheduler+0xa2>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	60fb      	str	r3, [r7, #12]
}
 8005c58:	bf00      	nop
 8005c5a:	bf00      	nop
 8005c5c:	e7fd      	b.n	8005c5a <vTaskStartScheduler+0x9e>
}
 8005c5e:	bf00      	nop
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	08007cb8 	.word	0x08007cb8
 8005c6c:	08006225 	.word	0x08006225
 8005c70:	20000524 	.word	0x20000524
 8005c74:	20000520 	.word	0x20000520
 8005c78:	2000050c 	.word	0x2000050c
 8005c7c:	20000504 	.word	0x20000504

08005c80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005c84:	4b04      	ldr	r3, [pc, #16]	@ (8005c98 <vTaskSuspendAll+0x18>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	4a03      	ldr	r2, [pc, #12]	@ (8005c98 <vTaskSuspendAll+0x18>)
 8005c8c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005c8e:	bf00      	nop
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	20000528 	.word	0x20000528

08005c9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005caa:	4b42      	ldr	r3, [pc, #264]	@ (8005db4 <xTaskResumeAll+0x118>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10b      	bne.n	8005cca <xTaskResumeAll+0x2e>
	__asm volatile
 8005cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	603b      	str	r3, [r7, #0]
}
 8005cc4:	bf00      	nop
 8005cc6:	bf00      	nop
 8005cc8:	e7fd      	b.n	8005cc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005cca:	f000 ffad 	bl	8006c28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005cce:	4b39      	ldr	r3, [pc, #228]	@ (8005db4 <xTaskResumeAll+0x118>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	4a37      	ldr	r2, [pc, #220]	@ (8005db4 <xTaskResumeAll+0x118>)
 8005cd6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cd8:	4b36      	ldr	r3, [pc, #216]	@ (8005db4 <xTaskResumeAll+0x118>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d161      	bne.n	8005da4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ce0:	4b35      	ldr	r3, [pc, #212]	@ (8005db8 <xTaskResumeAll+0x11c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d05d      	beq.n	8005da4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ce8:	e02e      	b.n	8005d48 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cea:	4b34      	ldr	r3, [pc, #208]	@ (8005dbc <xTaskResumeAll+0x120>)
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3318      	adds	r3, #24
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff f88b 	bl	8004e12 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	3304      	adds	r3, #4
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff f886 	bl	8004e12 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	409a      	lsls	r2, r3
 8005d0e:	4b2c      	ldr	r3, [pc, #176]	@ (8005dc0 <xTaskResumeAll+0x124>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	4a2a      	ldr	r2, [pc, #168]	@ (8005dc0 <xTaskResumeAll+0x124>)
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4a27      	ldr	r2, [pc, #156]	@ (8005dc4 <xTaskResumeAll+0x128>)
 8005d26:	441a      	add	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4610      	mov	r0, r2
 8005d30:	f7ff f812 	bl	8004d58 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d38:	4b23      	ldr	r3, [pc, #140]	@ (8005dc8 <xTaskResumeAll+0x12c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d302      	bcc.n	8005d48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005d42:	4b22      	ldr	r3, [pc, #136]	@ (8005dcc <xTaskResumeAll+0x130>)
 8005d44:	2201      	movs	r2, #1
 8005d46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d48:	4b1c      	ldr	r3, [pc, #112]	@ (8005dbc <xTaskResumeAll+0x120>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1cc      	bne.n	8005cea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d56:	f000 fb1b 	bl	8006390 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8005dd0 <xTaskResumeAll+0x134>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d010      	beq.n	8005d88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d66:	f000 f837 	bl	8005dd8 <xTaskIncrementTick>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005d70:	4b16      	ldr	r3, [pc, #88]	@ (8005dcc <xTaskResumeAll+0x130>)
 8005d72:	2201      	movs	r2, #1
 8005d74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1f1      	bne.n	8005d66 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005d82:	4b13      	ldr	r3, [pc, #76]	@ (8005dd0 <xTaskResumeAll+0x134>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d88:	4b10      	ldr	r3, [pc, #64]	@ (8005dcc <xTaskResumeAll+0x130>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d009      	beq.n	8005da4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d90:	2301      	movs	r3, #1
 8005d92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d94:	4b0f      	ldr	r3, [pc, #60]	@ (8005dd4 <xTaskResumeAll+0x138>)
 8005d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005da4:	f000 ff72 	bl	8006c8c <vPortExitCritical>

	return xAlreadyYielded;
 8005da8:	68bb      	ldr	r3, [r7, #8]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20000528 	.word	0x20000528
 8005db8:	20000500 	.word	0x20000500
 8005dbc:	200004c0 	.word	0x200004c0
 8005dc0:	20000508 	.word	0x20000508
 8005dc4:	20000404 	.word	0x20000404
 8005dc8:	20000400 	.word	0x20000400
 8005dcc:	20000514 	.word	0x20000514
 8005dd0:	20000510 	.word	0x20000510
 8005dd4:	e000ed04 	.word	0xe000ed04

08005dd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005dde:	2300      	movs	r3, #0
 8005de0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005de2:	4b4f      	ldr	r3, [pc, #316]	@ (8005f20 <xTaskIncrementTick+0x148>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f040 8089 	bne.w	8005efe <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005dec:	4b4d      	ldr	r3, [pc, #308]	@ (8005f24 <xTaskIncrementTick+0x14c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3301      	adds	r3, #1
 8005df2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005df4:	4a4b      	ldr	r2, [pc, #300]	@ (8005f24 <xTaskIncrementTick+0x14c>)
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d121      	bne.n	8005e44 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e00:	4b49      	ldr	r3, [pc, #292]	@ (8005f28 <xTaskIncrementTick+0x150>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	603b      	str	r3, [r7, #0]
}
 8005e1c:	bf00      	nop
 8005e1e:	bf00      	nop
 8005e20:	e7fd      	b.n	8005e1e <xTaskIncrementTick+0x46>
 8005e22:	4b41      	ldr	r3, [pc, #260]	@ (8005f28 <xTaskIncrementTick+0x150>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	4b40      	ldr	r3, [pc, #256]	@ (8005f2c <xTaskIncrementTick+0x154>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a3e      	ldr	r2, [pc, #248]	@ (8005f28 <xTaskIncrementTick+0x150>)
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	4a3e      	ldr	r2, [pc, #248]	@ (8005f2c <xTaskIncrementTick+0x154>)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	4b3e      	ldr	r3, [pc, #248]	@ (8005f30 <xTaskIncrementTick+0x158>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	4a3c      	ldr	r2, [pc, #240]	@ (8005f30 <xTaskIncrementTick+0x158>)
 8005e3e:	6013      	str	r3, [r2, #0]
 8005e40:	f000 faa6 	bl	8006390 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e44:	4b3b      	ldr	r3, [pc, #236]	@ (8005f34 <xTaskIncrementTick+0x15c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d348      	bcc.n	8005ee0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e4e:	4b36      	ldr	r3, [pc, #216]	@ (8005f28 <xTaskIncrementTick+0x150>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d104      	bne.n	8005e62 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e58:	4b36      	ldr	r3, [pc, #216]	@ (8005f34 <xTaskIncrementTick+0x15c>)
 8005e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5e:	601a      	str	r2, [r3, #0]
					break;
 8005e60:	e03e      	b.n	8005ee0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e62:	4b31      	ldr	r3, [pc, #196]	@ (8005f28 <xTaskIncrementTick+0x150>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d203      	bcs.n	8005e82 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e7a:	4a2e      	ldr	r2, [pc, #184]	@ (8005f34 <xTaskIncrementTick+0x15c>)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e80:	e02e      	b.n	8005ee0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	3304      	adds	r3, #4
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fe ffc3 	bl	8004e12 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d004      	beq.n	8005e9e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	3318      	adds	r3, #24
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7fe ffba 	bl	8004e12 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	409a      	lsls	r2, r3
 8005ea6:	4b24      	ldr	r3, [pc, #144]	@ (8005f38 <xTaskIncrementTick+0x160>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	4a22      	ldr	r2, [pc, #136]	@ (8005f38 <xTaskIncrementTick+0x160>)
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8005f3c <xTaskIncrementTick+0x164>)
 8005ebe:	441a      	add	r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	f7fe ff46 	bl	8004d58 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8005f40 <xTaskIncrementTick+0x168>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d3b9      	bcc.n	8005e4e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005eda:	2301      	movs	r3, #1
 8005edc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ede:	e7b6      	b.n	8005e4e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ee0:	4b17      	ldr	r3, [pc, #92]	@ (8005f40 <xTaskIncrementTick+0x168>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ee6:	4915      	ldr	r1, [pc, #84]	@ (8005f3c <xTaskIncrementTick+0x164>)
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	440b      	add	r3, r1
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d907      	bls.n	8005f08 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	617b      	str	r3, [r7, #20]
 8005efc:	e004      	b.n	8005f08 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005efe:	4b11      	ldr	r3, [pc, #68]	@ (8005f44 <xTaskIncrementTick+0x16c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3301      	adds	r3, #1
 8005f04:	4a0f      	ldr	r2, [pc, #60]	@ (8005f44 <xTaskIncrementTick+0x16c>)
 8005f06:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005f08:	4b0f      	ldr	r3, [pc, #60]	@ (8005f48 <xTaskIncrementTick+0x170>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8005f10:	2301      	movs	r3, #1
 8005f12:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005f14:	697b      	ldr	r3, [r7, #20]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20000528 	.word	0x20000528
 8005f24:	20000504 	.word	0x20000504
 8005f28:	200004b8 	.word	0x200004b8
 8005f2c:	200004bc 	.word	0x200004bc
 8005f30:	20000518 	.word	0x20000518
 8005f34:	20000520 	.word	0x20000520
 8005f38:	20000508 	.word	0x20000508
 8005f3c:	20000404 	.word	0x20000404
 8005f40:	20000400 	.word	0x20000400
 8005f44:	20000510 	.word	0x20000510
 8005f48:	20000514 	.word	0x20000514

08005f4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f52:	4b27      	ldr	r3, [pc, #156]	@ (8005ff0 <vTaskSwitchContext+0xa4>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f5a:	4b26      	ldr	r3, [pc, #152]	@ (8005ff4 <vTaskSwitchContext+0xa8>)
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f60:	e040      	b.n	8005fe4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005f62:	4b24      	ldr	r3, [pc, #144]	@ (8005ff4 <vTaskSwitchContext+0xa8>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f68:	4b23      	ldr	r3, [pc, #140]	@ (8005ff8 <vTaskSwitchContext+0xac>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	fab3 f383 	clz	r3, r3
 8005f74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005f76:	7afb      	ldrb	r3, [r7, #11]
 8005f78:	f1c3 031f 	rsb	r3, r3, #31
 8005f7c:	617b      	str	r3, [r7, #20]
 8005f7e:	491f      	ldr	r1, [pc, #124]	@ (8005ffc <vTaskSwitchContext+0xb0>)
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	4613      	mov	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10b      	bne.n	8005faa <vTaskSwitchContext+0x5e>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	607b      	str	r3, [r7, #4]
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop
 8005fa8:	e7fd      	b.n	8005fa6 <vTaskSwitchContext+0x5a>
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4a11      	ldr	r2, [pc, #68]	@ (8005ffc <vTaskSwitchContext+0xb0>)
 8005fb6:	4413      	add	r3, r2
 8005fb8:	613b      	str	r3, [r7, #16]
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	605a      	str	r2, [r3, #4]
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	3308      	adds	r3, #8
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d104      	bne.n	8005fda <vTaskSwitchContext+0x8e>
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	605a      	str	r2, [r3, #4]
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	4a07      	ldr	r2, [pc, #28]	@ (8006000 <vTaskSwitchContext+0xb4>)
 8005fe2:	6013      	str	r3, [r2, #0]
}
 8005fe4:	bf00      	nop
 8005fe6:	371c      	adds	r7, #28
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	20000528 	.word	0x20000528
 8005ff4:	20000514 	.word	0x20000514
 8005ff8:	20000508 	.word	0x20000508
 8005ffc:	20000404 	.word	0x20000404
 8006000:	20000400 	.word	0x20000400

08006004 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10b      	bne.n	800602c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	60fb      	str	r3, [r7, #12]
}
 8006026:	bf00      	nop
 8006028:	bf00      	nop
 800602a:	e7fd      	b.n	8006028 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800602c:	4b07      	ldr	r3, [pc, #28]	@ (800604c <vTaskPlaceOnEventList+0x48>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3318      	adds	r3, #24
 8006032:	4619      	mov	r1, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7fe feb3 	bl	8004da0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800603a:	2101      	movs	r1, #1
 800603c:	6838      	ldr	r0, [r7, #0]
 800603e:	f000 fc5d 	bl	80068fc <prvAddCurrentTaskToDelayedList>
}
 8006042:	bf00      	nop
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	20000400 	.word	0x20000400

08006050 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10b      	bne.n	800607e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	60fb      	str	r3, [r7, #12]
}
 8006078:	bf00      	nop
 800607a:	bf00      	nop
 800607c:	e7fd      	b.n	800607a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	3318      	adds	r3, #24
 8006082:	4618      	mov	r0, r3
 8006084:	f7fe fec5 	bl	8004e12 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006088:	4b1d      	ldr	r3, [pc, #116]	@ (8006100 <xTaskRemoveFromEventList+0xb0>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d11c      	bne.n	80060ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	3304      	adds	r3, #4
 8006094:	4618      	mov	r0, r3
 8006096:	f7fe febc 	bl	8004e12 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609e:	2201      	movs	r2, #1
 80060a0:	409a      	lsls	r2, r3
 80060a2:	4b18      	ldr	r3, [pc, #96]	@ (8006104 <xTaskRemoveFromEventList+0xb4>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	4a16      	ldr	r2, [pc, #88]	@ (8006104 <xTaskRemoveFromEventList+0xb4>)
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060b0:	4613      	mov	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4a13      	ldr	r2, [pc, #76]	@ (8006108 <xTaskRemoveFromEventList+0xb8>)
 80060ba:	441a      	add	r2, r3
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	3304      	adds	r3, #4
 80060c0:	4619      	mov	r1, r3
 80060c2:	4610      	mov	r0, r2
 80060c4:	f7fe fe48 	bl	8004d58 <vListInsertEnd>
 80060c8:	e005      	b.n	80060d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	3318      	adds	r3, #24
 80060ce:	4619      	mov	r1, r3
 80060d0:	480e      	ldr	r0, [pc, #56]	@ (800610c <xTaskRemoveFromEventList+0xbc>)
 80060d2:	f7fe fe41 	bl	8004d58 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060da:	4b0d      	ldr	r3, [pc, #52]	@ (8006110 <xTaskRemoveFromEventList+0xc0>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d905      	bls.n	80060f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80060e4:	2301      	movs	r3, #1
 80060e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80060e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006114 <xTaskRemoveFromEventList+0xc4>)
 80060ea:	2201      	movs	r2, #1
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	e001      	b.n	80060f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80060f0:	2300      	movs	r3, #0
 80060f2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80060f4:	697b      	ldr	r3, [r7, #20]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20000528 	.word	0x20000528
 8006104:	20000508 	.word	0x20000508
 8006108:	20000404 	.word	0x20000404
 800610c:	200004c0 	.word	0x200004c0
 8006110:	20000400 	.word	0x20000400
 8006114:	20000514 	.word	0x20000514

08006118 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006120:	4b06      	ldr	r3, [pc, #24]	@ (800613c <vTaskInternalSetTimeOutState+0x24>)
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006128:	4b05      	ldr	r3, [pc, #20]	@ (8006140 <vTaskInternalSetTimeOutState+0x28>)
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	605a      	str	r2, [r3, #4]
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr
 800613c:	20000518 	.word	0x20000518
 8006140:	20000504 	.word	0x20000504

08006144 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10b      	bne.n	800616c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	613b      	str	r3, [r7, #16]
}
 8006166:	bf00      	nop
 8006168:	bf00      	nop
 800616a:	e7fd      	b.n	8006168 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10b      	bne.n	800618a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	60fb      	str	r3, [r7, #12]
}
 8006184:	bf00      	nop
 8006186:	bf00      	nop
 8006188:	e7fd      	b.n	8006186 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800618a:	f000 fd4d 	bl	8006c28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800618e:	4b1d      	ldr	r3, [pc, #116]	@ (8006204 <xTaskCheckForTimeOut+0xc0>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a6:	d102      	bne.n	80061ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061a8:	2300      	movs	r3, #0
 80061aa:	61fb      	str	r3, [r7, #28]
 80061ac:	e023      	b.n	80061f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	4b15      	ldr	r3, [pc, #84]	@ (8006208 <xTaskCheckForTimeOut+0xc4>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d007      	beq.n	80061ca <xTaskCheckForTimeOut+0x86>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d302      	bcc.n	80061ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80061c4:	2301      	movs	r3, #1
 80061c6:	61fb      	str	r3, [r7, #28]
 80061c8:	e015      	b.n	80061f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d20b      	bcs.n	80061ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	1ad2      	subs	r2, r2, r3
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7ff ff99 	bl	8006118 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80061e6:	2300      	movs	r3, #0
 80061e8:	61fb      	str	r3, [r7, #28]
 80061ea:	e004      	b.n	80061f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	2200      	movs	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80061f2:	2301      	movs	r3, #1
 80061f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80061f6:	f000 fd49 	bl	8006c8c <vPortExitCritical>

	return xReturn;
 80061fa:	69fb      	ldr	r3, [r7, #28]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3720      	adds	r7, #32
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	20000504 	.word	0x20000504
 8006208:	20000518 	.word	0x20000518

0800620c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006210:	4b03      	ldr	r3, [pc, #12]	@ (8006220 <vTaskMissedYield+0x14>)
 8006212:	2201      	movs	r2, #1
 8006214:	601a      	str	r2, [r3, #0]
}
 8006216:	bf00      	nop
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	20000514 	.word	0x20000514

08006224 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800622c:	f000 f852 	bl	80062d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006230:	4b06      	ldr	r3, [pc, #24]	@ (800624c <prvIdleTask+0x28>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d9f9      	bls.n	800622c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006238:	4b05      	ldr	r3, [pc, #20]	@ (8006250 <prvIdleTask+0x2c>)
 800623a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006248:	e7f0      	b.n	800622c <prvIdleTask+0x8>
 800624a:	bf00      	nop
 800624c:	20000404 	.word	0x20000404
 8006250:	e000ed04 	.word	0xe000ed04

08006254 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800625a:	2300      	movs	r3, #0
 800625c:	607b      	str	r3, [r7, #4]
 800625e:	e00c      	b.n	800627a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	4613      	mov	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4a12      	ldr	r2, [pc, #72]	@ (80062b4 <prvInitialiseTaskLists+0x60>)
 800626c:	4413      	add	r3, r2
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe fd45 	bl	8004cfe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	3301      	adds	r3, #1
 8006278:	607b      	str	r3, [r7, #4]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b06      	cmp	r3, #6
 800627e:	d9ef      	bls.n	8006260 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006280:	480d      	ldr	r0, [pc, #52]	@ (80062b8 <prvInitialiseTaskLists+0x64>)
 8006282:	f7fe fd3c 	bl	8004cfe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006286:	480d      	ldr	r0, [pc, #52]	@ (80062bc <prvInitialiseTaskLists+0x68>)
 8006288:	f7fe fd39 	bl	8004cfe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800628c:	480c      	ldr	r0, [pc, #48]	@ (80062c0 <prvInitialiseTaskLists+0x6c>)
 800628e:	f7fe fd36 	bl	8004cfe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006292:	480c      	ldr	r0, [pc, #48]	@ (80062c4 <prvInitialiseTaskLists+0x70>)
 8006294:	f7fe fd33 	bl	8004cfe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006298:	480b      	ldr	r0, [pc, #44]	@ (80062c8 <prvInitialiseTaskLists+0x74>)
 800629a:	f7fe fd30 	bl	8004cfe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800629e:	4b0b      	ldr	r3, [pc, #44]	@ (80062cc <prvInitialiseTaskLists+0x78>)
 80062a0:	4a05      	ldr	r2, [pc, #20]	@ (80062b8 <prvInitialiseTaskLists+0x64>)
 80062a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062a4:	4b0a      	ldr	r3, [pc, #40]	@ (80062d0 <prvInitialiseTaskLists+0x7c>)
 80062a6:	4a05      	ldr	r2, [pc, #20]	@ (80062bc <prvInitialiseTaskLists+0x68>)
 80062a8:	601a      	str	r2, [r3, #0]
}
 80062aa:	bf00      	nop
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	20000404 	.word	0x20000404
 80062b8:	20000490 	.word	0x20000490
 80062bc:	200004a4 	.word	0x200004a4
 80062c0:	200004c0 	.word	0x200004c0
 80062c4:	200004d4 	.word	0x200004d4
 80062c8:	200004ec 	.word	0x200004ec
 80062cc:	200004b8 	.word	0x200004b8
 80062d0:	200004bc 	.word	0x200004bc

080062d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062da:	e019      	b.n	8006310 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062dc:	f000 fca4 	bl	8006c28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062e0:	4b10      	ldr	r3, [pc, #64]	@ (8006324 <prvCheckTasksWaitingTermination+0x50>)
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3304      	adds	r3, #4
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fe fd90 	bl	8004e12 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006328 <prvCheckTasksWaitingTermination+0x54>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3b01      	subs	r3, #1
 80062f8:	4a0b      	ldr	r2, [pc, #44]	@ (8006328 <prvCheckTasksWaitingTermination+0x54>)
 80062fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062fc:	4b0b      	ldr	r3, [pc, #44]	@ (800632c <prvCheckTasksWaitingTermination+0x58>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3b01      	subs	r3, #1
 8006302:	4a0a      	ldr	r2, [pc, #40]	@ (800632c <prvCheckTasksWaitingTermination+0x58>)
 8006304:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006306:	f000 fcc1 	bl	8006c8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f810 	bl	8006330 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006310:	4b06      	ldr	r3, [pc, #24]	@ (800632c <prvCheckTasksWaitingTermination+0x58>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1e1      	bne.n	80062dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006318:	bf00      	nop
 800631a:	bf00      	nop
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	200004d4 	.word	0x200004d4
 8006328:	20000500 	.word	0x20000500
 800632c:	200004e8 	.word	0x200004e8

08006330 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800633e:	2b00      	cmp	r3, #0
 8006340:	d108      	bne.n	8006354 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fe58 	bl	8006ffc <vPortFree>
				vPortFree( pxTCB );
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fe55 	bl	8006ffc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006352:	e019      	b.n	8006388 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800635a:	2b01      	cmp	r3, #1
 800635c:	d103      	bne.n	8006366 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fe4c 	bl	8006ffc <vPortFree>
	}
 8006364:	e010      	b.n	8006388 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800636c:	2b02      	cmp	r3, #2
 800636e:	d00b      	beq.n	8006388 <prvDeleteTCB+0x58>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	60fb      	str	r3, [r7, #12]
}
 8006382:	bf00      	nop
 8006384:	bf00      	nop
 8006386:	e7fd      	b.n	8006384 <prvDeleteTCB+0x54>
	}
 8006388:	bf00      	nop
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006396:	4b0c      	ldr	r3, [pc, #48]	@ (80063c8 <prvResetNextTaskUnblockTime+0x38>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d104      	bne.n	80063aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063a0:	4b0a      	ldr	r3, [pc, #40]	@ (80063cc <prvResetNextTaskUnblockTime+0x3c>)
 80063a2:	f04f 32ff 	mov.w	r2, #4294967295
 80063a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063a8:	e008      	b.n	80063bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063aa:	4b07      	ldr	r3, [pc, #28]	@ (80063c8 <prvResetNextTaskUnblockTime+0x38>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	4a04      	ldr	r2, [pc, #16]	@ (80063cc <prvResetNextTaskUnblockTime+0x3c>)
 80063ba:	6013      	str	r3, [r2, #0]
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	200004b8 	.word	0x200004b8
 80063cc:	20000520 	.word	0x20000520

080063d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006404 <xTaskGetSchedulerState+0x34>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d102      	bne.n	80063e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063de:	2301      	movs	r3, #1
 80063e0:	607b      	str	r3, [r7, #4]
 80063e2:	e008      	b.n	80063f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063e4:	4b08      	ldr	r3, [pc, #32]	@ (8006408 <xTaskGetSchedulerState+0x38>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d102      	bne.n	80063f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80063ec:	2302      	movs	r3, #2
 80063ee:	607b      	str	r3, [r7, #4]
 80063f0:	e001      	b.n	80063f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80063f2:	2300      	movs	r3, #0
 80063f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80063f6:	687b      	ldr	r3, [r7, #4]
	}
 80063f8:	4618      	mov	r0, r3
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	2000050c 	.word	0x2000050c
 8006408:	20000528 	.word	0x20000528

0800640c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006418:	2300      	movs	r3, #0
 800641a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d070      	beq.n	8006504 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006422:	4b3b      	ldr	r3, [pc, #236]	@ (8006510 <xTaskPriorityDisinherit+0x104>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	429a      	cmp	r2, r3
 800642a:	d00b      	beq.n	8006444 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	60fb      	str	r3, [r7, #12]
}
 800643e:	bf00      	nop
 8006440:	bf00      	nop
 8006442:	e7fd      	b.n	8006440 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10b      	bne.n	8006464 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800644c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	60bb      	str	r3, [r7, #8]
}
 800645e:	bf00      	nop
 8006460:	bf00      	nop
 8006462:	e7fd      	b.n	8006460 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006468:	1e5a      	subs	r2, r3, #1
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006476:	429a      	cmp	r2, r3
 8006478:	d044      	beq.n	8006504 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800647e:	2b00      	cmp	r3, #0
 8006480:	d140      	bne.n	8006504 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	3304      	adds	r3, #4
 8006486:	4618      	mov	r0, r3
 8006488:	f7fe fcc3 	bl	8004e12 <uxListRemove>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d115      	bne.n	80064be <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006496:	491f      	ldr	r1, [pc, #124]	@ (8006514 <xTaskPriorityDisinherit+0x108>)
 8006498:	4613      	mov	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	440b      	add	r3, r1
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10a      	bne.n	80064be <xTaskPriorityDisinherit+0xb2>
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ac:	2201      	movs	r2, #1
 80064ae:	fa02 f303 	lsl.w	r3, r2, r3
 80064b2:	43da      	mvns	r2, r3
 80064b4:	4b18      	ldr	r3, [pc, #96]	@ (8006518 <xTaskPriorityDisinherit+0x10c>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4013      	ands	r3, r2
 80064ba:	4a17      	ldr	r2, [pc, #92]	@ (8006518 <xTaskPriorityDisinherit+0x10c>)
 80064bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ca:	f1c3 0207 	rsb	r2, r3, #7
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d6:	2201      	movs	r2, #1
 80064d8:	409a      	lsls	r2, r3
 80064da:	4b0f      	ldr	r3, [pc, #60]	@ (8006518 <xTaskPriorityDisinherit+0x10c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4313      	orrs	r3, r2
 80064e0:	4a0d      	ldr	r2, [pc, #52]	@ (8006518 <xTaskPriorityDisinherit+0x10c>)
 80064e2:	6013      	str	r3, [r2, #0]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064e8:	4613      	mov	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4a08      	ldr	r2, [pc, #32]	@ (8006514 <xTaskPriorityDisinherit+0x108>)
 80064f2:	441a      	add	r2, r3
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	3304      	adds	r3, #4
 80064f8:	4619      	mov	r1, r3
 80064fa:	4610      	mov	r0, r2
 80064fc:	f7fe fc2c 	bl	8004d58 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006500:	2301      	movs	r3, #1
 8006502:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006504:	697b      	ldr	r3, [r7, #20]
	}
 8006506:	4618      	mov	r0, r3
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20000400 	.word	0x20000400
 8006514:	20000404 	.word	0x20000404
 8006518:	20000508 	.word	0x20000508

0800651c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
 8006528:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800652a:	f000 fb7d 	bl	8006c28 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800652e:	4b26      	ldr	r3, [pc, #152]	@ (80065c8 <xTaskNotifyWait+0xac>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b02      	cmp	r3, #2
 800653a:	d01a      	beq.n	8006572 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800653c:	4b22      	ldr	r3, [pc, #136]	@ (80065c8 <xTaskNotifyWait+0xac>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	43d2      	mvns	r2, r2
 8006546:	400a      	ands	r2, r1
 8006548:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800654a:	4b1f      	ldr	r3, [pc, #124]	@ (80065c8 <xTaskNotifyWait+0xac>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00b      	beq.n	8006572 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800655a:	2101      	movs	r1, #1
 800655c:	6838      	ldr	r0, [r7, #0]
 800655e:	f000 f9cd 	bl	80068fc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006562:	4b1a      	ldr	r3, [pc, #104]	@ (80065cc <xTaskNotifyWait+0xb0>)
 8006564:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006572:	f000 fb8b 	bl	8006c8c <vPortExitCritical>

		taskENTER_CRITICAL();
 8006576:	f000 fb57 	bl	8006c28 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d004      	beq.n	800658a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006580:	4b11      	ldr	r3, [pc, #68]	@ (80065c8 <xTaskNotifyWait+0xac>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800658a:	4b0f      	ldr	r3, [pc, #60]	@ (80065c8 <xTaskNotifyWait+0xac>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b02      	cmp	r3, #2
 8006596:	d002      	beq.n	800659e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006598:	2300      	movs	r3, #0
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	e008      	b.n	80065b0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800659e:	4b0a      	ldr	r3, [pc, #40]	@ (80065c8 <xTaskNotifyWait+0xac>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	43d2      	mvns	r2, r2
 80065a8:	400a      	ands	r2, r1
 80065aa:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 80065ac:	2301      	movs	r3, #1
 80065ae:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065b0:	4b05      	ldr	r3, [pc, #20]	@ (80065c8 <xTaskNotifyWait+0xac>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 80065ba:	f000 fb67 	bl	8006c8c <vPortExitCritical>

		return xReturn;
 80065be:	697b      	ldr	r3, [r7, #20]
	}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	20000400 	.word	0x20000400
 80065cc:	e000ed04 	.word	0xe000ed04

080065d0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08a      	sub	sp, #40	@ 0x28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	603b      	str	r3, [r7, #0]
 80065dc:	4613      	mov	r3, r2
 80065de:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80065e0:	2301      	movs	r3, #1
 80065e2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10b      	bne.n	8006602 <xTaskGenericNotify+0x32>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	61bb      	str	r3, [r7, #24]
}
 80065fc:	bf00      	nop
 80065fe:	bf00      	nop
 8006600:	e7fd      	b.n	80065fe <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006606:	f000 fb0f 	bl	8006c28 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d003      	beq.n	8006618 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800661e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	2202      	movs	r2, #2
 8006624:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	2b04      	cmp	r3, #4
 800662c:	d827      	bhi.n	800667e <xTaskGenericNotify+0xae>
 800662e:	a201      	add	r2, pc, #4	@ (adr r2, 8006634 <xTaskGenericNotify+0x64>)
 8006630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006634:	080066a1 	.word	0x080066a1
 8006638:	08006649 	.word	0x08006649
 800663c:	08006657 	.word	0x08006657
 8006640:	08006663 	.word	0x08006663
 8006644:	0800666b 	.word	0x0800666b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	431a      	orrs	r2, r3
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8006654:	e027      	b.n	80066a6 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800665a:	1c5a      	adds	r2, r3, #1
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8006660:	e021      	b.n	80066a6 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8006668:	e01d      	b.n	80066a6 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800666a:	7ffb      	ldrb	r3, [r7, #31]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d003      	beq.n	8006678 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006676:	e016      	b.n	80066a6 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8006678:	2300      	movs	r3, #0
 800667a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800667c:	e013      	b.n	80066a6 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006686:	d00d      	beq.n	80066a4 <xTaskGenericNotify+0xd4>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	617b      	str	r3, [r7, #20]
}
 800669a:	bf00      	nop
 800669c:	bf00      	nop
 800669e:	e7fd      	b.n	800669c <xTaskGenericNotify+0xcc>
					break;
 80066a0:	bf00      	nop
 80066a2:	e000      	b.n	80066a6 <xTaskGenericNotify+0xd6>

					break;
 80066a4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80066a6:	7ffb      	ldrb	r3, [r7, #31]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d13a      	bne.n	8006722 <xTaskGenericNotify+0x152>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	3304      	adds	r3, #4
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fe fbae 	bl	8004e12 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ba:	2201      	movs	r2, #1
 80066bc:	409a      	lsls	r2, r3
 80066be:	4b1c      	ldr	r3, [pc, #112]	@ (8006730 <xTaskGenericNotify+0x160>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006730 <xTaskGenericNotify+0x160>)
 80066c6:	6013      	str	r3, [r2, #0]
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066cc:	4613      	mov	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4a17      	ldr	r2, [pc, #92]	@ (8006734 <xTaskGenericNotify+0x164>)
 80066d6:	441a      	add	r2, r3
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	3304      	adds	r3, #4
 80066dc:	4619      	mov	r1, r3
 80066de:	4610      	mov	r0, r2
 80066e0:	f7fe fb3a 	bl	8004d58 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00b      	beq.n	8006704 <xTaskGenericNotify+0x134>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	613b      	str	r3, [r7, #16]
}
 80066fe:	bf00      	nop
 8006700:	bf00      	nop
 8006702:	e7fd      	b.n	8006700 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006708:	4b0b      	ldr	r3, [pc, #44]	@ (8006738 <xTaskGenericNotify+0x168>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670e:	429a      	cmp	r2, r3
 8006710:	d907      	bls.n	8006722 <xTaskGenericNotify+0x152>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006712:	4b0a      	ldr	r3, [pc, #40]	@ (800673c <xTaskGenericNotify+0x16c>)
 8006714:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006722:	f000 fab3 	bl	8006c8c <vPortExitCritical>

		return xReturn;
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006728:	4618      	mov	r0, r3
 800672a:	3728      	adds	r7, #40	@ 0x28
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	20000508 	.word	0x20000508
 8006734:	20000404 	.word	0x20000404
 8006738:	20000400 	.word	0x20000400
 800673c:	e000ed04 	.word	0xe000ed04

08006740 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08e      	sub	sp, #56	@ 0x38
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	603b      	str	r3, [r7, #0]
 800674c:	4613      	mov	r3, r2
 800674e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006750:	2301      	movs	r3, #1
 8006752:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10b      	bne.n	8006772 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800676c:	bf00      	nop
 800676e:	bf00      	nop
 8006770:	e7fd      	b.n	800676e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006772:	f000 fb39 	bl	8006de8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800677a:	f3ef 8211 	mrs	r2, BASEPRI
 800677e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	623a      	str	r2, [r7, #32]
 8006790:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8006792:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006794:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800679c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80067a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80067aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80067ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b0:	2202      	movs	r2, #2
 80067b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 80067b6:	79fb      	ldrb	r3, [r7, #7]
 80067b8:	2b04      	cmp	r3, #4
 80067ba:	d829      	bhi.n	8006810 <xTaskGenericNotifyFromISR+0xd0>
 80067bc:	a201      	add	r2, pc, #4	@ (adr r2, 80067c4 <xTaskGenericNotifyFromISR+0x84>)
 80067be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c2:	bf00      	nop
 80067c4:	08006833 	.word	0x08006833
 80067c8:	080067d9 	.word	0x080067d9
 80067cc:	080067e7 	.word	0x080067e7
 80067d0:	080067f3 	.word	0x080067f3
 80067d4:	080067fb 	.word	0x080067fb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80067d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	431a      	orrs	r2, r3
 80067e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e2:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80067e4:	e028      	b.n	8006838 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80067e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ee:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80067f0:	e022      	b.n	8006838 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80067f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80067f8:	e01e      	b.n	8006838 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80067fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d003      	beq.n	800680a <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006808:	e016      	b.n	8006838 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 800680a:	2300      	movs	r3, #0
 800680c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800680e:	e013      	b.n	8006838 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006818:	d00d      	beq.n	8006836 <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	61bb      	str	r3, [r7, #24]
}
 800682c:	bf00      	nop
 800682e:	bf00      	nop
 8006830:	e7fd      	b.n	800682e <xTaskGenericNotifyFromISR+0xee>
					break;
 8006832:	bf00      	nop
 8006834:	e000      	b.n	8006838 <xTaskGenericNotifyFromISR+0xf8>
					break;
 8006836:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006838:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800683c:	2b01      	cmp	r3, #1
 800683e:	d146      	bne.n	80068ce <xTaskGenericNotifyFromISR+0x18e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00b      	beq.n	8006860 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	617b      	str	r3, [r7, #20]
}
 800685a:	bf00      	nop
 800685c:	bf00      	nop
 800685e:	e7fd      	b.n	800685c <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006860:	4b20      	ldr	r3, [pc, #128]	@ (80068e4 <xTaskGenericNotifyFromISR+0x1a4>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d11c      	bne.n	80068a2 <xTaskGenericNotifyFromISR+0x162>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686a:	3304      	adds	r3, #4
 800686c:	4618      	mov	r0, r3
 800686e:	f7fe fad0 	bl	8004e12 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006876:	2201      	movs	r2, #1
 8006878:	409a      	lsls	r2, r3
 800687a:	4b1b      	ldr	r3, [pc, #108]	@ (80068e8 <xTaskGenericNotifyFromISR+0x1a8>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4313      	orrs	r3, r2
 8006880:	4a19      	ldr	r2, [pc, #100]	@ (80068e8 <xTaskGenericNotifyFromISR+0x1a8>)
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4a16      	ldr	r2, [pc, #88]	@ (80068ec <xTaskGenericNotifyFromISR+0x1ac>)
 8006892:	441a      	add	r2, r3
 8006894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006896:	3304      	adds	r3, #4
 8006898:	4619      	mov	r1, r3
 800689a:	4610      	mov	r0, r2
 800689c:	f7fe fa5c 	bl	8004d58 <vListInsertEnd>
 80068a0:	e005      	b.n	80068ae <xTaskGenericNotifyFromISR+0x16e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80068a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a4:	3318      	adds	r3, #24
 80068a6:	4619      	mov	r1, r3
 80068a8:	4811      	ldr	r0, [pc, #68]	@ (80068f0 <xTaskGenericNotifyFromISR+0x1b0>)
 80068aa:	f7fe fa55 	bl	8004d58 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068b2:	4b10      	ldr	r3, [pc, #64]	@ (80068f4 <xTaskGenericNotifyFromISR+0x1b4>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d908      	bls.n	80068ce <xTaskGenericNotifyFromISR+0x18e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80068bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <xTaskGenericNotifyFromISR+0x188>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80068c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068c4:	2201      	movs	r2, #1
 80068c6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80068c8:	4b0b      	ldr	r3, [pc, #44]	@ (80068f8 <xTaskGenericNotifyFromISR+0x1b8>)
 80068ca:	2201      	movs	r2, #1
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f383 8811 	msr	BASEPRI, r3
}
 80068d8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80068da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80068dc:	4618      	mov	r0, r3
 80068de:	3738      	adds	r7, #56	@ 0x38
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	20000528 	.word	0x20000528
 80068e8:	20000508 	.word	0x20000508
 80068ec:	20000404 	.word	0x20000404
 80068f0:	200004c0 	.word	0x200004c0
 80068f4:	20000400 	.word	0x20000400
 80068f8:	20000514 	.word	0x20000514

080068fc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006906:	4b29      	ldr	r3, [pc, #164]	@ (80069ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800690c:	4b28      	ldr	r3, [pc, #160]	@ (80069b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3304      	adds	r3, #4
 8006912:	4618      	mov	r0, r3
 8006914:	f7fe fa7d 	bl	8004e12 <uxListRemove>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10b      	bne.n	8006936 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800691e:	4b24      	ldr	r3, [pc, #144]	@ (80069b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006924:	2201      	movs	r2, #1
 8006926:	fa02 f303 	lsl.w	r3, r2, r3
 800692a:	43da      	mvns	r2, r3
 800692c:	4b21      	ldr	r3, [pc, #132]	@ (80069b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4013      	ands	r3, r2
 8006932:	4a20      	ldr	r2, [pc, #128]	@ (80069b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006934:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693c:	d10a      	bne.n	8006954 <prvAddCurrentTaskToDelayedList+0x58>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d007      	beq.n	8006954 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006944:	4b1a      	ldr	r3, [pc, #104]	@ (80069b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	3304      	adds	r3, #4
 800694a:	4619      	mov	r1, r3
 800694c:	481a      	ldr	r0, [pc, #104]	@ (80069b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800694e:	f7fe fa03 	bl	8004d58 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006952:	e026      	b.n	80069a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4413      	add	r3, r2
 800695a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800695c:	4b14      	ldr	r3, [pc, #80]	@ (80069b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	429a      	cmp	r2, r3
 800696a:	d209      	bcs.n	8006980 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800696c:	4b13      	ldr	r3, [pc, #76]	@ (80069bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	4b0f      	ldr	r3, [pc, #60]	@ (80069b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3304      	adds	r3, #4
 8006976:	4619      	mov	r1, r3
 8006978:	4610      	mov	r0, r2
 800697a:	f7fe fa11 	bl	8004da0 <vListInsert>
}
 800697e:	e010      	b.n	80069a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006980:	4b0f      	ldr	r3, [pc, #60]	@ (80069c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	4b0a      	ldr	r3, [pc, #40]	@ (80069b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3304      	adds	r3, #4
 800698a:	4619      	mov	r1, r3
 800698c:	4610      	mov	r0, r2
 800698e:	f7fe fa07 	bl	8004da0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006992:	4b0c      	ldr	r3, [pc, #48]	@ (80069c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	429a      	cmp	r2, r3
 800699a:	d202      	bcs.n	80069a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800699c:	4a09      	ldr	r2, [pc, #36]	@ (80069c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	6013      	str	r3, [r2, #0]
}
 80069a2:	bf00      	nop
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	20000504 	.word	0x20000504
 80069b0:	20000400 	.word	0x20000400
 80069b4:	20000508 	.word	0x20000508
 80069b8:	200004ec 	.word	0x200004ec
 80069bc:	200004bc 	.word	0x200004bc
 80069c0:	200004b8 	.word	0x200004b8
 80069c4:	20000520 	.word	0x20000520

080069c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3b04      	subs	r3, #4
 80069d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80069e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	3b04      	subs	r3, #4
 80069e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f023 0201 	bic.w	r2, r3, #1
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	3b04      	subs	r3, #4
 80069f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069f8:	4a0c      	ldr	r2, [pc, #48]	@ (8006a2c <pxPortInitialiseStack+0x64>)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	3b14      	subs	r3, #20
 8006a02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	3b04      	subs	r3, #4
 8006a0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f06f 0202 	mvn.w	r2, #2
 8006a16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3b20      	subs	r3, #32
 8006a1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	08006a31 	.word	0x08006a31

08006a30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a36:	2300      	movs	r3, #0
 8006a38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a3a:	4b13      	ldr	r3, [pc, #76]	@ (8006a88 <prvTaskExitError+0x58>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a42:	d00b      	beq.n	8006a5c <prvTaskExitError+0x2c>
	__asm volatile
 8006a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a48:	f383 8811 	msr	BASEPRI, r3
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f3bf 8f4f 	dsb	sy
 8006a54:	60fb      	str	r3, [r7, #12]
}
 8006a56:	bf00      	nop
 8006a58:	bf00      	nop
 8006a5a:	e7fd      	b.n	8006a58 <prvTaskExitError+0x28>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	60bb      	str	r3, [r7, #8]
}
 8006a6e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a70:	bf00      	nop
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d0fc      	beq.n	8006a72 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a78:	bf00      	nop
 8006a7a:	bf00      	nop
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	20000010 	.word	0x20000010
 8006a8c:	00000000 	.word	0x00000000

08006a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a90:	4b07      	ldr	r3, [pc, #28]	@ (8006ab0 <pxCurrentTCBConst2>)
 8006a92:	6819      	ldr	r1, [r3, #0]
 8006a94:	6808      	ldr	r0, [r1, #0]
 8006a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9a:	f380 8809 	msr	PSP, r0
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f04f 0000 	mov.w	r0, #0
 8006aa6:	f380 8811 	msr	BASEPRI, r0
 8006aaa:	4770      	bx	lr
 8006aac:	f3af 8000 	nop.w

08006ab0 <pxCurrentTCBConst2>:
 8006ab0:	20000400 	.word	0x20000400
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop

08006ab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ab8:	4808      	ldr	r0, [pc, #32]	@ (8006adc <prvPortStartFirstTask+0x24>)
 8006aba:	6800      	ldr	r0, [r0, #0]
 8006abc:	6800      	ldr	r0, [r0, #0]
 8006abe:	f380 8808 	msr	MSP, r0
 8006ac2:	f04f 0000 	mov.w	r0, #0
 8006ac6:	f380 8814 	msr	CONTROL, r0
 8006aca:	b662      	cpsie	i
 8006acc:	b661      	cpsie	f
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	df00      	svc	0
 8006ad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006ada:	bf00      	nop
 8006adc:	e000ed08 	.word	0xe000ed08

08006ae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ae6:	4b47      	ldr	r3, [pc, #284]	@ (8006c04 <xPortStartScheduler+0x124>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a47      	ldr	r2, [pc, #284]	@ (8006c08 <xPortStartScheduler+0x128>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d10b      	bne.n	8006b08 <xPortStartScheduler+0x28>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	613b      	str	r3, [r7, #16]
}
 8006b02:	bf00      	nop
 8006b04:	bf00      	nop
 8006b06:	e7fd      	b.n	8006b04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b08:	4b3e      	ldr	r3, [pc, #248]	@ (8006c04 <xPortStartScheduler+0x124>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a3f      	ldr	r2, [pc, #252]	@ (8006c0c <xPortStartScheduler+0x12c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d10b      	bne.n	8006b2a <xPortStartScheduler+0x4a>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	60fb      	str	r3, [r7, #12]
}
 8006b24:	bf00      	nop
 8006b26:	bf00      	nop
 8006b28:	e7fd      	b.n	8006b26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b2a:	4b39      	ldr	r3, [pc, #228]	@ (8006c10 <xPortStartScheduler+0x130>)
 8006b2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	22ff      	movs	r2, #255	@ 0xff
 8006b3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b44:	78fb      	ldrb	r3, [r7, #3]
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	4b31      	ldr	r3, [pc, #196]	@ (8006c14 <xPortStartScheduler+0x134>)
 8006b50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b52:	4b31      	ldr	r3, [pc, #196]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006b54:	2207      	movs	r2, #7
 8006b56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b58:	e009      	b.n	8006b6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	4a2d      	ldr	r2, [pc, #180]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006b62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b64:	78fb      	ldrb	r3, [r7, #3]
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	005b      	lsls	r3, r3, #1
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b6e:	78fb      	ldrb	r3, [r7, #3]
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b76:	2b80      	cmp	r3, #128	@ 0x80
 8006b78:	d0ef      	beq.n	8006b5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b7a:	4b27      	ldr	r3, [pc, #156]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f1c3 0307 	rsb	r3, r3, #7
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d00b      	beq.n	8006b9e <xPortStartScheduler+0xbe>
	__asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	60bb      	str	r3, [r7, #8]
}
 8006b98:	bf00      	nop
 8006b9a:	bf00      	nop
 8006b9c:	e7fd      	b.n	8006b9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	021b      	lsls	r3, r3, #8
 8006ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006ba6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006bb0:	4a19      	ldr	r2, [pc, #100]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006bb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006bbc:	4b17      	ldr	r3, [pc, #92]	@ (8006c1c <xPortStartScheduler+0x13c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a16      	ldr	r2, [pc, #88]	@ (8006c1c <xPortStartScheduler+0x13c>)
 8006bc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006bc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006bc8:	4b14      	ldr	r3, [pc, #80]	@ (8006c1c <xPortStartScheduler+0x13c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a13      	ldr	r2, [pc, #76]	@ (8006c1c <xPortStartScheduler+0x13c>)
 8006bce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006bd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006bd4:	f000 f8da 	bl	8006d8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006bd8:	4b11      	ldr	r3, [pc, #68]	@ (8006c20 <xPortStartScheduler+0x140>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006bde:	f000 f8f9 	bl	8006dd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006be2:	4b10      	ldr	r3, [pc, #64]	@ (8006c24 <xPortStartScheduler+0x144>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a0f      	ldr	r2, [pc, #60]	@ (8006c24 <xPortStartScheduler+0x144>)
 8006be8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006bec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006bee:	f7ff ff63 	bl	8006ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006bf2:	f7ff f9ab 	bl	8005f4c <vTaskSwitchContext>
	prvTaskExitError();
 8006bf6:	f7ff ff1b 	bl	8006a30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3718      	adds	r7, #24
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	e000ed00 	.word	0xe000ed00
 8006c08:	410fc271 	.word	0x410fc271
 8006c0c:	410fc270 	.word	0x410fc270
 8006c10:	e000e400 	.word	0xe000e400
 8006c14:	2000052c 	.word	0x2000052c
 8006c18:	20000530 	.word	0x20000530
 8006c1c:	e000ed20 	.word	0xe000ed20
 8006c20:	20000010 	.word	0x20000010
 8006c24:	e000ef34 	.word	0xe000ef34

08006c28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	607b      	str	r3, [r7, #4]
}
 8006c40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c42:	4b10      	ldr	r3, [pc, #64]	@ (8006c84 <vPortEnterCritical+0x5c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3301      	adds	r3, #1
 8006c48:	4a0e      	ldr	r2, [pc, #56]	@ (8006c84 <vPortEnterCritical+0x5c>)
 8006c4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8006c84 <vPortEnterCritical+0x5c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d110      	bne.n	8006c76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c54:	4b0c      	ldr	r3, [pc, #48]	@ (8006c88 <vPortEnterCritical+0x60>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00b      	beq.n	8006c76 <vPortEnterCritical+0x4e>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	603b      	str	r3, [r7, #0]
}
 8006c70:	bf00      	nop
 8006c72:	bf00      	nop
 8006c74:	e7fd      	b.n	8006c72 <vPortEnterCritical+0x4a>
	}
}
 8006c76:	bf00      	nop
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	20000010 	.word	0x20000010
 8006c88:	e000ed04 	.word	0xe000ed04

08006c8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c92:	4b12      	ldr	r3, [pc, #72]	@ (8006cdc <vPortExitCritical+0x50>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10b      	bne.n	8006cb2 <vPortExitCritical+0x26>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	607b      	str	r3, [r7, #4]
}
 8006cac:	bf00      	nop
 8006cae:	bf00      	nop
 8006cb0:	e7fd      	b.n	8006cae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8006cdc <vPortExitCritical+0x50>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	4a08      	ldr	r2, [pc, #32]	@ (8006cdc <vPortExitCritical+0x50>)
 8006cba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006cbc:	4b07      	ldr	r3, [pc, #28]	@ (8006cdc <vPortExitCritical+0x50>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d105      	bne.n	8006cd0 <vPortExitCritical+0x44>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	f383 8811 	msr	BASEPRI, r3
}
 8006cce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	20000010 	.word	0x20000010

08006ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ce0:	f3ef 8009 	mrs	r0, PSP
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	4b15      	ldr	r3, [pc, #84]	@ (8006d40 <pxCurrentTCBConst>)
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	f01e 0f10 	tst.w	lr, #16
 8006cf0:	bf08      	it	eq
 8006cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfa:	6010      	str	r0, [r2, #0]
 8006cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006d04:	f380 8811 	msr	BASEPRI, r0
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f7ff f91c 	bl	8005f4c <vTaskSwitchContext>
 8006d14:	f04f 0000 	mov.w	r0, #0
 8006d18:	f380 8811 	msr	BASEPRI, r0
 8006d1c:	bc09      	pop	{r0, r3}
 8006d1e:	6819      	ldr	r1, [r3, #0]
 8006d20:	6808      	ldr	r0, [r1, #0]
 8006d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d26:	f01e 0f10 	tst.w	lr, #16
 8006d2a:	bf08      	it	eq
 8006d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d30:	f380 8809 	msr	PSP, r0
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	f3af 8000 	nop.w

08006d40 <pxCurrentTCBConst>:
 8006d40:	20000400 	.word	0x20000400
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop

08006d48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	607b      	str	r3, [r7, #4]
}
 8006d60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d62:	f7ff f839 	bl	8005dd8 <xTaskIncrementTick>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d6c:	4b06      	ldr	r3, [pc, #24]	@ (8006d88 <SysTick_Handler+0x40>)
 8006d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	2300      	movs	r3, #0
 8006d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	f383 8811 	msr	BASEPRI, r3
}
 8006d7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d80:	bf00      	nop
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	e000ed04 	.word	0xe000ed04

08006d8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d90:	4b0b      	ldr	r3, [pc, #44]	@ (8006dc0 <vPortSetupTimerInterrupt+0x34>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d96:	4b0b      	ldr	r3, [pc, #44]	@ (8006dc4 <vPortSetupTimerInterrupt+0x38>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc8 <vPortSetupTimerInterrupt+0x3c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a0a      	ldr	r2, [pc, #40]	@ (8006dcc <vPortSetupTimerInterrupt+0x40>)
 8006da2:	fba2 2303 	umull	r2, r3, r2, r3
 8006da6:	099b      	lsrs	r3, r3, #6
 8006da8:	4a09      	ldr	r2, [pc, #36]	@ (8006dd0 <vPortSetupTimerInterrupt+0x44>)
 8006daa:	3b01      	subs	r3, #1
 8006dac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006dae:	4b04      	ldr	r3, [pc, #16]	@ (8006dc0 <vPortSetupTimerInterrupt+0x34>)
 8006db0:	2207      	movs	r2, #7
 8006db2:	601a      	str	r2, [r3, #0]
}
 8006db4:	bf00      	nop
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	e000e010 	.word	0xe000e010
 8006dc4:	e000e018 	.word	0xe000e018
 8006dc8:	20000004 	.word	0x20000004
 8006dcc:	10624dd3 	.word	0x10624dd3
 8006dd0:	e000e014 	.word	0xe000e014

08006dd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006dd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006de4 <vPortEnableVFP+0x10>
 8006dd8:	6801      	ldr	r1, [r0, #0]
 8006dda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006dde:	6001      	str	r1, [r0, #0]
 8006de0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006de2:	bf00      	nop
 8006de4:	e000ed88 	.word	0xe000ed88

08006de8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006dee:	f3ef 8305 	mrs	r3, IPSR
 8006df2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2b0f      	cmp	r3, #15
 8006df8:	d915      	bls.n	8006e26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006dfa:	4a18      	ldr	r2, [pc, #96]	@ (8006e5c <vPortValidateInterruptPriority+0x74>)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e04:	4b16      	ldr	r3, [pc, #88]	@ (8006e60 <vPortValidateInterruptPriority+0x78>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	7afa      	ldrb	r2, [r7, #11]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d20b      	bcs.n	8006e26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	607b      	str	r3, [r7, #4]
}
 8006e20:	bf00      	nop
 8006e22:	bf00      	nop
 8006e24:	e7fd      	b.n	8006e22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e26:	4b0f      	ldr	r3, [pc, #60]	@ (8006e64 <vPortValidateInterruptPriority+0x7c>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8006e68 <vPortValidateInterruptPriority+0x80>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d90b      	bls.n	8006e4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	603b      	str	r3, [r7, #0]
}
 8006e48:	bf00      	nop
 8006e4a:	bf00      	nop
 8006e4c:	e7fd      	b.n	8006e4a <vPortValidateInterruptPriority+0x62>
	}
 8006e4e:	bf00      	nop
 8006e50:	3714      	adds	r7, #20
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	e000e3f0 	.word	0xe000e3f0
 8006e60:	2000052c 	.word	0x2000052c
 8006e64:	e000ed0c 	.word	0xe000ed0c
 8006e68:	20000530 	.word	0x20000530

08006e6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b08a      	sub	sp, #40	@ 0x28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e74:	2300      	movs	r3, #0
 8006e76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e78:	f7fe ff02 	bl	8005c80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e7c:	4b5a      	ldr	r3, [pc, #360]	@ (8006fe8 <pvPortMalloc+0x17c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e84:	f000 f916 	bl	80070b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e88:	4b58      	ldr	r3, [pc, #352]	@ (8006fec <pvPortMalloc+0x180>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f040 8090 	bne.w	8006fb6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01e      	beq.n	8006eda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006e9c:	2208      	movs	r2, #8
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d015      	beq.n	8006eda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f023 0307 	bic.w	r3, r3, #7
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f003 0307 	and.w	r3, r3, #7
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00b      	beq.n	8006eda <pvPortMalloc+0x6e>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	617b      	str	r3, [r7, #20]
}
 8006ed4:	bf00      	nop
 8006ed6:	bf00      	nop
 8006ed8:	e7fd      	b.n	8006ed6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d06a      	beq.n	8006fb6 <pvPortMalloc+0x14a>
 8006ee0:	4b43      	ldr	r3, [pc, #268]	@ (8006ff0 <pvPortMalloc+0x184>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d865      	bhi.n	8006fb6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006eea:	4b42      	ldr	r3, [pc, #264]	@ (8006ff4 <pvPortMalloc+0x188>)
 8006eec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006eee:	4b41      	ldr	r3, [pc, #260]	@ (8006ff4 <pvPortMalloc+0x188>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ef4:	e004      	b.n	8006f00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d903      	bls.n	8006f12 <pvPortMalloc+0xa6>
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1f1      	bne.n	8006ef6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f12:	4b35      	ldr	r3, [pc, #212]	@ (8006fe8 <pvPortMalloc+0x17c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d04c      	beq.n	8006fb6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2208      	movs	r2, #8
 8006f22:	4413      	add	r3, r2
 8006f24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	1ad2      	subs	r2, r2, r3
 8006f36:	2308      	movs	r3, #8
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d920      	bls.n	8006f80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4413      	add	r3, r2
 8006f44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	f003 0307 	and.w	r3, r3, #7
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00b      	beq.n	8006f68 <pvPortMalloc+0xfc>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	613b      	str	r3, [r7, #16]
}
 8006f62:	bf00      	nop
 8006f64:	bf00      	nop
 8006f66:	e7fd      	b.n	8006f64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	1ad2      	subs	r2, r2, r3
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f7a:	69b8      	ldr	r0, [r7, #24]
 8006f7c:	f000 f8fc 	bl	8007178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f80:	4b1b      	ldr	r3, [pc, #108]	@ (8006ff0 <pvPortMalloc+0x184>)
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	4a19      	ldr	r2, [pc, #100]	@ (8006ff0 <pvPortMalloc+0x184>)
 8006f8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f8e:	4b18      	ldr	r3, [pc, #96]	@ (8006ff0 <pvPortMalloc+0x184>)
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	4b19      	ldr	r3, [pc, #100]	@ (8006ff8 <pvPortMalloc+0x18c>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d203      	bcs.n	8006fa2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f9a:	4b15      	ldr	r3, [pc, #84]	@ (8006ff0 <pvPortMalloc+0x184>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a16      	ldr	r2, [pc, #88]	@ (8006ff8 <pvPortMalloc+0x18c>)
 8006fa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	4b11      	ldr	r3, [pc, #68]	@ (8006fec <pvPortMalloc+0x180>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	431a      	orrs	r2, r3
 8006fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006fb6:	f7fe fe71 	bl	8005c9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	f003 0307 	and.w	r3, r3, #7
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00b      	beq.n	8006fdc <pvPortMalloc+0x170>
	__asm volatile
 8006fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc8:	f383 8811 	msr	BASEPRI, r3
 8006fcc:	f3bf 8f6f 	isb	sy
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	60fb      	str	r3, [r7, #12]
}
 8006fd6:	bf00      	nop
 8006fd8:	bf00      	nop
 8006fda:	e7fd      	b.n	8006fd8 <pvPortMalloc+0x16c>
	return pvReturn;
 8006fdc:	69fb      	ldr	r3, [r7, #28]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3728      	adds	r7, #40	@ 0x28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	2000413c 	.word	0x2000413c
 8006fec:	20004148 	.word	0x20004148
 8006ff0:	20004140 	.word	0x20004140
 8006ff4:	20004134 	.word	0x20004134
 8006ff8:	20004144 	.word	0x20004144

08006ffc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d04a      	beq.n	80070a4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800700e:	2308      	movs	r3, #8
 8007010:	425b      	negs	r3, r3
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	4413      	add	r3, r2
 8007016:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	4b22      	ldr	r3, [pc, #136]	@ (80070ac <vPortFree+0xb0>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4013      	ands	r3, r2
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10b      	bne.n	8007042 <vPortFree+0x46>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	60fb      	str	r3, [r7, #12]
}
 800703c:	bf00      	nop
 800703e:	bf00      	nop
 8007040:	e7fd      	b.n	800703e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00b      	beq.n	8007062 <vPortFree+0x66>
	__asm volatile
 800704a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800704e:	f383 8811 	msr	BASEPRI, r3
 8007052:	f3bf 8f6f 	isb	sy
 8007056:	f3bf 8f4f 	dsb	sy
 800705a:	60bb      	str	r3, [r7, #8]
}
 800705c:	bf00      	nop
 800705e:	bf00      	nop
 8007060:	e7fd      	b.n	800705e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	4b11      	ldr	r3, [pc, #68]	@ (80070ac <vPortFree+0xb0>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4013      	ands	r3, r2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d019      	beq.n	80070a4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d115      	bne.n	80070a4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	4b0b      	ldr	r3, [pc, #44]	@ (80070ac <vPortFree+0xb0>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	43db      	mvns	r3, r3
 8007082:	401a      	ands	r2, r3
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007088:	f7fe fdfa 	bl	8005c80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	4b07      	ldr	r3, [pc, #28]	@ (80070b0 <vPortFree+0xb4>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4413      	add	r3, r2
 8007096:	4a06      	ldr	r2, [pc, #24]	@ (80070b0 <vPortFree+0xb4>)
 8007098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800709a:	6938      	ldr	r0, [r7, #16]
 800709c:	f000 f86c 	bl	8007178 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80070a0:	f7fe fdfc 	bl	8005c9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80070a4:	bf00      	nop
 80070a6:	3718      	adds	r7, #24
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	20004148 	.word	0x20004148
 80070b0:	20004140 	.word	0x20004140

080070b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070ba:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80070be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070c0:	4b27      	ldr	r3, [pc, #156]	@ (8007160 <prvHeapInit+0xac>)
 80070c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f003 0307 	and.w	r3, r3, #7
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00c      	beq.n	80070e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	3307      	adds	r3, #7
 80070d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f023 0307 	bic.w	r3, r3, #7
 80070da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	4a1f      	ldr	r2, [pc, #124]	@ (8007160 <prvHeapInit+0xac>)
 80070e4:	4413      	add	r3, r2
 80070e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070ec:	4a1d      	ldr	r2, [pc, #116]	@ (8007164 <prvHeapInit+0xb0>)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070f2:	4b1c      	ldr	r3, [pc, #112]	@ (8007164 <prvHeapInit+0xb0>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	4413      	add	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007100:	2208      	movs	r2, #8
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	1a9b      	subs	r3, r3, r2
 8007106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f023 0307 	bic.w	r3, r3, #7
 800710e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4a15      	ldr	r2, [pc, #84]	@ (8007168 <prvHeapInit+0xb4>)
 8007114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007116:	4b14      	ldr	r3, [pc, #80]	@ (8007168 <prvHeapInit+0xb4>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2200      	movs	r2, #0
 800711c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800711e:	4b12      	ldr	r3, [pc, #72]	@ (8007168 <prvHeapInit+0xb4>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2200      	movs	r2, #0
 8007124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	1ad2      	subs	r2, r2, r3
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007134:	4b0c      	ldr	r3, [pc, #48]	@ (8007168 <prvHeapInit+0xb4>)
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	4a0a      	ldr	r2, [pc, #40]	@ (800716c <prvHeapInit+0xb8>)
 8007142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	4a09      	ldr	r2, [pc, #36]	@ (8007170 <prvHeapInit+0xbc>)
 800714a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800714c:	4b09      	ldr	r3, [pc, #36]	@ (8007174 <prvHeapInit+0xc0>)
 800714e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007152:	601a      	str	r2, [r3, #0]
}
 8007154:	bf00      	nop
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	20000534 	.word	0x20000534
 8007164:	20004134 	.word	0x20004134
 8007168:	2000413c 	.word	0x2000413c
 800716c:	20004144 	.word	0x20004144
 8007170:	20004140 	.word	0x20004140
 8007174:	20004148 	.word	0x20004148

08007178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007180:	4b28      	ldr	r3, [pc, #160]	@ (8007224 <prvInsertBlockIntoFreeList+0xac>)
 8007182:	60fb      	str	r3, [r7, #12]
 8007184:	e002      	b.n	800718c <prvInsertBlockIntoFreeList+0x14>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	60fb      	str	r3, [r7, #12]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	429a      	cmp	r2, r3
 8007194:	d8f7      	bhi.n	8007186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	4413      	add	r3, r2
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d108      	bne.n	80071ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	441a      	add	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	441a      	add	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d118      	bne.n	8007200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	4b15      	ldr	r3, [pc, #84]	@ (8007228 <prvInsertBlockIntoFreeList+0xb0>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d00d      	beq.n	80071f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	441a      	add	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	e008      	b.n	8007208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007228 <prvInsertBlockIntoFreeList+0xb0>)
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	e003      	b.n	8007208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	429a      	cmp	r2, r3
 800720e:	d002      	beq.n	8007216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007216:	bf00      	nop
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	20004134 	.word	0x20004134
 8007228:	2000413c 	.word	0x2000413c

0800722c <siprintf>:
 800722c:	b40e      	push	{r1, r2, r3}
 800722e:	b500      	push	{lr}
 8007230:	b09c      	sub	sp, #112	@ 0x70
 8007232:	ab1d      	add	r3, sp, #116	@ 0x74
 8007234:	9002      	str	r0, [sp, #8]
 8007236:	9006      	str	r0, [sp, #24]
 8007238:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800723c:	4809      	ldr	r0, [pc, #36]	@ (8007264 <siprintf+0x38>)
 800723e:	9107      	str	r1, [sp, #28]
 8007240:	9104      	str	r1, [sp, #16]
 8007242:	4909      	ldr	r1, [pc, #36]	@ (8007268 <siprintf+0x3c>)
 8007244:	f853 2b04 	ldr.w	r2, [r3], #4
 8007248:	9105      	str	r1, [sp, #20]
 800724a:	6800      	ldr	r0, [r0, #0]
 800724c:	9301      	str	r3, [sp, #4]
 800724e:	a902      	add	r1, sp, #8
 8007250:	f000 f9aa 	bl	80075a8 <_svfiprintf_r>
 8007254:	9b02      	ldr	r3, [sp, #8]
 8007256:	2200      	movs	r2, #0
 8007258:	701a      	strb	r2, [r3, #0]
 800725a:	b01c      	add	sp, #112	@ 0x70
 800725c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007260:	b003      	add	sp, #12
 8007262:	4770      	bx	lr
 8007264:	20000014 	.word	0x20000014
 8007268:	ffff0208 	.word	0xffff0208

0800726c <memset>:
 800726c:	4402      	add	r2, r0
 800726e:	4603      	mov	r3, r0
 8007270:	4293      	cmp	r3, r2
 8007272:	d100      	bne.n	8007276 <memset+0xa>
 8007274:	4770      	bx	lr
 8007276:	f803 1b01 	strb.w	r1, [r3], #1
 800727a:	e7f9      	b.n	8007270 <memset+0x4>

0800727c <__errno>:
 800727c:	4b01      	ldr	r3, [pc, #4]	@ (8007284 <__errno+0x8>)
 800727e:	6818      	ldr	r0, [r3, #0]
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20000014 	.word	0x20000014

08007288 <__libc_init_array>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	4d0d      	ldr	r5, [pc, #52]	@ (80072c0 <__libc_init_array+0x38>)
 800728c:	4c0d      	ldr	r4, [pc, #52]	@ (80072c4 <__libc_init_array+0x3c>)
 800728e:	1b64      	subs	r4, r4, r5
 8007290:	10a4      	asrs	r4, r4, #2
 8007292:	2600      	movs	r6, #0
 8007294:	42a6      	cmp	r6, r4
 8007296:	d109      	bne.n	80072ac <__libc_init_array+0x24>
 8007298:	4d0b      	ldr	r5, [pc, #44]	@ (80072c8 <__libc_init_array+0x40>)
 800729a:	4c0c      	ldr	r4, [pc, #48]	@ (80072cc <__libc_init_array+0x44>)
 800729c:	f000 fc6e 	bl	8007b7c <_init>
 80072a0:	1b64      	subs	r4, r4, r5
 80072a2:	10a4      	asrs	r4, r4, #2
 80072a4:	2600      	movs	r6, #0
 80072a6:	42a6      	cmp	r6, r4
 80072a8:	d105      	bne.n	80072b6 <__libc_init_array+0x2e>
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
 80072ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80072b0:	4798      	blx	r3
 80072b2:	3601      	adds	r6, #1
 80072b4:	e7ee      	b.n	8007294 <__libc_init_array+0xc>
 80072b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ba:	4798      	blx	r3
 80072bc:	3601      	adds	r6, #1
 80072be:	e7f2      	b.n	80072a6 <__libc_init_array+0x1e>
 80072c0:	08007d20 	.word	0x08007d20
 80072c4:	08007d20 	.word	0x08007d20
 80072c8:	08007d20 	.word	0x08007d20
 80072cc:	08007d24 	.word	0x08007d24

080072d0 <__retarget_lock_acquire_recursive>:
 80072d0:	4770      	bx	lr

080072d2 <__retarget_lock_release_recursive>:
 80072d2:	4770      	bx	lr

080072d4 <strcpy>:
 80072d4:	4603      	mov	r3, r0
 80072d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072da:	f803 2b01 	strb.w	r2, [r3], #1
 80072de:	2a00      	cmp	r2, #0
 80072e0:	d1f9      	bne.n	80072d6 <strcpy+0x2>
 80072e2:	4770      	bx	lr

080072e4 <memcpy>:
 80072e4:	440a      	add	r2, r1
 80072e6:	4291      	cmp	r1, r2
 80072e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80072ec:	d100      	bne.n	80072f0 <memcpy+0xc>
 80072ee:	4770      	bx	lr
 80072f0:	b510      	push	{r4, lr}
 80072f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072fa:	4291      	cmp	r1, r2
 80072fc:	d1f9      	bne.n	80072f2 <memcpy+0xe>
 80072fe:	bd10      	pop	{r4, pc}

08007300 <_free_r>:
 8007300:	b538      	push	{r3, r4, r5, lr}
 8007302:	4605      	mov	r5, r0
 8007304:	2900      	cmp	r1, #0
 8007306:	d041      	beq.n	800738c <_free_r+0x8c>
 8007308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800730c:	1f0c      	subs	r4, r1, #4
 800730e:	2b00      	cmp	r3, #0
 8007310:	bfb8      	it	lt
 8007312:	18e4      	addlt	r4, r4, r3
 8007314:	f000 f8e0 	bl	80074d8 <__malloc_lock>
 8007318:	4a1d      	ldr	r2, [pc, #116]	@ (8007390 <_free_r+0x90>)
 800731a:	6813      	ldr	r3, [r2, #0]
 800731c:	b933      	cbnz	r3, 800732c <_free_r+0x2c>
 800731e:	6063      	str	r3, [r4, #4]
 8007320:	6014      	str	r4, [r2, #0]
 8007322:	4628      	mov	r0, r5
 8007324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007328:	f000 b8dc 	b.w	80074e4 <__malloc_unlock>
 800732c:	42a3      	cmp	r3, r4
 800732e:	d908      	bls.n	8007342 <_free_r+0x42>
 8007330:	6820      	ldr	r0, [r4, #0]
 8007332:	1821      	adds	r1, r4, r0
 8007334:	428b      	cmp	r3, r1
 8007336:	bf01      	itttt	eq
 8007338:	6819      	ldreq	r1, [r3, #0]
 800733a:	685b      	ldreq	r3, [r3, #4]
 800733c:	1809      	addeq	r1, r1, r0
 800733e:	6021      	streq	r1, [r4, #0]
 8007340:	e7ed      	b.n	800731e <_free_r+0x1e>
 8007342:	461a      	mov	r2, r3
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	b10b      	cbz	r3, 800734c <_free_r+0x4c>
 8007348:	42a3      	cmp	r3, r4
 800734a:	d9fa      	bls.n	8007342 <_free_r+0x42>
 800734c:	6811      	ldr	r1, [r2, #0]
 800734e:	1850      	adds	r0, r2, r1
 8007350:	42a0      	cmp	r0, r4
 8007352:	d10b      	bne.n	800736c <_free_r+0x6c>
 8007354:	6820      	ldr	r0, [r4, #0]
 8007356:	4401      	add	r1, r0
 8007358:	1850      	adds	r0, r2, r1
 800735a:	4283      	cmp	r3, r0
 800735c:	6011      	str	r1, [r2, #0]
 800735e:	d1e0      	bne.n	8007322 <_free_r+0x22>
 8007360:	6818      	ldr	r0, [r3, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	6053      	str	r3, [r2, #4]
 8007366:	4408      	add	r0, r1
 8007368:	6010      	str	r0, [r2, #0]
 800736a:	e7da      	b.n	8007322 <_free_r+0x22>
 800736c:	d902      	bls.n	8007374 <_free_r+0x74>
 800736e:	230c      	movs	r3, #12
 8007370:	602b      	str	r3, [r5, #0]
 8007372:	e7d6      	b.n	8007322 <_free_r+0x22>
 8007374:	6820      	ldr	r0, [r4, #0]
 8007376:	1821      	adds	r1, r4, r0
 8007378:	428b      	cmp	r3, r1
 800737a:	bf04      	itt	eq
 800737c:	6819      	ldreq	r1, [r3, #0]
 800737e:	685b      	ldreq	r3, [r3, #4]
 8007380:	6063      	str	r3, [r4, #4]
 8007382:	bf04      	itt	eq
 8007384:	1809      	addeq	r1, r1, r0
 8007386:	6021      	streq	r1, [r4, #0]
 8007388:	6054      	str	r4, [r2, #4]
 800738a:	e7ca      	b.n	8007322 <_free_r+0x22>
 800738c:	bd38      	pop	{r3, r4, r5, pc}
 800738e:	bf00      	nop
 8007390:	20004290 	.word	0x20004290

08007394 <sbrk_aligned>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	4e0f      	ldr	r6, [pc, #60]	@ (80073d4 <sbrk_aligned+0x40>)
 8007398:	460c      	mov	r4, r1
 800739a:	6831      	ldr	r1, [r6, #0]
 800739c:	4605      	mov	r5, r0
 800739e:	b911      	cbnz	r1, 80073a6 <sbrk_aligned+0x12>
 80073a0:	f000 fba6 	bl	8007af0 <_sbrk_r>
 80073a4:	6030      	str	r0, [r6, #0]
 80073a6:	4621      	mov	r1, r4
 80073a8:	4628      	mov	r0, r5
 80073aa:	f000 fba1 	bl	8007af0 <_sbrk_r>
 80073ae:	1c43      	adds	r3, r0, #1
 80073b0:	d103      	bne.n	80073ba <sbrk_aligned+0x26>
 80073b2:	f04f 34ff 	mov.w	r4, #4294967295
 80073b6:	4620      	mov	r0, r4
 80073b8:	bd70      	pop	{r4, r5, r6, pc}
 80073ba:	1cc4      	adds	r4, r0, #3
 80073bc:	f024 0403 	bic.w	r4, r4, #3
 80073c0:	42a0      	cmp	r0, r4
 80073c2:	d0f8      	beq.n	80073b6 <sbrk_aligned+0x22>
 80073c4:	1a21      	subs	r1, r4, r0
 80073c6:	4628      	mov	r0, r5
 80073c8:	f000 fb92 	bl	8007af0 <_sbrk_r>
 80073cc:	3001      	adds	r0, #1
 80073ce:	d1f2      	bne.n	80073b6 <sbrk_aligned+0x22>
 80073d0:	e7ef      	b.n	80073b2 <sbrk_aligned+0x1e>
 80073d2:	bf00      	nop
 80073d4:	2000428c 	.word	0x2000428c

080073d8 <_malloc_r>:
 80073d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073dc:	1ccd      	adds	r5, r1, #3
 80073de:	f025 0503 	bic.w	r5, r5, #3
 80073e2:	3508      	adds	r5, #8
 80073e4:	2d0c      	cmp	r5, #12
 80073e6:	bf38      	it	cc
 80073e8:	250c      	movcc	r5, #12
 80073ea:	2d00      	cmp	r5, #0
 80073ec:	4606      	mov	r6, r0
 80073ee:	db01      	blt.n	80073f4 <_malloc_r+0x1c>
 80073f0:	42a9      	cmp	r1, r5
 80073f2:	d904      	bls.n	80073fe <_malloc_r+0x26>
 80073f4:	230c      	movs	r3, #12
 80073f6:	6033      	str	r3, [r6, #0]
 80073f8:	2000      	movs	r0, #0
 80073fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074d4 <_malloc_r+0xfc>
 8007402:	f000 f869 	bl	80074d8 <__malloc_lock>
 8007406:	f8d8 3000 	ldr.w	r3, [r8]
 800740a:	461c      	mov	r4, r3
 800740c:	bb44      	cbnz	r4, 8007460 <_malloc_r+0x88>
 800740e:	4629      	mov	r1, r5
 8007410:	4630      	mov	r0, r6
 8007412:	f7ff ffbf 	bl	8007394 <sbrk_aligned>
 8007416:	1c43      	adds	r3, r0, #1
 8007418:	4604      	mov	r4, r0
 800741a:	d158      	bne.n	80074ce <_malloc_r+0xf6>
 800741c:	f8d8 4000 	ldr.w	r4, [r8]
 8007420:	4627      	mov	r7, r4
 8007422:	2f00      	cmp	r7, #0
 8007424:	d143      	bne.n	80074ae <_malloc_r+0xd6>
 8007426:	2c00      	cmp	r4, #0
 8007428:	d04b      	beq.n	80074c2 <_malloc_r+0xea>
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	4639      	mov	r1, r7
 800742e:	4630      	mov	r0, r6
 8007430:	eb04 0903 	add.w	r9, r4, r3
 8007434:	f000 fb5c 	bl	8007af0 <_sbrk_r>
 8007438:	4581      	cmp	r9, r0
 800743a:	d142      	bne.n	80074c2 <_malloc_r+0xea>
 800743c:	6821      	ldr	r1, [r4, #0]
 800743e:	1a6d      	subs	r5, r5, r1
 8007440:	4629      	mov	r1, r5
 8007442:	4630      	mov	r0, r6
 8007444:	f7ff ffa6 	bl	8007394 <sbrk_aligned>
 8007448:	3001      	adds	r0, #1
 800744a:	d03a      	beq.n	80074c2 <_malloc_r+0xea>
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	442b      	add	r3, r5
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	f8d8 3000 	ldr.w	r3, [r8]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	bb62      	cbnz	r2, 80074b4 <_malloc_r+0xdc>
 800745a:	f8c8 7000 	str.w	r7, [r8]
 800745e:	e00f      	b.n	8007480 <_malloc_r+0xa8>
 8007460:	6822      	ldr	r2, [r4, #0]
 8007462:	1b52      	subs	r2, r2, r5
 8007464:	d420      	bmi.n	80074a8 <_malloc_r+0xd0>
 8007466:	2a0b      	cmp	r2, #11
 8007468:	d917      	bls.n	800749a <_malloc_r+0xc2>
 800746a:	1961      	adds	r1, r4, r5
 800746c:	42a3      	cmp	r3, r4
 800746e:	6025      	str	r5, [r4, #0]
 8007470:	bf18      	it	ne
 8007472:	6059      	strne	r1, [r3, #4]
 8007474:	6863      	ldr	r3, [r4, #4]
 8007476:	bf08      	it	eq
 8007478:	f8c8 1000 	streq.w	r1, [r8]
 800747c:	5162      	str	r2, [r4, r5]
 800747e:	604b      	str	r3, [r1, #4]
 8007480:	4630      	mov	r0, r6
 8007482:	f000 f82f 	bl	80074e4 <__malloc_unlock>
 8007486:	f104 000b 	add.w	r0, r4, #11
 800748a:	1d23      	adds	r3, r4, #4
 800748c:	f020 0007 	bic.w	r0, r0, #7
 8007490:	1ac2      	subs	r2, r0, r3
 8007492:	bf1c      	itt	ne
 8007494:	1a1b      	subne	r3, r3, r0
 8007496:	50a3      	strne	r3, [r4, r2]
 8007498:	e7af      	b.n	80073fa <_malloc_r+0x22>
 800749a:	6862      	ldr	r2, [r4, #4]
 800749c:	42a3      	cmp	r3, r4
 800749e:	bf0c      	ite	eq
 80074a0:	f8c8 2000 	streq.w	r2, [r8]
 80074a4:	605a      	strne	r2, [r3, #4]
 80074a6:	e7eb      	b.n	8007480 <_malloc_r+0xa8>
 80074a8:	4623      	mov	r3, r4
 80074aa:	6864      	ldr	r4, [r4, #4]
 80074ac:	e7ae      	b.n	800740c <_malloc_r+0x34>
 80074ae:	463c      	mov	r4, r7
 80074b0:	687f      	ldr	r7, [r7, #4]
 80074b2:	e7b6      	b.n	8007422 <_malloc_r+0x4a>
 80074b4:	461a      	mov	r2, r3
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	42a3      	cmp	r3, r4
 80074ba:	d1fb      	bne.n	80074b4 <_malloc_r+0xdc>
 80074bc:	2300      	movs	r3, #0
 80074be:	6053      	str	r3, [r2, #4]
 80074c0:	e7de      	b.n	8007480 <_malloc_r+0xa8>
 80074c2:	230c      	movs	r3, #12
 80074c4:	6033      	str	r3, [r6, #0]
 80074c6:	4630      	mov	r0, r6
 80074c8:	f000 f80c 	bl	80074e4 <__malloc_unlock>
 80074cc:	e794      	b.n	80073f8 <_malloc_r+0x20>
 80074ce:	6005      	str	r5, [r0, #0]
 80074d0:	e7d6      	b.n	8007480 <_malloc_r+0xa8>
 80074d2:	bf00      	nop
 80074d4:	20004290 	.word	0x20004290

080074d8 <__malloc_lock>:
 80074d8:	4801      	ldr	r0, [pc, #4]	@ (80074e0 <__malloc_lock+0x8>)
 80074da:	f7ff bef9 	b.w	80072d0 <__retarget_lock_acquire_recursive>
 80074de:	bf00      	nop
 80074e0:	20004288 	.word	0x20004288

080074e4 <__malloc_unlock>:
 80074e4:	4801      	ldr	r0, [pc, #4]	@ (80074ec <__malloc_unlock+0x8>)
 80074e6:	f7ff bef4 	b.w	80072d2 <__retarget_lock_release_recursive>
 80074ea:	bf00      	nop
 80074ec:	20004288 	.word	0x20004288

080074f0 <__ssputs_r>:
 80074f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f4:	688e      	ldr	r6, [r1, #8]
 80074f6:	461f      	mov	r7, r3
 80074f8:	42be      	cmp	r6, r7
 80074fa:	680b      	ldr	r3, [r1, #0]
 80074fc:	4682      	mov	sl, r0
 80074fe:	460c      	mov	r4, r1
 8007500:	4690      	mov	r8, r2
 8007502:	d82d      	bhi.n	8007560 <__ssputs_r+0x70>
 8007504:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007508:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800750c:	d026      	beq.n	800755c <__ssputs_r+0x6c>
 800750e:	6965      	ldr	r5, [r4, #20]
 8007510:	6909      	ldr	r1, [r1, #16]
 8007512:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007516:	eba3 0901 	sub.w	r9, r3, r1
 800751a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800751e:	1c7b      	adds	r3, r7, #1
 8007520:	444b      	add	r3, r9
 8007522:	106d      	asrs	r5, r5, #1
 8007524:	429d      	cmp	r5, r3
 8007526:	bf38      	it	cc
 8007528:	461d      	movcc	r5, r3
 800752a:	0553      	lsls	r3, r2, #21
 800752c:	d527      	bpl.n	800757e <__ssputs_r+0x8e>
 800752e:	4629      	mov	r1, r5
 8007530:	f7ff ff52 	bl	80073d8 <_malloc_r>
 8007534:	4606      	mov	r6, r0
 8007536:	b360      	cbz	r0, 8007592 <__ssputs_r+0xa2>
 8007538:	6921      	ldr	r1, [r4, #16]
 800753a:	464a      	mov	r2, r9
 800753c:	f7ff fed2 	bl	80072e4 <memcpy>
 8007540:	89a3      	ldrh	r3, [r4, #12]
 8007542:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800754a:	81a3      	strh	r3, [r4, #12]
 800754c:	6126      	str	r6, [r4, #16]
 800754e:	6165      	str	r5, [r4, #20]
 8007550:	444e      	add	r6, r9
 8007552:	eba5 0509 	sub.w	r5, r5, r9
 8007556:	6026      	str	r6, [r4, #0]
 8007558:	60a5      	str	r5, [r4, #8]
 800755a:	463e      	mov	r6, r7
 800755c:	42be      	cmp	r6, r7
 800755e:	d900      	bls.n	8007562 <__ssputs_r+0x72>
 8007560:	463e      	mov	r6, r7
 8007562:	6820      	ldr	r0, [r4, #0]
 8007564:	4632      	mov	r2, r6
 8007566:	4641      	mov	r1, r8
 8007568:	f000 faa8 	bl	8007abc <memmove>
 800756c:	68a3      	ldr	r3, [r4, #8]
 800756e:	1b9b      	subs	r3, r3, r6
 8007570:	60a3      	str	r3, [r4, #8]
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	4433      	add	r3, r6
 8007576:	6023      	str	r3, [r4, #0]
 8007578:	2000      	movs	r0, #0
 800757a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800757e:	462a      	mov	r2, r5
 8007580:	f000 fac6 	bl	8007b10 <_realloc_r>
 8007584:	4606      	mov	r6, r0
 8007586:	2800      	cmp	r0, #0
 8007588:	d1e0      	bne.n	800754c <__ssputs_r+0x5c>
 800758a:	6921      	ldr	r1, [r4, #16]
 800758c:	4650      	mov	r0, sl
 800758e:	f7ff feb7 	bl	8007300 <_free_r>
 8007592:	230c      	movs	r3, #12
 8007594:	f8ca 3000 	str.w	r3, [sl]
 8007598:	89a3      	ldrh	r3, [r4, #12]
 800759a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800759e:	81a3      	strh	r3, [r4, #12]
 80075a0:	f04f 30ff 	mov.w	r0, #4294967295
 80075a4:	e7e9      	b.n	800757a <__ssputs_r+0x8a>
	...

080075a8 <_svfiprintf_r>:
 80075a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	4698      	mov	r8, r3
 80075ae:	898b      	ldrh	r3, [r1, #12]
 80075b0:	061b      	lsls	r3, r3, #24
 80075b2:	b09d      	sub	sp, #116	@ 0x74
 80075b4:	4607      	mov	r7, r0
 80075b6:	460d      	mov	r5, r1
 80075b8:	4614      	mov	r4, r2
 80075ba:	d510      	bpl.n	80075de <_svfiprintf_r+0x36>
 80075bc:	690b      	ldr	r3, [r1, #16]
 80075be:	b973      	cbnz	r3, 80075de <_svfiprintf_r+0x36>
 80075c0:	2140      	movs	r1, #64	@ 0x40
 80075c2:	f7ff ff09 	bl	80073d8 <_malloc_r>
 80075c6:	6028      	str	r0, [r5, #0]
 80075c8:	6128      	str	r0, [r5, #16]
 80075ca:	b930      	cbnz	r0, 80075da <_svfiprintf_r+0x32>
 80075cc:	230c      	movs	r3, #12
 80075ce:	603b      	str	r3, [r7, #0]
 80075d0:	f04f 30ff 	mov.w	r0, #4294967295
 80075d4:	b01d      	add	sp, #116	@ 0x74
 80075d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075da:	2340      	movs	r3, #64	@ 0x40
 80075dc:	616b      	str	r3, [r5, #20]
 80075de:	2300      	movs	r3, #0
 80075e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80075e2:	2320      	movs	r3, #32
 80075e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80075ec:	2330      	movs	r3, #48	@ 0x30
 80075ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800778c <_svfiprintf_r+0x1e4>
 80075f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075f6:	f04f 0901 	mov.w	r9, #1
 80075fa:	4623      	mov	r3, r4
 80075fc:	469a      	mov	sl, r3
 80075fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007602:	b10a      	cbz	r2, 8007608 <_svfiprintf_r+0x60>
 8007604:	2a25      	cmp	r2, #37	@ 0x25
 8007606:	d1f9      	bne.n	80075fc <_svfiprintf_r+0x54>
 8007608:	ebba 0b04 	subs.w	fp, sl, r4
 800760c:	d00b      	beq.n	8007626 <_svfiprintf_r+0x7e>
 800760e:	465b      	mov	r3, fp
 8007610:	4622      	mov	r2, r4
 8007612:	4629      	mov	r1, r5
 8007614:	4638      	mov	r0, r7
 8007616:	f7ff ff6b 	bl	80074f0 <__ssputs_r>
 800761a:	3001      	adds	r0, #1
 800761c:	f000 80a7 	beq.w	800776e <_svfiprintf_r+0x1c6>
 8007620:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007622:	445a      	add	r2, fp
 8007624:	9209      	str	r2, [sp, #36]	@ 0x24
 8007626:	f89a 3000 	ldrb.w	r3, [sl]
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 809f 	beq.w	800776e <_svfiprintf_r+0x1c6>
 8007630:	2300      	movs	r3, #0
 8007632:	f04f 32ff 	mov.w	r2, #4294967295
 8007636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800763a:	f10a 0a01 	add.w	sl, sl, #1
 800763e:	9304      	str	r3, [sp, #16]
 8007640:	9307      	str	r3, [sp, #28]
 8007642:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007646:	931a      	str	r3, [sp, #104]	@ 0x68
 8007648:	4654      	mov	r4, sl
 800764a:	2205      	movs	r2, #5
 800764c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007650:	484e      	ldr	r0, [pc, #312]	@ (800778c <_svfiprintf_r+0x1e4>)
 8007652:	f7f8 fdbd 	bl	80001d0 <memchr>
 8007656:	9a04      	ldr	r2, [sp, #16]
 8007658:	b9d8      	cbnz	r0, 8007692 <_svfiprintf_r+0xea>
 800765a:	06d0      	lsls	r0, r2, #27
 800765c:	bf44      	itt	mi
 800765e:	2320      	movmi	r3, #32
 8007660:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007664:	0711      	lsls	r1, r2, #28
 8007666:	bf44      	itt	mi
 8007668:	232b      	movmi	r3, #43	@ 0x2b
 800766a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800766e:	f89a 3000 	ldrb.w	r3, [sl]
 8007672:	2b2a      	cmp	r3, #42	@ 0x2a
 8007674:	d015      	beq.n	80076a2 <_svfiprintf_r+0xfa>
 8007676:	9a07      	ldr	r2, [sp, #28]
 8007678:	4654      	mov	r4, sl
 800767a:	2000      	movs	r0, #0
 800767c:	f04f 0c0a 	mov.w	ip, #10
 8007680:	4621      	mov	r1, r4
 8007682:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007686:	3b30      	subs	r3, #48	@ 0x30
 8007688:	2b09      	cmp	r3, #9
 800768a:	d94b      	bls.n	8007724 <_svfiprintf_r+0x17c>
 800768c:	b1b0      	cbz	r0, 80076bc <_svfiprintf_r+0x114>
 800768e:	9207      	str	r2, [sp, #28]
 8007690:	e014      	b.n	80076bc <_svfiprintf_r+0x114>
 8007692:	eba0 0308 	sub.w	r3, r0, r8
 8007696:	fa09 f303 	lsl.w	r3, r9, r3
 800769a:	4313      	orrs	r3, r2
 800769c:	9304      	str	r3, [sp, #16]
 800769e:	46a2      	mov	sl, r4
 80076a0:	e7d2      	b.n	8007648 <_svfiprintf_r+0xa0>
 80076a2:	9b03      	ldr	r3, [sp, #12]
 80076a4:	1d19      	adds	r1, r3, #4
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	9103      	str	r1, [sp, #12]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	bfbb      	ittet	lt
 80076ae:	425b      	neglt	r3, r3
 80076b0:	f042 0202 	orrlt.w	r2, r2, #2
 80076b4:	9307      	strge	r3, [sp, #28]
 80076b6:	9307      	strlt	r3, [sp, #28]
 80076b8:	bfb8      	it	lt
 80076ba:	9204      	strlt	r2, [sp, #16]
 80076bc:	7823      	ldrb	r3, [r4, #0]
 80076be:	2b2e      	cmp	r3, #46	@ 0x2e
 80076c0:	d10a      	bne.n	80076d8 <_svfiprintf_r+0x130>
 80076c2:	7863      	ldrb	r3, [r4, #1]
 80076c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80076c6:	d132      	bne.n	800772e <_svfiprintf_r+0x186>
 80076c8:	9b03      	ldr	r3, [sp, #12]
 80076ca:	1d1a      	adds	r2, r3, #4
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	9203      	str	r2, [sp, #12]
 80076d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076d4:	3402      	adds	r4, #2
 80076d6:	9305      	str	r3, [sp, #20]
 80076d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800779c <_svfiprintf_r+0x1f4>
 80076dc:	7821      	ldrb	r1, [r4, #0]
 80076de:	2203      	movs	r2, #3
 80076e0:	4650      	mov	r0, sl
 80076e2:	f7f8 fd75 	bl	80001d0 <memchr>
 80076e6:	b138      	cbz	r0, 80076f8 <_svfiprintf_r+0x150>
 80076e8:	9b04      	ldr	r3, [sp, #16]
 80076ea:	eba0 000a 	sub.w	r0, r0, sl
 80076ee:	2240      	movs	r2, #64	@ 0x40
 80076f0:	4082      	lsls	r2, r0
 80076f2:	4313      	orrs	r3, r2
 80076f4:	3401      	adds	r4, #1
 80076f6:	9304      	str	r3, [sp, #16]
 80076f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076fc:	4824      	ldr	r0, [pc, #144]	@ (8007790 <_svfiprintf_r+0x1e8>)
 80076fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007702:	2206      	movs	r2, #6
 8007704:	f7f8 fd64 	bl	80001d0 <memchr>
 8007708:	2800      	cmp	r0, #0
 800770a:	d036      	beq.n	800777a <_svfiprintf_r+0x1d2>
 800770c:	4b21      	ldr	r3, [pc, #132]	@ (8007794 <_svfiprintf_r+0x1ec>)
 800770e:	bb1b      	cbnz	r3, 8007758 <_svfiprintf_r+0x1b0>
 8007710:	9b03      	ldr	r3, [sp, #12]
 8007712:	3307      	adds	r3, #7
 8007714:	f023 0307 	bic.w	r3, r3, #7
 8007718:	3308      	adds	r3, #8
 800771a:	9303      	str	r3, [sp, #12]
 800771c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800771e:	4433      	add	r3, r6
 8007720:	9309      	str	r3, [sp, #36]	@ 0x24
 8007722:	e76a      	b.n	80075fa <_svfiprintf_r+0x52>
 8007724:	fb0c 3202 	mla	r2, ip, r2, r3
 8007728:	460c      	mov	r4, r1
 800772a:	2001      	movs	r0, #1
 800772c:	e7a8      	b.n	8007680 <_svfiprintf_r+0xd8>
 800772e:	2300      	movs	r3, #0
 8007730:	3401      	adds	r4, #1
 8007732:	9305      	str	r3, [sp, #20]
 8007734:	4619      	mov	r1, r3
 8007736:	f04f 0c0a 	mov.w	ip, #10
 800773a:	4620      	mov	r0, r4
 800773c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007740:	3a30      	subs	r2, #48	@ 0x30
 8007742:	2a09      	cmp	r2, #9
 8007744:	d903      	bls.n	800774e <_svfiprintf_r+0x1a6>
 8007746:	2b00      	cmp	r3, #0
 8007748:	d0c6      	beq.n	80076d8 <_svfiprintf_r+0x130>
 800774a:	9105      	str	r1, [sp, #20]
 800774c:	e7c4      	b.n	80076d8 <_svfiprintf_r+0x130>
 800774e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007752:	4604      	mov	r4, r0
 8007754:	2301      	movs	r3, #1
 8007756:	e7f0      	b.n	800773a <_svfiprintf_r+0x192>
 8007758:	ab03      	add	r3, sp, #12
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	462a      	mov	r2, r5
 800775e:	4b0e      	ldr	r3, [pc, #56]	@ (8007798 <_svfiprintf_r+0x1f0>)
 8007760:	a904      	add	r1, sp, #16
 8007762:	4638      	mov	r0, r7
 8007764:	f3af 8000 	nop.w
 8007768:	1c42      	adds	r2, r0, #1
 800776a:	4606      	mov	r6, r0
 800776c:	d1d6      	bne.n	800771c <_svfiprintf_r+0x174>
 800776e:	89ab      	ldrh	r3, [r5, #12]
 8007770:	065b      	lsls	r3, r3, #25
 8007772:	f53f af2d 	bmi.w	80075d0 <_svfiprintf_r+0x28>
 8007776:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007778:	e72c      	b.n	80075d4 <_svfiprintf_r+0x2c>
 800777a:	ab03      	add	r3, sp, #12
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	462a      	mov	r2, r5
 8007780:	4b05      	ldr	r3, [pc, #20]	@ (8007798 <_svfiprintf_r+0x1f0>)
 8007782:	a904      	add	r1, sp, #16
 8007784:	4638      	mov	r0, r7
 8007786:	f000 f879 	bl	800787c <_printf_i>
 800778a:	e7ed      	b.n	8007768 <_svfiprintf_r+0x1c0>
 800778c:	08007ce4 	.word	0x08007ce4
 8007790:	08007cee 	.word	0x08007cee
 8007794:	00000000 	.word	0x00000000
 8007798:	080074f1 	.word	0x080074f1
 800779c:	08007cea 	.word	0x08007cea

080077a0 <_printf_common>:
 80077a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077a4:	4616      	mov	r6, r2
 80077a6:	4698      	mov	r8, r3
 80077a8:	688a      	ldr	r2, [r1, #8]
 80077aa:	690b      	ldr	r3, [r1, #16]
 80077ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80077b0:	4293      	cmp	r3, r2
 80077b2:	bfb8      	it	lt
 80077b4:	4613      	movlt	r3, r2
 80077b6:	6033      	str	r3, [r6, #0]
 80077b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80077bc:	4607      	mov	r7, r0
 80077be:	460c      	mov	r4, r1
 80077c0:	b10a      	cbz	r2, 80077c6 <_printf_common+0x26>
 80077c2:	3301      	adds	r3, #1
 80077c4:	6033      	str	r3, [r6, #0]
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	0699      	lsls	r1, r3, #26
 80077ca:	bf42      	ittt	mi
 80077cc:	6833      	ldrmi	r3, [r6, #0]
 80077ce:	3302      	addmi	r3, #2
 80077d0:	6033      	strmi	r3, [r6, #0]
 80077d2:	6825      	ldr	r5, [r4, #0]
 80077d4:	f015 0506 	ands.w	r5, r5, #6
 80077d8:	d106      	bne.n	80077e8 <_printf_common+0x48>
 80077da:	f104 0a19 	add.w	sl, r4, #25
 80077de:	68e3      	ldr	r3, [r4, #12]
 80077e0:	6832      	ldr	r2, [r6, #0]
 80077e2:	1a9b      	subs	r3, r3, r2
 80077e4:	42ab      	cmp	r3, r5
 80077e6:	dc26      	bgt.n	8007836 <_printf_common+0x96>
 80077e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80077ec:	6822      	ldr	r2, [r4, #0]
 80077ee:	3b00      	subs	r3, #0
 80077f0:	bf18      	it	ne
 80077f2:	2301      	movne	r3, #1
 80077f4:	0692      	lsls	r2, r2, #26
 80077f6:	d42b      	bmi.n	8007850 <_printf_common+0xb0>
 80077f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80077fc:	4641      	mov	r1, r8
 80077fe:	4638      	mov	r0, r7
 8007800:	47c8      	blx	r9
 8007802:	3001      	adds	r0, #1
 8007804:	d01e      	beq.n	8007844 <_printf_common+0xa4>
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	6922      	ldr	r2, [r4, #16]
 800780a:	f003 0306 	and.w	r3, r3, #6
 800780e:	2b04      	cmp	r3, #4
 8007810:	bf02      	ittt	eq
 8007812:	68e5      	ldreq	r5, [r4, #12]
 8007814:	6833      	ldreq	r3, [r6, #0]
 8007816:	1aed      	subeq	r5, r5, r3
 8007818:	68a3      	ldr	r3, [r4, #8]
 800781a:	bf0c      	ite	eq
 800781c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007820:	2500      	movne	r5, #0
 8007822:	4293      	cmp	r3, r2
 8007824:	bfc4      	itt	gt
 8007826:	1a9b      	subgt	r3, r3, r2
 8007828:	18ed      	addgt	r5, r5, r3
 800782a:	2600      	movs	r6, #0
 800782c:	341a      	adds	r4, #26
 800782e:	42b5      	cmp	r5, r6
 8007830:	d11a      	bne.n	8007868 <_printf_common+0xc8>
 8007832:	2000      	movs	r0, #0
 8007834:	e008      	b.n	8007848 <_printf_common+0xa8>
 8007836:	2301      	movs	r3, #1
 8007838:	4652      	mov	r2, sl
 800783a:	4641      	mov	r1, r8
 800783c:	4638      	mov	r0, r7
 800783e:	47c8      	blx	r9
 8007840:	3001      	adds	r0, #1
 8007842:	d103      	bne.n	800784c <_printf_common+0xac>
 8007844:	f04f 30ff 	mov.w	r0, #4294967295
 8007848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800784c:	3501      	adds	r5, #1
 800784e:	e7c6      	b.n	80077de <_printf_common+0x3e>
 8007850:	18e1      	adds	r1, r4, r3
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	2030      	movs	r0, #48	@ 0x30
 8007856:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800785a:	4422      	add	r2, r4
 800785c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007860:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007864:	3302      	adds	r3, #2
 8007866:	e7c7      	b.n	80077f8 <_printf_common+0x58>
 8007868:	2301      	movs	r3, #1
 800786a:	4622      	mov	r2, r4
 800786c:	4641      	mov	r1, r8
 800786e:	4638      	mov	r0, r7
 8007870:	47c8      	blx	r9
 8007872:	3001      	adds	r0, #1
 8007874:	d0e6      	beq.n	8007844 <_printf_common+0xa4>
 8007876:	3601      	adds	r6, #1
 8007878:	e7d9      	b.n	800782e <_printf_common+0x8e>
	...

0800787c <_printf_i>:
 800787c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007880:	7e0f      	ldrb	r7, [r1, #24]
 8007882:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007884:	2f78      	cmp	r7, #120	@ 0x78
 8007886:	4691      	mov	r9, r2
 8007888:	4680      	mov	r8, r0
 800788a:	460c      	mov	r4, r1
 800788c:	469a      	mov	sl, r3
 800788e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007892:	d807      	bhi.n	80078a4 <_printf_i+0x28>
 8007894:	2f62      	cmp	r7, #98	@ 0x62
 8007896:	d80a      	bhi.n	80078ae <_printf_i+0x32>
 8007898:	2f00      	cmp	r7, #0
 800789a:	f000 80d2 	beq.w	8007a42 <_printf_i+0x1c6>
 800789e:	2f58      	cmp	r7, #88	@ 0x58
 80078a0:	f000 80b9 	beq.w	8007a16 <_printf_i+0x19a>
 80078a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80078ac:	e03a      	b.n	8007924 <_printf_i+0xa8>
 80078ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80078b2:	2b15      	cmp	r3, #21
 80078b4:	d8f6      	bhi.n	80078a4 <_printf_i+0x28>
 80078b6:	a101      	add	r1, pc, #4	@ (adr r1, 80078bc <_printf_i+0x40>)
 80078b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078bc:	08007915 	.word	0x08007915
 80078c0:	08007929 	.word	0x08007929
 80078c4:	080078a5 	.word	0x080078a5
 80078c8:	080078a5 	.word	0x080078a5
 80078cc:	080078a5 	.word	0x080078a5
 80078d0:	080078a5 	.word	0x080078a5
 80078d4:	08007929 	.word	0x08007929
 80078d8:	080078a5 	.word	0x080078a5
 80078dc:	080078a5 	.word	0x080078a5
 80078e0:	080078a5 	.word	0x080078a5
 80078e4:	080078a5 	.word	0x080078a5
 80078e8:	08007a29 	.word	0x08007a29
 80078ec:	08007953 	.word	0x08007953
 80078f0:	080079e3 	.word	0x080079e3
 80078f4:	080078a5 	.word	0x080078a5
 80078f8:	080078a5 	.word	0x080078a5
 80078fc:	08007a4b 	.word	0x08007a4b
 8007900:	080078a5 	.word	0x080078a5
 8007904:	08007953 	.word	0x08007953
 8007908:	080078a5 	.word	0x080078a5
 800790c:	080078a5 	.word	0x080078a5
 8007910:	080079eb 	.word	0x080079eb
 8007914:	6833      	ldr	r3, [r6, #0]
 8007916:	1d1a      	adds	r2, r3, #4
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6032      	str	r2, [r6, #0]
 800791c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007920:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007924:	2301      	movs	r3, #1
 8007926:	e09d      	b.n	8007a64 <_printf_i+0x1e8>
 8007928:	6833      	ldr	r3, [r6, #0]
 800792a:	6820      	ldr	r0, [r4, #0]
 800792c:	1d19      	adds	r1, r3, #4
 800792e:	6031      	str	r1, [r6, #0]
 8007930:	0606      	lsls	r6, r0, #24
 8007932:	d501      	bpl.n	8007938 <_printf_i+0xbc>
 8007934:	681d      	ldr	r5, [r3, #0]
 8007936:	e003      	b.n	8007940 <_printf_i+0xc4>
 8007938:	0645      	lsls	r5, r0, #25
 800793a:	d5fb      	bpl.n	8007934 <_printf_i+0xb8>
 800793c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007940:	2d00      	cmp	r5, #0
 8007942:	da03      	bge.n	800794c <_printf_i+0xd0>
 8007944:	232d      	movs	r3, #45	@ 0x2d
 8007946:	426d      	negs	r5, r5
 8007948:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800794c:	4859      	ldr	r0, [pc, #356]	@ (8007ab4 <_printf_i+0x238>)
 800794e:	230a      	movs	r3, #10
 8007950:	e011      	b.n	8007976 <_printf_i+0xfa>
 8007952:	6821      	ldr	r1, [r4, #0]
 8007954:	6833      	ldr	r3, [r6, #0]
 8007956:	0608      	lsls	r0, r1, #24
 8007958:	f853 5b04 	ldr.w	r5, [r3], #4
 800795c:	d402      	bmi.n	8007964 <_printf_i+0xe8>
 800795e:	0649      	lsls	r1, r1, #25
 8007960:	bf48      	it	mi
 8007962:	b2ad      	uxthmi	r5, r5
 8007964:	2f6f      	cmp	r7, #111	@ 0x6f
 8007966:	4853      	ldr	r0, [pc, #332]	@ (8007ab4 <_printf_i+0x238>)
 8007968:	6033      	str	r3, [r6, #0]
 800796a:	bf14      	ite	ne
 800796c:	230a      	movne	r3, #10
 800796e:	2308      	moveq	r3, #8
 8007970:	2100      	movs	r1, #0
 8007972:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007976:	6866      	ldr	r6, [r4, #4]
 8007978:	60a6      	str	r6, [r4, #8]
 800797a:	2e00      	cmp	r6, #0
 800797c:	bfa2      	ittt	ge
 800797e:	6821      	ldrge	r1, [r4, #0]
 8007980:	f021 0104 	bicge.w	r1, r1, #4
 8007984:	6021      	strge	r1, [r4, #0]
 8007986:	b90d      	cbnz	r5, 800798c <_printf_i+0x110>
 8007988:	2e00      	cmp	r6, #0
 800798a:	d04b      	beq.n	8007a24 <_printf_i+0x1a8>
 800798c:	4616      	mov	r6, r2
 800798e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007992:	fb03 5711 	mls	r7, r3, r1, r5
 8007996:	5dc7      	ldrb	r7, [r0, r7]
 8007998:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800799c:	462f      	mov	r7, r5
 800799e:	42bb      	cmp	r3, r7
 80079a0:	460d      	mov	r5, r1
 80079a2:	d9f4      	bls.n	800798e <_printf_i+0x112>
 80079a4:	2b08      	cmp	r3, #8
 80079a6:	d10b      	bne.n	80079c0 <_printf_i+0x144>
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	07df      	lsls	r7, r3, #31
 80079ac:	d508      	bpl.n	80079c0 <_printf_i+0x144>
 80079ae:	6923      	ldr	r3, [r4, #16]
 80079b0:	6861      	ldr	r1, [r4, #4]
 80079b2:	4299      	cmp	r1, r3
 80079b4:	bfde      	ittt	le
 80079b6:	2330      	movle	r3, #48	@ 0x30
 80079b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80079c0:	1b92      	subs	r2, r2, r6
 80079c2:	6122      	str	r2, [r4, #16]
 80079c4:	f8cd a000 	str.w	sl, [sp]
 80079c8:	464b      	mov	r3, r9
 80079ca:	aa03      	add	r2, sp, #12
 80079cc:	4621      	mov	r1, r4
 80079ce:	4640      	mov	r0, r8
 80079d0:	f7ff fee6 	bl	80077a0 <_printf_common>
 80079d4:	3001      	adds	r0, #1
 80079d6:	d14a      	bne.n	8007a6e <_printf_i+0x1f2>
 80079d8:	f04f 30ff 	mov.w	r0, #4294967295
 80079dc:	b004      	add	sp, #16
 80079de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	f043 0320 	orr.w	r3, r3, #32
 80079e8:	6023      	str	r3, [r4, #0]
 80079ea:	4833      	ldr	r0, [pc, #204]	@ (8007ab8 <_printf_i+0x23c>)
 80079ec:	2778      	movs	r7, #120	@ 0x78
 80079ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80079f2:	6823      	ldr	r3, [r4, #0]
 80079f4:	6831      	ldr	r1, [r6, #0]
 80079f6:	061f      	lsls	r7, r3, #24
 80079f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80079fc:	d402      	bmi.n	8007a04 <_printf_i+0x188>
 80079fe:	065f      	lsls	r7, r3, #25
 8007a00:	bf48      	it	mi
 8007a02:	b2ad      	uxthmi	r5, r5
 8007a04:	6031      	str	r1, [r6, #0]
 8007a06:	07d9      	lsls	r1, r3, #31
 8007a08:	bf44      	itt	mi
 8007a0a:	f043 0320 	orrmi.w	r3, r3, #32
 8007a0e:	6023      	strmi	r3, [r4, #0]
 8007a10:	b11d      	cbz	r5, 8007a1a <_printf_i+0x19e>
 8007a12:	2310      	movs	r3, #16
 8007a14:	e7ac      	b.n	8007970 <_printf_i+0xf4>
 8007a16:	4827      	ldr	r0, [pc, #156]	@ (8007ab4 <_printf_i+0x238>)
 8007a18:	e7e9      	b.n	80079ee <_printf_i+0x172>
 8007a1a:	6823      	ldr	r3, [r4, #0]
 8007a1c:	f023 0320 	bic.w	r3, r3, #32
 8007a20:	6023      	str	r3, [r4, #0]
 8007a22:	e7f6      	b.n	8007a12 <_printf_i+0x196>
 8007a24:	4616      	mov	r6, r2
 8007a26:	e7bd      	b.n	80079a4 <_printf_i+0x128>
 8007a28:	6833      	ldr	r3, [r6, #0]
 8007a2a:	6825      	ldr	r5, [r4, #0]
 8007a2c:	6961      	ldr	r1, [r4, #20]
 8007a2e:	1d18      	adds	r0, r3, #4
 8007a30:	6030      	str	r0, [r6, #0]
 8007a32:	062e      	lsls	r6, r5, #24
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	d501      	bpl.n	8007a3c <_printf_i+0x1c0>
 8007a38:	6019      	str	r1, [r3, #0]
 8007a3a:	e002      	b.n	8007a42 <_printf_i+0x1c6>
 8007a3c:	0668      	lsls	r0, r5, #25
 8007a3e:	d5fb      	bpl.n	8007a38 <_printf_i+0x1bc>
 8007a40:	8019      	strh	r1, [r3, #0]
 8007a42:	2300      	movs	r3, #0
 8007a44:	6123      	str	r3, [r4, #16]
 8007a46:	4616      	mov	r6, r2
 8007a48:	e7bc      	b.n	80079c4 <_printf_i+0x148>
 8007a4a:	6833      	ldr	r3, [r6, #0]
 8007a4c:	1d1a      	adds	r2, r3, #4
 8007a4e:	6032      	str	r2, [r6, #0]
 8007a50:	681e      	ldr	r6, [r3, #0]
 8007a52:	6862      	ldr	r2, [r4, #4]
 8007a54:	2100      	movs	r1, #0
 8007a56:	4630      	mov	r0, r6
 8007a58:	f7f8 fbba 	bl	80001d0 <memchr>
 8007a5c:	b108      	cbz	r0, 8007a62 <_printf_i+0x1e6>
 8007a5e:	1b80      	subs	r0, r0, r6
 8007a60:	6060      	str	r0, [r4, #4]
 8007a62:	6863      	ldr	r3, [r4, #4]
 8007a64:	6123      	str	r3, [r4, #16]
 8007a66:	2300      	movs	r3, #0
 8007a68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a6c:	e7aa      	b.n	80079c4 <_printf_i+0x148>
 8007a6e:	6923      	ldr	r3, [r4, #16]
 8007a70:	4632      	mov	r2, r6
 8007a72:	4649      	mov	r1, r9
 8007a74:	4640      	mov	r0, r8
 8007a76:	47d0      	blx	sl
 8007a78:	3001      	adds	r0, #1
 8007a7a:	d0ad      	beq.n	80079d8 <_printf_i+0x15c>
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	079b      	lsls	r3, r3, #30
 8007a80:	d413      	bmi.n	8007aaa <_printf_i+0x22e>
 8007a82:	68e0      	ldr	r0, [r4, #12]
 8007a84:	9b03      	ldr	r3, [sp, #12]
 8007a86:	4298      	cmp	r0, r3
 8007a88:	bfb8      	it	lt
 8007a8a:	4618      	movlt	r0, r3
 8007a8c:	e7a6      	b.n	80079dc <_printf_i+0x160>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	4632      	mov	r2, r6
 8007a92:	4649      	mov	r1, r9
 8007a94:	4640      	mov	r0, r8
 8007a96:	47d0      	blx	sl
 8007a98:	3001      	adds	r0, #1
 8007a9a:	d09d      	beq.n	80079d8 <_printf_i+0x15c>
 8007a9c:	3501      	adds	r5, #1
 8007a9e:	68e3      	ldr	r3, [r4, #12]
 8007aa0:	9903      	ldr	r1, [sp, #12]
 8007aa2:	1a5b      	subs	r3, r3, r1
 8007aa4:	42ab      	cmp	r3, r5
 8007aa6:	dcf2      	bgt.n	8007a8e <_printf_i+0x212>
 8007aa8:	e7eb      	b.n	8007a82 <_printf_i+0x206>
 8007aaa:	2500      	movs	r5, #0
 8007aac:	f104 0619 	add.w	r6, r4, #25
 8007ab0:	e7f5      	b.n	8007a9e <_printf_i+0x222>
 8007ab2:	bf00      	nop
 8007ab4:	08007cf5 	.word	0x08007cf5
 8007ab8:	08007d06 	.word	0x08007d06

08007abc <memmove>:
 8007abc:	4288      	cmp	r0, r1
 8007abe:	b510      	push	{r4, lr}
 8007ac0:	eb01 0402 	add.w	r4, r1, r2
 8007ac4:	d902      	bls.n	8007acc <memmove+0x10>
 8007ac6:	4284      	cmp	r4, r0
 8007ac8:	4623      	mov	r3, r4
 8007aca:	d807      	bhi.n	8007adc <memmove+0x20>
 8007acc:	1e43      	subs	r3, r0, #1
 8007ace:	42a1      	cmp	r1, r4
 8007ad0:	d008      	beq.n	8007ae4 <memmove+0x28>
 8007ad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ada:	e7f8      	b.n	8007ace <memmove+0x12>
 8007adc:	4402      	add	r2, r0
 8007ade:	4601      	mov	r1, r0
 8007ae0:	428a      	cmp	r2, r1
 8007ae2:	d100      	bne.n	8007ae6 <memmove+0x2a>
 8007ae4:	bd10      	pop	{r4, pc}
 8007ae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007aea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007aee:	e7f7      	b.n	8007ae0 <memmove+0x24>

08007af0 <_sbrk_r>:
 8007af0:	b538      	push	{r3, r4, r5, lr}
 8007af2:	4d06      	ldr	r5, [pc, #24]	@ (8007b0c <_sbrk_r+0x1c>)
 8007af4:	2300      	movs	r3, #0
 8007af6:	4604      	mov	r4, r0
 8007af8:	4608      	mov	r0, r1
 8007afa:	602b      	str	r3, [r5, #0]
 8007afc:	f7f9 fb12 	bl	8001124 <_sbrk>
 8007b00:	1c43      	adds	r3, r0, #1
 8007b02:	d102      	bne.n	8007b0a <_sbrk_r+0x1a>
 8007b04:	682b      	ldr	r3, [r5, #0]
 8007b06:	b103      	cbz	r3, 8007b0a <_sbrk_r+0x1a>
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	bd38      	pop	{r3, r4, r5, pc}
 8007b0c:	20004284 	.word	0x20004284

08007b10 <_realloc_r>:
 8007b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b14:	4680      	mov	r8, r0
 8007b16:	4615      	mov	r5, r2
 8007b18:	460c      	mov	r4, r1
 8007b1a:	b921      	cbnz	r1, 8007b26 <_realloc_r+0x16>
 8007b1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b20:	4611      	mov	r1, r2
 8007b22:	f7ff bc59 	b.w	80073d8 <_malloc_r>
 8007b26:	b92a      	cbnz	r2, 8007b34 <_realloc_r+0x24>
 8007b28:	f7ff fbea 	bl	8007300 <_free_r>
 8007b2c:	2400      	movs	r4, #0
 8007b2e:	4620      	mov	r0, r4
 8007b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b34:	f000 f81a 	bl	8007b6c <_malloc_usable_size_r>
 8007b38:	4285      	cmp	r5, r0
 8007b3a:	4606      	mov	r6, r0
 8007b3c:	d802      	bhi.n	8007b44 <_realloc_r+0x34>
 8007b3e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007b42:	d8f4      	bhi.n	8007b2e <_realloc_r+0x1e>
 8007b44:	4629      	mov	r1, r5
 8007b46:	4640      	mov	r0, r8
 8007b48:	f7ff fc46 	bl	80073d8 <_malloc_r>
 8007b4c:	4607      	mov	r7, r0
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d0ec      	beq.n	8007b2c <_realloc_r+0x1c>
 8007b52:	42b5      	cmp	r5, r6
 8007b54:	462a      	mov	r2, r5
 8007b56:	4621      	mov	r1, r4
 8007b58:	bf28      	it	cs
 8007b5a:	4632      	movcs	r2, r6
 8007b5c:	f7ff fbc2 	bl	80072e4 <memcpy>
 8007b60:	4621      	mov	r1, r4
 8007b62:	4640      	mov	r0, r8
 8007b64:	f7ff fbcc 	bl	8007300 <_free_r>
 8007b68:	463c      	mov	r4, r7
 8007b6a:	e7e0      	b.n	8007b2e <_realloc_r+0x1e>

08007b6c <_malloc_usable_size_r>:
 8007b6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b70:	1f18      	subs	r0, r3, #4
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	bfbc      	itt	lt
 8007b76:	580b      	ldrlt	r3, [r1, r0]
 8007b78:	18c0      	addlt	r0, r0, r3
 8007b7a:	4770      	bx	lr

08007b7c <_init>:
 8007b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7e:	bf00      	nop
 8007b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b82:	bc08      	pop	{r3}
 8007b84:	469e      	mov	lr, r3
 8007b86:	4770      	bx	lr

08007b88 <_fini>:
 8007b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8a:	bf00      	nop
 8007b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b8e:	bc08      	pop	{r3}
 8007b90:	469e      	mov	lr, r3
 8007b92:	4770      	bx	lr
