
STM32F407VGT6_CAN_Sniffer_Only_Receiving_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000419c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800432c  0800432c  0000532c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004344  08004344  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004344  08004344  00005344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800434c  0800434c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800434c  0800434c  0000534c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004350  08004350  00005350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004354  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          000001e0  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ec  200001ec  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f526  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002732  00000000  00000000  00015562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  00017c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c03  00000000  00000000  00018c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003411  00000000  00000000  0001984b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ffcd  00000000  00000000  0001cc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4d38  00000000  00000000  0002cc29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00101961  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041c4  00000000  00000000  001019a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ae  00000000  00000000  00105b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004314 	.word	0x08004314

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08004314 	.word	0x08004314

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <bootLEDIndicator>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define NUMBER_BLINKS 20

void bootLEDIndicator(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	int blinkCounter = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	607b      	str	r3, [r7, #4]
	while (blinkCounter < NUMBER_BLINKS) {
 80004ca:	e00a      	b.n	80004e2 <bootLEDIndicator+0x22>
		HAL_GPIO_TogglePin(ORANGE_LED_SYSTEM_GPIO_Port, ORANGE_LED_SYSTEM_Pin);
 80004cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004d0:	480a      	ldr	r0, [pc, #40]	@ (80004fc <bootLEDIndicator+0x3c>)
 80004d2:	f001 fc90 	bl	8001df6 <HAL_GPIO_TogglePin>
		HAL_Delay(30);
 80004d6:	201e      	movs	r0, #30
 80004d8:	f000 fc28 	bl	8000d2c <HAL_Delay>
		blinkCounter++;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3301      	adds	r3, #1
 80004e0:	607b      	str	r3, [r7, #4]
	while (blinkCounter < NUMBER_BLINKS) {
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2b13      	cmp	r3, #19
 80004e6:	ddf1      	ble.n	80004cc <bootLEDIndicator+0xc>
	}
	HAL_GPIO_WritePin(ORANGE_LED_SYSTEM_GPIO_Port, ORANGE_LED_SYSTEM_Pin, GPIO_PIN_SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004ee:	4803      	ldr	r0, [pc, #12]	@ (80004fc <bootLEDIndicator+0x3c>)
 80004f0:	f001 fc68 	bl	8001dc4 <HAL_GPIO_WritePin>
}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40020c00 	.word	0x40020c00

08000500 <setSinfferCANFilter>:


void setSinfferCANFilter(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	@ 0x28
 8000504:	af00      	add	r7, sp, #0
	/* Default filter - accept all to CAN_FIFO*/
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdHigh = 0x00005;
 800050a:	2305      	movs	r3, #5
 800050c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterBank = 0x0000;
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000512:	2300      	movs	r3, #0
 8000514:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000516:	2301      	movs	r3, #1
 8000518:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x200 << 5;  //11-bit ID, in top bits
 800051a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800051e:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000520:	2300      	movs	r3, #0
 8000522:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800052c:	2300      	movs	r3, #0
 800052e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000530:	2301      	movs	r3, #1
 8000532:	623b      	str	r3, [r7, #32]

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000534:	463b      	mov	r3, r7
 8000536:	4619      	mov	r1, r3
 8000538:	4803      	ldr	r0, [pc, #12]	@ (8000548 <setSinfferCANFilter+0x48>)
 800053a:	f000 fd17 	bl	8000f6c <HAL_CAN_ConfigFilter>
}
 800053e:	bf00      	nop
 8000540:	3728      	adds	r7, #40	@ 0x28
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000028 	.word	0x20000028

0800054c <HAL_CAN_RxFifo0MsgPendingCallback>:
    return cursor;
}



 void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxMessageHeader,rxDataReceived) == HAL_OK) {
 8000554:	4b07      	ldr	r3, [pc, #28]	@ (8000574 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000556:	4a08      	ldr	r2, [pc, #32]	@ (8000578 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000558:	2100      	movs	r1, #0
 800055a:	4808      	ldr	r0, [pc, #32]	@ (800057c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800055c:	f000 fe2a 	bl	80011b4 <HAL_CAN_GetRxMessage>

  		//osSignalSet(receivedDatagramTaskId, osAnySignal);

  	}
  	HAL_GPIO_TogglePin(RED_LED_CANRX_GPIO_Port,RED_LED_CANRX_Pin);
 8000560:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000564:	4806      	ldr	r0, [pc, #24]	@ (8000580 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000566:	f001 fc46 	bl	8001df6 <HAL_GPIO_TogglePin>

 }
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	200000ec 	.word	0x200000ec
 8000578:	200000d0 	.word	0x200000d0
 800057c:	20000028 	.word	0x20000028
 8000580:	40020c00 	.word	0x40020c00

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fb8e 	bl	8000ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f81c 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f934 	bl	80007fc <MX_GPIO_Init>
  MX_CAN1_Init();
 8000594:	f000 f882 	bl	800069c <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8000598:	f000 f906 	bl	80007a8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800059c:	f000 f8b4 	bl	8000708 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  setSinfferCANFilter();
 80005a0:	f7ff ffae 	bl	8000500 <setSinfferCANFilter>
  HAL_CAN_Start(&hcan1);
 80005a4:	4806      	ldr	r0, [pc, #24]	@ (80005c0 <main+0x3c>)
 80005a6:	f000 fdc1 	bl	800112c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005aa:	2102      	movs	r1, #2
 80005ac:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <main+0x3c>)
 80005ae:	f000 ff13 	bl	80013d8 <HAL_CAN_ActivateNotification>

  // Start TIM1 for microsecond timestamping
  HAL_TIM_Base_Start(&htim1);
 80005b2:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <main+0x40>)
 80005b4:	f002 f925 	bl	8002802 <HAL_TIM_Base_Start>
//  receivedDatagramTaskId = osThreadCreate(osThread(receiveDatagramsTask),NULL);
//
//  osThreadDef(idleTask, idleThread, osPriorityIdle, 0, 128);
//  idleTaskId = osThreadCreate(osThread(idleTask), NULL);

  bootLEDIndicator();
 80005b8:	f7ff ff82 	bl	80004c0 <bootLEDIndicator>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <main+0x38>
 80005c0:	20000028 	.word	0x20000028
 80005c4:	20000050 	.word	0x20000050

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	@ 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	@ 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 fe70 	bl	80042bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b28      	ldr	r3, [pc, #160]	@ (8000694 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	4a27      	ldr	r2, [pc, #156]	@ (8000694 <SystemClock_Config+0xcc>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005fc:	4b25      	ldr	r3, [pc, #148]	@ (8000694 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a21      	ldr	r2, [pc, #132]	@ (8000698 <SystemClock_Config+0xd0>)
 8000612:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000624:	2301      	movs	r3, #1
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000628:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000636:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000638:	2304      	movs	r3, #4
 800063a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800063c:	23a8      	movs	r3, #168	@ 0xa8
 800063e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fbed 	bl	8001e2c <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000658:	f000 f942 	bl	80008e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2302      	movs	r3, #2
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000668:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800066c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000672:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2105      	movs	r1, #5
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fe44 	bl	8002308 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000686:	f000 f92b 	bl	80008e0 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3750      	adds	r7, #80	@ 0x50
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006a0:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <MX_CAN1_Init+0x64>)
 80006a2:	4a18      	ldr	r2, [pc, #96]	@ (8000704 <MX_CAN1_Init+0x68>)
 80006a4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80006a6:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <MX_CAN1_Init+0x64>)
 80006a8:	2206      	movs	r2, #6
 80006aa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006ac:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <MX_CAN1_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006b2:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <MX_CAN1_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80006b8:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <MX_CAN1_Init+0x64>)
 80006ba:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80006be:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <MX_CAN1_Init+0x64>)
 80006c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80006c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <MX_CAN1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <MX_CAN1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <MX_CAN1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006da:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <MX_CAN1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <MX_CAN1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <MX_CAN1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	@ (8000700 <MX_CAN1_Init+0x64>)
 80006ee:	f000 fb41 	bl	8000d74 <HAL_CAN_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80006f8:	f000 f8f2 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000028 	.word	0x20000028
 8000704:	40006400 	.word	0x40006400

08000708 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071c:	463b      	mov	r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000724:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <MX_TIM1_Init+0x98>)
 8000726:	4a1f      	ldr	r2, [pc, #124]	@ (80007a4 <MX_TIM1_Init+0x9c>)
 8000728:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800072a:	4b1d      	ldr	r3, [pc, #116]	@ (80007a0 <MX_TIM1_Init+0x98>)
 800072c:	2253      	movs	r2, #83	@ 0x53
 800072e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_TIM1_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_TIM1_Init+0x98>)
 8000738:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800073c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073e:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_TIM1_Init+0x98>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000744:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <MX_TIM1_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_TIM1_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000750:	4813      	ldr	r0, [pc, #76]	@ (80007a0 <MX_TIM1_Init+0x98>)
 8000752:	f002 f82b 	bl	80027ac <HAL_TIM_Base_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800075c:	f000 f8c0 	bl	80008e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000760:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000764:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	4619      	mov	r1, r3
 800076c:	480c      	ldr	r0, [pc, #48]	@ (80007a0 <MX_TIM1_Init+0x98>)
 800076e:	f002 f998 	bl	8002aa2 <HAL_TIM_ConfigClockSource>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000778:	f000 f8b2 	bl	80008e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_TIM1_Init+0x98>)
 800078a:	f002 fbb1 	bl	8002ef0 <HAL_TIMEx_MasterConfigSynchronization>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000794:	f000 f8a4 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000050 	.word	0x20000050
 80007a4:	40010000 	.word	0x40010000

080007a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007ac:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007ae:	4a12      	ldr	r2, [pc, #72]	@ (80007f8 <MX_USART1_UART_Init+0x50>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007b2:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007e0:	f002 fc16 	bl	8003010 <HAL_UART_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007ea:	f000 f879 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000090 	.word	0x20000090
 80007f8:	40011000 	.word	0x40011000

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	@ 0x28
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b27      	ldr	r3, [pc, #156]	@ (80008b4 <MX_GPIO_Init+0xb8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a26      	ldr	r2, [pc, #152]	@ (80008b4 <MX_GPIO_Init+0xb8>)
 800081c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b24      	ldr	r3, [pc, #144]	@ (80008b4 <MX_GPIO_Init+0xb8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b20      	ldr	r3, [pc, #128]	@ (80008b4 <MX_GPIO_Init+0xb8>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a1f      	ldr	r2, [pc, #124]	@ (80008b4 <MX_GPIO_Init+0xb8>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <MX_GPIO_Init+0xb8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <MX_GPIO_Init+0xb8>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a18      	ldr	r2, [pc, #96]	@ (80008b4 <MX_GPIO_Init+0xb8>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <MX_GPIO_Init+0xb8>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <MX_GPIO_Init+0xb8>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a11      	ldr	r2, [pc, #68]	@ (80008b4 <MX_GPIO_Init+0xb8>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_GPIO_Init+0xb8>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_IDLE_Pin|ORANGE_LED_SYSTEM_Pin|RED_LED_CANRX_Pin|BLUE_LED_CANTX_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000888:	480b      	ldr	r0, [pc, #44]	@ (80008b8 <MX_GPIO_Init+0xbc>)
 800088a:	f001 fa9b 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN_LED_IDLE_Pin ORANGE_LED_SYSTEM_Pin RED_LED_CANRX_Pin BLUE_LED_CANTX_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_IDLE_Pin|ORANGE_LED_SYSTEM_Pin|RED_LED_CANRX_Pin|BLUE_LED_CANTX_Pin;
 800088e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	4804      	ldr	r0, [pc, #16]	@ (80008b8 <MX_GPIO_Init+0xbc>)
 80008a8:	f001 f8f0 	bl	8001a8c <HAL_GPIO_Init>

}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	@ 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40020c00 	.word	0x40020c00

080008bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a04      	ldr	r2, [pc, #16]	@ (80008dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d101      	bne.n	80008d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ce:	f000 fa0d 	bl	8000cec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40001000 	.word	0x40001000

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <Error_Handler+0x8>

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <HAL_MspInit+0x54>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fa:	4a11      	ldr	r2, [pc, #68]	@ (8000940 <HAL_MspInit+0x54>)
 80008fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000900:	6453      	str	r3, [r2, #68]	@ 0x44
 8000902:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <HAL_MspInit+0x54>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <HAL_MspInit+0x54>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000916:	4a0a      	ldr	r2, [pc, #40]	@ (8000940 <HAL_MspInit+0x54>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091c:	6413      	str	r3, [r2, #64]	@ 0x40
 800091e:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <HAL_MspInit+0x54>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	210f      	movs	r1, #15
 800092e:	f06f 0001 	mvn.w	r0, #1
 8000932:	f001 f85f 	bl	80019f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	@ 0x28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a1d      	ldr	r2, [pc, #116]	@ (80009d8 <HAL_CAN_MspInit+0x94>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d134      	bne.n	80009d0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b1c      	ldr	r3, [pc, #112]	@ (80009dc <HAL_CAN_MspInit+0x98>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	4a1b      	ldr	r2, [pc, #108]	@ (80009dc <HAL_CAN_MspInit+0x98>)
 8000970:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000974:	6413      	str	r3, [r2, #64]	@ 0x40
 8000976:	4b19      	ldr	r3, [pc, #100]	@ (80009dc <HAL_CAN_MspInit+0x98>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <HAL_CAN_MspInit+0x98>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a14      	ldr	r2, [pc, #80]	@ (80009dc <HAL_CAN_MspInit+0x98>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <HAL_CAN_MspInit+0x98>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800099e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ac:	2303      	movs	r3, #3
 80009ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009b0:	2309      	movs	r3, #9
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	4809      	ldr	r0, [pc, #36]	@ (80009e0 <HAL_CAN_MspInit+0x9c>)
 80009bc:	f001 f866 	bl	8001a8c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2105      	movs	r1, #5
 80009c4:	2014      	movs	r0, #20
 80009c6:	f001 f815 	bl	80019f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009ca:	2014      	movs	r0, #20
 80009cc:	f001 f82e 	bl	8001a2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80009d0:	bf00      	nop
 80009d2:	3728      	adds	r7, #40	@ 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40006400 	.word	0x40006400
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020400 	.word	0x40020400

080009e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a20 <HAL_TIM_Base_MspInit+0x3c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d10d      	bne.n	8000a12 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <HAL_TIM_Base_MspInit+0x40>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fe:	4a09      	ldr	r2, [pc, #36]	@ (8000a24 <HAL_TIM_Base_MspInit+0x40>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a06:	4b07      	ldr	r3, [pc, #28]	@ (8000a24 <HAL_TIM_Base_MspInit+0x40>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40010000 	.word	0x40010000
 8000a24:	40023800 	.word	0x40023800

08000a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	@ 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a2c      	ldr	r2, [pc, #176]	@ (8000af8 <HAL_UART_MspInit+0xd0>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d152      	bne.n	8000af0 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000afc <HAL_UART_MspInit+0xd4>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a52:	4a2a      	ldr	r2, [pc, #168]	@ (8000afc <HAL_UART_MspInit+0xd4>)
 8000a54:	f043 0310 	orr.w	r3, r3, #16
 8000a58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a5a:	4b28      	ldr	r3, [pc, #160]	@ (8000afc <HAL_UART_MspInit+0xd4>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5e:	f003 0310 	and.w	r3, r3, #16
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b24      	ldr	r3, [pc, #144]	@ (8000afc <HAL_UART_MspInit+0xd4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a23      	ldr	r2, [pc, #140]	@ (8000afc <HAL_UART_MspInit+0xd4>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <HAL_UART_MspInit+0xd4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	4b1d      	ldr	r3, [pc, #116]	@ (8000afc <HAL_UART_MspInit+0xd4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000afc <HAL_UART_MspInit+0xd4>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <HAL_UART_MspInit+0xd4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ab0:	2307      	movs	r3, #7
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4811      	ldr	r0, [pc, #68]	@ (8000b00 <HAL_UART_MspInit+0xd8>)
 8000abc:	f000 ffe6 	bl	8001a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ac0:	2340      	movs	r3, #64	@ 0x40
 8000ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ad0:	2307      	movs	r3, #7
 8000ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480a      	ldr	r0, [pc, #40]	@ (8000b04 <HAL_UART_MspInit+0xdc>)
 8000adc:	f000 ffd6 	bl	8001a8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2105      	movs	r1, #5
 8000ae4:	2025      	movs	r0, #37	@ 0x25
 8000ae6:	f000 ff85 	bl	80019f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000aea:	2025      	movs	r0, #37	@ 0x25
 8000aec:	f000 ff9e 	bl	8001a2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	@ 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40011000 	.word	0x40011000
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020400 	.word	0x40020400

08000b08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	@ 0x30
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	2036      	movs	r0, #54	@ 0x36
 8000b1e:	f000 ff69 	bl	80019f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b22:	2036      	movs	r0, #54	@ 0x36
 8000b24:	f000 ff82 	bl	8001a2c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <HAL_InitTick+0xa4>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b30:	4a1e      	ldr	r2, [pc, #120]	@ (8000bac <HAL_InitTick+0xa4>)
 8000b32:	f043 0310 	orr.w	r3, r3, #16
 8000b36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b38:	4b1c      	ldr	r3, [pc, #112]	@ (8000bac <HAL_InitTick+0xa4>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3c:	f003 0310 	and.w	r3, r3, #16
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b44:	f107 0210 	add.w	r2, r7, #16
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 fdfa 	bl	8002748 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b54:	f001 fdd0 	bl	80026f8 <HAL_RCC_GetPCLK1Freq>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b60:	4a13      	ldr	r2, [pc, #76]	@ (8000bb0 <HAL_InitTick+0xa8>)
 8000b62:	fba2 2303 	umull	r2, r3, r2, r3
 8000b66:	0c9b      	lsrs	r3, r3, #18
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <HAL_InitTick+0xac>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	@ (8000bb8 <HAL_InitTick+0xb0>)
 8000b70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b72:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <HAL_InitTick+0xac>)
 8000b74:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b78:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb4 <HAL_InitTick+0xac>)
 8000b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b7e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <HAL_InitTick+0xac>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <HAL_InitTick+0xac>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b8c:	4809      	ldr	r0, [pc, #36]	@ (8000bb4 <HAL_InitTick+0xac>)
 8000b8e:	f001 fe0d 	bl	80027ac <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d104      	bne.n	8000ba2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b98:	4806      	ldr	r0, [pc, #24]	@ (8000bb4 <HAL_InitTick+0xac>)
 8000b9a:	f001 fe56 	bl	800284a <HAL_TIM_Base_Start_IT>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	e000      	b.n	8000ba4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3730      	adds	r7, #48	@ 0x30
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	431bde83 	.word	0x431bde83
 8000bb4:	200000f4 	.word	0x200000f4
 8000bb8:	40001000 	.word	0x40001000

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bf8:	4802      	ldr	r0, [pc, #8]	@ (8000c04 <CAN1_RX0_IRQHandler+0x10>)
 8000bfa:	f000 fc13 	bl	8001424 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000028 	.word	0x20000028

08000c08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c0c:	4802      	ldr	r0, [pc, #8]	@ (8000c18 <USART1_IRQHandler+0x10>)
 8000c0e:	f002 fa4d 	bl	80030ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000090 	.word	0x20000090

08000c1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c20:	4802      	ldr	r0, [pc, #8]	@ (8000c2c <TIM6_DAC_IRQHandler+0x10>)
 8000c22:	f001 fe36 	bl	8002892 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200000f4 	.word	0x200000f4

08000c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <SystemInit+0x20>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3a:	4a05      	ldr	r2, [pc, #20]	@ (8000c50 <SystemInit+0x20>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c58:	f7ff ffea 	bl	8000c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c5c:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c5e:	490d      	ldr	r1, [pc, #52]	@ (8000c94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c82:	f003 fb23 	bl	80042cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c86:	f7ff fc7d 	bl	8000584 <main>
  bx  lr    
 8000c8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c98:	08004354 	.word	0x08004354
  ldr r2, =_sbss
 8000c9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ca0:	200001ec 	.word	0x200001ec

08000ca4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC_IRQHandler>
	...

08000ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce8 <HAL_Init+0x40>)
 8000cb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <HAL_Init+0x40>)
 8000cbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc4:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a07      	ldr	r2, [pc, #28]	@ (8000ce8 <HAL_Init+0x40>)
 8000cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	f000 fe84 	bl	80019de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff ff16 	bl	8000b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cdc:	f7ff fe06 	bl	80008ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023c00 	.word	0x40023c00

08000cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x20>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_IncTick+0x24>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <HAL_IncTick+0x24>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000134 	.word	0x20000134

08000d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <HAL_GetTick+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000134 	.word	0x20000134

08000d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d34:	f7ff ffee 	bl	8000d14 <HAL_GetTick>
 8000d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d44:	d005      	beq.n	8000d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d46:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <HAL_Delay+0x44>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d52:	bf00      	nop
 8000d54:	f7ff ffde 	bl	8000d14 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d8f7      	bhi.n	8000d54 <HAL_Delay+0x28>
  {
  }
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008

08000d74 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e0ed      	b.n	8000f62 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d102      	bne.n	8000d98 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff fdd6 	bl	8000944 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f022 0202 	bic.w	r2, r2, #2
 8000da6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000da8:	f7ff ffb4 	bl	8000d14 <HAL_GetTick>
 8000dac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dae:	e012      	b.n	8000dd6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000db0:	f7ff ffb0 	bl	8000d14 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b0a      	cmp	r3, #10
 8000dbc:	d90b      	bls.n	8000dd6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dc2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2205      	movs	r2, #5
 8000dce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e0c5      	b.n	8000f62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1e5      	bne.n	8000db0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f042 0201 	orr.w	r2, r2, #1
 8000df2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000df4:	f7ff ff8e 	bl	8000d14 <HAL_GetTick>
 8000df8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dfa:	e012      	b.n	8000e22 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dfc:	f7ff ff8a 	bl	8000d14 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b0a      	cmp	r3, #10
 8000e08:	d90b      	bls.n	8000e22 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e0e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2205      	movs	r2, #5
 8000e1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e09f      	b.n	8000f62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0e5      	beq.n	8000dfc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	7e1b      	ldrb	r3, [r3, #24]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d108      	bne.n	8000e4a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	e007      	b.n	8000e5a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7e5b      	ldrb	r3, [r3, #25]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d108      	bne.n	8000e74 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e007      	b.n	8000e84 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	7e9b      	ldrb	r3, [r3, #26]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d108      	bne.n	8000e9e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f042 0220 	orr.w	r2, r2, #32
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	e007      	b.n	8000eae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 0220 	bic.w	r2, r2, #32
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7edb      	ldrb	r3, [r3, #27]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d108      	bne.n	8000ec8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 0210 	bic.w	r2, r2, #16
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	e007      	b.n	8000ed8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f042 0210 	orr.w	r2, r2, #16
 8000ed6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7f1b      	ldrb	r3, [r3, #28]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d108      	bne.n	8000ef2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 0208 	orr.w	r2, r2, #8
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	e007      	b.n	8000f02 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0208 	bic.w	r2, r2, #8
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	7f5b      	ldrb	r3, [r3, #29]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d108      	bne.n	8000f1c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f042 0204 	orr.w	r2, r2, #4
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	e007      	b.n	8000f2c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0204 	bic.w	r2, r2, #4
 8000f2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	431a      	orrs	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	ea42 0103 	orr.w	r1, r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	1e5a      	subs	r2, r3, #1
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f82:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f84:	7cfb      	ldrb	r3, [r7, #19]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d003      	beq.n	8000f92 <HAL_CAN_ConfigFilter+0x26>
 8000f8a:	7cfb      	ldrb	r3, [r7, #19]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	f040 80be 	bne.w	800110e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000f92:	4b65      	ldr	r3, [pc, #404]	@ (8001128 <HAL_CAN_ConfigFilter+0x1bc>)
 8000f94:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000f9c:	f043 0201 	orr.w	r2, r3, #1
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000fac:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	f003 031f 	and.w	r3, r3, #31
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	401a      	ands	r2, r3
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	69db      	ldr	r3, [r3, #28]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d123      	bne.n	800103c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001016:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3248      	adds	r2, #72	@ 0x48
 800101c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001030:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001032:	6979      	ldr	r1, [r7, #20]
 8001034:	3348      	adds	r3, #72	@ 0x48
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	440b      	add	r3, r1
 800103a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d122      	bne.n	800108a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	431a      	orrs	r2, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001064:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3248      	adds	r2, #72	@ 0x48
 800106a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800107e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001080:	6979      	ldr	r1, [r7, #20]
 8001082:	3348      	adds	r3, #72	@ 0x48
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	440b      	add	r3, r1
 8001088:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d109      	bne.n	80010a6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43db      	mvns	r3, r3
 800109c:	401a      	ands	r2, r3
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80010a4:	e007      	b.n	80010b6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d109      	bne.n	80010d2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	401a      	ands	r2, r3
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80010d0:	e007      	b.n	80010e2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	431a      	orrs	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d107      	bne.n	80010fa <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	431a      	orrs	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001100:	f023 0201 	bic.w	r2, r3, #1
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	e006      	b.n	800111c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001112:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
  }
}
 800111c:	4618      	mov	r0, r3
 800111e:	371c      	adds	r7, #28
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	40006400 	.word	0x40006400

0800112c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 3020 	ldrb.w	r3, [r3, #32]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d12e      	bne.n	800119e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2202      	movs	r2, #2
 8001144:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001158:	f7ff fddc 	bl	8000d14 <HAL_GetTick>
 800115c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800115e:	e012      	b.n	8001186 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001160:	f7ff fdd8 	bl	8000d14 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b0a      	cmp	r3, #10
 800116c:	d90b      	bls.n	8001186 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001172:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2205      	movs	r2, #5
 800117e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e012      	b.n	80011ac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1e5      	bne.n	8001160 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	e006      	b.n	80011ac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
  }
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80011b4:	b480      	push	{r7}
 80011b6:	b087      	sub	sp, #28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011c8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80011ca:	7dfb      	ldrb	r3, [r7, #23]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d003      	beq.n	80011d8 <HAL_CAN_GetRxMessage+0x24>
 80011d0:	7dfb      	ldrb	r3, [r7, #23]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	f040 80f3 	bne.w	80013be <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10e      	bne.n	80011fc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d116      	bne.n	800121a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e0e7      	b.n	80013cc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d107      	bne.n	800121a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e0d8      	b.n	80013cc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	331b      	adds	r3, #27
 8001222:	011b      	lsls	r3, r3, #4
 8001224:	4413      	add	r3, r2
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0204 	and.w	r2, r3, #4
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10c      	bne.n	8001252 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	331b      	adds	r3, #27
 8001240:	011b      	lsls	r3, r3, #4
 8001242:	4413      	add	r3, r2
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	0d5b      	lsrs	r3, r3, #21
 8001248:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	e00b      	b.n	800126a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	331b      	adds	r3, #27
 800125a:	011b      	lsls	r3, r3, #4
 800125c:	4413      	add	r3, r2
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	08db      	lsrs	r3, r3, #3
 8001262:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	331b      	adds	r3, #27
 8001272:	011b      	lsls	r3, r3, #4
 8001274:	4413      	add	r3, r2
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0202 	and.w	r2, r3, #2
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	331b      	adds	r3, #27
 8001288:	011b      	lsls	r3, r3, #4
 800128a:	4413      	add	r3, r2
 800128c:	3304      	adds	r3, #4
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 020f 	and.w	r2, r3, #15
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	331b      	adds	r3, #27
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	4413      	add	r3, r2
 80012a4:	3304      	adds	r3, #4
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	331b      	adds	r3, #27
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	4413      	add	r3, r2
 80012bc:	3304      	adds	r3, #4
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	0c1b      	lsrs	r3, r3, #16
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	4413      	add	r3, r2
 80012d2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	011b      	lsls	r3, r3, #4
 80012e6:	4413      	add	r3, r2
 80012e8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	0a1a      	lsrs	r2, r3, #8
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	3301      	adds	r3, #1
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	4413      	add	r3, r2
 8001302:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	0c1a      	lsrs	r2, r3, #16
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	3302      	adds	r3, #2
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	4413      	add	r3, r2
 800131c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	0e1a      	lsrs	r2, r3, #24
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	3303      	adds	r3, #3
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	4413      	add	r3, r2
 8001336:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	3304      	adds	r3, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	4413      	add	r3, r2
 800134e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	0a1a      	lsrs	r2, r3, #8
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	3305      	adds	r3, #5
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	4413      	add	r3, r2
 8001368:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	0c1a      	lsrs	r2, r3, #16
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	3306      	adds	r3, #6
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	011b      	lsls	r3, r3, #4
 8001380:	4413      	add	r3, r2
 8001382:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	0e1a      	lsrs	r2, r3, #24
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	3307      	adds	r3, #7
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d108      	bne.n	80013aa <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0220 	orr.w	r2, r2, #32
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	e007      	b.n	80013ba <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f042 0220 	orr.w	r2, r2, #32
 80013b8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e006      	b.n	80013cc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
  }
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	371c      	adds	r7, #28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d002      	beq.n	80013f6 <HAL_CAN_ActivateNotification+0x1e>
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d109      	bne.n	800140a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6959      	ldr	r1, [r3, #20]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e006      	b.n	8001418 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
  }
}
 8001418:	4618      	mov	r0, r3
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	@ 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001460:	6a3b      	ldr	r3, [r7, #32]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d07c      	beq.n	8001564 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b00      	cmp	r3, #0
 8001472:	d023      	beq.n	80014bc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2201      	movs	r2, #1
 800147a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f983 	bl	8001792 <HAL_CAN_TxMailbox0CompleteCallback>
 800148c:	e016      	b.n	80014bc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	2b00      	cmp	r3, #0
 8001496:	d004      	beq.n	80014a2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
 80014a0:	e00c      	b.n	80014bc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d004      	beq.n	80014b6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80014ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80014b4:	e002      	b.n	80014bc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f989 	bl	80017ce <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d024      	beq.n	8001510 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f963 	bl	80017a6 <HAL_CAN_TxMailbox1CompleteCallback>
 80014e0:	e016      	b.n	8001510 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d004      	beq.n	80014f6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80014ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80014f4:	e00c      	b.n	8001510 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d004      	beq.n	800150a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001502:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
 8001508:	e002      	b.n	8001510 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f969 	bl	80017e2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d024      	beq.n	8001564 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001522:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 f943 	bl	80017ba <HAL_CAN_TxMailbox2CompleteCallback>
 8001534:	e016      	b.n	8001564 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d004      	beq.n	800154a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24
 8001548:	e00c      	b.n	8001564 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d004      	beq.n	800155e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800155a:	627b      	str	r3, [r7, #36]	@ 0x24
 800155c:	e002      	b.n	8001564 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 f949 	bl	80017f6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001564:	6a3b      	ldr	r3, [r7, #32]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00c      	beq.n	8001588 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f003 0310 	and.w	r3, r3, #16
 8001574:	2b00      	cmp	r3, #0
 8001576:	d007      	beq.n	8001588 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2210      	movs	r2, #16
 8001586:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001588:	6a3b      	ldr	r3, [r7, #32]
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00b      	beq.n	80015aa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d006      	beq.n	80015aa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2208      	movs	r2, #8
 80015a2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f930 	bl	800180a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d009      	beq.n	80015c8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d002      	beq.n	80015c8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7fe ffc2 	bl	800054c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00c      	beq.n	80015ec <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d007      	beq.n	80015ec <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80015dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2210      	movs	r2, #16
 80015ea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80015ec:	6a3b      	ldr	r3, [r7, #32]
 80015ee:	f003 0320 	and.w	r3, r3, #32
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00b      	beq.n	800160e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d006      	beq.n	800160e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2208      	movs	r2, #8
 8001606:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 f912 	bl	8001832 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	f003 0310 	and.w	r3, r3, #16
 8001614:	2b00      	cmp	r3, #0
 8001616:	d009      	beq.n	800162c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d002      	beq.n	800162c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f8f9 	bl	800181e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00b      	beq.n	800164e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2210      	movs	r2, #16
 8001646:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f8fc 	bl	8001846 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00b      	beq.n	8001670 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b00      	cmp	r3, #0
 8001660:	d006      	beq.n	8001670 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2208      	movs	r2, #8
 8001668:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f8f5 	bl	800185a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d07b      	beq.n	8001772 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d072      	beq.n	800176a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001684:	6a3b      	ldr	r3, [r7, #32]
 8001686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d008      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d008      	beq.n	80016bc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80016b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d008      	beq.n	80016d8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80016d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d2:	f043 0304 	orr.w	r3, r3, #4
 80016d6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d043      	beq.n	800176a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d03e      	beq.n	800176a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80016f2:	2b60      	cmp	r3, #96	@ 0x60
 80016f4:	d02b      	beq.n	800174e <HAL_CAN_IRQHandler+0x32a>
 80016f6:	2b60      	cmp	r3, #96	@ 0x60
 80016f8:	d82e      	bhi.n	8001758 <HAL_CAN_IRQHandler+0x334>
 80016fa:	2b50      	cmp	r3, #80	@ 0x50
 80016fc:	d022      	beq.n	8001744 <HAL_CAN_IRQHandler+0x320>
 80016fe:	2b50      	cmp	r3, #80	@ 0x50
 8001700:	d82a      	bhi.n	8001758 <HAL_CAN_IRQHandler+0x334>
 8001702:	2b40      	cmp	r3, #64	@ 0x40
 8001704:	d019      	beq.n	800173a <HAL_CAN_IRQHandler+0x316>
 8001706:	2b40      	cmp	r3, #64	@ 0x40
 8001708:	d826      	bhi.n	8001758 <HAL_CAN_IRQHandler+0x334>
 800170a:	2b30      	cmp	r3, #48	@ 0x30
 800170c:	d010      	beq.n	8001730 <HAL_CAN_IRQHandler+0x30c>
 800170e:	2b30      	cmp	r3, #48	@ 0x30
 8001710:	d822      	bhi.n	8001758 <HAL_CAN_IRQHandler+0x334>
 8001712:	2b10      	cmp	r3, #16
 8001714:	d002      	beq.n	800171c <HAL_CAN_IRQHandler+0x2f8>
 8001716:	2b20      	cmp	r3, #32
 8001718:	d005      	beq.n	8001726 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800171a:	e01d      	b.n	8001758 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800171c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171e:	f043 0308 	orr.w	r3, r3, #8
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001724:	e019      	b.n	800175a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001728:	f043 0310 	orr.w	r3, r3, #16
 800172c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800172e:	e014      	b.n	800175a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001732:	f043 0320 	orr.w	r3, r3, #32
 8001736:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001738:	e00f      	b.n	800175a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800173a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001742:	e00a      	b.n	800175a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800174a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800174c:	e005      	b.n	800175a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001756:	e000      	b.n	800175a <HAL_CAN_IRQHandler+0x336>
            break;
 8001758:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	699a      	ldr	r2, [r3, #24]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001768:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2204      	movs	r2, #4
 8001770:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001774:	2b00      	cmp	r3, #0
 8001776:	d008      	beq.n	800178a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800177c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f872 	bl	800186e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800178a:	bf00      	nop
 800178c:	3728      	adds	r7, #40	@ 0x28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b6:	4a04      	ldr	r2, [pc, #16]	@ (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	60d3      	str	r3, [r2, #12]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	@ (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	db0b      	blt.n	8001912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	f003 021f 	and.w	r2, r3, #31
 8001900:	4907      	ldr	r1, [pc, #28]	@ (8001920 <__NVIC_EnableIRQ+0x38>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	2001      	movs	r0, #1
 800190a:	fa00 f202 	lsl.w	r2, r0, r2
 800190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000e100 	.word	0xe000e100

08001924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001934:	2b00      	cmp	r3, #0
 8001936:	db0a      	blt.n	800194e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	490c      	ldr	r1, [pc, #48]	@ (8001970 <__NVIC_SetPriority+0x4c>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	0112      	lsls	r2, r2, #4
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	440b      	add	r3, r1
 8001948:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800194c:	e00a      	b.n	8001964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4908      	ldr	r1, [pc, #32]	@ (8001974 <__NVIC_SetPriority+0x50>)
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	3b04      	subs	r3, #4
 800195c:	0112      	lsls	r2, r2, #4
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	440b      	add	r3, r1
 8001962:	761a      	strb	r2, [r3, #24]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000e100 	.word	0xe000e100
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001978:	b480      	push	{r7}
 800197a:	b089      	sub	sp, #36	@ 0x24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f1c3 0307 	rsb	r3, r3, #7
 8001992:	2b04      	cmp	r3, #4
 8001994:	bf28      	it	cs
 8001996:	2304      	movcs	r3, #4
 8001998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3304      	adds	r3, #4
 800199e:	2b06      	cmp	r3, #6
 80019a0:	d902      	bls.n	80019a8 <NVIC_EncodePriority+0x30>
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3b03      	subs	r3, #3
 80019a6:	e000      	b.n	80019aa <NVIC_EncodePriority+0x32>
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43da      	mvns	r2, r3
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	401a      	ands	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c0:	f04f 31ff 	mov.w	r1, #4294967295
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	43d9      	mvns	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	4313      	orrs	r3, r2
         );
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3724      	adds	r7, #36	@ 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ff4c 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a06:	f7ff ff61 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	68b9      	ldr	r1, [r7, #8]
 8001a10:	6978      	ldr	r0, [r7, #20]
 8001a12:	f7ff ffb1 	bl	8001978 <NVIC_EncodePriority>
 8001a16:	4602      	mov	r2, r0
 8001a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ff80 	bl	8001924 <__NVIC_SetPriority>
}
 8001a24:	bf00      	nop
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff54 	bl	80018e8 <__NVIC_EnableIRQ>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d004      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2280      	movs	r2, #128	@ 0x80
 8001a60:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00c      	b.n	8001a80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2205      	movs	r2, #5
 8001a6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0201 	bic.w	r2, r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	@ 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	e16b      	b.n	8001d80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	f040 815a 	bne.w	8001d7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d00b      	beq.n	8001ae6 <HAL_GPIO_Init+0x5a>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d007      	beq.n	8001ae6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ada:	2b11      	cmp	r3, #17
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b12      	cmp	r3, #18
 8001ae4:	d130      	bne.n	8001b48 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	2203      	movs	r2, #3
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 0201 	and.w	r2, r3, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	2203      	movs	r2, #3
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0xfc>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b12      	cmp	r3, #18
 8001b86:	d123      	bne.n	8001bd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	08da      	lsrs	r2, r3, #3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3208      	adds	r2, #8
 8001b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	08da      	lsrs	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3208      	adds	r2, #8
 8001bca:	69b9      	ldr	r1, [r7, #24]
 8001bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80b4 	beq.w	8001d7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b60      	ldr	r3, [pc, #384]	@ (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	4a5f      	ldr	r2, [pc, #380]	@ (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c22:	4b5d      	ldr	r3, [pc, #372]	@ (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2e:	4a5b      	ldr	r2, [pc, #364]	@ (8001d9c <HAL_GPIO_Init+0x310>)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	3302      	adds	r3, #2
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a52      	ldr	r2, [pc, #328]	@ (8001da0 <HAL_GPIO_Init+0x314>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d02b      	beq.n	8001cb2 <HAL_GPIO_Init+0x226>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a51      	ldr	r2, [pc, #324]	@ (8001da4 <HAL_GPIO_Init+0x318>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d025      	beq.n	8001cae <HAL_GPIO_Init+0x222>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a50      	ldr	r2, [pc, #320]	@ (8001da8 <HAL_GPIO_Init+0x31c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d01f      	beq.n	8001caa <HAL_GPIO_Init+0x21e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4f      	ldr	r2, [pc, #316]	@ (8001dac <HAL_GPIO_Init+0x320>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d019      	beq.n	8001ca6 <HAL_GPIO_Init+0x21a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4e      	ldr	r2, [pc, #312]	@ (8001db0 <HAL_GPIO_Init+0x324>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_GPIO_Init+0x216>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4d      	ldr	r2, [pc, #308]	@ (8001db4 <HAL_GPIO_Init+0x328>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00d      	beq.n	8001c9e <HAL_GPIO_Init+0x212>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4c      	ldr	r2, [pc, #304]	@ (8001db8 <HAL_GPIO_Init+0x32c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d007      	beq.n	8001c9a <HAL_GPIO_Init+0x20e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4b      	ldr	r2, [pc, #300]	@ (8001dbc <HAL_GPIO_Init+0x330>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d101      	bne.n	8001c96 <HAL_GPIO_Init+0x20a>
 8001c92:	2307      	movs	r3, #7
 8001c94:	e00e      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001c96:	2308      	movs	r3, #8
 8001c98:	e00c      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001c9a:	2306      	movs	r3, #6
 8001c9c:	e00a      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001c9e:	2305      	movs	r3, #5
 8001ca0:	e008      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e004      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e002      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	69fa      	ldr	r2, [r7, #28]
 8001cb6:	f002 0203 	and.w	r2, r2, #3
 8001cba:	0092      	lsls	r2, r2, #2
 8001cbc:	4093      	lsls	r3, r2
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc4:	4935      	ldr	r1, [pc, #212]	@ (8001d9c <HAL_GPIO_Init+0x310>)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cf6:	4a32      	ldr	r2, [pc, #200]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cfc:	4b30      	ldr	r3, [pc, #192]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d20:	4a27      	ldr	r2, [pc, #156]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d26:	4b26      	ldr	r3, [pc, #152]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d50:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d74:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	61fb      	str	r3, [r7, #28]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	2b0f      	cmp	r3, #15
 8001d84:	f67f ae90 	bls.w	8001aa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3724      	adds	r7, #36	@ 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40013800 	.word	0x40013800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40020400 	.word	0x40020400
 8001da8:	40020800 	.word	0x40020800
 8001dac:	40020c00 	.word	0x40020c00
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40021400 	.word	0x40021400
 8001db8:	40021800 	.word	0x40021800
 8001dbc:	40021c00 	.word	0x40021c00
 8001dc0:	40013c00 	.word	0x40013c00

08001dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd4:	787b      	ldrb	r3, [r7, #1]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dda:	887a      	ldrh	r2, [r7, #2]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001de0:	e003      	b.n	8001dea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001de2:	887b      	ldrh	r3, [r7, #2]
 8001de4:	041a      	lsls	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	619a      	str	r2, [r3, #24]
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695a      	ldr	r2, [r3, #20]
 8001e06:	887b      	ldrh	r3, [r7, #2]
 8001e08:	401a      	ands	r2, r3
 8001e0a:	887b      	ldrh	r3, [r7, #2]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d104      	bne.n	8001e1a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e10:	887b      	ldrh	r3, [r7, #2]
 8001e12:	041a      	lsls	r2, r3, #16
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001e18:	e002      	b.n	8001e20 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001e1a:	887a      	ldrh	r2, [r7, #2]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	619a      	str	r2, [r3, #24]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e25e      	b.n	80022fc <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d075      	beq.n	8001f36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e4a:	4b88      	ldr	r3, [pc, #544]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d00c      	beq.n	8001e70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e56:	4b85      	ldr	r3, [pc, #532]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d112      	bne.n	8001e88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e62:	4b82      	ldr	r3, [pc, #520]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e6e:	d10b      	bne.n	8001e88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e70:	4b7e      	ldr	r3, [pc, #504]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d05b      	beq.n	8001f34 <HAL_RCC_OscConfig+0x108>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d157      	bne.n	8001f34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e239      	b.n	80022fc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e90:	d106      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x74>
 8001e92:	4b76      	ldr	r3, [pc, #472]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a75      	ldr	r2, [pc, #468]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e01d      	b.n	8001edc <HAL_RCC_OscConfig+0xb0>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x98>
 8001eaa:	4b70      	ldr	r3, [pc, #448]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a6f      	ldr	r2, [pc, #444]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001eb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	4b6d      	ldr	r3, [pc, #436]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a6c      	ldr	r2, [pc, #432]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e00b      	b.n	8001edc <HAL_RCC_OscConfig+0xb0>
 8001ec4:	4b69      	ldr	r3, [pc, #420]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a68      	ldr	r2, [pc, #416]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	4b66      	ldr	r3, [pc, #408]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a65      	ldr	r2, [pc, #404]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001ed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d013      	beq.n	8001f0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7fe ff16 	bl	8000d14 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eec:	f7fe ff12 	bl	8000d14 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	@ 0x64
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e1fe      	b.n	80022fc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	4b5b      	ldr	r3, [pc, #364]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0xc0>
 8001f0a:	e014      	b.n	8001f36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7fe ff02 	bl	8000d14 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f14:	f7fe fefe 	bl	8000d14 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	@ 0x64
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e1ea      	b.n	80022fc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f26:	4b51      	ldr	r3, [pc, #324]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0xe8>
 8001f32:	e000      	b.n	8001f36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d063      	beq.n	800200a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f42:	4b4a      	ldr	r3, [pc, #296]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00b      	beq.n	8001f66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4e:	4b47      	ldr	r3, [pc, #284]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d11c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f5a:	4b44      	ldr	r3, [pc, #272]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d116      	bne.n	8001f94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	4b41      	ldr	r3, [pc, #260]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <HAL_RCC_OscConfig+0x152>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d001      	beq.n	8001f7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e1be      	b.n	80022fc <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4937      	ldr	r1, [pc, #220]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f92:	e03a      	b.n	800200a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d020      	beq.n	8001fde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f9c:	4b34      	ldr	r3, [pc, #208]	@ (8002070 <HAL_RCC_OscConfig+0x244>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7fe feb7 	bl	8000d14 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001faa:	f7fe feb3 	bl	8000d14 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e19f      	b.n	80022fc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc8:	4b28      	ldr	r3, [pc, #160]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4925      	ldr	r1, [pc, #148]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	600b      	str	r3, [r1, #0]
 8001fdc:	e015      	b.n	800200a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fde:	4b24      	ldr	r3, [pc, #144]	@ (8002070 <HAL_RCC_OscConfig+0x244>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7fe fe96 	bl	8000d14 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fec:	f7fe fe92 	bl	8000d14 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e17e      	b.n	80022fc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d036      	beq.n	8002084 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d016      	beq.n	800204c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201e:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <HAL_RCC_OscConfig+0x248>)
 8002020:	2201      	movs	r2, #1
 8002022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7fe fe76 	bl	8000d14 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800202c:	f7fe fe72 	bl	8000d14 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e15e      	b.n	80022fc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203e:	4b0b      	ldr	r3, [pc, #44]	@ (800206c <HAL_RCC_OscConfig+0x240>)
 8002040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x200>
 800204a:	e01b      	b.n	8002084 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800204c:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <HAL_RCC_OscConfig+0x248>)
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002052:	f7fe fe5f 	bl	8000d14 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002058:	e00e      	b.n	8002078 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800205a:	f7fe fe5b 	bl	8000d14 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d907      	bls.n	8002078 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e147      	b.n	80022fc <HAL_RCC_OscConfig+0x4d0>
 800206c:	40023800 	.word	0x40023800
 8002070:	42470000 	.word	0x42470000
 8002074:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002078:	4b88      	ldr	r3, [pc, #544]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 800207a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1ea      	bne.n	800205a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 8097 	beq.w	80021c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002096:	4b81      	ldr	r3, [pc, #516]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10f      	bne.n	80020c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	4b7d      	ldr	r3, [pc, #500]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	4a7c      	ldr	r2, [pc, #496]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 80020ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020b2:	4b7a      	ldr	r3, [pc, #488]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020be:	2301      	movs	r3, #1
 80020c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c2:	4b77      	ldr	r3, [pc, #476]	@ (80022a0 <HAL_RCC_OscConfig+0x474>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d118      	bne.n	8002100 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ce:	4b74      	ldr	r3, [pc, #464]	@ (80022a0 <HAL_RCC_OscConfig+0x474>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a73      	ldr	r2, [pc, #460]	@ (80022a0 <HAL_RCC_OscConfig+0x474>)
 80020d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020da:	f7fe fe1b 	bl	8000d14 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e2:	f7fe fe17 	bl	8000d14 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e103      	b.n	80022fc <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f4:	4b6a      	ldr	r3, [pc, #424]	@ (80022a0 <HAL_RCC_OscConfig+0x474>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d106      	bne.n	8002116 <HAL_RCC_OscConfig+0x2ea>
 8002108:	4b64      	ldr	r3, [pc, #400]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210c:	4a63      	ldr	r2, [pc, #396]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6713      	str	r3, [r2, #112]	@ 0x70
 8002114:	e01c      	b.n	8002150 <HAL_RCC_OscConfig+0x324>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b05      	cmp	r3, #5
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0x30c>
 800211e:	4b5f      	ldr	r3, [pc, #380]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 8002120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002122:	4a5e      	ldr	r2, [pc, #376]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 8002124:	f043 0304 	orr.w	r3, r3, #4
 8002128:	6713      	str	r3, [r2, #112]	@ 0x70
 800212a:	4b5c      	ldr	r3, [pc, #368]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 800212c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212e:	4a5b      	ldr	r2, [pc, #364]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6713      	str	r3, [r2, #112]	@ 0x70
 8002136:	e00b      	b.n	8002150 <HAL_RCC_OscConfig+0x324>
 8002138:	4b58      	ldr	r3, [pc, #352]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 800213a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800213c:	4a57      	ldr	r2, [pc, #348]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 800213e:	f023 0301 	bic.w	r3, r3, #1
 8002142:	6713      	str	r3, [r2, #112]	@ 0x70
 8002144:	4b55      	ldr	r3, [pc, #340]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002148:	4a54      	ldr	r2, [pc, #336]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 800214a:	f023 0304 	bic.w	r3, r3, #4
 800214e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d015      	beq.n	8002184 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002158:	f7fe fddc 	bl	8000d14 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215e:	e00a      	b.n	8002176 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002160:	f7fe fdd8 	bl	8000d14 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e0c2      	b.n	80022fc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002176:	4b49      	ldr	r3, [pc, #292]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0ee      	beq.n	8002160 <HAL_RCC_OscConfig+0x334>
 8002182:	e014      	b.n	80021ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002184:	f7fe fdc6 	bl	8000d14 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800218c:	f7fe fdc2 	bl	8000d14 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e0ac      	b.n	80022fc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a2:	4b3e      	ldr	r3, [pc, #248]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 80021a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1ee      	bne.n	800218c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ae:	7dfb      	ldrb	r3, [r7, #23]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d105      	bne.n	80021c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b4:	4b39      	ldr	r3, [pc, #228]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b8:	4a38      	ldr	r2, [pc, #224]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 80021ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 8098 	beq.w	80022fa <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ca:	4b34      	ldr	r3, [pc, #208]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d05c      	beq.n	8002290 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d141      	bne.n	8002262 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021de:	4b31      	ldr	r3, [pc, #196]	@ (80022a4 <HAL_RCC_OscConfig+0x478>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7fe fd96 	bl	8000d14 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ec:	f7fe fd92 	bl	8000d14 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e07e      	b.n	80022fc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fe:	4b27      	ldr	r3, [pc, #156]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69da      	ldr	r2, [r3, #28]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002218:	019b      	lsls	r3, r3, #6
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002220:	085b      	lsrs	r3, r3, #1
 8002222:	3b01      	subs	r3, #1
 8002224:	041b      	lsls	r3, r3, #16
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222c:	061b      	lsls	r3, r3, #24
 800222e:	491b      	ldr	r1, [pc, #108]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 8002230:	4313      	orrs	r3, r2
 8002232:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002234:	4b1b      	ldr	r3, [pc, #108]	@ (80022a4 <HAL_RCC_OscConfig+0x478>)
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223a:	f7fe fd6b 	bl	8000d14 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002242:	f7fe fd67 	bl	8000d14 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e053      	b.n	80022fc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002254:	4b11      	ldr	r3, [pc, #68]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x416>
 8002260:	e04b      	b.n	80022fa <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002262:	4b10      	ldr	r3, [pc, #64]	@ (80022a4 <HAL_RCC_OscConfig+0x478>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7fe fd54 	bl	8000d14 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002270:	f7fe fd50 	bl	8000d14 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e03c      	b.n	80022fc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002282:	4b06      	ldr	r3, [pc, #24]	@ (800229c <HAL_RCC_OscConfig+0x470>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x444>
 800228e:	e034      	b.n	80022fa <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d107      	bne.n	80022a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e02f      	b.n	80022fc <HAL_RCC_OscConfig+0x4d0>
 800229c:	40023800 	.word	0x40023800
 80022a0:	40007000 	.word	0x40007000
 80022a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022a8:	4b16      	ldr	r3, [pc, #88]	@ (8002304 <HAL_RCC_OscConfig+0x4d8>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d11c      	bne.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d115      	bne.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022d0:	4013      	ands	r3, r2
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d10d      	bne.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d106      	bne.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d001      	beq.n	80022fa <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40023800 	.word	0x40023800

08002308 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0cc      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800231c:	4b68      	ldr	r3, [pc, #416]	@ (80024c0 <HAL_RCC_ClockConfig+0x1b8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d90c      	bls.n	8002344 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232a:	4b65      	ldr	r3, [pc, #404]	@ (80024c0 <HAL_RCC_ClockConfig+0x1b8>)
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002332:	4b63      	ldr	r3, [pc, #396]	@ (80024c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0b8      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800235c:	4b59      	ldr	r3, [pc, #356]	@ (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	4a58      	ldr	r2, [pc, #352]	@ (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002366:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002374:	4b53      	ldr	r3, [pc, #332]	@ (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	4a52      	ldr	r2, [pc, #328]	@ (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800237e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002380:	4b50      	ldr	r3, [pc, #320]	@ (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	494d      	ldr	r1, [pc, #308]	@ (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	4313      	orrs	r3, r2
 8002390:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d044      	beq.n	8002428 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	4b47      	ldr	r3, [pc, #284]	@ (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d119      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e07f      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d003      	beq.n	80023c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d107      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c6:	4b3f      	ldr	r3, [pc, #252]	@ (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e06f      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d6:	4b3b      	ldr	r3, [pc, #236]	@ (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e067      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023e6:	4b37      	ldr	r3, [pc, #220]	@ (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f023 0203 	bic.w	r2, r3, #3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	4934      	ldr	r1, [pc, #208]	@ (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f8:	f7fe fc8c 	bl	8000d14 <HAL_GetTick>
 80023fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	e00a      	b.n	8002416 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002400:	f7fe fc88 	bl	8000d14 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800240e:	4293      	cmp	r3, r2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e04f      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002416:	4b2b      	ldr	r3, [pc, #172]	@ (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 020c 	and.w	r2, r3, #12
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	429a      	cmp	r2, r3
 8002426:	d1eb      	bne.n	8002400 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002428:	4b25      	ldr	r3, [pc, #148]	@ (80024c0 <HAL_RCC_ClockConfig+0x1b8>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d20c      	bcs.n	8002450 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002436:	4b22      	ldr	r3, [pc, #136]	@ (80024c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800243e:	4b20      	ldr	r3, [pc, #128]	@ (80024c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d001      	beq.n	8002450 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e032      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800245c:	4b19      	ldr	r3, [pc, #100]	@ (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4916      	ldr	r1, [pc, #88]	@ (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d009      	beq.n	800248e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800247a:	4b12      	ldr	r3, [pc, #72]	@ (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	490e      	ldr	r1, [pc, #56]	@ (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	4313      	orrs	r3, r2
 800248c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800248e:	f000 f821 	bl	80024d4 <HAL_RCC_GetSysClockFreq>
 8002492:	4602      	mov	r2, r0
 8002494:	4b0b      	ldr	r3, [pc, #44]	@ (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	490a      	ldr	r1, [pc, #40]	@ (80024c8 <HAL_RCC_ClockConfig+0x1c0>)
 80024a0:	5ccb      	ldrb	r3, [r1, r3]
 80024a2:	fa22 f303 	lsr.w	r3, r2, r3
 80024a6:	4a09      	ldr	r2, [pc, #36]	@ (80024cc <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024aa:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe fb2a 	bl	8000b08 <HAL_InitTick>

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40023c00 	.word	0x40023c00
 80024c4:	40023800 	.word	0x40023800
 80024c8:	0800432c 	.word	0x0800432c
 80024cc:	20000000 	.word	0x20000000
 80024d0:	20000004 	.word	0x20000004

080024d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024d8:	b094      	sub	sp, #80	@ 0x50
 80024da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	647b      	str	r3, [r7, #68]	@ 0x44
 80024e0:	2300      	movs	r3, #0
 80024e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024e4:	2300      	movs	r3, #0
 80024e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ec:	4b79      	ldr	r3, [pc, #484]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 030c 	and.w	r3, r3, #12
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d00d      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x40>
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	f200 80e1 	bhi.w	80026c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0x34>
 8002502:	2b04      	cmp	r3, #4
 8002504:	d003      	beq.n	800250e <HAL_RCC_GetSysClockFreq+0x3a>
 8002506:	e0db      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002508:	4b73      	ldr	r3, [pc, #460]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800250a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800250c:	e0db      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800250e:	4b73      	ldr	r3, [pc, #460]	@ (80026dc <HAL_RCC_GetSysClockFreq+0x208>)
 8002510:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002512:	e0d8      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002514:	4b6f      	ldr	r3, [pc, #444]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800251c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800251e:	4b6d      	ldr	r3, [pc, #436]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d063      	beq.n	80025f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800252a:	4b6a      	ldr	r3, [pc, #424]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	099b      	lsrs	r3, r3, #6
 8002530:	2200      	movs	r2, #0
 8002532:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002534:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800253c:	633b      	str	r3, [r7, #48]	@ 0x30
 800253e:	2300      	movs	r3, #0
 8002540:	637b      	str	r3, [r7, #52]	@ 0x34
 8002542:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002546:	4622      	mov	r2, r4
 8002548:	462b      	mov	r3, r5
 800254a:	f04f 0000 	mov.w	r0, #0
 800254e:	f04f 0100 	mov.w	r1, #0
 8002552:	0159      	lsls	r1, r3, #5
 8002554:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002558:	0150      	lsls	r0, r2, #5
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4621      	mov	r1, r4
 8002560:	1a51      	subs	r1, r2, r1
 8002562:	6139      	str	r1, [r7, #16]
 8002564:	4629      	mov	r1, r5
 8002566:	eb63 0301 	sbc.w	r3, r3, r1
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002578:	4659      	mov	r1, fp
 800257a:	018b      	lsls	r3, r1, #6
 800257c:	4651      	mov	r1, sl
 800257e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002582:	4651      	mov	r1, sl
 8002584:	018a      	lsls	r2, r1, #6
 8002586:	4651      	mov	r1, sl
 8002588:	ebb2 0801 	subs.w	r8, r2, r1
 800258c:	4659      	mov	r1, fp
 800258e:	eb63 0901 	sbc.w	r9, r3, r1
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800259e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025a6:	4690      	mov	r8, r2
 80025a8:	4699      	mov	r9, r3
 80025aa:	4623      	mov	r3, r4
 80025ac:	eb18 0303 	adds.w	r3, r8, r3
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	462b      	mov	r3, r5
 80025b4:	eb49 0303 	adc.w	r3, r9, r3
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025c6:	4629      	mov	r1, r5
 80025c8:	024b      	lsls	r3, r1, #9
 80025ca:	4621      	mov	r1, r4
 80025cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025d0:	4621      	mov	r1, r4
 80025d2:	024a      	lsls	r2, r1, #9
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025da:	2200      	movs	r2, #0
 80025dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025e4:	f7fd fdf4 	bl	80001d0 <__aeabi_uldivmod>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4613      	mov	r3, r2
 80025ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025f0:	e058      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f2:	4b38      	ldr	r3, [pc, #224]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	099b      	lsrs	r3, r3, #6
 80025f8:	2200      	movs	r2, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	4611      	mov	r1, r2
 80025fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002602:	623b      	str	r3, [r7, #32]
 8002604:	2300      	movs	r3, #0
 8002606:	627b      	str	r3, [r7, #36]	@ 0x24
 8002608:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800260c:	4642      	mov	r2, r8
 800260e:	464b      	mov	r3, r9
 8002610:	f04f 0000 	mov.w	r0, #0
 8002614:	f04f 0100 	mov.w	r1, #0
 8002618:	0159      	lsls	r1, r3, #5
 800261a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800261e:	0150      	lsls	r0, r2, #5
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4641      	mov	r1, r8
 8002626:	ebb2 0a01 	subs.w	sl, r2, r1
 800262a:	4649      	mov	r1, r9
 800262c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800263c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002640:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002644:	ebb2 040a 	subs.w	r4, r2, sl
 8002648:	eb63 050b 	sbc.w	r5, r3, fp
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	00eb      	lsls	r3, r5, #3
 8002656:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800265a:	00e2      	lsls	r2, r4, #3
 800265c:	4614      	mov	r4, r2
 800265e:	461d      	mov	r5, r3
 8002660:	4643      	mov	r3, r8
 8002662:	18e3      	adds	r3, r4, r3
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	464b      	mov	r3, r9
 8002668:	eb45 0303 	adc.w	r3, r5, r3
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	f04f 0300 	mov.w	r3, #0
 8002676:	e9d7 4500 	ldrd	r4, r5, [r7]
 800267a:	4629      	mov	r1, r5
 800267c:	028b      	lsls	r3, r1, #10
 800267e:	4621      	mov	r1, r4
 8002680:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002684:	4621      	mov	r1, r4
 8002686:	028a      	lsls	r2, r1, #10
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800268e:	2200      	movs	r2, #0
 8002690:	61bb      	str	r3, [r7, #24]
 8002692:	61fa      	str	r2, [r7, #28]
 8002694:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002698:	f7fd fd9a 	bl	80001d0 <__aeabi_uldivmod>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4613      	mov	r3, r2
 80026a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026a4:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	0c1b      	lsrs	r3, r3, #16
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	3301      	adds	r3, #1
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80026b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026be:	e002      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026c0:	4b05      	ldr	r3, [pc, #20]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80026c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3750      	adds	r7, #80	@ 0x50
 80026cc:	46bd      	mov	sp, r7
 80026ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800
 80026d8:	00f42400 	.word	0x00f42400
 80026dc:	007a1200 	.word	0x007a1200

080026e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026e4:	4b03      	ldr	r3, [pc, #12]	@ (80026f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026e6:	681b      	ldr	r3, [r3, #0]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20000000 	.word	0x20000000

080026f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026fc:	f7ff fff0 	bl	80026e0 <HAL_RCC_GetHCLKFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	0a9b      	lsrs	r3, r3, #10
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	4903      	ldr	r1, [pc, #12]	@ (800271c <HAL_RCC_GetPCLK1Freq+0x24>)
 800270e:	5ccb      	ldrb	r3, [r1, r3]
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40023800 	.word	0x40023800
 800271c:	0800433c 	.word	0x0800433c

08002720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002724:	f7ff ffdc 	bl	80026e0 <HAL_RCC_GetHCLKFreq>
 8002728:	4602      	mov	r2, r0
 800272a:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <HAL_RCC_GetPCLK2Freq+0x20>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	0b5b      	lsrs	r3, r3, #13
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	4903      	ldr	r1, [pc, #12]	@ (8002744 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002736:	5ccb      	ldrb	r3, [r1, r3]
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40023800 	.word	0x40023800
 8002744:	0800433c 	.word	0x0800433c

08002748 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	220f      	movs	r2, #15
 8002756:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002758:	4b12      	ldr	r3, [pc, #72]	@ (80027a4 <HAL_RCC_GetClockConfig+0x5c>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 0203 	and.w	r2, r3, #3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002764:	4b0f      	ldr	r3, [pc, #60]	@ (80027a4 <HAL_RCC_GetClockConfig+0x5c>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002770:	4b0c      	ldr	r3, [pc, #48]	@ (80027a4 <HAL_RCC_GetClockConfig+0x5c>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800277c:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <HAL_RCC_GetClockConfig+0x5c>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	08db      	lsrs	r3, r3, #3
 8002782:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800278a:	4b07      	ldr	r3, [pc, #28]	@ (80027a8 <HAL_RCC_GetClockConfig+0x60>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 020f 	and.w	r2, r3, #15
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	601a      	str	r2, [r3, #0]
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40023c00 	.word	0x40023c00

080027ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e01d      	b.n	80027fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fe f906 	bl	80009e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3304      	adds	r3, #4
 80027e8:	4619      	mov	r1, r3
 80027ea:	4610      	mov	r0, r2
 80027ec:	f000 fa46 	bl	8002c7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002802:	b480      	push	{r7}
 8002804:	b085      	sub	sp, #20
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2202      	movs	r2, #2
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2b06      	cmp	r3, #6
 8002822:	d007      	beq.n	8002834 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0201 	orr.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800284a:	b480      	push	{r7}
 800284c:	b085      	sub	sp, #20
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0201 	orr.w	r2, r2, #1
 8002860:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b06      	cmp	r3, #6
 8002872:	d007      	beq.n	8002884 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d122      	bne.n	80028ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d11b      	bne.n	80028ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f06f 0202 	mvn.w	r2, #2
 80028be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f9b2 	bl	8002c3e <HAL_TIM_IC_CaptureCallback>
 80028da:	e005      	b.n	80028e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f9a4 	bl	8002c2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f9b5 	bl	8002c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d122      	bne.n	8002942 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	2b04      	cmp	r3, #4
 8002908:	d11b      	bne.n	8002942 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f06f 0204 	mvn.w	r2, #4
 8002912:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f988 	bl	8002c3e <HAL_TIM_IC_CaptureCallback>
 800292e:	e005      	b.n	800293c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f97a 	bl	8002c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f98b 	bl	8002c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b08      	cmp	r3, #8
 800294e:	d122      	bne.n	8002996 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b08      	cmp	r3, #8
 800295c:	d11b      	bne.n	8002996 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f06f 0208 	mvn.w	r2, #8
 8002966:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2204      	movs	r2, #4
 800296c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f95e 	bl	8002c3e <HAL_TIM_IC_CaptureCallback>
 8002982:	e005      	b.n	8002990 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f950 	bl	8002c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f961 	bl	8002c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b10      	cmp	r3, #16
 80029a2:	d122      	bne.n	80029ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b10      	cmp	r3, #16
 80029b0:	d11b      	bne.n	80029ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f06f 0210 	mvn.w	r2, #16
 80029ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2208      	movs	r2, #8
 80029c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f934 	bl	8002c3e <HAL_TIM_IC_CaptureCallback>
 80029d6:	e005      	b.n	80029e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f926 	bl	8002c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f937 	bl	8002c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d10e      	bne.n	8002a16 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d107      	bne.n	8002a16 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f06f 0201 	mvn.w	r2, #1
 8002a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7fd ff53 	bl	80008bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a20:	2b80      	cmp	r3, #128	@ 0x80
 8002a22:	d10e      	bne.n	8002a42 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a2e:	2b80      	cmp	r3, #128	@ 0x80
 8002a30:	d107      	bne.n	8002a42 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fadd 	bl	8002ffc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a4c:	2b40      	cmp	r3, #64	@ 0x40
 8002a4e:	d10e      	bne.n	8002a6e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a5a:	2b40      	cmp	r3, #64	@ 0x40
 8002a5c:	d107      	bne.n	8002a6e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f8fc 	bl	8002c66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	2b20      	cmp	r3, #32
 8002a7a:	d10e      	bne.n	8002a9a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	d107      	bne.n	8002a9a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f06f 0220 	mvn.w	r2, #32
 8002a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 faa7 	bl	8002fe8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <HAL_TIM_ConfigClockSource+0x18>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e0b3      	b.n	8002c22 <HAL_TIM_ConfigClockSource+0x180>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ad8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ae0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002af2:	d03e      	beq.n	8002b72 <HAL_TIM_ConfigClockSource+0xd0>
 8002af4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002af8:	f200 8087 	bhi.w	8002c0a <HAL_TIM_ConfigClockSource+0x168>
 8002afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b00:	f000 8085 	beq.w	8002c0e <HAL_TIM_ConfigClockSource+0x16c>
 8002b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b08:	d87f      	bhi.n	8002c0a <HAL_TIM_ConfigClockSource+0x168>
 8002b0a:	2b70      	cmp	r3, #112	@ 0x70
 8002b0c:	d01a      	beq.n	8002b44 <HAL_TIM_ConfigClockSource+0xa2>
 8002b0e:	2b70      	cmp	r3, #112	@ 0x70
 8002b10:	d87b      	bhi.n	8002c0a <HAL_TIM_ConfigClockSource+0x168>
 8002b12:	2b60      	cmp	r3, #96	@ 0x60
 8002b14:	d050      	beq.n	8002bb8 <HAL_TIM_ConfigClockSource+0x116>
 8002b16:	2b60      	cmp	r3, #96	@ 0x60
 8002b18:	d877      	bhi.n	8002c0a <HAL_TIM_ConfigClockSource+0x168>
 8002b1a:	2b50      	cmp	r3, #80	@ 0x50
 8002b1c:	d03c      	beq.n	8002b98 <HAL_TIM_ConfigClockSource+0xf6>
 8002b1e:	2b50      	cmp	r3, #80	@ 0x50
 8002b20:	d873      	bhi.n	8002c0a <HAL_TIM_ConfigClockSource+0x168>
 8002b22:	2b40      	cmp	r3, #64	@ 0x40
 8002b24:	d058      	beq.n	8002bd8 <HAL_TIM_ConfigClockSource+0x136>
 8002b26:	2b40      	cmp	r3, #64	@ 0x40
 8002b28:	d86f      	bhi.n	8002c0a <HAL_TIM_ConfigClockSource+0x168>
 8002b2a:	2b30      	cmp	r3, #48	@ 0x30
 8002b2c:	d064      	beq.n	8002bf8 <HAL_TIM_ConfigClockSource+0x156>
 8002b2e:	2b30      	cmp	r3, #48	@ 0x30
 8002b30:	d86b      	bhi.n	8002c0a <HAL_TIM_ConfigClockSource+0x168>
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d060      	beq.n	8002bf8 <HAL_TIM_ConfigClockSource+0x156>
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	d867      	bhi.n	8002c0a <HAL_TIM_ConfigClockSource+0x168>
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d05c      	beq.n	8002bf8 <HAL_TIM_ConfigClockSource+0x156>
 8002b3e:	2b10      	cmp	r3, #16
 8002b40:	d05a      	beq.n	8002bf8 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002b42:	e062      	b.n	8002c0a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	6899      	ldr	r1, [r3, #8]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f000 f9ac 	bl	8002eb0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002b66:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	609a      	str	r2, [r3, #8]
      break;
 8002b70:	e04e      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6899      	ldr	r1, [r3, #8]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f000 f995 	bl	8002eb0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b94:	609a      	str	r2, [r3, #8]
      break;
 8002b96:	e03b      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	6859      	ldr	r1, [r3, #4]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	f000 f909 	bl	8002dbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2150      	movs	r1, #80	@ 0x50
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 f962 	bl	8002e7a <TIM_ITRx_SetConfig>
      break;
 8002bb6:	e02b      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	6859      	ldr	r1, [r3, #4]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	f000 f928 	bl	8002e1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2160      	movs	r1, #96	@ 0x60
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 f952 	bl	8002e7a <TIM_ITRx_SetConfig>
      break;
 8002bd6:	e01b      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	461a      	mov	r2, r3
 8002be6:	f000 f8e9 	bl	8002dbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2140      	movs	r1, #64	@ 0x40
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 f942 	bl	8002e7a <TIM_ITRx_SetConfig>
      break;
 8002bf6:	e00b      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4619      	mov	r1, r3
 8002c02:	4610      	mov	r0, r2
 8002c04:	f000 f939 	bl	8002e7a <TIM_ITRx_SetConfig>
      break;
 8002c08:	e002      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c0a:	bf00      	nop
 8002c0c:	e000      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
	...

08002c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a40      	ldr	r2, [pc, #256]	@ (8002d90 <TIM_Base_SetConfig+0x114>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d013      	beq.n	8002cbc <TIM_Base_SetConfig+0x40>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c9a:	d00f      	beq.n	8002cbc <TIM_Base_SetConfig+0x40>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a3d      	ldr	r2, [pc, #244]	@ (8002d94 <TIM_Base_SetConfig+0x118>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00b      	beq.n	8002cbc <TIM_Base_SetConfig+0x40>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a3c      	ldr	r2, [pc, #240]	@ (8002d98 <TIM_Base_SetConfig+0x11c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d007      	beq.n	8002cbc <TIM_Base_SetConfig+0x40>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a3b      	ldr	r2, [pc, #236]	@ (8002d9c <TIM_Base_SetConfig+0x120>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d003      	beq.n	8002cbc <TIM_Base_SetConfig+0x40>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a3a      	ldr	r2, [pc, #232]	@ (8002da0 <TIM_Base_SetConfig+0x124>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d108      	bne.n	8002cce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a2f      	ldr	r2, [pc, #188]	@ (8002d90 <TIM_Base_SetConfig+0x114>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d02b      	beq.n	8002d2e <TIM_Base_SetConfig+0xb2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cdc:	d027      	beq.n	8002d2e <TIM_Base_SetConfig+0xb2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a2c      	ldr	r2, [pc, #176]	@ (8002d94 <TIM_Base_SetConfig+0x118>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d023      	beq.n	8002d2e <TIM_Base_SetConfig+0xb2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a2b      	ldr	r2, [pc, #172]	@ (8002d98 <TIM_Base_SetConfig+0x11c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d01f      	beq.n	8002d2e <TIM_Base_SetConfig+0xb2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a2a      	ldr	r2, [pc, #168]	@ (8002d9c <TIM_Base_SetConfig+0x120>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d01b      	beq.n	8002d2e <TIM_Base_SetConfig+0xb2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a29      	ldr	r2, [pc, #164]	@ (8002da0 <TIM_Base_SetConfig+0x124>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d017      	beq.n	8002d2e <TIM_Base_SetConfig+0xb2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a28      	ldr	r2, [pc, #160]	@ (8002da4 <TIM_Base_SetConfig+0x128>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d013      	beq.n	8002d2e <TIM_Base_SetConfig+0xb2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a27      	ldr	r2, [pc, #156]	@ (8002da8 <TIM_Base_SetConfig+0x12c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00f      	beq.n	8002d2e <TIM_Base_SetConfig+0xb2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a26      	ldr	r2, [pc, #152]	@ (8002dac <TIM_Base_SetConfig+0x130>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00b      	beq.n	8002d2e <TIM_Base_SetConfig+0xb2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a25      	ldr	r2, [pc, #148]	@ (8002db0 <TIM_Base_SetConfig+0x134>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d007      	beq.n	8002d2e <TIM_Base_SetConfig+0xb2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a24      	ldr	r2, [pc, #144]	@ (8002db4 <TIM_Base_SetConfig+0x138>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d003      	beq.n	8002d2e <TIM_Base_SetConfig+0xb2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a23      	ldr	r2, [pc, #140]	@ (8002db8 <TIM_Base_SetConfig+0x13c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d108      	bne.n	8002d40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a0a      	ldr	r2, [pc, #40]	@ (8002d90 <TIM_Base_SetConfig+0x114>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d003      	beq.n	8002d74 <TIM_Base_SetConfig+0xf8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002da0 <TIM_Base_SetConfig+0x124>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d103      	bne.n	8002d7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	615a      	str	r2, [r3, #20]
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40010000 	.word	0x40010000
 8002d94:	40000400 	.word	0x40000400
 8002d98:	40000800 	.word	0x40000800
 8002d9c:	40000c00 	.word	0x40000c00
 8002da0:	40010400 	.word	0x40010400
 8002da4:	40014000 	.word	0x40014000
 8002da8:	40014400 	.word	0x40014400
 8002dac:	40014800 	.word	0x40014800
 8002db0:	40001800 	.word	0x40001800
 8002db4:	40001c00 	.word	0x40001c00
 8002db8:	40002000 	.word	0x40002000

08002dbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	f023 0201 	bic.w	r2, r3, #1
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f023 030a 	bic.w	r3, r3, #10
 8002df8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	621a      	str	r2, [r3, #32]
}
 8002e0e:	bf00      	nop
 8002e10:	371c      	adds	r7, #28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b087      	sub	sp, #28
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	f023 0210 	bic.w	r2, r3, #16
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	031b      	lsls	r3, r3, #12
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	621a      	str	r2, [r3, #32]
}
 8002e6e:	bf00      	nop
 8002e70:	371c      	adds	r7, #28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b085      	sub	sp, #20
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f043 0307 	orr.w	r3, r3, #7
 8002e9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	609a      	str	r2, [r3, #8]
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002eca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	021a      	lsls	r2, r3, #8
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	609a      	str	r2, [r3, #8]
}
 8002ee4:	bf00      	nop
 8002ee6:	371c      	adds	r7, #28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e05a      	b.n	8002fbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a21      	ldr	r2, [pc, #132]	@ (8002fcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d022      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f54:	d01d      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d018      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1b      	ldr	r2, [pc, #108]	@ (8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d013      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8002fd8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00e      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a18      	ldr	r2, [pc, #96]	@ (8002fdc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d009      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a17      	ldr	r2, [pc, #92]	@ (8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d004      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a15      	ldr	r2, [pc, #84]	@ (8002fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d10c      	bne.n	8002fac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40010000 	.word	0x40010000
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40000800 	.word	0x40000800
 8002fd8:	40000c00 	.word	0x40000c00
 8002fdc:	40010400 	.word	0x40010400
 8002fe0:	40014000 	.word	0x40014000
 8002fe4:	40001800 	.word	0x40001800

08002fe8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e03f      	b.n	80030a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fd fcf6 	bl	8000a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2224      	movs	r2, #36	@ 0x24
 8003040:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003052:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fa69 	bl	800352c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003068:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003078:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003088:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10d      	bne.n	80030fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <HAL_UART_IRQHandler+0x52>
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f996 	bl	8003428 <UART_Receive_IT>
      return;
 80030fc:	e0d0      	b.n	80032a0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80b0 	beq.w	8003266 <HAL_UART_IRQHandler+0x1ba>
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d105      	bne.n	800311c <HAL_UART_IRQHandler+0x70>
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 80a5 	beq.w	8003266 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <HAL_UART_IRQHandler+0x90>
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003134:	f043 0201 	orr.w	r2, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HAL_UART_IRQHandler+0xb0>
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003154:	f043 0202 	orr.w	r2, r3, #2
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_UART_IRQHandler+0xd0>
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003174:	f043 0204 	orr.w	r2, r3, #4
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00f      	beq.n	80031a6 <HAL_UART_IRQHandler+0xfa>
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b00      	cmp	r3, #0
 800318e:	d104      	bne.n	800319a <HAL_UART_IRQHandler+0xee>
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d005      	beq.n	80031a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800319e:	f043 0208 	orr.w	r2, r3, #8
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d077      	beq.n	800329e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d007      	beq.n	80031c8 <HAL_UART_IRQHandler+0x11c>
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f930 	bl	8003428 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d2:	2b40      	cmp	r3, #64	@ 0x40
 80031d4:	bf0c      	ite	eq
 80031d6:	2301      	moveq	r3, #1
 80031d8:	2300      	movne	r3, #0
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d102      	bne.n	80031f0 <HAL_UART_IRQHandler+0x144>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d031      	beq.n	8003254 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f879 	bl	80032e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003200:	2b40      	cmp	r3, #64	@ 0x40
 8003202:	d123      	bne.n	800324c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003212:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003218:	2b00      	cmp	r3, #0
 800321a:	d013      	beq.n	8003244 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003220:	4a21      	ldr	r2, [pc, #132]	@ (80032a8 <HAL_UART_IRQHandler+0x1fc>)
 8003222:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe fc0d 	bl	8001a48 <HAL_DMA_Abort_IT>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d016      	beq.n	8003262 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800323e:	4610      	mov	r0, r2
 8003240:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003242:	e00e      	b.n	8003262 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f845 	bl	80032d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324a:	e00a      	b.n	8003262 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f841 	bl	80032d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003252:	e006      	b.n	8003262 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f83d 	bl	80032d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
    return;
 8003260:	e01d      	b.n	800329e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003262:	bf00      	nop
    return;
 8003264:	e01b      	b.n	800329e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800326c:	2b00      	cmp	r3, #0
 800326e:	d008      	beq.n	8003282 <HAL_UART_IRQHandler+0x1d6>
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f866 	bl	800334c <UART_Transmit_IT>
    return;
 8003280:	e00e      	b.n	80032a0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d009      	beq.n	80032a0 <HAL_UART_IRQHandler+0x1f4>
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003292:	2b00      	cmp	r3, #0
 8003294:	d004      	beq.n	80032a0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f8ae 	bl	80033f8 <UART_EndTransmit_IT>
    return;
 800329c:	e000      	b.n	80032a0 <HAL_UART_IRQHandler+0x1f4>
    return;
 800329e:	bf00      	nop
  }
}
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	08003325 	.word	0x08003325

080032ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 80032fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0201 	bic.w	r2, r2, #1
 800330e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003330:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f7ff ffc8 	bl	80032d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003344:	bf00      	nop
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b21      	cmp	r3, #33	@ 0x21
 800335e:	d144      	bne.n	80033ea <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003368:	d11a      	bne.n	80033a0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800337e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d105      	bne.n	8003394 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	1c9a      	adds	r2, r3, #2
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	621a      	str	r2, [r3, #32]
 8003392:	e00e      	b.n	80033b2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	621a      	str	r2, [r3, #32]
 800339e:	e008      	b.n	80033b2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	1c59      	adds	r1, r3, #1
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6211      	str	r1, [r2, #32]
 80033aa:	781a      	ldrb	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	4619      	mov	r1, r3
 80033c0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10f      	bne.n	80033e6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e000      	b.n	80033ec <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80033ea:	2302      	movs	r3, #2
  }
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800340e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff ff47 	bl	80032ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b22      	cmp	r3, #34	@ 0x22
 800343a:	d171      	bne.n	8003520 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003444:	d123      	bne.n	800348e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10e      	bne.n	8003472 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	b29b      	uxth	r3, r3
 800345c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346a:	1c9a      	adds	r2, r3, #2
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003470:	e029      	b.n	80034c6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	b29b      	uxth	r3, r3
 800347a:	b2db      	uxtb	r3, r3
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	629a      	str	r2, [r3, #40]	@ 0x28
 800348c:	e01b      	b.n	80034c6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10a      	bne.n	80034ac <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6858      	ldr	r0, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a0:	1c59      	adds	r1, r3, #1
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6291      	str	r1, [r2, #40]	@ 0x28
 80034a6:	b2c2      	uxtb	r2, r0
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	e00c      	b.n	80034c6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b8:	1c58      	adds	r0, r3, #1
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	6288      	str	r0, [r1, #40]	@ 0x28
 80034be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4619      	mov	r1, r3
 80034d4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d120      	bne.n	800351c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0220 	bic.w	r2, r2, #32
 80034e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695a      	ldr	r2, [r3, #20]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0201 	bic.w	r2, r2, #1
 8003508:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff fed4 	bl	80032c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	e002      	b.n	8003522 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	e000      	b.n	8003522 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003520:	2302      	movs	r3, #2
  }
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800352c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003530:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8003534:	af00      	add	r7, sp, #0
 8003536:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800353a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003546:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800354a:	68d9      	ldr	r1, [r3, #12]
 800354c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	ea40 0301 	orr.w	r3, r0, r1
 8003556:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003558:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	431a      	orrs	r2, r3
 8003566:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	431a      	orrs	r2, r3
 800356e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 800357a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003586:	f021 010c 	bic.w	r1, r1, #12
 800358a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8003594:	430b      	orrs	r3, r1
 8003596:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003598:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80035a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035a8:	6999      	ldr	r1, [r3, #24]
 80035aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	ea40 0301 	orr.w	r3, r0, r1
 80035b4:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035c0:	f040 824a 	bne.w	8003a58 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	4b96      	ldr	r3, [pc, #600]	@ (8003824 <UART_SetConfig+0x2f8>)
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d006      	beq.n	80035de <UART_SetConfig+0xb2>
 80035d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	4b94      	ldr	r3, [pc, #592]	@ (8003828 <UART_SetConfig+0x2fc>)
 80035d8:	429a      	cmp	r2, r3
 80035da:	f040 8129 	bne.w	8003830 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035de:	f7ff f89f 	bl	8002720 <HAL_RCC_GetPCLK2Freq>
 80035e2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 80035f0:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 80035f4:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 80035f8:	4622      	mov	r2, r4
 80035fa:	462b      	mov	r3, r5
 80035fc:	1891      	adds	r1, r2, r2
 80035fe:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8003602:	415b      	adcs	r3, r3
 8003604:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003608:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800360c:	4621      	mov	r1, r4
 800360e:	1851      	adds	r1, r2, r1
 8003610:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8003614:	4629      	mov	r1, r5
 8003616:	414b      	adcs	r3, r1
 8003618:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 8003628:	4649      	mov	r1, r9
 800362a:	00cb      	lsls	r3, r1, #3
 800362c:	4641      	mov	r1, r8
 800362e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003632:	4641      	mov	r1, r8
 8003634:	00ca      	lsls	r2, r1, #3
 8003636:	4610      	mov	r0, r2
 8003638:	4619      	mov	r1, r3
 800363a:	4603      	mov	r3, r0
 800363c:	4622      	mov	r2, r4
 800363e:	189b      	adds	r3, r3, r2
 8003640:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8003644:	462b      	mov	r3, r5
 8003646:	460a      	mov	r2, r1
 8003648:	eb42 0303 	adc.w	r3, r2, r3
 800364c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8003650:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800365c:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8003660:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 8003664:	460b      	mov	r3, r1
 8003666:	18db      	adds	r3, r3, r3
 8003668:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800366c:	4613      	mov	r3, r2
 800366e:	eb42 0303 	adc.w	r3, r2, r3
 8003672:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003676:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800367a:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 800367e:	f7fc fda7 	bl	80001d0 <__aeabi_uldivmod>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4b69      	ldr	r3, [pc, #420]	@ (800382c <UART_SetConfig+0x300>)
 8003688:	fba3 2302 	umull	r2, r3, r3, r2
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	011c      	lsls	r4, r3, #4
 8003690:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003694:	2200      	movs	r2, #0
 8003696:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 800369a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800369e:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 80036a2:	4642      	mov	r2, r8
 80036a4:	464b      	mov	r3, r9
 80036a6:	1891      	adds	r1, r2, r2
 80036a8:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80036ac:	415b      	adcs	r3, r3
 80036ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80036b2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 80036b6:	4641      	mov	r1, r8
 80036b8:	1851      	adds	r1, r2, r1
 80036ba:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80036be:	4649      	mov	r1, r9
 80036c0:	414b      	adcs	r3, r1
 80036c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 80036d2:	4659      	mov	r1, fp
 80036d4:	00cb      	lsls	r3, r1, #3
 80036d6:	4651      	mov	r1, sl
 80036d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036dc:	4651      	mov	r1, sl
 80036de:	00ca      	lsls	r2, r1, #3
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	4603      	mov	r3, r0
 80036e6:	4642      	mov	r2, r8
 80036e8:	189b      	adds	r3, r3, r2
 80036ea:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80036ee:	464b      	mov	r3, r9
 80036f0:	460a      	mov	r2, r1
 80036f2:	eb42 0303 	adc.w	r3, r2, r3
 80036f6:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80036fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003706:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 800370a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 800370e:	460b      	mov	r3, r1
 8003710:	18db      	adds	r3, r3, r3
 8003712:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003716:	4613      	mov	r3, r2
 8003718:	eb42 0303 	adc.w	r3, r2, r3
 800371c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003720:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8003724:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8003728:	f7fc fd52 	bl	80001d0 <__aeabi_uldivmod>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4611      	mov	r1, r2
 8003732:	4b3e      	ldr	r3, [pc, #248]	@ (800382c <UART_SetConfig+0x300>)
 8003734:	fba3 2301 	umull	r2, r3, r3, r1
 8003738:	095b      	lsrs	r3, r3, #5
 800373a:	2264      	movs	r2, #100	@ 0x64
 800373c:	fb02 f303 	mul.w	r3, r2, r3
 8003740:	1acb      	subs	r3, r1, r3
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003748:	4b38      	ldr	r3, [pc, #224]	@ (800382c <UART_SetConfig+0x300>)
 800374a:	fba3 2302 	umull	r2, r3, r3, r2
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003756:	441c      	add	r4, r3
 8003758:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800375c:	2200      	movs	r2, #0
 800375e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003762:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8003766:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 800376a:	4642      	mov	r2, r8
 800376c:	464b      	mov	r3, r9
 800376e:	1891      	adds	r1, r2, r2
 8003770:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8003774:	415b      	adcs	r3, r3
 8003776:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800377a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800377e:	4641      	mov	r1, r8
 8003780:	1851      	adds	r1, r2, r1
 8003782:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8003786:	4649      	mov	r1, r9
 8003788:	414b      	adcs	r3, r1
 800378a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 800379a:	4659      	mov	r1, fp
 800379c:	00cb      	lsls	r3, r1, #3
 800379e:	4651      	mov	r1, sl
 80037a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037a4:	4651      	mov	r1, sl
 80037a6:	00ca      	lsls	r2, r1, #3
 80037a8:	4610      	mov	r0, r2
 80037aa:	4619      	mov	r1, r3
 80037ac:	4603      	mov	r3, r0
 80037ae:	4642      	mov	r2, r8
 80037b0:	189b      	adds	r3, r3, r2
 80037b2:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80037b6:	464b      	mov	r3, r9
 80037b8:	460a      	mov	r2, r1
 80037ba:	eb42 0303 	adc.w	r3, r2, r3
 80037be:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80037c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80037ce:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 80037d2:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 80037d6:	460b      	mov	r3, r1
 80037d8:	18db      	adds	r3, r3, r3
 80037da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037de:	4613      	mov	r3, r2
 80037e0:	eb42 0303 	adc.w	r3, r2, r3
 80037e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80037e8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80037ec:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 80037f0:	f7fc fcee 	bl	80001d0 <__aeabi_uldivmod>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4b0c      	ldr	r3, [pc, #48]	@ (800382c <UART_SetConfig+0x300>)
 80037fa:	fba3 1302 	umull	r1, r3, r3, r2
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	2164      	movs	r1, #100	@ 0x64
 8003802:	fb01 f303 	mul.w	r3, r1, r3
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	3332      	adds	r3, #50	@ 0x32
 800380c:	4a07      	ldr	r2, [pc, #28]	@ (800382c <UART_SetConfig+0x300>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	f003 0207 	and.w	r2, r3, #7
 8003818:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4422      	add	r2, r4
 8003820:	609a      	str	r2, [r3, #8]
 8003822:	e34a      	b.n	8003eba <UART_SetConfig+0x98e>
 8003824:	40011000 	.word	0x40011000
 8003828:	40011400 	.word	0x40011400
 800382c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003830:	f7fe ff62 	bl	80026f8 <HAL_RCC_GetPCLK1Freq>
 8003834:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003838:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800383c:	2200      	movs	r2, #0
 800383e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003842:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8003846:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 800384a:	4622      	mov	r2, r4
 800384c:	462b      	mov	r3, r5
 800384e:	1891      	adds	r1, r2, r2
 8003850:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8003854:	415b      	adcs	r3, r3
 8003856:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800385a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800385e:	4621      	mov	r1, r4
 8003860:	eb12 0a01 	adds.w	sl, r2, r1
 8003864:	4629      	mov	r1, r5
 8003866:	eb43 0b01 	adc.w	fp, r3, r1
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003876:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800387a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800387e:	4692      	mov	sl, r2
 8003880:	469b      	mov	fp, r3
 8003882:	4623      	mov	r3, r4
 8003884:	eb1a 0303 	adds.w	r3, sl, r3
 8003888:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800388c:	462b      	mov	r3, r5
 800388e:	eb4b 0303 	adc.w	r3, fp, r3
 8003892:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003896:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80038a2:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80038a6:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 80038aa:	460b      	mov	r3, r1
 80038ac:	18db      	adds	r3, r3, r3
 80038ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038b2:	4613      	mov	r3, r2
 80038b4:	eb42 0303 	adc.w	r3, r2, r3
 80038b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038bc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80038c0:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 80038c4:	f7fc fc84 	bl	80001d0 <__aeabi_uldivmod>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4b61      	ldr	r3, [pc, #388]	@ (8003a54 <UART_SetConfig+0x528>)
 80038ce:	fba3 2302 	umull	r2, r3, r3, r2
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	011c      	lsls	r4, r3, #4
 80038d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80038da:	2200      	movs	r2, #0
 80038dc:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80038e0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 80038e4:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 80038e8:	4642      	mov	r2, r8
 80038ea:	464b      	mov	r3, r9
 80038ec:	1891      	adds	r1, r2, r2
 80038ee:	67b9      	str	r1, [r7, #120]	@ 0x78
 80038f0:	415b      	adcs	r3, r3
 80038f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038f4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80038f8:	4641      	mov	r1, r8
 80038fa:	1851      	adds	r1, r2, r1
 80038fc:	6739      	str	r1, [r7, #112]	@ 0x70
 80038fe:	4649      	mov	r1, r9
 8003900:	414b      	adcs	r3, r1
 8003902:	677b      	str	r3, [r7, #116]	@ 0x74
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 8003910:	4659      	mov	r1, fp
 8003912:	00cb      	lsls	r3, r1, #3
 8003914:	4651      	mov	r1, sl
 8003916:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800391a:	4651      	mov	r1, sl
 800391c:	00ca      	lsls	r2, r1, #3
 800391e:	4610      	mov	r0, r2
 8003920:	4619      	mov	r1, r3
 8003922:	4603      	mov	r3, r0
 8003924:	4642      	mov	r2, r8
 8003926:	189b      	adds	r3, r3, r2
 8003928:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800392c:	464b      	mov	r3, r9
 800392e:	460a      	mov	r2, r1
 8003930:	eb42 0303 	adc.w	r3, r2, r3
 8003934:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8003938:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003944:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8003948:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 800394c:	460b      	mov	r3, r1
 800394e:	18db      	adds	r3, r3, r3
 8003950:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003952:	4613      	mov	r3, r2
 8003954:	eb42 0303 	adc.w	r3, r2, r3
 8003958:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800395a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800395e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8003962:	f7fc fc35 	bl	80001d0 <__aeabi_uldivmod>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4611      	mov	r1, r2
 800396c:	4b39      	ldr	r3, [pc, #228]	@ (8003a54 <UART_SetConfig+0x528>)
 800396e:	fba3 2301 	umull	r2, r3, r3, r1
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	2264      	movs	r2, #100	@ 0x64
 8003976:	fb02 f303 	mul.w	r3, r2, r3
 800397a:	1acb      	subs	r3, r1, r3
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003982:	4b34      	ldr	r3, [pc, #208]	@ (8003a54 <UART_SetConfig+0x528>)
 8003984:	fba3 2302 	umull	r2, r3, r3, r2
 8003988:	095b      	lsrs	r3, r3, #5
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003990:	441c      	add	r4, r3
 8003992:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003996:	2200      	movs	r2, #0
 8003998:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800399c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80039a0:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 80039a4:	4642      	mov	r2, r8
 80039a6:	464b      	mov	r3, r9
 80039a8:	1891      	adds	r1, r2, r2
 80039aa:	6639      	str	r1, [r7, #96]	@ 0x60
 80039ac:	415b      	adcs	r3, r3
 80039ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80039b0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80039b4:	4641      	mov	r1, r8
 80039b6:	1851      	adds	r1, r2, r1
 80039b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039ba:	4649      	mov	r1, r9
 80039bc:	414b      	adcs	r3, r1
 80039be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 80039cc:	4659      	mov	r1, fp
 80039ce:	00cb      	lsls	r3, r1, #3
 80039d0:	4651      	mov	r1, sl
 80039d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039d6:	4651      	mov	r1, sl
 80039d8:	00ca      	lsls	r2, r1, #3
 80039da:	4610      	mov	r0, r2
 80039dc:	4619      	mov	r1, r3
 80039de:	4603      	mov	r3, r0
 80039e0:	4642      	mov	r2, r8
 80039e2:	189b      	adds	r3, r3, r2
 80039e4:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80039e8:	464b      	mov	r3, r9
 80039ea:	460a      	mov	r2, r1
 80039ec:	eb42 0303 	adc.w	r3, r2, r3
 80039f0:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80039f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8003a00:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8003a04:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8003a08:	460b      	mov	r3, r1
 8003a0a:	18db      	adds	r3, r3, r3
 8003a0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a0e:	4613      	mov	r3, r2
 8003a10:	eb42 0303 	adc.w	r3, r2, r3
 8003a14:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a16:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a1a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8003a1e:	f7fc fbd7 	bl	80001d0 <__aeabi_uldivmod>
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	4b0b      	ldr	r3, [pc, #44]	@ (8003a54 <UART_SetConfig+0x528>)
 8003a28:	fba3 1302 	umull	r1, r3, r3, r2
 8003a2c:	095b      	lsrs	r3, r3, #5
 8003a2e:	2164      	movs	r1, #100	@ 0x64
 8003a30:	fb01 f303 	mul.w	r3, r1, r3
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	3332      	adds	r3, #50	@ 0x32
 8003a3a:	4a06      	ldr	r2, [pc, #24]	@ (8003a54 <UART_SetConfig+0x528>)
 8003a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	f003 0207 	and.w	r2, r3, #7
 8003a46:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4422      	add	r2, r4
 8003a4e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003a50:	e233      	b.n	8003eba <UART_SetConfig+0x98e>
 8003a52:	bf00      	nop
 8003a54:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a58:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4b8d      	ldr	r3, [pc, #564]	@ (8003c94 <UART_SetConfig+0x768>)
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d006      	beq.n	8003a72 <UART_SetConfig+0x546>
 8003a64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	4b8b      	ldr	r3, [pc, #556]	@ (8003c98 <UART_SetConfig+0x76c>)
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	f040 8117 	bne.w	8003ca0 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a72:	f7fe fe55 	bl	8002720 <HAL_RCC_GetPCLK2Freq>
 8003a76:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8003a84:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8003a88:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8003a8c:	4622      	mov	r2, r4
 8003a8e:	462b      	mov	r3, r5
 8003a90:	1891      	adds	r1, r2, r2
 8003a92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a94:	415b      	adcs	r3, r3
 8003a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	eb12 0801 	adds.w	r8, r2, r1
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	eb43 0901 	adc.w	r9, r3, r1
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ab4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ab8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003abc:	4690      	mov	r8, r2
 8003abe:	4699      	mov	r9, r3
 8003ac0:	4623      	mov	r3, r4
 8003ac2:	eb18 0303 	adds.w	r3, r8, r3
 8003ac6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003aca:	462b      	mov	r3, r5
 8003acc:	eb49 0303 	adc.w	r3, r9, r3
 8003ad0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8003ad4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003ae0:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8003af0:	4629      	mov	r1, r5
 8003af2:	008b      	lsls	r3, r1, #2
 8003af4:	4621      	mov	r1, r4
 8003af6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003afa:	4621      	mov	r1, r4
 8003afc:	008a      	lsls	r2, r1, #2
 8003afe:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8003b02:	f7fc fb65 	bl	80001d0 <__aeabi_uldivmod>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4b64      	ldr	r3, [pc, #400]	@ (8003c9c <UART_SetConfig+0x770>)
 8003b0c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b10:	095b      	lsrs	r3, r3, #5
 8003b12:	011c      	lsls	r4, r3, #4
 8003b14:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8003b1e:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003b22:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 8003b26:	4642      	mov	r2, r8
 8003b28:	464b      	mov	r3, r9
 8003b2a:	1891      	adds	r1, r2, r2
 8003b2c:	6439      	str	r1, [r7, #64]	@ 0x40
 8003b2e:	415b      	adcs	r3, r3
 8003b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b36:	4641      	mov	r1, r8
 8003b38:	1851      	adds	r1, r2, r1
 8003b3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b3c:	4649      	mov	r1, r9
 8003b3e:	414b      	adcs	r3, r1
 8003b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 8003b4e:	4659      	mov	r1, fp
 8003b50:	00cb      	lsls	r3, r1, #3
 8003b52:	4651      	mov	r1, sl
 8003b54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b58:	4651      	mov	r1, sl
 8003b5a:	00ca      	lsls	r2, r1, #3
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4603      	mov	r3, r0
 8003b62:	4642      	mov	r2, r8
 8003b64:	189b      	adds	r3, r3, r2
 8003b66:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	460a      	mov	r2, r1
 8003b6e:	eb42 0303 	adc.w	r3, r2, r3
 8003b72:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003b76:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003b82:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8003b92:	4649      	mov	r1, r9
 8003b94:	008b      	lsls	r3, r1, #2
 8003b96:	4641      	mov	r1, r8
 8003b98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b9c:	4641      	mov	r1, r8
 8003b9e:	008a      	lsls	r2, r1, #2
 8003ba0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8003ba4:	f7fc fb14 	bl	80001d0 <__aeabi_uldivmod>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4611      	mov	r1, r2
 8003bae:	4b3b      	ldr	r3, [pc, #236]	@ (8003c9c <UART_SetConfig+0x770>)
 8003bb0:	fba3 2301 	umull	r2, r3, r3, r1
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	2264      	movs	r2, #100	@ 0x64
 8003bb8:	fb02 f303 	mul.w	r3, r2, r3
 8003bbc:	1acb      	subs	r3, r1, r3
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	3332      	adds	r3, #50	@ 0x32
 8003bc2:	4a36      	ldr	r2, [pc, #216]	@ (8003c9c <UART_SetConfig+0x770>)
 8003bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc8:	095b      	lsrs	r3, r3, #5
 8003bca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bce:	441c      	add	r4, r3
 8003bd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003bda:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8003bde:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 8003be2:	4642      	mov	r2, r8
 8003be4:	464b      	mov	r3, r9
 8003be6:	1891      	adds	r1, r2, r2
 8003be8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003bea:	415b      	adcs	r3, r3
 8003bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003bf2:	4641      	mov	r1, r8
 8003bf4:	1851      	adds	r1, r2, r1
 8003bf6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003bf8:	4649      	mov	r1, r9
 8003bfa:	414b      	adcs	r3, r1
 8003bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8003c0a:	4659      	mov	r1, fp
 8003c0c:	00cb      	lsls	r3, r1, #3
 8003c0e:	4651      	mov	r1, sl
 8003c10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c14:	4651      	mov	r1, sl
 8003c16:	00ca      	lsls	r2, r1, #3
 8003c18:	4610      	mov	r0, r2
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	4642      	mov	r2, r8
 8003c20:	189b      	adds	r3, r3, r2
 8003c22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003c26:	464b      	mov	r3, r9
 8003c28:	460a      	mov	r2, r1
 8003c2a:	eb42 0303 	adc.w	r3, r2, r3
 8003c2e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003c32:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003c3e:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 8003c4e:	4649      	mov	r1, r9
 8003c50:	008b      	lsls	r3, r1, #2
 8003c52:	4641      	mov	r1, r8
 8003c54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c58:	4641      	mov	r1, r8
 8003c5a:	008a      	lsls	r2, r1, #2
 8003c5c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8003c60:	f7fc fab6 	bl	80001d0 <__aeabi_uldivmod>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4b0c      	ldr	r3, [pc, #48]	@ (8003c9c <UART_SetConfig+0x770>)
 8003c6a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	2164      	movs	r1, #100	@ 0x64
 8003c72:	fb01 f303 	mul.w	r3, r1, r3
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	3332      	adds	r3, #50	@ 0x32
 8003c7c:	4a07      	ldr	r2, [pc, #28]	@ (8003c9c <UART_SetConfig+0x770>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	f003 020f 	and.w	r2, r3, #15
 8003c88:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4422      	add	r2, r4
 8003c90:	609a      	str	r2, [r3, #8]
 8003c92:	e112      	b.n	8003eba <UART_SetConfig+0x98e>
 8003c94:	40011000 	.word	0x40011000
 8003c98:	40011400 	.word	0x40011400
 8003c9c:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ca0:	f7fe fd2a 	bl	80026f8 <HAL_RCC_GetPCLK1Freq>
 8003ca4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ca8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003cac:	2200      	movs	r2, #0
 8003cae:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003cb2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003cb6:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 8003cba:	4642      	mov	r2, r8
 8003cbc:	464b      	mov	r3, r9
 8003cbe:	1891      	adds	r1, r2, r2
 8003cc0:	6239      	str	r1, [r7, #32]
 8003cc2:	415b      	adcs	r3, r3
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cca:	4641      	mov	r1, r8
 8003ccc:	1854      	adds	r4, r2, r1
 8003cce:	4649      	mov	r1, r9
 8003cd0:	eb43 0501 	adc.w	r5, r3, r1
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	00eb      	lsls	r3, r5, #3
 8003cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ce2:	00e2      	lsls	r2, r4, #3
 8003ce4:	4614      	mov	r4, r2
 8003ce6:	461d      	mov	r5, r3
 8003ce8:	4643      	mov	r3, r8
 8003cea:	18e3      	adds	r3, r4, r3
 8003cec:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003cf0:	464b      	mov	r3, r9
 8003cf2:	eb45 0303 	adc.w	r3, r5, r3
 8003cf6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003cfa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003d06:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8003d16:	4629      	mov	r1, r5
 8003d18:	008b      	lsls	r3, r1, #2
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d20:	4621      	mov	r1, r4
 8003d22:	008a      	lsls	r2, r1, #2
 8003d24:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8003d28:	f7fc fa52 	bl	80001d0 <__aeabi_uldivmod>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4b65      	ldr	r3, [pc, #404]	@ (8003ec8 <UART_SetConfig+0x99c>)
 8003d32:	fba3 2302 	umull	r2, r3, r3, r2
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	011c      	lsls	r4, r3, #4
 8003d3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d44:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8003d48:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8003d4c:	4642      	mov	r2, r8
 8003d4e:	464b      	mov	r3, r9
 8003d50:	1891      	adds	r1, r2, r2
 8003d52:	61b9      	str	r1, [r7, #24]
 8003d54:	415b      	adcs	r3, r3
 8003d56:	61fb      	str	r3, [r7, #28]
 8003d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d5c:	4641      	mov	r1, r8
 8003d5e:	1851      	adds	r1, r2, r1
 8003d60:	6139      	str	r1, [r7, #16]
 8003d62:	4649      	mov	r1, r9
 8003d64:	414b      	adcs	r3, r1
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d74:	4659      	mov	r1, fp
 8003d76:	00cb      	lsls	r3, r1, #3
 8003d78:	4651      	mov	r1, sl
 8003d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d7e:	4651      	mov	r1, sl
 8003d80:	00ca      	lsls	r2, r1, #3
 8003d82:	4610      	mov	r0, r2
 8003d84:	4619      	mov	r1, r3
 8003d86:	4603      	mov	r3, r0
 8003d88:	4642      	mov	r2, r8
 8003d8a:	189b      	adds	r3, r3, r2
 8003d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003d90:	464b      	mov	r3, r9
 8003d92:	460a      	mov	r2, r1
 8003d94:	eb42 0303 	adc.w	r3, r2, r3
 8003d98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003d9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003da8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8003db8:	4649      	mov	r1, r9
 8003dba:	008b      	lsls	r3, r1, #2
 8003dbc:	4641      	mov	r1, r8
 8003dbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dc2:	4641      	mov	r1, r8
 8003dc4:	008a      	lsls	r2, r1, #2
 8003dc6:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8003dca:	f7fc fa01 	bl	80001d0 <__aeabi_uldivmod>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4611      	mov	r1, r2
 8003dd4:	4b3c      	ldr	r3, [pc, #240]	@ (8003ec8 <UART_SetConfig+0x99c>)
 8003dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	2264      	movs	r2, #100	@ 0x64
 8003dde:	fb02 f303 	mul.w	r3, r2, r3
 8003de2:	1acb      	subs	r3, r1, r3
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	3332      	adds	r3, #50	@ 0x32
 8003de8:	4a37      	ldr	r2, [pc, #220]	@ (8003ec8 <UART_SetConfig+0x99c>)
 8003dea:	fba2 2303 	umull	r2, r3, r2, r3
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003df4:	441c      	add	r4, r3
 8003df6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e00:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e04:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8003e08:	4642      	mov	r2, r8
 8003e0a:	464b      	mov	r3, r9
 8003e0c:	1891      	adds	r1, r2, r2
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	415b      	adcs	r3, r3
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e18:	4641      	mov	r1, r8
 8003e1a:	1851      	adds	r1, r2, r1
 8003e1c:	6039      	str	r1, [r7, #0]
 8003e1e:	4649      	mov	r1, r9
 8003e20:	414b      	adcs	r3, r1
 8003e22:	607b      	str	r3, [r7, #4]
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e30:	4659      	mov	r1, fp
 8003e32:	00cb      	lsls	r3, r1, #3
 8003e34:	4651      	mov	r1, sl
 8003e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e3a:	4651      	mov	r1, sl
 8003e3c:	00ca      	lsls	r2, r1, #3
 8003e3e:	4610      	mov	r0, r2
 8003e40:	4619      	mov	r1, r3
 8003e42:	4603      	mov	r3, r0
 8003e44:	4642      	mov	r2, r8
 8003e46:	189b      	adds	r3, r3, r2
 8003e48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e4c:	464b      	mov	r3, r9
 8003e4e:	460a      	mov	r2, r1
 8003e50:	eb42 0303 	adc.w	r3, r2, r3
 8003e54:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e58:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e64:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8003e74:	4649      	mov	r1, r9
 8003e76:	008b      	lsls	r3, r1, #2
 8003e78:	4641      	mov	r1, r8
 8003e7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e7e:	4641      	mov	r1, r8
 8003e80:	008a      	lsls	r2, r1, #2
 8003e82:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e86:	f7fc f9a3 	bl	80001d0 <__aeabi_uldivmod>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec8 <UART_SetConfig+0x99c>)
 8003e90:	fba3 1302 	umull	r1, r3, r3, r2
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	2164      	movs	r1, #100	@ 0x64
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	3332      	adds	r3, #50	@ 0x32
 8003ea2:	4a09      	ldr	r2, [pc, #36]	@ (8003ec8 <UART_SetConfig+0x99c>)
 8003ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	f003 020f 	and.w	r2, r3, #15
 8003eae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4422      	add	r2, r4
 8003eb6:	609a      	str	r2, [r3, #8]
}
 8003eb8:	e7ff      	b.n	8003eba <UART_SetConfig+0x98e>
 8003eba:	bf00      	nop
 8003ebc:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ec6:	bf00      	nop
 8003ec8:	51eb851f 	.word	0x51eb851f

08003ecc <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	601a      	str	r2, [r3, #0]
}
 8003f08:	bf00      	nop
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6892      	ldr	r2, [r2, #8]
 8003f2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6852      	ldr	r2, [r2, #4]
 8003f34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d103      	bne.n	8003f48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	1e5a      	subs	r2, r3, #1
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f72:	4b4f      	ldr	r3, [pc, #316]	@ (80040b0 <xTaskIncrementTick+0x148>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f040 8089 	bne.w	800408e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f7c:	4b4d      	ldr	r3, [pc, #308]	@ (80040b4 <xTaskIncrementTick+0x14c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3301      	adds	r3, #1
 8003f82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f84:	4a4b      	ldr	r2, [pc, #300]	@ (80040b4 <xTaskIncrementTick+0x14c>)
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d121      	bne.n	8003fd4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f90:	4b49      	ldr	r3, [pc, #292]	@ (80040b8 <xTaskIncrementTick+0x150>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00b      	beq.n	8003fb2 <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003fac:	bf00      	nop
 8003fae:	bf00      	nop
 8003fb0:	e7fd      	b.n	8003fae <xTaskIncrementTick+0x46>
 8003fb2:	4b41      	ldr	r3, [pc, #260]	@ (80040b8 <xTaskIncrementTick+0x150>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	4b40      	ldr	r3, [pc, #256]	@ (80040bc <xTaskIncrementTick+0x154>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a3e      	ldr	r2, [pc, #248]	@ (80040b8 <xTaskIncrementTick+0x150>)
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	4a3e      	ldr	r2, [pc, #248]	@ (80040bc <xTaskIncrementTick+0x154>)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	4b3e      	ldr	r3, [pc, #248]	@ (80040c0 <xTaskIncrementTick+0x158>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	4a3c      	ldr	r2, [pc, #240]	@ (80040c0 <xTaskIncrementTick+0x158>)
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	f000 f8e0 	bl	8004194 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fd4:	4b3b      	ldr	r3, [pc, #236]	@ (80040c4 <xTaskIncrementTick+0x15c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d348      	bcc.n	8004070 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fde:	4b36      	ldr	r3, [pc, #216]	@ (80040b8 <xTaskIncrementTick+0x150>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d104      	bne.n	8003ff2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fe8:	4b36      	ldr	r3, [pc, #216]	@ (80040c4 <xTaskIncrementTick+0x15c>)
 8003fea:	f04f 32ff 	mov.w	r2, #4294967295
 8003fee:	601a      	str	r2, [r3, #0]
					break;
 8003ff0:	e03e      	b.n	8004070 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ff2:	4b31      	ldr	r3, [pc, #196]	@ (80040b8 <xTaskIncrementTick+0x150>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	429a      	cmp	r2, r3
 8004008:	d203      	bcs.n	8004012 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800400a:	4a2e      	ldr	r2, [pc, #184]	@ (80040c4 <xTaskIncrementTick+0x15c>)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004010:	e02e      	b.n	8004070 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	3304      	adds	r3, #4
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff ff7c 	bl	8003f14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004020:	2b00      	cmp	r3, #0
 8004022:	d004      	beq.n	800402e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	3318      	adds	r3, #24
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff ff73 	bl	8003f14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004032:	2201      	movs	r2, #1
 8004034:	409a      	lsls	r2, r3
 8004036:	4b24      	ldr	r3, [pc, #144]	@ (80040c8 <xTaskIncrementTick+0x160>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4313      	orrs	r3, r2
 800403c:	4a22      	ldr	r2, [pc, #136]	@ (80040c8 <xTaskIncrementTick+0x160>)
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4a1f      	ldr	r2, [pc, #124]	@ (80040cc <xTaskIncrementTick+0x164>)
 800404e:	441a      	add	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	3304      	adds	r3, #4
 8004054:	4619      	mov	r1, r3
 8004056:	4610      	mov	r0, r2
 8004058:	f7ff ff38 	bl	8003ecc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004060:	4b1b      	ldr	r3, [pc, #108]	@ (80040d0 <xTaskIncrementTick+0x168>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004066:	429a      	cmp	r2, r3
 8004068:	d3b9      	bcc.n	8003fde <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800406a:	2301      	movs	r3, #1
 800406c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800406e:	e7b6      	b.n	8003fde <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004070:	4b17      	ldr	r3, [pc, #92]	@ (80040d0 <xTaskIncrementTick+0x168>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004076:	4915      	ldr	r1, [pc, #84]	@ (80040cc <xTaskIncrementTick+0x164>)
 8004078:	4613      	mov	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d907      	bls.n	8004098 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8004088:	2301      	movs	r3, #1
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	e004      	b.n	8004098 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800408e:	4b11      	ldr	r3, [pc, #68]	@ (80040d4 <xTaskIncrementTick+0x16c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3301      	adds	r3, #1
 8004094:	4a0f      	ldr	r2, [pc, #60]	@ (80040d4 <xTaskIncrementTick+0x16c>)
 8004096:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004098:	4b0f      	ldr	r3, [pc, #60]	@ (80040d8 <xTaskIncrementTick+0x170>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 80040a0:	2301      	movs	r3, #1
 80040a2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80040a4:	697b      	ldr	r3, [r7, #20]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	200001e8 	.word	0x200001e8
 80040b4:	200001d0 	.word	0x200001d0
 80040b8:	200001c8 	.word	0x200001c8
 80040bc:	200001cc 	.word	0x200001cc
 80040c0:	200001e0 	.word	0x200001e0
 80040c4:	200001e4 	.word	0x200001e4
 80040c8:	200001d4 	.word	0x200001d4
 80040cc:	2000013c 	.word	0x2000013c
 80040d0:	20000138 	.word	0x20000138
 80040d4:	200001d8 	.word	0x200001d8
 80040d8:	200001dc 	.word	0x200001dc

080040dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040e2:	4b27      	ldr	r3, [pc, #156]	@ (8004180 <vTaskSwitchContext+0xa4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040ea:	4b26      	ldr	r3, [pc, #152]	@ (8004184 <vTaskSwitchContext+0xa8>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040f0:	e040      	b.n	8004174 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80040f2:	4b24      	ldr	r3, [pc, #144]	@ (8004184 <vTaskSwitchContext+0xa8>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040f8:	4b23      	ldr	r3, [pc, #140]	@ (8004188 <vTaskSwitchContext+0xac>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	fab3 f383 	clz	r3, r3
 8004104:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004106:	7afb      	ldrb	r3, [r7, #11]
 8004108:	f1c3 031f 	rsb	r3, r3, #31
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	491f      	ldr	r1, [pc, #124]	@ (800418c <vTaskSwitchContext+0xb0>)
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	4613      	mov	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10b      	bne.n	800413a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	607b      	str	r3, [r7, #4]
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop
 8004138:	e7fd      	b.n	8004136 <vTaskSwitchContext+0x5a>
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4613      	mov	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4a11      	ldr	r2, [pc, #68]	@ (800418c <vTaskSwitchContext+0xb0>)
 8004146:	4413      	add	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	605a      	str	r2, [r3, #4]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	3308      	adds	r3, #8
 800415c:	429a      	cmp	r2, r3
 800415e:	d104      	bne.n	800416a <vTaskSwitchContext+0x8e>
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	605a      	str	r2, [r3, #4]
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4a07      	ldr	r2, [pc, #28]	@ (8004190 <vTaskSwitchContext+0xb4>)
 8004172:	6013      	str	r3, [r2, #0]
}
 8004174:	bf00      	nop
 8004176:	371c      	adds	r7, #28
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	200001e8 	.word	0x200001e8
 8004184:	200001dc 	.word	0x200001dc
 8004188:	200001d4 	.word	0x200001d4
 800418c:	2000013c 	.word	0x2000013c
 8004190:	20000138 	.word	0x20000138

08004194 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800419a:	4b0c      	ldr	r3, [pc, #48]	@ (80041cc <prvResetNextTaskUnblockTime+0x38>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d104      	bne.n	80041ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041a4:	4b0a      	ldr	r3, [pc, #40]	@ (80041d0 <prvResetNextTaskUnblockTime+0x3c>)
 80041a6:	f04f 32ff 	mov.w	r2, #4294967295
 80041aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041ac:	e008      	b.n	80041c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ae:	4b07      	ldr	r3, [pc, #28]	@ (80041cc <prvResetNextTaskUnblockTime+0x38>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	4a04      	ldr	r2, [pc, #16]	@ (80041d0 <prvResetNextTaskUnblockTime+0x3c>)
 80041be:	6013      	str	r3, [r2, #0]
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	200001c8 	.word	0x200001c8
 80041d0:	200001e4 	.word	0x200001e4
	...

080041e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80041e0:	4b07      	ldr	r3, [pc, #28]	@ (8004200 <pxCurrentTCBConst2>)
 80041e2:	6819      	ldr	r1, [r3, #0]
 80041e4:	6808      	ldr	r0, [r1, #0]
 80041e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ea:	f380 8809 	msr	PSP, r0
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f04f 0000 	mov.w	r0, #0
 80041f6:	f380 8811 	msr	BASEPRI, r0
 80041fa:	4770      	bx	lr
 80041fc:	f3af 8000 	nop.w

08004200 <pxCurrentTCBConst2>:
 8004200:	20000138 	.word	0x20000138
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop
	...

08004210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004210:	f3ef 8009 	mrs	r0, PSP
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	4b15      	ldr	r3, [pc, #84]	@ (8004270 <pxCurrentTCBConst>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	f01e 0f10 	tst.w	lr, #16
 8004220:	bf08      	it	eq
 8004222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800422a:	6010      	str	r0, [r2, #0]
 800422c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004230:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004234:	f380 8811 	msr	BASEPRI, r0
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f7ff ff4c 	bl	80040dc <vTaskSwitchContext>
 8004244:	f04f 0000 	mov.w	r0, #0
 8004248:	f380 8811 	msr	BASEPRI, r0
 800424c:	bc09      	pop	{r0, r3}
 800424e:	6819      	ldr	r1, [r3, #0]
 8004250:	6808      	ldr	r0, [r1, #0]
 8004252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004256:	f01e 0f10 	tst.w	lr, #16
 800425a:	bf08      	it	eq
 800425c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004260:	f380 8809 	msr	PSP, r0
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	f3af 8000 	nop.w

08004270 <pxCurrentTCBConst>:
 8004270:	20000138 	.word	0x20000138
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004274:	bf00      	nop
 8004276:	bf00      	nop

08004278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
	__asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	607b      	str	r3, [r7, #4]
}
 8004290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004292:	f7ff fe69 	bl	8003f68 <xTaskIncrementTick>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800429c:	4b06      	ldr	r3, [pc, #24]	@ (80042b8 <SysTick_Handler+0x40>)
 800429e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	2300      	movs	r3, #0
 80042a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80042ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	e000ed04 	.word	0xe000ed04

080042bc <memset>:
 80042bc:	4402      	add	r2, r0
 80042be:	4603      	mov	r3, r0
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d100      	bne.n	80042c6 <memset+0xa>
 80042c4:	4770      	bx	lr
 80042c6:	f803 1b01 	strb.w	r1, [r3], #1
 80042ca:	e7f9      	b.n	80042c0 <memset+0x4>

080042cc <__libc_init_array>:
 80042cc:	b570      	push	{r4, r5, r6, lr}
 80042ce:	4d0d      	ldr	r5, [pc, #52]	@ (8004304 <__libc_init_array+0x38>)
 80042d0:	4c0d      	ldr	r4, [pc, #52]	@ (8004308 <__libc_init_array+0x3c>)
 80042d2:	1b64      	subs	r4, r4, r5
 80042d4:	10a4      	asrs	r4, r4, #2
 80042d6:	2600      	movs	r6, #0
 80042d8:	42a6      	cmp	r6, r4
 80042da:	d109      	bne.n	80042f0 <__libc_init_array+0x24>
 80042dc:	4d0b      	ldr	r5, [pc, #44]	@ (800430c <__libc_init_array+0x40>)
 80042de:	4c0c      	ldr	r4, [pc, #48]	@ (8004310 <__libc_init_array+0x44>)
 80042e0:	f000 f818 	bl	8004314 <_init>
 80042e4:	1b64      	subs	r4, r4, r5
 80042e6:	10a4      	asrs	r4, r4, #2
 80042e8:	2600      	movs	r6, #0
 80042ea:	42a6      	cmp	r6, r4
 80042ec:	d105      	bne.n	80042fa <__libc_init_array+0x2e>
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
 80042f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80042f4:	4798      	blx	r3
 80042f6:	3601      	adds	r6, #1
 80042f8:	e7ee      	b.n	80042d8 <__libc_init_array+0xc>
 80042fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80042fe:	4798      	blx	r3
 8004300:	3601      	adds	r6, #1
 8004302:	e7f2      	b.n	80042ea <__libc_init_array+0x1e>
 8004304:	0800434c 	.word	0x0800434c
 8004308:	0800434c 	.word	0x0800434c
 800430c:	0800434c 	.word	0x0800434c
 8004310:	08004350 	.word	0x08004350

08004314 <_init>:
 8004314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004316:	bf00      	nop
 8004318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800431a:	bc08      	pop	{r3}
 800431c:	469e      	mov	lr, r3
 800431e:	4770      	bx	lr

08004320 <_fini>:
 8004320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004322:	bf00      	nop
 8004324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004326:	bc08      	pop	{r3}
 8004328:	469e      	mov	lr, r3
 800432a:	4770      	bx	lr
