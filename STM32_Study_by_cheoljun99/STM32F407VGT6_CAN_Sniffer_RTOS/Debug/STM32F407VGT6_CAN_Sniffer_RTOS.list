
STM32F407VGT6_CAN_Sniffer_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08008974  08008974  00009974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c10  08008c10  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  08008c10  08008c10  00009c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c18  08008c18  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c18  08008c18  00009c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c1c  08008c1c  00009c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008c20  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a060  2**0
                  CONTENTS
 10 .bss          00004208  20000060  20000060  0000a060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004268  20004268  0000a060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013da4  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000338b  00000000  00000000  0001de34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b8  00000000  00000000  000211c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f11  00000000  00000000  00022578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d55  00000000  00000000  00023489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014b11  00000000  00000000  000471de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d675d  00000000  00000000  0005bcef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013244c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000580c  00000000  00000000  00132490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009f  00000000  00000000  00137c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800895c 	.word	0x0800895c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800895c 	.word	0x0800895c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <cobs_encode>:
 *                 operation and the length of the result (that was written to
 *                 dst_buf_ptr)
 */
cobs_encode_result cobs_encode(void * dst_buf_ptr, size_t dst_buf_len,
                               const void * src_ptr, size_t src_len)
{
 8000580:	b480      	push	{r7}
 8000582:	b08f      	sub	sp, #60	@ 0x3c
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
 800058c:	603b      	str	r3, [r7, #0]
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	2300      	movs	r3, #0
 8000594:	753b      	strb	r3, [r7, #20]
    const uint8_t *     src_read_ptr        = src_ptr;
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	637b      	str	r3, [r7, #52]	@ 0x34
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800059e:	4413      	add	r3, r2
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t *           dst_buf_start_ptr   = dst_buf_ptr;
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	623b      	str	r3, [r7, #32]
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4413      	add	r3, r2
 80005ac:	61fb      	str	r3, [r7, #28]
    uint8_t *           dst_code_write_ptr  = dst_buf_ptr;
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	633b      	str	r3, [r7, #48]	@ 0x30
    uint8_t *           dst_write_ptr       = dst_code_write_ptr + 1;
 80005b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005b4:	3301      	adds	r3, #1
 80005b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t             src_byte            = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	76fb      	strb	r3, [r7, #27]
    uint8_t             search_len          = 1;
 80005bc:	2301      	movs	r3, #1
 80005be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b


    /* First, do a NULL pointer check and return immediately if it fails. */
    if ((dst_buf_ptr == NULL) || (src_ptr == NULL))
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d002      	beq.n	80005ce <cobs_encode+0x4e>
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d10a      	bne.n	80005e4 <cobs_encode+0x64>
    {
        result.status = COBS_ENCODE_NULL_POINTER;
 80005ce:	2301      	movs	r3, #1
 80005d0:	753b      	strb	r3, [r7, #20]
        return result;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	461a      	mov	r2, r3
 80005d6:	f107 0310 	add.w	r3, r7, #16
 80005da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80005de:	e882 0003 	stmia.w	r2, {r0, r1}
 80005e2:	e05f      	b.n	80006a4 <cobs_encode+0x124>
    }

    if (src_len != 0)
 80005e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d040      	beq.n	800066c <cobs_encode+0xec>
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
 80005ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d305      	bcc.n	80005fe <cobs_encode+0x7e>
            {
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
 80005f2:	7d3b      	ldrb	r3, [r7, #20]
 80005f4:	f043 0302 	orr.w	r3, r3, #2
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	753b      	strb	r3, [r7, #20]
                break;
 80005fc:	e036      	b.n	800066c <cobs_encode+0xec>
            }

            src_byte = *src_read_ptr++;
 80005fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000600:	1c5a      	adds	r2, r3, #1
 8000602:	637a      	str	r2, [r7, #52]	@ 0x34
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	76fb      	strb	r3, [r7, #27]
            if (src_byte == 0)
 8000608:	7efb      	ldrb	r3, [r7, #27]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d10f      	bne.n	800062e <cobs_encode+0xae>
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
 800060e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000610:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000614:	701a      	strb	r2, [r3, #0]
                dst_code_write_ptr = dst_write_ptr++;
 8000616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000618:	1c5a      	adds	r2, r3, #1
 800061a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800061c:	633b      	str	r3, [r7, #48]	@ 0x30
                search_len = 1;
 800061e:	2301      	movs	r3, #1
 8000620:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                if (src_read_ptr >= src_end_ptr)
 8000624:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000628:	429a      	cmp	r2, r3
 800062a:	d3de      	bcc.n	80005ea <cobs_encode+0x6a>
                {
                    break;
 800062c:	e01e      	b.n	800066c <cobs_encode+0xec>
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
 800062e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000630:	1c5a      	adds	r2, r3, #1
 8000632:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000634:	7efa      	ldrb	r2, [r7, #27]
 8000636:	701a      	strb	r2, [r3, #0]
                search_len++;
 8000638:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800063c:	3301      	adds	r3, #1
 800063e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                if (src_read_ptr >= src_end_ptr)
 8000642:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000646:	429a      	cmp	r2, r3
 8000648:	d20f      	bcs.n	800066a <cobs_encode+0xea>
                {
                    break;
                }
                if (search_len == 0xFF)
 800064a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800064e:	2bff      	cmp	r3, #255	@ 0xff
 8000650:	d1cb      	bne.n	80005ea <cobs_encode+0x6a>
                {
                    /* We have a long string of non-zero bytes, so we need
                     * to write out a length code of 0xFF. */
                    *dst_code_write_ptr = search_len;
 8000652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000654:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000658:	701a      	strb	r2, [r3, #0]
                    dst_code_write_ptr = dst_write_ptr++;
 800065a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800065c:	1c5a      	adds	r2, r3, #1
 800065e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000660:	633b      	str	r3, [r7, #48]	@ 0x30
                    search_len = 1;
 8000662:	2301      	movs	r3, #1
 8000664:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            if (dst_write_ptr >= dst_buf_end_ptr)
 8000668:	e7bf      	b.n	80005ea <cobs_encode+0x6a>
                    break;
 800066a:	bf00      	nop

    /* We've reached the end of the source data (or possibly run out of output buffer)
     * Finalise the remaining output. In particular, write the code (length) byte.
     * Update the pointer to calculate the final output length.
     */
    if (dst_code_write_ptr >= dst_buf_end_ptr)
 800066c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800066e:	69fb      	ldr	r3, [r7, #28]
 8000670:	429a      	cmp	r2, r3
 8000672:	d307      	bcc.n	8000684 <cobs_encode+0x104>
    {
        /* We've run out of output buffer to write the code byte. */
        result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
 8000674:	7d3b      	ldrb	r3, [r7, #20]
 8000676:	f043 0302 	orr.w	r3, r3, #2
 800067a:	b2db      	uxtb	r3, r3
 800067c:	753b      	strb	r3, [r7, #20]
        dst_write_ptr = dst_buf_end_ptr;
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000682:	e003      	b.n	800068c <cobs_encode+0x10c>
    }
    else
    {
        /* Write the last code (length) byte. */
        *dst_code_write_ptr = search_len;
 8000684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000686:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800068a:	701a      	strb	r2, [r3, #0]
    }

    /* Calculate the output length, from the value of dst_code_write_ptr */
    result.out_len = dst_write_ptr - dst_buf_start_ptr;
 800068c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800068e:	6a3b      	ldr	r3, [r7, #32]
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	613b      	str	r3, [r7, #16]

    return result;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	461a      	mov	r2, r3
 8000698:	f107 0310 	add.w	r3, r7, #16
 800069c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006a0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80006a4:	68f8      	ldr	r0, [r7, #12]
 80006a6:	373c      	adds	r7, #60	@ 0x3c
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <cobs_decode>:
 *                 operation and the length of the result (that was written to
 *                 dst_buf_ptr)
 */
cobs_decode_result cobs_decode(void * dst_buf_ptr, size_t dst_buf_len,
                               const void * src_ptr, size_t src_len)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b08f      	sub	sp, #60	@ 0x3c
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	603b      	str	r3, [r7, #0]
    cobs_decode_result  result              = { 0, COBS_DECODE_OK };
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	2300      	movs	r3, #0
 80006c4:	753b      	strb	r3, [r7, #20]
    const uint8_t *     src_read_ptr        = src_ptr;
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	637b      	str	r3, [r7, #52]	@ 0x34
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
 80006ca:	683a      	ldr	r2, [r7, #0]
 80006cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006ce:	4413      	add	r3, r2
 80006d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t *           dst_buf_start_ptr   = dst_buf_ptr;
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4413      	add	r3, r2
 80006dc:	623b      	str	r3, [r7, #32]
    uint8_t *           dst_write_ptr       = dst_buf_ptr;
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	633b      	str	r3, [r7, #48]	@ 0x30
    uint8_t             i;
    uint8_t             len_code;


    /* First, do a NULL pointer check and return immediately if it fails. */
    if ((dst_buf_ptr == NULL) || (src_ptr == NULL))
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d002      	beq.n	80006ee <cobs_decode+0x3e>
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d10a      	bne.n	8000704 <cobs_decode+0x54>
    {
        result.status = COBS_DECODE_NULL_POINTER;
 80006ee:	2301      	movs	r3, #1
 80006f0:	753b      	strb	r3, [r7, #20]
        return result;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	461a      	mov	r2, r3
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006fe:	e882 0003 	stmia.w	r2, {r0, r1}
 8000702:	e07e      	b.n	8000802 <cobs_decode+0x152>
    }

    if (src_len != 0)
 8000704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000706:	2b00      	cmp	r3, #0
 8000708:	d06f      	beq.n	80007ea <cobs_decode+0x13a>
    {
        for (;;)
        {
            len_code = *src_read_ptr++;
 800070a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800070c:	1c5a      	adds	r2, r3, #1
 800070e:	637a      	str	r2, [r7, #52]	@ 0x34
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            if (len_code == 0)
 8000716:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800071a:	2b00      	cmp	r3, #0
 800071c:	d105      	bne.n	800072a <cobs_decode+0x7a>
            {
                result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
 800071e:	7d3b      	ldrb	r3, [r7, #20]
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	b2db      	uxtb	r3, r3
 8000726:	753b      	strb	r3, [r7, #20]
                break;
 8000728:	e05f      	b.n	80007ea <cobs_decode+0x13a>
            }
            len_code--;
 800072a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800072e:	3b01      	subs	r3, #1
 8000730:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

            /* Check length code against remaining input bytes */
            remaining_bytes = src_end_ptr - src_read_ptr;
 8000734:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	61fb      	str	r3, [r7, #28]
            if (len_code > remaining_bytes)
 800073c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000740:	69fa      	ldr	r2, [r7, #28]
 8000742:	429a      	cmp	r2, r3
 8000744:	d207      	bcs.n	8000756 <cobs_decode+0xa6>
            {
                result.status |= COBS_DECODE_INPUT_TOO_SHORT;
 8000746:	7d3b      	ldrb	r3, [r7, #20]
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	b2db      	uxtb	r3, r3
 800074e:	753b      	strb	r3, [r7, #20]
                len_code = remaining_bytes;
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }

            /* Check length code against remaining output buffer space */
            remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
 8000756:	6a3a      	ldr	r2, [r7, #32]
 8000758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800075a:	1ad3      	subs	r3, r2, r3
 800075c:	61fb      	str	r3, [r7, #28]
            if (len_code > remaining_bytes)
 800075e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000762:	69fa      	ldr	r2, [r7, #28]
 8000764:	429a      	cmp	r2, r3
 8000766:	d207      	bcs.n	8000778 <cobs_decode+0xc8>
            {
                result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
 8000768:	7d3b      	ldrb	r3, [r7, #20]
 800076a:	f043 0302 	orr.w	r3, r3, #2
 800076e:	b2db      	uxtb	r3, r3
 8000770:	753b      	strb	r3, [r7, #20]
                len_code = remaining_bytes;
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }

            for (i = len_code; i != 0; i--)
 8000778:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800077c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000780:	e016      	b.n	80007b0 <cobs_decode+0x100>
            {
                src_byte = *src_read_ptr++;
 8000782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000784:	1c5a      	adds	r2, r3, #1
 8000786:	637a      	str	r2, [r7, #52]	@ 0x34
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	76fb      	strb	r3, [r7, #27]
                if (src_byte == 0)
 800078c:	7efb      	ldrb	r3, [r7, #27]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d104      	bne.n	800079c <cobs_decode+0xec>
                {
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
 8000792:	7d3b      	ldrb	r3, [r7, #20]
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	b2db      	uxtb	r3, r3
 800079a:	753b      	strb	r3, [r7, #20]
                }
                *dst_write_ptr++ = src_byte;
 800079c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800079e:	1c5a      	adds	r2, r3, #1
 80007a0:	633a      	str	r2, [r7, #48]	@ 0x30
 80007a2:	7efa      	ldrb	r2, [r7, #27]
 80007a4:	701a      	strb	r2, [r3, #0]
            for (i = len_code; i != 0; i--)
 80007a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007aa:	3b01      	subs	r3, #1
 80007ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80007b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1e4      	bne.n	8000782 <cobs_decode+0xd2>
            }

            if (src_read_ptr >= src_end_ptr)
 80007b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007bc:	429a      	cmp	r2, r3
 80007be:	d213      	bcs.n	80007e8 <cobs_decode+0x138>
            {
                break;
            }

            /* Add a zero to the end */
            if (len_code != 0xFE)
 80007c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80007c4:	2bfe      	cmp	r3, #254	@ 0xfe
 80007c6:	d0a0      	beq.n	800070a <cobs_decode+0x5a>
            {
                if (dst_write_ptr >= dst_buf_end_ptr)
 80007c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80007ca:	6a3b      	ldr	r3, [r7, #32]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d305      	bcc.n	80007dc <cobs_decode+0x12c>
                {
                    result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
 80007d0:	7d3b      	ldrb	r3, [r7, #20]
 80007d2:	f043 0302 	orr.w	r3, r3, #2
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	753b      	strb	r3, [r7, #20]
                    break;
 80007da:	e006      	b.n	80007ea <cobs_decode+0x13a>
                }
                *dst_write_ptr++ = 0;
 80007dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007de:	1c5a      	adds	r2, r3, #1
 80007e0:	633a      	str	r2, [r7, #48]	@ 0x30
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
            len_code = *src_read_ptr++;
 80007e6:	e790      	b.n	800070a <cobs_decode+0x5a>
                break;
 80007e8:	bf00      	nop
            }
        }
    }

    result.out_len = dst_write_ptr - dst_buf_start_ptr;
 80007ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80007ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	613b      	str	r3, [r7, #16]

    return result;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	461a      	mov	r2, r3
 80007f6:	f107 0310 	add.w	r3, r7, #16
 80007fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007fe:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000802:	68f8      	ldr	r0, [r7, #12]
 8000804:	373c      	adds	r7, #60	@ 0x3c
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
	...

08000810 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4a07      	ldr	r2, [pc, #28]	@ (800083c <vApplicationGetIdleTaskMemory+0x2c>)
 8000820:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	4a06      	ldr	r2, [pc, #24]	@ (8000840 <vApplicationGetIdleTaskMemory+0x30>)
 8000826:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2280      	movs	r2, #128	@ 0x80
 800082c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	2000007c 	.word	0x2000007c
 8000840:	200000d0 	.word	0x200000d0

08000844 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000848:	f3bf 8f4f 	dsb	sy
}
 800084c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <__NVIC_SystemReset+0x24>)
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000856:	4904      	ldr	r1, [pc, #16]	@ (8000868 <__NVIC_SystemReset+0x24>)
 8000858:	4b04      	ldr	r3, [pc, #16]	@ (800086c <__NVIC_SystemReset+0x28>)
 800085a:	4313      	orrs	r3, r2
 800085c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800085e:	f3bf 8f4f 	dsb	sy
}
 8000862:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <__NVIC_SystemReset+0x20>
 8000868:	e000ed00 	.word	0xe000ed00
 800086c:	05fa0004 	.word	0x05fa0004

08000870 <bootLEDIndicator>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define NUMBER_BLINKS 20

void bootLEDIndicator(void) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
	int blinkCounter = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
	while (blinkCounter < NUMBER_BLINKS) {
 800087a:	e00a      	b.n	8000892 <bootLEDIndicator+0x22>
		HAL_GPIO_TogglePin(ORANGE_LED_SYSTEM_GPIO_Port, ORANGE_LED_SYSTEM_Pin);
 800087c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000880:	480a      	ldr	r0, [pc, #40]	@ (80008ac <bootLEDIndicator+0x3c>)
 8000882:	f002 fd76 	bl	8003372 <HAL_GPIO_TogglePin>
		HAL_Delay(30);
 8000886:	201e      	movs	r0, #30
 8000888:	f001 fa74 	bl	8001d74 <HAL_Delay>
		blinkCounter++;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3301      	adds	r3, #1
 8000890:	607b      	str	r3, [r7, #4]
	while (blinkCounter < NUMBER_BLINKS) {
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b13      	cmp	r3, #19
 8000896:	ddf1      	ble.n	800087c <bootLEDIndicator+0xc>
	}
	HAL_GPIO_WritePin(ORANGE_LED_SYSTEM_GPIO_Port, ORANGE_LED_SYSTEM_Pin, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800089e:	4803      	ldr	r0, [pc, #12]	@ (80008ac <bootLEDIndicator+0x3c>)
 80008a0:	f002 fd4e 	bl	8003340 <HAL_GPIO_WritePin>
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40020c00 	.word	0x40020c00

080008b0 <substr>:
void substr(char *str, char *sub, int start, int len) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
 80008bc:	603b      	str	r3, [r7, #0]
	memcpy(sub, &str[start], len);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	4413      	add	r3, r2
 80008c4:	683a      	ldr	r2, [r7, #0]
 80008c6:	4619      	mov	r1, r3
 80008c8:	68b8      	ldr	r0, [r7, #8]
 80008ca:	f007 fbfb 	bl	80080c4 <memcpy>
	sub[len] = '\0';
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	4413      	add	r3, r2
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <toInteger>:

int toInteger(uint8_t *stringToConvert, int len) {
 80008e0:	b480      	push	{r7}
 80008e2:	b087      	sub	sp, #28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
	int counter = len - 1;
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	617b      	str	r3, [r7, #20]
	int exp = 1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	613b      	str	r3, [r7, #16]
	int value = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
	while (counter >= 0) {
 80008f8:	e013      	b.n	8000922 <toInteger+0x42>
		value = value + (stringToConvert[counter] - '0') * exp;
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	3b30      	subs	r3, #48	@ 0x30
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	fb02 f303 	mul.w	r3, r2, r3
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	4413      	add	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]
		exp = exp * 10;
 8000910:	693a      	ldr	r2, [r7, #16]
 8000912:	4613      	mov	r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	613b      	str	r3, [r7, #16]
		counter--;
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	3b01      	subs	r3, #1
 8000920:	617b      	str	r3, [r7, #20]
	while (counter >= 0) {
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	2b00      	cmp	r3, #0
 8000926:	dae8      	bge.n	80008fa <toInteger+0x1a>
	}
	return value;
 8000928:	68fb      	ldr	r3, [r7, #12]
}
 800092a:	4618      	mov	r0, r3
 800092c:	371c      	adds	r7, #28
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <sendCANMessage>:
uint32_t sendCANMessage(uint8_t dlc, uint32_t msgID, bool isRTR,bool isStandard, uint8_t *data) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	@ 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6039      	str	r1, [r7, #0]
 8000940:	4611      	mov	r1, r2
 8000942:	461a      	mov	r2, r3
 8000944:	4603      	mov	r3, r0
 8000946:	71fb      	strb	r3, [r7, #7]
 8000948:	460b      	mov	r3, r1
 800094a:	71bb      	strb	r3, [r7, #6]
 800094c:	4613      	mov	r3, r2
 800094e:	717b      	strb	r3, [r7, #5]

	uint32_t TxMailbox;
	CAN_TxHeaderTypeDef pHeader;
	pHeader.DLC = dlc;
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	61fb      	str	r3, [r7, #28]

	if (isStandard) {
 8000954:	797b      	ldrb	r3, [r7, #5]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d004      	beq.n	8000964 <sendCANMessage+0x2c>
		pHeader.IDE = CAN_ID_STD;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
		pHeader.StdId = msgID;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	e003      	b.n	800096c <sendCANMessage+0x34>
	} else {
		pHeader.IDE = CAN_ID_EXT;
 8000964:	2304      	movs	r3, #4
 8000966:	617b      	str	r3, [r7, #20]
		pHeader.ExtId = msgID;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	613b      	str	r3, [r7, #16]
	}
	if (isRTR) {
 800096c:	79bb      	ldrb	r3, [r7, #6]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d002      	beq.n	8000978 <sendCANMessage+0x40>
		pHeader.RTR = CAN_RTR_REMOTE;
 8000972:	2302      	movs	r3, #2
 8000974:	61bb      	str	r3, [r7, #24]
 8000976:	e001      	b.n	800097c <sendCANMessage+0x44>
	} else {
		pHeader.RTR = CAN_RTR_DATA;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
	}

	HAL_GPIO_TogglePin(BLUE_LED_CANTX_GPIO_Port,BLUE_LED_CANTX_Pin);
 800097c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000980:	4807      	ldr	r0, [pc, #28]	@ (80009a0 <sendCANMessage+0x68>)
 8000982:	f002 fcf6 	bl	8003372 <HAL_GPIO_TogglePin>

	HAL_CAN_AddTxMessage(&hcan1, &pHeader, data, &TxMailbox);
 8000986:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800098a:	f107 010c 	add.w	r1, r7, #12
 800098e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000990:	4804      	ldr	r0, [pc, #16]	@ (80009a4 <sendCANMessage+0x6c>)
 8000992:	f001 fc9e 	bl	80022d2 <HAL_CAN_AddTxMessage>
	return TxMailbox;
 8000996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000998:	4618      	mov	r0, r3
 800099a:	3728      	adds	r7, #40	@ 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40020c00 	.word	0x40020c00
 80009a4:	200002d0 	.word	0x200002d0

080009a8 <setSinfferCANFilter>:

void setSinfferCANFilter(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
	/* Default filter - accept all to CAN_FIFO*/
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdHigh = 0x00005;
 80009b2:	2305      	movs	r3, #5
 80009b4:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterBank = 0x0000;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80009be:	2301      	movs	r3, #1
 80009c0:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x200 << 5;  //11-bit ID, in top bits
 80009c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009c6:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80009dc:	463b      	mov	r3, r7
 80009de:	4619      	mov	r1, r3
 80009e0:	4803      	ldr	r0, [pc, #12]	@ (80009f0 <setSinfferCANFilter+0x48>)
 80009e2:	f001 fb09 	bl	8001ff8 <HAL_CAN_ConfigFilter>
}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	@ 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200002d0 	.word	0x200002d0

080009f4 <processMessageComand>:

void processMessageComand(char *decodedCommand) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b09c      	sub	sp, #112	@ 0x70
 80009f8:	af02      	add	r7, sp, #8
 80009fa:	6078      	str	r0, [r7, #4]
	uint8_t cursor = 1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	if (decodedCommand[cursor] == 'T') {
 8000a02:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b54      	cmp	r3, #84	@ 0x54
 8000a0e:	d140      	bne.n	8000a92 <processMessageComand+0x9e>
		cursor++;
 8000a10:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000a14:	3301      	adds	r3, #1
 8000a16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		uint8_t messageID_str[9];
		substr((char*) decodedCommand, (char*) messageID_str, cursor, 9);
 8000a1a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000a1e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000a22:	2309      	movs	r3, #9
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff ff43 	bl	80008b0 <substr>

		int msgID = toInteger(messageID_str, 9);
 8000a2a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000a2e:	2109      	movs	r1, #9
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff55 	bl	80008e0 <toInteger>
 8000a36:	64b8      	str	r0, [r7, #72]	@ 0x48
		cursor += 9;
 8000a38:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000a3c:	3309      	adds	r3, #9
 8000a3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

		uint8_t dlc_str[1];
		substr((char*) decodedCommand, (char*) dlc_str, cursor, 1);
 8000a42:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000a46:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ff2f 	bl	80008b0 <substr>
		uint8_t dlc = atoi((char*) dlc_str);
 8000a52:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a56:	4618      	mov	r0, r3
 8000a58:	f007 fa50 	bl	8007efc <atoi>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

		cursor++;
 8000a62:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000a66:	3301      	adds	r3, #1
 8000a68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		uint8_t data[8];
		substr((char*) decodedCommand, (char*) data, cursor, 8);
 8000a6c:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000a70:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000a74:	2308      	movs	r3, #8
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff ff1a 	bl	80008b0 <substr>

		sendCANMessage(dlc, msgID, false, false, data);
 8000a7c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000a7e:	f897 0047 	ldrb.w	r0, [r7, #71]	@ 0x47
 8000a82:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	2300      	movs	r3, #0
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f7ff ff54 	bl	8000938 <sendCANMessage>
		uint8_t dlc = atoi((char*) dlc_str);

		sendCANMessage(dlc, msgID, true, true, 0x00);
	}

}
 8000a90:	e0bc      	b.n	8000c0c <processMessageComand+0x218>
	} else if (decodedCommand[cursor] == 'R') {
 8000a92:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b52      	cmp	r3, #82	@ 0x52
 8000a9e:	d133      	bne.n	8000b08 <processMessageComand+0x114>
		cursor++;
 8000aa0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		substr((char*) decodedCommand, (char*) messageID_str, cursor, 9);
 8000aaa:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000aae:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000ab2:	2309      	movs	r3, #9
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff fefb 	bl	80008b0 <substr>
		int msgID = toInteger(messageID_str, 9);
 8000aba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000abe:	2109      	movs	r1, #9
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff0d 	bl	80008e0 <toInteger>
 8000ac6:	6538      	str	r0, [r7, #80]	@ 0x50
		cursor += 9;
 8000ac8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000acc:	3309      	adds	r3, #9
 8000ace:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		substr((char*) decodedCommand, (char*) dlc_str, cursor, 1);
 8000ad2:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000ad6:	f107 0120 	add.w	r1, r7, #32
 8000ada:	2301      	movs	r3, #1
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff fee7 	bl	80008b0 <substr>
		uint8_t dlc = toInteger(dlc_str, 1);
 8000ae2:	f107 0320 	add.w	r3, r7, #32
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fef9 	bl	80008e0 <toInteger>
 8000aee:	4603      	mov	r3, r0
 8000af0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		sendCANMessage(dlc, msgID, true, false, 0x00);
 8000af4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000af6:	f897 004f 	ldrb.w	r0, [r7, #79]	@ 0x4f
 8000afa:	2300      	movs	r3, #0
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	2300      	movs	r3, #0
 8000b00:	2201      	movs	r2, #1
 8000b02:	f7ff ff19 	bl	8000938 <sendCANMessage>
}
 8000b06:	e081      	b.n	8000c0c <processMessageComand+0x218>
	} else if (decodedCommand[cursor] == 't') {
 8000b08:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	4413      	add	r3, r2
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b74      	cmp	r3, #116	@ 0x74
 8000b14:	d141      	bne.n	8000b9a <processMessageComand+0x1a6>
		cursor++;
 8000b16:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		substr((char*) decodedCommand, (char*) messageID_str, cursor, 4);
 8000b20:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000b24:	f107 011c 	add.w	r1, r7, #28
 8000b28:	2304      	movs	r3, #4
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff fec0 	bl	80008b0 <substr>
		int msgID = toInteger(messageID_str, 4);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	2104      	movs	r1, #4
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fed2 	bl	80008e0 <toInteger>
 8000b3c:	65b8      	str	r0, [r7, #88]	@ 0x58
		cursor += 4;
 8000b3e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000b42:	3304      	adds	r3, #4
 8000b44:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		substr((char*) decodedCommand, (char*) dlc_str, cursor, 1);
 8000b48:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000b4c:	f107 0118 	add.w	r1, r7, #24
 8000b50:	2301      	movs	r3, #1
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff feac 	bl	80008b0 <substr>
		uint8_t dlc = toInteger(dlc_str, 1);
 8000b58:	f107 0318 	add.w	r3, r7, #24
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff febe 	bl	80008e0 <toInteger>
 8000b64:	4603      	mov	r3, r0
 8000b66:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		cursor++;
 8000b6a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000b6e:	3301      	adds	r3, #1
 8000b70:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		substr((char*) decodedCommand, (char*) data, cursor, 8);
 8000b74:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000b78:	f107 0110 	add.w	r1, r7, #16
 8000b7c:	2308      	movs	r3, #8
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff fe96 	bl	80008b0 <substr>
		sendCANMessage(dlc, msgID, false, true, data);
 8000b84:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8000b86:	f897 0057 	ldrb.w	r0, [r7, #87]	@ 0x57
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	2301      	movs	r3, #1
 8000b92:	2200      	movs	r2, #0
 8000b94:	f7ff fed0 	bl	8000938 <sendCANMessage>
}
 8000b98:	e038      	b.n	8000c0c <processMessageComand+0x218>
	} else if (decodedCommand[cursor] == 'r') {
 8000b9a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b72      	cmp	r3, #114	@ 0x72
 8000ba6:	d131      	bne.n	8000c0c <processMessageComand+0x218>
		cursor++;
 8000ba8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000bac:	3301      	adds	r3, #1
 8000bae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		substr((char*) decodedCommand, (char*) messageID_str, cursor, 4);
 8000bb2:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000bb6:	f107 010c 	add.w	r1, r7, #12
 8000bba:	2304      	movs	r3, #4
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff fe77 	bl	80008b0 <substr>
		int msgID = toInteger(messageID_str, 4);
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fe89 	bl	80008e0 <toInteger>
 8000bce:	6638      	str	r0, [r7, #96]	@ 0x60
		cursor += 4;
 8000bd0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		substr((char*) decodedCommand, (char*) dlc_str, cursor, 1);
 8000bda:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000bde:	f107 0108 	add.w	r1, r7, #8
 8000be2:	2301      	movs	r3, #1
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fe63 	bl	80008b0 <substr>
		uint8_t dlc = atoi((char*) dlc_str);
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f007 f984 	bl	8007efc <atoi>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		sendCANMessage(dlc, msgID, true, true, 0x00);
 8000bfa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000bfc:	f897 005f 	ldrb.w	r0, [r7, #95]	@ 0x5f
 8000c00:	2300      	movs	r3, #0
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2301      	movs	r3, #1
 8000c06:	2201      	movs	r2, #1
 8000c08:	f7ff fe96 	bl	8000938 <sendCANMessage>
}
 8000c0c:	bf00      	nop
 8000c0e:	3768      	adds	r7, #104	@ 0x68
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <processBitRateCommand>:

void processBitRateCommand(char *decodedCommand) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

	uint8_t bitrateSrt[3];
	substr((char*) decodedCommand, (char*) bitrateSrt, 1, 3);
 8000c1c:	f107 010c 	add.w	r1, r7, #12
 8000c20:	2303      	movs	r3, #3
 8000c22:	2201      	movs	r2, #1
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff fe43 	bl	80008b0 <substr>
	int bitRate = toInteger(bitrateSrt, 3);
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	2103      	movs	r1, #3
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fe55 	bl	80008e0 <toInteger>
 8000c36:	6138      	str	r0, [r7, #16]

	bool idetified = false;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	75fb      	strb	r3, [r7, #23]

	switch (bitRate) {
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c42:	d047      	beq.n	8000cd4 <processBitRateCommand+0xc0>
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c4a:	dc49      	bgt.n	8000ce0 <processBitRateCommand+0xcc>
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	2bfa      	cmp	r3, #250	@ 0xfa
 8000c50:	d03a      	beq.n	8000cc8 <processBitRateCommand+0xb4>
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	2bfa      	cmp	r3, #250	@ 0xfa
 8000c56:	dc43      	bgt.n	8000ce0 <processBitRateCommand+0xcc>
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	2b7d      	cmp	r3, #125	@ 0x7d
 8000c5c:	d02e      	beq.n	8000cbc <processBitRateCommand+0xa8>
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	2b7d      	cmp	r3, #125	@ 0x7d
 8000c62:	dc3d      	bgt.n	8000ce0 <processBitRateCommand+0xcc>
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	2b64      	cmp	r3, #100	@ 0x64
 8000c68:	d022      	beq.n	8000cb0 <processBitRateCommand+0x9c>
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	2b64      	cmp	r3, #100	@ 0x64
 8000c6e:	dc37      	bgt.n	8000ce0 <processBitRateCommand+0xcc>
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	2b32      	cmp	r3, #50	@ 0x32
 8000c74:	d016      	beq.n	8000ca4 <processBitRateCommand+0x90>
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	2b32      	cmp	r3, #50	@ 0x32
 8000c7a:	dc31      	bgt.n	8000ce0 <processBitRateCommand+0xcc>
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	2b0a      	cmp	r3, #10
 8000c80:	d003      	beq.n	8000c8a <processBitRateCommand+0x76>
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	2b14      	cmp	r3, #20
 8000c86:	d007      	beq.n	8000c98 <processBitRateCommand+0x84>
 8000c88:	e02a      	b.n	8000ce0 <processBitRateCommand+0xcc>
	case 10:
		hcan1.Init.Prescaler = 300;
 8000c8a:	4b22      	ldr	r3, [pc, #136]	@ (8000d14 <processBitRateCommand+0x100>)
 8000c8c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000c90:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000c92:	2301      	movs	r3, #1
 8000c94:	75fb      	strb	r3, [r7, #23]
		break;
 8000c96:	e023      	b.n	8000ce0 <processBitRateCommand+0xcc>
	case 20:
		hcan1.Init.Prescaler = 150;
 8000c98:	4b1e      	ldr	r3, [pc, #120]	@ (8000d14 <processBitRateCommand+0x100>)
 8000c9a:	2296      	movs	r2, #150	@ 0x96
 8000c9c:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	75fb      	strb	r3, [r7, #23]
		break;
 8000ca2:	e01d      	b.n	8000ce0 <processBitRateCommand+0xcc>
	case 50:
		hcan1.Init.Prescaler = 60;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <processBitRateCommand+0x100>)
 8000ca6:	223c      	movs	r2, #60	@ 0x3c
 8000ca8:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000caa:	2301      	movs	r3, #1
 8000cac:	75fb      	strb	r3, [r7, #23]
		break;
 8000cae:	e017      	b.n	8000ce0 <processBitRateCommand+0xcc>
	case 100:
		hcan1.Init.Prescaler = 30;
 8000cb0:	4b18      	ldr	r3, [pc, #96]	@ (8000d14 <processBitRateCommand+0x100>)
 8000cb2:	221e      	movs	r2, #30
 8000cb4:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	75fb      	strb	r3, [r7, #23]
		break;
 8000cba:	e011      	b.n	8000ce0 <processBitRateCommand+0xcc>
	case 125:
		hcan1.Init.Prescaler = 24;
 8000cbc:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <processBitRateCommand+0x100>)
 8000cbe:	2218      	movs	r2, #24
 8000cc0:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	75fb      	strb	r3, [r7, #23]
		break;
 8000cc6:	e00b      	b.n	8000ce0 <processBitRateCommand+0xcc>
	case 250:
		hcan1.Init.Prescaler = 12;
 8000cc8:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <processBitRateCommand+0x100>)
 8000cca:	220c      	movs	r2, #12
 8000ccc:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	75fb      	strb	r3, [r7, #23]
		break;
 8000cd2:	e005      	b.n	8000ce0 <processBitRateCommand+0xcc>
	case 500:
		hcan1.Init.Prescaler = 6;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d14 <processBitRateCommand+0x100>)
 8000cd6:	2206      	movs	r2, #6
 8000cd8:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	75fb      	strb	r3, [r7, #23]
		break;
 8000cde:	bf00      	nop
	}
	if (idetified) {
 8000ce0:	7dfb      	ldrb	r3, [r7, #23]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d012      	beq.n	8000d0c <processBitRateCommand+0xf8>
		HAL_CAN_DeInit(&hcan1);
 8000ce6:	480b      	ldr	r0, [pc, #44]	@ (8000d14 <processBitRateCommand+0x100>)
 8000ce8:	f001 f963 	bl	8001fb2 <HAL_CAN_DeInit>
		HAL_CAN_Init(&hcan1);
 8000cec:	4809      	ldr	r0, [pc, #36]	@ (8000d14 <processBitRateCommand+0x100>)
 8000cee:	f001 f865 	bl	8001dbc <HAL_CAN_Init>
		setSinfferCANFilter();
 8000cf2:	f7ff fe59 	bl	80009a8 <setSinfferCANFilter>
		HAL_CAN_Start(&hcan1);
 8000cf6:	4807      	ldr	r0, [pc, #28]	@ (8000d14 <processBitRateCommand+0x100>)
 8000cf8:	f001 fa5e 	bl	80021b8 <HAL_CAN_Start>
		if (snifferAtivityStatus != SNIFFER_STOPPED) {
 8000cfc:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <processBitRateCommand+0x104>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d003      	beq.n	8000d0c <processBitRateCommand+0xf8>
			HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000d04:	2102      	movs	r1, #2
 8000d06:	4803      	ldr	r0, [pc, #12]	@ (8000d14 <processBitRateCommand+0x100>)
 8000d08:	f001 fcd0 	bl	80026ac <HAL_CAN_ActivateNotification>
		}
	}
}
 8000d0c:	bf00      	nop
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200002d0 	.word	0x200002d0
 8000d18:	20000388 	.word	0x20000388

08000d1c <processLoopBackModeCommand>:
void processLoopBackModeCommand(char *decodedCommand) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

	uint8_t mode[2];
	bool idetified = false;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]
	substr((char*) decodedCommand, (char*) mode, 1, 2);
 8000d28:	f107 010c 	add.w	r1, r7, #12
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	2201      	movs	r2, #1
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff fdbd 	bl	80008b0 <substr>
	if (!strcmp((char*) mode, "LB")) {
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	492b      	ldr	r1, [pc, #172]	@ (8000de8 <processLoopBackModeCommand+0xcc>)
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fa47 	bl	80001d0 <strcmp>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d106      	bne.n	8000d56 <processLoopBackModeCommand+0x3a>
		hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000d48:	4b28      	ldr	r3, [pc, #160]	@ (8000dec <processLoopBackModeCommand+0xd0>)
 8000d4a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d4e:	609a      	str	r2, [r3, #8]
		idetified = true;
 8000d50:	2301      	movs	r3, #1
 8000d52:	73fb      	strb	r3, [r7, #15]
 8000d54:	e02d      	b.n	8000db2 <processLoopBackModeCommand+0x96>
	} else if (!strcmp((char*) mode, "SM")) {
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	4925      	ldr	r1, [pc, #148]	@ (8000df0 <processLoopBackModeCommand+0xd4>)
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fa37 	bl	80001d0 <strcmp>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d106      	bne.n	8000d76 <processLoopBackModeCommand+0x5a>
		hcan1.Init.Mode = CAN_MODE_SILENT;
 8000d68:	4b20      	ldr	r3, [pc, #128]	@ (8000dec <processLoopBackModeCommand+0xd0>)
 8000d6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000d6e:	609a      	str	r2, [r3, #8]
		idetified = true;
 8000d70:	2301      	movs	r3, #1
 8000d72:	73fb      	strb	r3, [r7, #15]
 8000d74:	e01d      	b.n	8000db2 <processLoopBackModeCommand+0x96>
	} else if (!strcmp((char*) mode, "NM")) {
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	491e      	ldr	r1, [pc, #120]	@ (8000df4 <processLoopBackModeCommand+0xd8>)
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fa27 	bl	80001d0 <strcmp>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d105      	bne.n	8000d94 <processLoopBackModeCommand+0x78>
		hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d88:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <processLoopBackModeCommand+0xd0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
		idetified = true;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e00e      	b.n	8000db2 <processLoopBackModeCommand+0x96>
	} else if (!strcmp((char*) mode, "SL")) {
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	4917      	ldr	r1, [pc, #92]	@ (8000df8 <processLoopBackModeCommand+0xdc>)
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fa18 	bl	80001d0 <strcmp>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d105      	bne.n	8000db2 <processLoopBackModeCommand+0x96>
		hcan1.Init.Mode = CAN_MODE_SILENT_LOOPBACK;
 8000da6:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <processLoopBackModeCommand+0xd0>)
 8000da8:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8000dac:	609a      	str	r2, [r3, #8]
		idetified = true;
 8000dae:	2301      	movs	r3, #1
 8000db0:	73fb      	strb	r3, [r7, #15]
	}
	if (idetified) {
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d012      	beq.n	8000dde <processLoopBackModeCommand+0xc2>
		HAL_CAN_DeInit(&hcan1);
 8000db8:	480c      	ldr	r0, [pc, #48]	@ (8000dec <processLoopBackModeCommand+0xd0>)
 8000dba:	f001 f8fa 	bl	8001fb2 <HAL_CAN_DeInit>
		HAL_CAN_Init(&hcan1);
 8000dbe:	480b      	ldr	r0, [pc, #44]	@ (8000dec <processLoopBackModeCommand+0xd0>)
 8000dc0:	f000 fffc 	bl	8001dbc <HAL_CAN_Init>
		setSinfferCANFilter();
 8000dc4:	f7ff fdf0 	bl	80009a8 <setSinfferCANFilter>
		HAL_CAN_Start(&hcan1);
 8000dc8:	4808      	ldr	r0, [pc, #32]	@ (8000dec <processLoopBackModeCommand+0xd0>)
 8000dca:	f001 f9f5 	bl	80021b8 <HAL_CAN_Start>
		if (snifferAtivityStatus != SNIFFER_STOPPED) {
 8000dce:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <processLoopBackModeCommand+0xe0>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <processLoopBackModeCommand+0xc2>
			HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	4804      	ldr	r0, [pc, #16]	@ (8000dec <processLoopBackModeCommand+0xd0>)
 8000dda:	f001 fc67 	bl	80026ac <HAL_CAN_ActivateNotification>
		}

	}
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	08008974 	.word	0x08008974
 8000dec:	200002d0 	.word	0x200002d0
 8000df0:	08008978 	.word	0x08008978
 8000df4:	0800897c 	.word	0x0800897c
 8000df8:	08008980 	.word	0x08008980
 8000dfc:	20000388 	.word	0x20000388

08000e00 <processActivitySniferComand>:

void processActivitySniferComand(char *decodedCommand) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

	uint8_t activityMode[3];
	substr((char*) decodedCommand, (char*) activityMode, 1, 3);
 8000e08:	f107 010c 	add.w	r1, r7, #12
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	2201      	movs	r2, #1
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff fd4d 	bl	80008b0 <substr>

	if (!strcmp((char*) activityMode, "ON_")) {
 8000e16:	f107 030c 	add.w	r3, r7, #12
 8000e1a:	4911      	ldr	r1, [pc, #68]	@ (8000e60 <processActivitySniferComand+0x60>)
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff f9d7 	bl	80001d0 <strcmp>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d107      	bne.n	8000e38 <processActivitySniferComand+0x38>
		snifferAtivityStatus = SNIFFER_ACTIVE;
 8000e28:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <processActivitySniferComand+0x64>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	701a      	strb	r2, [r3, #0]
		HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e2e:	2102      	movs	r1, #2
 8000e30:	480d      	ldr	r0, [pc, #52]	@ (8000e68 <processActivitySniferComand+0x68>)
 8000e32:	f001 fc3b 	bl	80026ac <HAL_CAN_ActivateNotification>
	else if (!strcmp((char*) activityMode, "OFF")) {
		HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
		snifferAtivityStatus = SNIFFER_STOPPED;

	}
}
 8000e36:	e00f      	b.n	8000e58 <processActivitySniferComand+0x58>
	else if (!strcmp((char*) activityMode, "OFF")) {
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	490b      	ldr	r1, [pc, #44]	@ (8000e6c <processActivitySniferComand+0x6c>)
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff f9c6 	bl	80001d0 <strcmp>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d106      	bne.n	8000e58 <processActivitySniferComand+0x58>
		HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	4806      	ldr	r0, [pc, #24]	@ (8000e68 <processActivitySniferComand+0x68>)
 8000e4e:	f001 fc53 	bl	80026f8 <HAL_CAN_DeactivateNotification>
		snifferAtivityStatus = SNIFFER_STOPPED;
 8000e52:	4b04      	ldr	r3, [pc, #16]	@ (8000e64 <processActivitySniferComand+0x64>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	08008984 	.word	0x08008984
 8000e64:	20000388 	.word	0x20000388
 8000e68:	200002d0 	.word	0x200002d0
 8000e6c:	08008988 	.word	0x08008988

08000e70 <processRebootCommand>:
void processRebootCommand() {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 8000e74:	f7ff fce6 	bl	8000844 <__NVIC_SystemReset>

08000e78 <setDatagramTypeIdentifer>:
}

void setDatagramTypeIdentifer(uint32_t ide, uint32_t rtr, uint8_t *pExitBuffer,
		uint8_t *pCursor) {
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	603b      	str	r3, [r7, #0]
	if (ide == CAN_ID_STD) {
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d115      	bne.n	8000eb8 <setDatagramTypeIdentifer+0x40>
		if (rtr == CAN_RTR_DATA) {
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d107      	bne.n	8000ea2 <setDatagramTypeIdentifer+0x2a>
			pExitBuffer[*pCursor] = 't';
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	2274      	movs	r2, #116	@ 0x74
 8000e9e:	701a      	strb	r2, [r3, #0]
 8000ea0:	e022      	b.n	8000ee8 <setDatagramTypeIdentifer+0x70>
		} else if (rtr == CAN_RTR_REMOTE) {
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d11f      	bne.n	8000ee8 <setDatagramTypeIdentifer+0x70>
			pExitBuffer[*pCursor] = 'r';
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	2272      	movs	r2, #114	@ 0x72
 8000eb4:	701a      	strb	r2, [r3, #0]
 8000eb6:	e017      	b.n	8000ee8 <setDatagramTypeIdentifer+0x70>
		}
	} else if (ide == CAN_ID_EXT) {
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d114      	bne.n	8000ee8 <setDatagramTypeIdentifer+0x70>

		if (rtr == CAN_RTR_DATA) {
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d107      	bne.n	8000ed4 <setDatagramTypeIdentifer+0x5c>
			pExitBuffer[*pCursor] = 'T';
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	2254      	movs	r2, #84	@ 0x54
 8000ed0:	701a      	strb	r2, [r3, #0]
 8000ed2:	e009      	b.n	8000ee8 <setDatagramTypeIdentifer+0x70>
		} else if (rtr == CAN_RTR_REMOTE) {
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d106      	bne.n	8000ee8 <setDatagramTypeIdentifer+0x70>
			pExitBuffer[*pCursor] = 'R';
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	2252      	movs	r2, #82	@ 0x52
 8000ee6:	701a      	strb	r2, [r3, #0]
		}
	}
	*pCursor = *pCursor + 1;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	3301      	adds	r3, #1
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	701a      	strb	r2, [r3, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <setFormatedDatagramIdentifer>:

void setFormatedDatagramIdentifer(uint32_t idNum, uint8_t *pExitBuffer,uint8_t *pCursor, int len) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	603b      	str	r3, [r7, #0]

	char *id = (char*) pvPortMalloc(sizeof(char) * (len + 1));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	4618      	mov	r0, r3
 8000f14:	f006 fe12 	bl	8007b3c <pvPortMalloc>
 8000f18:	6138      	str	r0, [r7, #16]
	int numOfDigits = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
	int valueToConsume = idNum;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	61bb      	str	r3, [r7, #24]

	while (valueToConsume != 0) {
 8000f22:	e00a      	b.n	8000f3a <setFormatedDatagramIdentifer+0x3a>
		valueToConsume /= 10;     // n = n/10
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	4a20      	ldr	r2, [pc, #128]	@ (8000fa8 <setFormatedDatagramIdentifer+0xa8>)
 8000f28:	fb82 1203 	smull	r1, r2, r2, r3
 8000f2c:	1092      	asrs	r2, r2, #2
 8000f2e:	17db      	asrs	r3, r3, #31
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	61bb      	str	r3, [r7, #24]
		++numOfDigits;
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	3301      	adds	r3, #1
 8000f38:	61fb      	str	r3, [r7, #28]
	while (valueToConsume != 0) {
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1f1      	bne.n	8000f24 <setFormatedDatagramIdentifer+0x24>
	}

	sprintf(id + (len - numOfDigits), "%d", (int) idNum);
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	461a      	mov	r2, r3
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	4917      	ldr	r1, [pc, #92]	@ (8000fac <setFormatedDatagramIdentifer+0xac>)
 8000f50:	4618      	mov	r0, r3
 8000f52:	f007 f85b 	bl	800800c <siprintf>
	for (int eraser = 0; eraser < (len - numOfDigits); eraser++) {
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	e007      	b.n	8000f6c <setFormatedDatagramIdentifer+0x6c>
		id[eraser] = '0';
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4413      	add	r3, r2
 8000f62:	2230      	movs	r2, #48	@ 0x30
 8000f64:	701a      	strb	r2, [r3, #0]
	for (int eraser = 0; eraser < (len - numOfDigits); eraser++) {
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbf1      	blt.n	8000f5c <setFormatedDatagramIdentifer+0x5c>
	}
	strcpy((char*) pExitBuffer + *pCursor, id);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	4413      	add	r3, r2
 8000f82:	6939      	ldr	r1, [r7, #16]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f007 f895 	bl	80080b4 <strcpy>
	vPortFree(id);
 8000f8a:	6938      	ldr	r0, [r7, #16]
 8000f8c:	f006 fe9e 	bl	8007ccc <vPortFree>
	*pCursor = *pCursor + len;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	781a      	ldrb	r2, [r3, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	4413      	add	r3, r2
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	701a      	strb	r2, [r3, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	3720      	adds	r7, #32
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	66666667 	.word	0x66666667
 8000fac:	0800898c 	.word	0x0800898c

08000fb0 <setDatagramIdentifer>:

void setDatagramIdentifer(CAN_RxHeaderTypeDef receivedCANHeader,
		uint8_t *pExitBuffer, uint8_t *pCursor) {
 8000fb0:	b084      	sub	sp, #16
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	f107 0c08 	add.w	ip, r7, #8
 8000fba:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (receivedCANHeader.IDE == CAN_ID_EXT) {
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	d105      	bne.n	8000fd0 <setDatagramIdentifer+0x20>
		setFormatedDatagramIdentifer(receivedCANHeader.ExtId, pExitBuffer,
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	2309      	movs	r3, #9
 8000fc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000fca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000fcc:	f7ff ff98 	bl	8000f00 <setFormatedDatagramIdentifer>
				pCursor, 9);
	}
	if (receivedCANHeader.IDE == CAN_ID_STD) {
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d105      	bne.n	8000fe2 <setDatagramIdentifer+0x32>
		setFormatedDatagramIdentifer(receivedCANHeader.StdId, pExitBuffer,
 8000fd6:	68b8      	ldr	r0, [r7, #8]
 8000fd8:	2304      	movs	r3, #4
 8000fda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000fdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000fde:	f7ff ff8f 	bl	8000f00 <setFormatedDatagramIdentifer>
				pCursor, 4);
	}
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fea:	b004      	add	sp, #16
 8000fec:	4770      	bx	lr
	...

08000ff0 <setDLC>:

void setDLC(uint32_t dlc, uint8_t *pExitBuffer, uint8_t *pCursor) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
	sprintf((char*) pExitBuffer + *pCursor, "%d", (int) dlc);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	4413      	add	r3, r2
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	4906      	ldr	r1, [pc, #24]	@ (8001024 <setDLC+0x34>)
 800100a:	4618      	mov	r0, r3
 800100c:	f006 fffe 	bl	800800c <siprintf>
	*pCursor = *pCursor + 1;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	b2da      	uxtb	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	701a      	strb	r2, [r3, #0]
}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	0800898c 	.word	0x0800898c

08001028 <setData>:

void setData(uint8_t *data, int dlc, uint8_t *pExitBuffer, uint8_t *pCursor) {
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
	for (int counter = 0; counter < dlc; counter++) {
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	e00f      	b.n	800105c <setData+0x34>
		pExitBuffer[*pCursor + counter] = data[counter];
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	441a      	add	r2, r3
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	4619      	mov	r1, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	440b      	add	r3, r1
 800104c:	4619      	mov	r1, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	440b      	add	r3, r1
 8001052:	7812      	ldrb	r2, [r2, #0]
 8001054:	701a      	strb	r2, [r3, #0]
	for (int counter = 0; counter < dlc; counter++) {
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	429a      	cmp	r2, r3
 8001062:	dbeb      	blt.n	800103c <setData+0x14>
	}
	*pCursor = *pCursor + dlc;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	781a      	ldrb	r2, [r3, #0]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	4413      	add	r3, r2
 800106e:	b2da      	uxtb	r2, r3
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	701a      	strb	r2, [r3, #0]
}
 8001074:	bf00      	nop
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <serializeDatagram>:

uint8_t serializeDatagram(uint8_t *pExitBuffer,CAN_RxHeaderTypeDef receivedCANHeader, uint8_t *rxData) {
 8001080:	b084      	sub	sp, #16
 8001082:	b590      	push	{r4, r7, lr}
 8001084:	b08b      	sub	sp, #44	@ 0x2c
 8001086:	af06      	add	r7, sp, #24
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800108e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	uint8_t cursor = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	73fb      	strb	r3, [r7, #15]

	setDatagramTypeIdentifer(receivedCANHeader.IDE, receivedCANHeader.RTR,
 8001096:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001098:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800109a:	f107 030f 	add.w	r3, r7, #15
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	f7ff feea 	bl	8000e78 <setDatagramTypeIdentifer>
			pExitBuffer, &cursor);
	setDatagramIdentifer(receivedCANHeader, pExitBuffer, &cursor);
 80010a4:	f107 030f 	add.w	r3, r7, #15
 80010a8:	9304      	str	r3, [sp, #16]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	9303      	str	r3, [sp, #12]
 80010ae:	466c      	mov	r4, sp
 80010b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80010b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010c2:	f7ff ff75 	bl	8000fb0 <setDatagramIdentifer>
	setDLC(receivedCANHeader.DLC, pExitBuffer, &cursor);
 80010c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010c8:	f107 020f 	add.w	r2, r7, #15
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff8e 	bl	8000ff0 <setDLC>
	if (receivedCANHeader.RTR == CAN_RTR_DATA) {
 80010d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d107      	bne.n	80010ea <serializeDatagram+0x6a>
		setData(rxData, receivedCANHeader.DLC, pExitBuffer, &cursor);
 80010da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010dc:	4619      	mov	r1, r3
 80010de:	f107 030f 	add.w	r3, r7, #15
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80010e6:	f7ff ff9f 	bl	8001028 <setData>
	}

	return cursor;
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010f6:	b004      	add	sp, #16
 80010f8:	4770      	bx	lr
	...

080010fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <HAL_UART_RxCpltCallback+0x28>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d105      	bne.n	800111c <HAL_UART_RxCpltCallback+0x20>
		osSignalSet(receiveCommandsTaskId, osAnySignal);
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <HAL_UART_RxCpltCallback+0x2c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f004 f974 	bl	8005404 <osSignalSet>
	}
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200002f8 	.word	0x200002f8
 8001128:	2000033c 	.word	0x2000033c

0800112c <HAL_CAN_RxFifo0MsgPendingCallback>:


 void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxMessageHeader,rxDataReceived) == HAL_OK) {
 8001134:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001136:	4a0e      	ldr	r2, [pc, #56]	@ (8001170 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001138:	2100      	movs	r1, #0
 800113a:	480e      	ldr	r0, [pc, #56]	@ (8001174 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800113c:	f001 f9a4 	bl	8002488 <HAL_CAN_GetRxMessage>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d109      	bne.n	800115a <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
  		if (snifferAtivityStatus == SNIFFER_ACTIVE) {
 8001146:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d105      	bne.n	800115a <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
  			osSignalSet(receivedDatagramTaskId, osAnySignal);
 800114e:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f004 f955 	bl	8005404 <osSignalSet>

  		}
  	}
  	HAL_GPIO_TogglePin(RED_LED_CANRX_GPIO_Port,RED_LED_CANRX_Pin);
 800115a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800115e:	4808      	ldr	r0, [pc, #32]	@ (8001180 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8001160:	f002 f907 	bl	8003372 <HAL_GPIO_TogglePin>
//  	} else {
//  		sprintf(debugMessage, "Extended CAN ID: 0x%" PRIx32 "\r\n", rxMessageHeader.ExtId);
//  	}
//  	HAL_UART_Transmit(&huart3, (uint8_t*)debugMessage, strlen(debugMessage), HAL_MAX_DELAY);

 }
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000380 	.word	0x20000380
 8001170:	20000364 	.word	0x20000364
 8001174:	200002d0 	.word	0x200002d0
 8001178:	20000388 	.word	0x20000388
 800117c:	20000348 	.word	0x20000348
 8001180:	40020c00 	.word	0x40020c00

08001184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001184:	b5b0      	push	{r4, r5, r7, lr}
 8001186:	b0aa      	sub	sp, #168	@ 0xa8
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118a:	f000 fdb1 	bl	8001cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118e:	f000 f8c5 	bl	800131c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001192:	f000 f98d 	bl	80014b0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001196:	f000 f92b 	bl	80013f0 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 800119a:	f000 f95f 	bl	800145c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, rxUARTBuff, 1);
 800119e:	2201      	movs	r2, #1
 80011a0:	494a      	ldr	r1, [pc, #296]	@ (80012cc <main+0x148>)
 80011a2:	484b      	ldr	r0, [pc, #300]	@ (80012d0 <main+0x14c>)
 80011a4:	f003 f8e4 	bl	8004370 <HAL_UART_Receive_IT>
	setSinfferCANFilter();
 80011a8:	f7ff fbfe 	bl	80009a8 <setSinfferCANFilter>

	/*Original code */
	HAL_CAN_Start(&hcan1);
 80011ac:	4849      	ldr	r0, [pc, #292]	@ (80012d4 <main+0x150>)
 80011ae:	f001 f803 	bl	80021b8 <HAL_CAN_Start>
	if (snifferAtivityStatus != SNIFFER_STOPPED) {
 80011b2:	4b49      	ldr	r3, [pc, #292]	@ (80012d8 <main+0x154>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <main+0x3e>
		HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80011ba:	2102      	movs	r1, #2
 80011bc:	4845      	ldr	r0, [pc, #276]	@ (80012d4 <main+0x150>)
 80011be:	f001 fa75 	bl	80026ac <HAL_CAN_ActivateNotification>
  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	pendingCommandsQueue = osMailCreate(osMailQ(pendingCommandsQueue), NULL); // create pendingCommandsQueue
 80011c2:	2100      	movs	r1, #0
 80011c4:	4845      	ldr	r0, [pc, #276]	@ (80012dc <main+0x158>)
 80011c6:	f004 faa9 	bl	800571c <osMailCreate>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a44      	ldr	r2, [pc, #272]	@ (80012e0 <main+0x15c>)
 80011ce:	6013      	str	r3, [r2, #0]
	canDatagramsQueue = osMailCreate(osMailQ(canDatagramsQueue), NULL);
 80011d0:	2100      	movs	r1, #0
 80011d2:	4844      	ldr	r0, [pc, #272]	@ (80012e4 <main+0x160>)
 80011d4:	f004 faa2 	bl	800571c <osMailCreate>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a43      	ldr	r2, [pc, #268]	@ (80012e8 <main+0x164>)
 80011dc:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80011de:	4b43      	ldr	r3, [pc, #268]	@ (80012ec <main+0x168>)
 80011e0:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80011e4:	461d      	mov	r5, r3
 80011e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011f2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f004 f890 	bl	800531e <osThreadCreate>
 80011fe:	4603      	mov	r3, r0
 8001200:	4a3b      	ldr	r2, [pc, #236]	@ (80012f0 <main+0x16c>)
 8001202:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

	osThreadDef(rcvCommandTask, rcvCommandThread, osPriorityRealtime, 0, 128);
 8001204:	4b3b      	ldr	r3, [pc, #236]	@ (80012f4 <main+0x170>)
 8001206:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 800120a:	461d      	mov	r5, r3
 800120c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800120e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001210:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001214:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	receiveCommandsTaskId = osThreadCreate(osThread(rcvCommandTask), NULL);
 8001218:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f004 f87d 	bl	800531e <osThreadCreate>
 8001224:	4603      	mov	r3, r0
 8001226:	4a34      	ldr	r2, [pc, #208]	@ (80012f8 <main+0x174>)
 8001228:	6013      	str	r3, [r2, #0]

	osThreadDef(executeCommandTask, executeCommandThread, osPriorityRealtime, 0,128);
 800122a:	4b34      	ldr	r3, [pc, #208]	@ (80012fc <main+0x178>)
 800122c:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001230:	461d      	mov	r5, r3
 8001232:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001234:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001236:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800123a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	executeCommmandtaskID = osThreadCreate(osThread(executeCommandTask), NULL);
 800123e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f004 f86a 	bl	800531e <osThreadCreate>
 800124a:	4603      	mov	r3, r0
 800124c:	4a2c      	ldr	r2, [pc, #176]	@ (8001300 <main+0x17c>)
 800124e:	6013      	str	r3, [r2, #0]

	osThreadDef(forwardDatagramsTask, fordwardDatagramsThread, osPriorityNormal,0, 640);
 8001250:	4b2c      	ldr	r3, [pc, #176]	@ (8001304 <main+0x180>)
 8001252:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001256:	461d      	mov	r5, r3
 8001258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800125a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800125c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001260:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	forwardDatagramTaskId = osThreadCreate(osThread(forwardDatagramsTask),NULL);
 8001264:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f004 f857 	bl	800531e <osThreadCreate>
 8001270:	4603      	mov	r3, r0
 8001272:	4a25      	ldr	r2, [pc, #148]	@ (8001308 <main+0x184>)
 8001274:	6013      	str	r3, [r2, #0]

	osThreadDef(receiveDatagramsTask, recieivedDatagramsThread,osPriorityNormal, 0, 640);
 8001276:	4b25      	ldr	r3, [pc, #148]	@ (800130c <main+0x188>)
 8001278:	f107 041c 	add.w	r4, r7, #28
 800127c:	461d      	mov	r5, r3
 800127e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001282:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001286:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	receivedDatagramTaskId = osThreadCreate(osThread(receiveDatagramsTask),NULL);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f004 f844 	bl	800531e <osThreadCreate>
 8001296:	4603      	mov	r3, r0
 8001298:	4a1d      	ldr	r2, [pc, #116]	@ (8001310 <main+0x18c>)
 800129a:	6013      	str	r3, [r2, #0]

	osThreadDef(idleTask, idleThread, osPriorityIdle, 0, 128);
 800129c:	4b1d      	ldr	r3, [pc, #116]	@ (8001314 <main+0x190>)
 800129e:	463c      	mov	r4, r7
 80012a0:	461d      	mov	r5, r3
 80012a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	idleTaskId = osThreadCreate(osThread(idleTask), NULL);
 80012ae:	463b      	mov	r3, r7
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 f833 	bl	800531e <osThreadCreate>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4a17      	ldr	r2, [pc, #92]	@ (8001318 <main+0x194>)
 80012bc:	6013      	str	r3, [r2, #0]

	bootLEDIndicator();
 80012be:	f7ff fad7 	bl	8000870 <bootLEDIndicator>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80012c2:	f004 f825 	bl	8005310 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80012c6:	bf00      	nop
 80012c8:	e7fd      	b.n	80012c6 <main+0x142>
 80012ca:	bf00      	nop
 80012cc:	20000360 	.word	0x20000360
 80012d0:	200002f8 	.word	0x200002f8
 80012d4:	200002d0 	.word	0x200002d0
 80012d8:	20000388 	.word	0x20000388
 80012dc:	08008aac 	.word	0x08008aac
 80012e0:	20000354 	.word	0x20000354
 80012e4:	08008ab8 	.word	0x08008ab8
 80012e8:	2000035c 	.word	0x2000035c
 80012ec:	0800899c 	.word	0x0800899c
 80012f0:	20000338 	.word	0x20000338
 80012f4:	080089c8 	.word	0x080089c8
 80012f8:	2000033c 	.word	0x2000033c
 80012fc:	080089f8 	.word	0x080089f8
 8001300:	20000340 	.word	0x20000340
 8001304:	08008a2c 	.word	0x08008a2c
 8001308:	20000344 	.word	0x20000344
 800130c:	08008a60 	.word	0x08008a60
 8001310:	20000348 	.word	0x20000348
 8001314:	08008a88 	.word	0x08008a88
 8001318:	2000034c 	.word	0x2000034c

0800131c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b094      	sub	sp, #80	@ 0x50
 8001320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001322:	f107 0320 	add.w	r3, r7, #32
 8001326:	2230      	movs	r2, #48	@ 0x30
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f006 fe8e 	bl	800804c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	4b28      	ldr	r3, [pc, #160]	@ (80013e8 <SystemClock_Config+0xcc>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001348:	4a27      	ldr	r2, [pc, #156]	@ (80013e8 <SystemClock_Config+0xcc>)
 800134a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001350:	4b25      	ldr	r3, [pc, #148]	@ (80013e8 <SystemClock_Config+0xcc>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	4b22      	ldr	r3, [pc, #136]	@ (80013ec <SystemClock_Config+0xd0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a21      	ldr	r2, [pc, #132]	@ (80013ec <SystemClock_Config+0xd0>)
 8001366:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <SystemClock_Config+0xd0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001378:	2301      	movs	r3, #1
 800137a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800137c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001382:	2302      	movs	r3, #2
 8001384:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001386:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800138a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800138c:	2304      	movs	r3, #4
 800138e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001390:	23a8      	movs	r3, #168	@ 0xa8
 8001392:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001394:	2302      	movs	r3, #2
 8001396:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001398:	2304      	movs	r3, #4
 800139a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139c:	f107 0320 	add.w	r3, r7, #32
 80013a0:	4618      	mov	r0, r3
 80013a2:	f002 f801 	bl	80033a8 <HAL_RCC_OscConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013ac:	f000 fa86 	bl	80018bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b0:	230f      	movs	r3, #15
 80013b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b4:	2302      	movs	r3, #2
 80013b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	2105      	movs	r1, #5
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 fa58 	bl	8003884 <HAL_RCC_ClockConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013da:	f000 fa6f 	bl	80018bc <Error_Handler>
  }
}
 80013de:	bf00      	nop
 80013e0:	3750      	adds	r7, #80	@ 0x50
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40007000 	.word	0x40007000

080013f0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80013f4:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <MX_CAN1_Init+0x64>)
 80013f6:	4a18      	ldr	r2, [pc, #96]	@ (8001458 <MX_CAN1_Init+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 80013fa:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <MX_CAN1_Init+0x64>)
 80013fc:	220c      	movs	r2, #12
 80013fe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001400:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <MX_CAN1_Init+0x64>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001406:	4b13      	ldr	r3, [pc, #76]	@ (8001454 <MX_CAN1_Init+0x64>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 800140c:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <MX_CAN1_Init+0x64>)
 800140e:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8001412:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001414:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <MX_CAN1_Init+0x64>)
 8001416:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800141a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800141c:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <MX_CAN1_Init+0x64>)
 800141e:	2200      	movs	r2, #0
 8001420:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001422:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <MX_CAN1_Init+0x64>)
 8001424:	2200      	movs	r2, #0
 8001426:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001428:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <MX_CAN1_Init+0x64>)
 800142a:	2200      	movs	r2, #0
 800142c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800142e:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <MX_CAN1_Init+0x64>)
 8001430:	2200      	movs	r2, #0
 8001432:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001434:	4b07      	ldr	r3, [pc, #28]	@ (8001454 <MX_CAN1_Init+0x64>)
 8001436:	2200      	movs	r2, #0
 8001438:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <MX_CAN1_Init+0x64>)
 800143c:	2200      	movs	r2, #0
 800143e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001440:	4804      	ldr	r0, [pc, #16]	@ (8001454 <MX_CAN1_Init+0x64>)
 8001442:	f000 fcbb 	bl	8001dbc <HAL_CAN_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800144c:	f000 fa36 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200002d0 	.word	0x200002d0
 8001458:	40006400 	.word	0x40006400

0800145c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001460:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001462:	4a12      	ldr	r2, [pc, #72]	@ (80014ac <MX_USART1_UART_Init+0x50>)
 8001464:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001468:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800146c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001474:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800147a:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001480:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001482:	220c      	movs	r2, #12
 8001484:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001492:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001494:	f002 fe86 	bl	80041a4 <HAL_UART_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800149e:	f000 fa0d 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200002f8 	.word	0x200002f8
 80014ac:	40011000 	.word	0x40011000

080014b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	@ 0x28
 80014b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b27      	ldr	r3, [pc, #156]	@ (8001568 <MX_GPIO_Init+0xb8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a26      	ldr	r2, [pc, #152]	@ (8001568 <MX_GPIO_Init+0xb8>)
 80014d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b24      	ldr	r3, [pc, #144]	@ (8001568 <MX_GPIO_Init+0xb8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b20      	ldr	r3, [pc, #128]	@ (8001568 <MX_GPIO_Init+0xb8>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001568 <MX_GPIO_Init+0xb8>)
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001568 <MX_GPIO_Init+0xb8>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b19      	ldr	r3, [pc, #100]	@ (8001568 <MX_GPIO_Init+0xb8>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a18      	ldr	r2, [pc, #96]	@ (8001568 <MX_GPIO_Init+0xb8>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b16      	ldr	r3, [pc, #88]	@ (8001568 <MX_GPIO_Init+0xb8>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <MX_GPIO_Init+0xb8>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a11      	ldr	r2, [pc, #68]	@ (8001568 <MX_GPIO_Init+0xb8>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b0f      	ldr	r3, [pc, #60]	@ (8001568 <MX_GPIO_Init+0xb8>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_IDLE_Pin|ORANGE_LED_SYSTEM_Pin|RED_LED_CANRX_Pin|BLUE_LED_CANTX_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800153c:	480b      	ldr	r0, [pc, #44]	@ (800156c <MX_GPIO_Init+0xbc>)
 800153e:	f001 feff 	bl	8003340 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN_LED_IDLE_Pin ORANGE_LED_SYSTEM_Pin RED_LED_CANRX_Pin BLUE_LED_CANTX_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_IDLE_Pin|ORANGE_LED_SYSTEM_Pin|RED_LED_CANRX_Pin|BLUE_LED_CANTX_Pin;
 8001542:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	4804      	ldr	r0, [pc, #16]	@ (800156c <MX_GPIO_Init+0xbc>)
 800155c:	f001 fc58 	bl	8002e10 <HAL_GPIO_Init>

}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	@ 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800
 800156c:	40020c00 	.word	0x40020c00

08001570 <rcvCommandThread>:

/* USER CODE BEGIN 4 */
void rcvCommandThread(void const *argument) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	@ 0x30
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	uint8_t rxCommandBuff[SIZE_RX] = { 0 };
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
	volatile uint8_t cursor = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	75fb      	strb	r3, [r7, #23]
	uint8_t rxValue[1] = { 0 };
 800158e:	2300      	movs	r3, #0
 8001590:	753b      	strb	r3, [r7, #20]
	osEvent evt;
	while (true) {
		evt = osSignalWait(osAnySignal, 1);//osWaitForever
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	2201      	movs	r2, #1
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f003 ff72 	bl	8005484 <osSignalWait>
		if (evt.status == osEventSignal) {
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d13e      	bne.n	8001624 <rcvCommandThread+0xb4>
			rxValue[0] = rxUARTBuff[0];
 80015a6:	4b21      	ldr	r3, [pc, #132]	@ (800162c <rcvCommandThread+0xbc>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	753b      	strb	r3, [r7, #20]
			HAL_UART_Receive_IT(&huart1, rxUARTBuff, 1);
 80015ac:	2201      	movs	r2, #1
 80015ae:	491f      	ldr	r1, [pc, #124]	@ (800162c <rcvCommandThread+0xbc>)
 80015b0:	481f      	ldr	r0, [pc, #124]	@ (8001630 <rcvCommandThread+0xc0>)
 80015b2:	f002 fedd 	bl	8004370 <HAL_UART_Receive_IT>
			rxCommandBuff[cursor] = rxValue[0];
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	7d3a      	ldrb	r2, [r7, #20]
 80015bc:	3330      	adds	r3, #48	@ 0x30
 80015be:	443b      	add	r3, r7
 80015c0:	f803 2c18 	strb.w	r2, [r3, #-24]
			cursor++;
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	3301      	adds	r3, #1
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	75fb      	strb	r3, [r7, #23]
			if (cursor >= SIZE_RX) {
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b13      	cmp	r3, #19
 80015d4:	d901      	bls.n	80015da <rcvCommandThread+0x6a>
				cursor = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	75fb      	strb	r3, [r7, #23]
			}
			if (rxValue[0] == 0x00) {
 80015da:	7d3b      	ldrb	r3, [r7, #20]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1d8      	bne.n	8001592 <rcvCommandThread+0x22>
				SnniferCommand *pendingCmd;
				pendingCmd = osMailCAlloc(pendingCommandsQueue, 1); // osWaitForever
 80015e0:	4b14      	ldr	r3, [pc, #80]	@ (8001634 <rcvCommandThread+0xc4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2101      	movs	r1, #1
 80015e6:	4618      	mov	r0, r3
 80015e8:	f004 f905 	bl	80057f6 <osMailCAlloc>
 80015ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
				if (pendingCmd != NULL) {
 80015ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d014      	beq.n	800161e <rcvCommandThread+0xae>
					strcpy((char*) pendingCmd->commnddBuff,
 80015f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015f6:	f107 0218 	add.w	r2, r7, #24
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f006 fd59 	bl	80080b4 <strcpy>
							(char*) rxCommandBuff);
					pendingCmd->commandSize = cursor - 1;
 8001602:	7dfb      	ldrb	r3, [r7, #23]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	3b01      	subs	r3, #1
 8001608:	b2da      	uxtb	r2, r3
 800160a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800160c:	751a      	strb	r2, [r3, #20]
					osMailPut(pendingCommandsQueue, pendingCmd);
 800160e:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <rcvCommandThread+0xc4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001614:	4618      	mov	r0, r3
 8001616:	f004 f911 	bl	800583c <osMailPut>
					osThreadYield();
 800161a:	f003 fecd 	bl	80053b8 <osThreadYield>
				}
				cursor = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	75fb      	strb	r3, [r7, #23]
 8001622:	e7b6      	b.n	8001592 <rcvCommandThread+0x22>
			}

		}
		else{
			osThreadYield();
 8001624:	f003 fec8 	bl	80053b8 <osThreadYield>
		evt = osSignalWait(osAnySignal, 1);//osWaitForever
 8001628:	e7b3      	b.n	8001592 <rcvCommandThread+0x22>
 800162a:	bf00      	nop
 800162c:	20000360 	.word	0x20000360
 8001630:	200002f8 	.word	0x200002f8
 8001634:	20000354 	.word	0x20000354

08001638 <executeCommandThread>:
		}
	}
}

void executeCommandThread(void const *argument) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b090      	sub	sp, #64	@ 0x40
 800163c:	af02      	add	r7, sp, #8
 800163e:	6078      	str	r0, [r7, #4]
	SnniferCommand *dequedComand;
	uint8_t decodedCommand[20] = { 0 };
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
 8001644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
	osEvent evt;
	while (true) {
		evt = osMailGet(pendingCommandsQueue, 1);//osWaitForever
 8001652:	4b2e      	ldr	r3, [pc, #184]	@ (800170c <executeCommandThread+0xd4>)
 8001654:	6819      	ldr	r1, [r3, #0]
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	2201      	movs	r2, #1
 800165c:	4618      	mov	r0, r3
 800165e:	f004 f92b 	bl	80058b8 <osMailGet>
		if (evt.status == osEventMail) {
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2b20      	cmp	r3, #32
 8001666:	d14d      	bne.n	8001704 <executeCommandThread+0xcc>
			dequedComand = evt.value.p;
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	637b      	str	r3, [r7, #52]	@ 0x34
			cobs_decode_result resutlt = cobs_decode(decodedCommand, 20,dequedComand->commnddBuff, dequedComand->commandSize);
 800166c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800166e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001670:	7d1b      	ldrb	r3, [r3, #20]
 8001672:	f107 000c 	add.w	r0, r7, #12
 8001676:	f107 0120 	add.w	r1, r7, #32
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	4613      	mov	r3, r2
 800167e:	2214      	movs	r2, #20
 8001680:	f7ff f816 	bl	80006b0 <cobs_decode>
			if (resutlt.status == COBS_DECODE_OK) {
 8001684:	7c3b      	ldrb	r3, [r7, #16]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d12c      	bne.n	80016e4 <executeCommandThread+0xac>
				if (decodedCommand[0] == 'A') {
 800168a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800168e:	2b41      	cmp	r3, #65	@ 0x41
 8001690:	d104      	bne.n	800169c <executeCommandThread+0x64>
					// Change activity status
					processActivitySniferComand((char*) decodedCommand);
 8001692:	f107 0320 	add.w	r3, r7, #32
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fbb2 	bl	8000e00 <processActivitySniferComand>
				}
				if (decodedCommand[0] == 'M') {
 800169c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016a0:	2b4d      	cmp	r3, #77	@ 0x4d
 80016a2:	d105      	bne.n	80016b0 <executeCommandThread+0x78>
					// Send a datagram to the CAN Bus
					processMessageComand((char*) decodedCommand);
 80016a4:	f107 0320 	add.w	r3, r7, #32
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff f9a3 	bl	80009f4 <processMessageComand>
 80016ae:	e019      	b.n	80016e4 <executeCommandThread+0xac>
				} else if (decodedCommand[0] == 'S') {
 80016b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016b4:	2b53      	cmp	r3, #83	@ 0x53
 80016b6:	d105      	bne.n	80016c4 <executeCommandThread+0x8c>
					// Change bit rate
					processBitRateCommand((char*) decodedCommand);
 80016b8:	f107 0320 	add.w	r3, r7, #32
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff faa9 	bl	8000c14 <processBitRateCommand>
 80016c2:	e00f      	b.n	80016e4 <executeCommandThread+0xac>
				} else if (decodedCommand[0] == 'N') {
 80016c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016c8:	2b4e      	cmp	r3, #78	@ 0x4e
 80016ca:	d105      	bne.n	80016d8 <executeCommandThread+0xa0>
					// Change Mode CAN bus Mode
					processLoopBackModeCommand((char*) decodedCommand);
 80016cc:	f107 0320 	add.w	r3, r7, #32
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fb23 	bl	8000d1c <processLoopBackModeCommand>
 80016d6:	e005      	b.n	80016e4 <executeCommandThread+0xac>
				}	// Reboot Snifer
				else if (decodedCommand[0] == 'R') {
 80016d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016dc:	2b52      	cmp	r3, #82	@ 0x52
 80016de:	d101      	bne.n	80016e4 <executeCommandThread+0xac>
					processRebootCommand();
 80016e0:	f7ff fbc6 	bl	8000e70 <processRebootCommand>
				}
			}
			memset(decodedCommand, 0, sizeof(decodedCommand));
 80016e4:	f107 0320 	add.w	r3, r7, #32
 80016e8:	2214      	movs	r2, #20
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f006 fcad 	bl	800804c <memset>
			osMailFree(pendingCommandsQueue, dequedComand);
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <executeCommandThread+0xd4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80016f8:	4618      	mov	r0, r3
 80016fa:	f004 f951 	bl	80059a0 <osMailFree>
			osThreadYield();
 80016fe:	f003 fe5b 	bl	80053b8 <osThreadYield>
 8001702:	e7a6      	b.n	8001652 <executeCommandThread+0x1a>
		}
		else{
			osThreadYield();
 8001704:	f003 fe58 	bl	80053b8 <osThreadYield>
		evt = osMailGet(pendingCommandsQueue, 1);//osWaitForever
 8001708:	e7a3      	b.n	8001652 <executeCommandThread+0x1a>
 800170a:	bf00      	nop
 800170c:	20000354 	.word	0x20000354

08001710 <recieivedDatagramsThread>:
		}
	}
}


void recieivedDatagramsThread(void const *argument) {
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	//CAN_RxHeaderTypeDef rxMessageHeader;
	//uint8_t rxDataReceived[8];
	osEvent evt;
	while (true) {
		evt = osSignalWait(osAnySignal, 1);//osWaitForever
 8001718:	f107 0308 	add.w	r3, r7, #8
 800171c:	2201      	movs	r2, #1
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f003 feaf 	bl	8005484 <osSignalWait>
		if (evt.status == osEventSignal) {
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	2b08      	cmp	r3, #8
 800172a:	d122      	bne.n	8001772 <recieivedDatagramsThread+0x62>
			CANMessage *msgToSend = osMailCAlloc(canDatagramsQueue, noWait);
 800172c:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <recieivedDatagramsThread+0x68>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f004 f85f 	bl	80057f6 <osMailCAlloc>
 8001738:	6178      	str	r0, [r7, #20]
			if (msgToSend != NULL) {
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d015      	beq.n	800176c <recieivedDatagramsThread+0x5c>
				 msgToSend->header = rxMessageHeader;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	4a0e      	ldr	r2, [pc, #56]	@ (800177c <recieivedDatagramsThread+0x6c>)
 8001744:	f103 0408 	add.w	r4, r3, #8
 8001748:	4615      	mov	r5, r2
 800174a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800174c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800174e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001752:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				 strcpy((char*) msgToSend->data, (char*) rxDataReceived);
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	4909      	ldr	r1, [pc, #36]	@ (8001780 <recieivedDatagramsThread+0x70>)
 800175a:	4618      	mov	r0, r3
 800175c:	f006 fcaa 	bl	80080b4 <strcpy>
				 osMailPut(canDatagramsQueue, msgToSend);
 8001760:	4b05      	ldr	r3, [pc, #20]	@ (8001778 <recieivedDatagramsThread+0x68>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6979      	ldr	r1, [r7, #20]
 8001766:	4618      	mov	r0, r3
 8001768:	f004 f868 	bl	800583c <osMailPut>
			}
			osThreadYield();
 800176c:	f003 fe24 	bl	80053b8 <osThreadYield>
 8001770:	e7d2      	b.n	8001718 <recieivedDatagramsThread+0x8>
		}
		else{
			osThreadYield();
 8001772:	f003 fe21 	bl	80053b8 <osThreadYield>
		evt = osSignalWait(osAnySignal, 1);//osWaitForever
 8001776:	e7cf      	b.n	8001718 <recieivedDatagramsThread+0x8>
 8001778:	2000035c 	.word	0x2000035c
 800177c:	20000364 	.word	0x20000364
 8001780:	20000380 	.word	0x20000380

08001784 <fordwardDatagramsThread>:
		}

	}
}

void fordwardDatagramsThread(void const *argument) {
 8001784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001786:	b09d      	sub	sp, #116	@ 0x74
 8001788:	af06      	add	r7, sp, #24
 800178a:	6078      	str	r0, [r7, #4]
	uint8_t serializedDatagram[24] = { 0 };
 800178c:	2300      	movs	r3, #0
 800178e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001790:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
	uint8_t lenSerialized;
	uint8_t encodedDatagram[24] = { 0 };
 80017a0:	2300      	movs	r3, #0
 80017a2:	623b      	str	r3, [r7, #32]
 80017a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
	osEvent evt;
	CANMessage *dequeuedMsg;
	while (true) {
		evt = osMailGet(canDatagramsQueue, 1);	//osWaitForever
 80017b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001860 <fordwardDatagramsThread+0xdc>)
 80017b6:	6819      	ldr	r1, [r3, #0]
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2201      	movs	r2, #1
 80017be:	4618      	mov	r0, r3
 80017c0:	f004 f87a 	bl	80058b8 <osMailGet>
		if (evt.status == osEventMail) {
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	2b20      	cmp	r3, #32
 80017c8:	d147      	bne.n	800185a <fordwardDatagramsThread+0xd6>
			dequeuedMsg = evt.value.p;
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	657b      	str	r3, [r7, #84]	@ 0x54
			lenSerialized = serializeDatagram(serializedDatagram,dequeuedMsg->header, dequeuedMsg->data);
 80017ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017d0:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 80017d2:	f107 0638 	add.w	r6, r7, #56	@ 0x38
 80017d6:	9304      	str	r3, [sp, #16]
 80017d8:	466d      	mov	r5, sp
 80017da:	f104 0314 	add.w	r3, r4, #20
 80017de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017e0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80017e4:	f104 0308 	add.w	r3, r4, #8
 80017e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017ea:	4630      	mov	r0, r6
 80017ec:	f7ff fc48 	bl	8001080 <serializeDatagram>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			cobs_encode_result result = cobs_encode(encodedDatagram, 24,serializedDatagram, lenSerialized + 1);
 80017f6:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80017fa:	3301      	adds	r3, #1
 80017fc:	461a      	mov	r2, r3
 80017fe:	f107 000c 	add.w	r0, r7, #12
 8001802:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001806:	f107 0120 	add.w	r1, r7, #32
 800180a:	9200      	str	r2, [sp, #0]
 800180c:	2218      	movs	r2, #24
 800180e:	f7fe feb7 	bl	8000580 <cobs_encode>
			if (result.status == COBS_ENCODE_OK) {
 8001812:	7c3b      	ldrb	r3, [r7, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d117      	bne.n	8001848 <fordwardDatagramsThread+0xc4>
				// Append Zero byte to delimiter frame boundary
				encodedDatagram[result.out_len + 1] = 0x00;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	3301      	adds	r3, #1
 800181c:	3358      	adds	r3, #88	@ 0x58
 800181e:	443b      	add	r3, r7
 8001820:	2200      	movs	r2, #0
 8001822:	f803 2c38 	strb.w	r2, [r3, #-56]
				HAL_UART_Transmit(&huart1, encodedDatagram, result.out_len + 1,50);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	b29b      	uxth	r3, r3
 800182a:	3301      	adds	r3, #1
 800182c:	b29a      	uxth	r2, r3
 800182e:	f107 0120 	add.w	r1, r7, #32
 8001832:	2332      	movs	r3, #50	@ 0x32
 8001834:	480b      	ldr	r0, [pc, #44]	@ (8001864 <fordwardDatagramsThread+0xe0>)
 8001836:	f002 fd02 	bl	800423e <HAL_UART_Transmit>
				// Toggle monitoring line to indicate a successful datagrams retransmission
				memset(encodedDatagram, 0, sizeof(encodedDatagram));
 800183a:	f107 0320 	add.w	r3, r7, #32
 800183e:	2218      	movs	r2, #24
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f006 fc02 	bl	800804c <memset>
			}
			osMailFree(canDatagramsQueue, dequeuedMsg);
 8001848:	4b05      	ldr	r3, [pc, #20]	@ (8001860 <fordwardDatagramsThread+0xdc>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800184e:	4618      	mov	r0, r3
 8001850:	f004 f8a6 	bl	80059a0 <osMailFree>
			osThreadYield();
 8001854:	f003 fdb0 	bl	80053b8 <osThreadYield>
 8001858:	e7ac      	b.n	80017b4 <fordwardDatagramsThread+0x30>

		}else{
			osThreadYield();
 800185a:	f003 fdad 	bl	80053b8 <osThreadYield>
		evt = osMailGet(canDatagramsQueue, 1);	//osWaitForever
 800185e:	e7a9      	b.n	80017b4 <fordwardDatagramsThread+0x30>
 8001860:	2000035c 	.word	0x2000035c
 8001864:	200002f8 	.word	0x200002f8

08001868 <idleThread>:
		}
	}
}

void idleThread(void const *argument) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	while (true) {
		HAL_GPIO_TogglePin(GREEN_LED_IDLE_GPIO_Port,GREEN_LED_IDLE_Pin);
 8001870:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001874:	4803      	ldr	r0, [pc, #12]	@ (8001884 <idleThread+0x1c>)
 8001876:	f001 fd7c 	bl	8003372 <HAL_GPIO_TogglePin>
		osDelay(100);
 800187a:	2064      	movs	r0, #100	@ 0x64
 800187c:	f003 fdae 	bl	80053dc <osDelay>
		HAL_GPIO_TogglePin(GREEN_LED_IDLE_GPIO_Port,GREEN_LED_IDLE_Pin);
 8001880:	bf00      	nop
 8001882:	e7f5      	b.n	8001870 <idleThread+0x8>
 8001884:	40020c00 	.word	0x40020c00

08001888 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001890:	2001      	movs	r0, #1
 8001892:	f003 fda3 	bl	80053dc <osDelay>
 8001896:	e7fb      	b.n	8001890 <StartDefaultTask+0x8>

08001898 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a04      	ldr	r2, [pc, #16]	@ (80018b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d101      	bne.n	80018ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018aa:	f000 fa43 	bl	8001d34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40001000 	.word	0x40001000

080018bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018c0:	b672      	cpsid	i
}
 80018c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <Error_Handler+0x8>

080018c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	4b12      	ldr	r3, [pc, #72]	@ (800191c <HAL_MspInit+0x54>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d6:	4a11      	ldr	r2, [pc, #68]	@ (800191c <HAL_MspInit+0x54>)
 80018d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018de:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <HAL_MspInit+0x54>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	603b      	str	r3, [r7, #0]
 80018ee:	4b0b      	ldr	r3, [pc, #44]	@ (800191c <HAL_MspInit+0x54>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	4a0a      	ldr	r2, [pc, #40]	@ (800191c <HAL_MspInit+0x54>)
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018fa:	4b08      	ldr	r3, [pc, #32]	@ (800191c <HAL_MspInit+0x54>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	210f      	movs	r1, #15
 800190a:	f06f 0001 	mvn.w	r0, #1
 800190e:	f001 fa25 	bl	8002d5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800

08001920 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	@ 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a1d      	ldr	r2, [pc, #116]	@ (80019b4 <HAL_CAN_MspInit+0x94>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d134      	bne.n	80019ac <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b1c      	ldr	r3, [pc, #112]	@ (80019b8 <HAL_CAN_MspInit+0x98>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	4a1b      	ldr	r2, [pc, #108]	@ (80019b8 <HAL_CAN_MspInit+0x98>)
 800194c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001950:	6413      	str	r3, [r2, #64]	@ 0x40
 8001952:	4b19      	ldr	r3, [pc, #100]	@ (80019b8 <HAL_CAN_MspInit+0x98>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <HAL_CAN_MspInit+0x98>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	4a14      	ldr	r2, [pc, #80]	@ (80019b8 <HAL_CAN_MspInit+0x98>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6313      	str	r3, [r2, #48]	@ 0x30
 800196e:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <HAL_CAN_MspInit+0x98>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800197a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800198c:	2309      	movs	r3, #9
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	4809      	ldr	r0, [pc, #36]	@ (80019bc <HAL_CAN_MspInit+0x9c>)
 8001998:	f001 fa3a 	bl	8002e10 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800199c:	2200      	movs	r2, #0
 800199e:	2105      	movs	r1, #5
 80019a0:	2014      	movs	r0, #20
 80019a2:	f001 f9db 	bl	8002d5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80019a6:	2014      	movs	r0, #20
 80019a8:	f001 f9f4 	bl	8002d94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80019ac:	bf00      	nop
 80019ae:	3728      	adds	r7, #40	@ 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40006400 	.word	0x40006400
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020400 	.word	0x40020400

080019c0 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0a      	ldr	r2, [pc, #40]	@ (80019f8 <HAL_CAN_MspDeInit+0x38>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d10d      	bne.n	80019ee <HAL_CAN_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 80019d2:	4b0a      	ldr	r3, [pc, #40]	@ (80019fc <HAL_CAN_MspDeInit+0x3c>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	4a09      	ldr	r2, [pc, #36]	@ (80019fc <HAL_CAN_MspDeInit+0x3c>)
 80019d8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80019dc:	6413      	str	r3, [r2, #64]	@ 0x40

    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 80019de:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80019e2:	4807      	ldr	r0, [pc, #28]	@ (8001a00 <HAL_CAN_MspDeInit+0x40>)
 80019e4:	f001 fbb0 	bl	8003148 <HAL_GPIO_DeInit>

    /* CAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 80019e8:	2014      	movs	r0, #20
 80019ea:	f001 f9e1 	bl	8002db0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40006400 	.word	0x40006400
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020400 	.word	0x40020400

08001a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	@ 0x28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a2c      	ldr	r2, [pc, #176]	@ (8001ad4 <HAL_UART_MspInit+0xd0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d152      	bne.n	8001acc <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad8 <HAL_UART_MspInit+0xd4>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2e:	4a2a      	ldr	r2, [pc, #168]	@ (8001ad8 <HAL_UART_MspInit+0xd4>)
 8001a30:	f043 0310 	orr.w	r3, r3, #16
 8001a34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a36:	4b28      	ldr	r3, [pc, #160]	@ (8001ad8 <HAL_UART_MspInit+0xd4>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3a:	f003 0310 	and.w	r3, r3, #16
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b24      	ldr	r3, [pc, #144]	@ (8001ad8 <HAL_UART_MspInit+0xd4>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	4a23      	ldr	r2, [pc, #140]	@ (8001ad8 <HAL_UART_MspInit+0xd4>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a52:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <HAL_UART_MspInit+0xd4>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad8 <HAL_UART_MspInit+0xd4>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad8 <HAL_UART_MspInit+0xd4>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad8 <HAL_UART_MspInit+0xd4>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a8c:	2307      	movs	r3, #7
 8001a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	4619      	mov	r1, r3
 8001a96:	4811      	ldr	r0, [pc, #68]	@ (8001adc <HAL_UART_MspInit+0xd8>)
 8001a98:	f001 f9ba 	bl	8002e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a9c:	2340      	movs	r3, #64	@ 0x40
 8001a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aac:	2307      	movs	r3, #7
 8001aae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480a      	ldr	r0, [pc, #40]	@ (8001ae0 <HAL_UART_MspInit+0xdc>)
 8001ab8:	f001 f9aa 	bl	8002e10 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2105      	movs	r1, #5
 8001ac0:	2025      	movs	r0, #37	@ 0x25
 8001ac2:	f001 f94b 	bl	8002d5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ac6:	2025      	movs	r0, #37	@ 0x25
 8001ac8:	f001 f964 	bl	8002d94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001acc:	bf00      	nop
 8001ace:	3728      	adds	r7, #40	@ 0x28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40011000 	.word	0x40011000
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	40020400 	.word	0x40020400

08001ae4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08c      	sub	sp, #48	@ 0x30
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	2036      	movs	r0, #54	@ 0x36
 8001afa:	f001 f92f 	bl	8002d5c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001afe:	2036      	movs	r0, #54	@ 0x36
 8001b00:	f001 f948 	bl	8002d94 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	4b1f      	ldr	r3, [pc, #124]	@ (8001b88 <HAL_InitTick+0xa4>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0c:	4a1e      	ldr	r2, [pc, #120]	@ (8001b88 <HAL_InitTick+0xa4>)
 8001b0e:	f043 0310 	orr.w	r3, r3, #16
 8001b12:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b14:	4b1c      	ldr	r3, [pc, #112]	@ (8001b88 <HAL_InitTick+0xa4>)
 8001b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b20:	f107 0210 	add.w	r2, r7, #16
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4611      	mov	r1, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 f8ca 	bl	8003cc4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b30:	f002 f8a0 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 8001b34:	4603      	mov	r3, r0
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b3c:	4a13      	ldr	r2, [pc, #76]	@ (8001b8c <HAL_InitTick+0xa8>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	0c9b      	lsrs	r3, r3, #18
 8001b44:	3b01      	subs	r3, #1
 8001b46:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b48:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <HAL_InitTick+0xac>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	@ (8001b94 <HAL_InitTick+0xb0>)
 8001b4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b4e:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <HAL_InitTick+0xac>)
 8001b50:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b54:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b56:	4a0e      	ldr	r2, [pc, #56]	@ (8001b90 <HAL_InitTick+0xac>)
 8001b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b5a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <HAL_InitTick+0xac>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b62:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <HAL_InitTick+0xac>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b68:	4809      	ldr	r0, [pc, #36]	@ (8001b90 <HAL_InitTick+0xac>)
 8001b6a:	f002 f8dd 	bl	8003d28 <HAL_TIM_Base_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d104      	bne.n	8001b7e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001b74:	4806      	ldr	r0, [pc, #24]	@ (8001b90 <HAL_InitTick+0xac>)
 8001b76:	f002 f90c 	bl	8003d92 <HAL_TIM_Base_Start_IT>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	e000      	b.n	8001b80 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3730      	adds	r7, #48	@ 0x30
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	431bde83 	.word	0x431bde83
 8001b90:	2000038c 	.word	0x2000038c
 8001b94:	40001000 	.word	0x40001000

08001b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <NMI_Handler+0x4>

08001ba0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <HardFault_Handler+0x4>

08001ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <MemManage_Handler+0x4>

08001bb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <BusFault_Handler+0x4>

08001bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <UsageFault_Handler+0x4>

08001bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001bd4:	4802      	ldr	r0, [pc, #8]	@ (8001be0 <CAN1_RX0_IRQHandler+0x10>)
 8001bd6:	f000 fdb6 	bl	8002746 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200002d0 	.word	0x200002d0

08001be4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001be8:	4802      	ldr	r0, [pc, #8]	@ (8001bf4 <USART1_IRQHandler+0x10>)
 8001bea:	f002 fc17 	bl	800441c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200002f8 	.word	0x200002f8

08001bf8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bfc:	4802      	ldr	r0, [pc, #8]	@ (8001c08 <TIM6_DAC_IRQHandler+0x10>)
 8001bfe:	f002 f8ec 	bl	8003dda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	2000038c 	.word	0x2000038c

08001c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c14:	4a14      	ldr	r2, [pc, #80]	@ (8001c68 <_sbrk+0x5c>)
 8001c16:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <_sbrk+0x60>)
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c20:	4b13      	ldr	r3, [pc, #76]	@ (8001c70 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d102      	bne.n	8001c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c28:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <_sbrk+0x64>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	@ (8001c74 <_sbrk+0x68>)
 8001c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2e:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d207      	bcs.n	8001c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c3c:	f006 fa0e 	bl	800805c <__errno>
 8001c40:	4603      	mov	r3, r0
 8001c42:	220c      	movs	r2, #12
 8001c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4a:	e009      	b.n	8001c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c52:	4b07      	ldr	r3, [pc, #28]	@ (8001c70 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	4a05      	ldr	r2, [pc, #20]	@ (8001c70 <_sbrk+0x64>)
 8001c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20020000 	.word	0x20020000
 8001c6c:	00000400 	.word	0x00000400
 8001c70:	200003cc 	.word	0x200003cc
 8001c74:	20004268 	.word	0x20004268

08001c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c7c:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <SystemInit+0x20>)
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c82:	4a05      	ldr	r2, [pc, #20]	@ (8001c98 <SystemInit+0x20>)
 8001c84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cd4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ca0:	f7ff ffea 	bl	8001c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ca4:	480c      	ldr	r0, [pc, #48]	@ (8001cd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ca6:	490d      	ldr	r1, [pc, #52]	@ (8001cdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cac:	e002      	b.n	8001cb4 <LoopCopyDataInit>

08001cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb2:	3304      	adds	r3, #4

08001cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb8:	d3f9      	bcc.n	8001cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8001ce8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc0:	e001      	b.n	8001cc6 <LoopFillZerobss>

08001cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc4:	3204      	adds	r2, #4

08001cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc8:	d3fb      	bcc.n	8001cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cca:	f006 f9cd 	bl	8008068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cce:	f7ff fa59 	bl	8001184 <main>
  bx  lr    
 8001cd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cdc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001ce0:	08008c20 	.word	0x08008c20
  ldr r2, =_sbss
 8001ce4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001ce8:	20004268 	.word	0x20004268

08001cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cec:	e7fe      	b.n	8001cec <ADC_IRQHandler>
	...

08001cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d30 <HAL_Init+0x40>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d30 <HAL_Init+0x40>)
 8001cfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d00:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <HAL_Init+0x40>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0a      	ldr	r2, [pc, #40]	@ (8001d30 <HAL_Init+0x40>)
 8001d06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d0c:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <HAL_Init+0x40>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a07      	ldr	r2, [pc, #28]	@ (8001d30 <HAL_Init+0x40>)
 8001d12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d18:	2003      	movs	r0, #3
 8001d1a:	f001 f814 	bl	8002d46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f7ff fee0 	bl	8001ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d24:	f7ff fdd0 	bl	80018c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40023c00 	.word	0x40023c00

08001d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d38:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_IncTick+0x20>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <HAL_IncTick+0x24>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4413      	add	r3, r2
 8001d44:	4a04      	ldr	r2, [pc, #16]	@ (8001d58 <HAL_IncTick+0x24>)
 8001d46:	6013      	str	r3, [r2, #0]
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	20000008 	.word	0x20000008
 8001d58:	200003d0 	.word	0x200003d0

08001d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d60:	4b03      	ldr	r3, [pc, #12]	@ (8001d70 <HAL_GetTick+0x14>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	200003d0 	.word	0x200003d0

08001d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d7c:	f7ff ffee 	bl	8001d5c <HAL_GetTick>
 8001d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d8c:	d005      	beq.n	8001d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001db8 <HAL_Delay+0x44>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4413      	add	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d9a:	bf00      	nop
 8001d9c:	f7ff ffde 	bl	8001d5c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d8f7      	bhi.n	8001d9c <HAL_Delay+0x28>
  {
  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000008 	.word	0x20000008

08001dbc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e0ed      	b.n	8001faa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d102      	bne.n	8001de0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff fda0 	bl	8001920 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0202 	bic.w	r2, r2, #2
 8001dee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001df0:	f7ff ffb4 	bl	8001d5c <HAL_GetTick>
 8001df4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001df6:	e012      	b.n	8001e1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001df8:	f7ff ffb0 	bl	8001d5c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b0a      	cmp	r3, #10
 8001e04:	d90b      	bls.n	8001e1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2205      	movs	r2, #5
 8001e16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e0c5      	b.n	8001faa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1e5      	bne.n	8001df8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e3c:	f7ff ff8e 	bl	8001d5c <HAL_GetTick>
 8001e40:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e42:	e012      	b.n	8001e6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e44:	f7ff ff8a 	bl	8001d5c <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b0a      	cmp	r3, #10
 8001e50:	d90b      	bls.n	8001e6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e56:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2205      	movs	r2, #5
 8001e62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e09f      	b.n	8001faa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0e5      	beq.n	8001e44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7e1b      	ldrb	r3, [r3, #24]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d108      	bne.n	8001e92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e007      	b.n	8001ea2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7e5b      	ldrb	r3, [r3, #25]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d108      	bne.n	8001ebc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	e007      	b.n	8001ecc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001eca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7e9b      	ldrb	r3, [r3, #26]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d108      	bne.n	8001ee6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0220 	orr.w	r2, r2, #32
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	e007      	b.n	8001ef6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0220 	bic.w	r2, r2, #32
 8001ef4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	7edb      	ldrb	r3, [r3, #27]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d108      	bne.n	8001f10 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0210 	bic.w	r2, r2, #16
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	e007      	b.n	8001f20 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0210 	orr.w	r2, r2, #16
 8001f1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	7f1b      	ldrb	r3, [r3, #28]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d108      	bne.n	8001f3a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0208 	orr.w	r2, r2, #8
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	e007      	b.n	8001f4a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0208 	bic.w	r2, r2, #8
 8001f48:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7f5b      	ldrb	r3, [r3, #29]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d108      	bne.n	8001f64 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0204 	orr.w	r2, r2, #4
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	e007      	b.n	8001f74 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0204 	bic.w	r2, r2, #4
 8001f72:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	ea42 0103 	orr.w	r1, r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	1e5a      	subs	r2, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e015      	b.n	8001ff0 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f93b 	bl	8002240 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff fcf8 	bl	80019c0 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fde:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800200e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002010:	7cfb      	ldrb	r3, [r7, #19]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d003      	beq.n	800201e <HAL_CAN_ConfigFilter+0x26>
 8002016:	7cfb      	ldrb	r3, [r7, #19]
 8002018:	2b02      	cmp	r3, #2
 800201a:	f040 80be 	bne.w	800219a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800201e:	4b65      	ldr	r3, [pc, #404]	@ (80021b4 <HAL_CAN_ConfigFilter+0x1bc>)
 8002020:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002028:	f043 0201 	orr.w	r2, r3, #1
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002038:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	431a      	orrs	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f003 031f 	and.w	r3, r3, #31
 800205e:	2201      	movs	r2, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	43db      	mvns	r3, r3
 8002070:	401a      	ands	r2, r3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d123      	bne.n	80020c8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	43db      	mvns	r3, r3
 800208a:	401a      	ands	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	3248      	adds	r2, #72	@ 0x48
 80020a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020be:	6979      	ldr	r1, [r7, #20]
 80020c0:	3348      	adds	r3, #72	@ 0x48
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	440b      	add	r3, r1
 80020c6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d122      	bne.n	8002116 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	431a      	orrs	r2, r3
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80020f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3248      	adds	r2, #72	@ 0x48
 80020f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800210a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800210c:	6979      	ldr	r1, [r7, #20]
 800210e:	3348      	adds	r3, #72	@ 0x48
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	440b      	add	r3, r1
 8002114:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	43db      	mvns	r3, r3
 8002128:	401a      	ands	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002130:	e007      	b.n	8002142 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	431a      	orrs	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d109      	bne.n	800215e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	43db      	mvns	r3, r3
 8002154:	401a      	ands	r2, r3
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800215c:	e007      	b.n	800216e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	431a      	orrs	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d107      	bne.n	8002186 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	431a      	orrs	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800218c:	f023 0201 	bic.w	r2, r3, #1
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	e006      	b.n	80021a8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
  }
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	371c      	adds	r7, #28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	40006400 	.word	0x40006400

080021b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d12e      	bne.n	800222a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021e4:	f7ff fdba 	bl	8001d5c <HAL_GetTick>
 80021e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021ea:	e012      	b.n	8002212 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021ec:	f7ff fdb6 	bl	8001d5c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b0a      	cmp	r3, #10
 80021f8:	d90b      	bls.n	8002212 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2205      	movs	r2, #5
 800220a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e012      	b.n	8002238 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1e5      	bne.n	80021ec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	e006      	b.n	8002238 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
  }
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d133      	bne.n	80022bc <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002264:	f7ff fd7a 	bl	8001d5c <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800226a:	e012      	b.n	8002292 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800226c:	f7ff fd76 	bl	8001d5c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b0a      	cmp	r3, #10
 8002278:	d90b      	bls.n	8002292 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2205      	movs	r2, #5
 800228a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e01b      	b.n	80022ca <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0e5      	beq.n	800226c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0202 	bic.w	r2, r2, #2
 80022ae:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	e006      	b.n	80022ca <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
  }
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b089      	sub	sp, #36	@ 0x24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80022f0:	7ffb      	ldrb	r3, [r7, #31]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d003      	beq.n	80022fe <HAL_CAN_AddTxMessage+0x2c>
 80022f6:	7ffb      	ldrb	r3, [r7, #31]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	f040 80b8 	bne.w	800246e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10a      	bne.n	800231e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800230e:	2b00      	cmp	r3, #0
 8002310:	d105      	bne.n	800231e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80a0 	beq.w	800245e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	0e1b      	lsrs	r3, r3, #24
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d907      	bls.n	800233e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e09e      	b.n	800247c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800233e:	2201      	movs	r2, #1
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	409a      	lsls	r2, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10d      	bne.n	800236c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800235a:	68f9      	ldr	r1, [r7, #12]
 800235c:	6809      	ldr	r1, [r1, #0]
 800235e:	431a      	orrs	r2, r3
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3318      	adds	r3, #24
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	440b      	add	r3, r1
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	e00f      	b.n	800238c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002376:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800237c:	68f9      	ldr	r1, [r7, #12]
 800237e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002380:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	3318      	adds	r3, #24
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	440b      	add	r3, r1
 800238a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6819      	ldr	r1, [r3, #0]
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	3318      	adds	r3, #24
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	440b      	add	r3, r1
 800239c:	3304      	adds	r3, #4
 800239e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	7d1b      	ldrb	r3, [r3, #20]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d111      	bne.n	80023cc <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	3318      	adds	r3, #24
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	4413      	add	r3, r2
 80023b4:	3304      	adds	r3, #4
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	6811      	ldr	r1, [r2, #0]
 80023bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	3318      	adds	r3, #24
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	440b      	add	r3, r1
 80023c8:	3304      	adds	r3, #4
 80023ca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3307      	adds	r3, #7
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	061a      	lsls	r2, r3, #24
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3306      	adds	r3, #6
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	041b      	lsls	r3, r3, #16
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3305      	adds	r3, #5
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	021b      	lsls	r3, r3, #8
 80023e6:	4313      	orrs	r3, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	3204      	adds	r2, #4
 80023ec:	7812      	ldrb	r2, [r2, #0]
 80023ee:	4610      	mov	r0, r2
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	6811      	ldr	r1, [r2, #0]
 80023f4:	ea43 0200 	orr.w	r2, r3, r0
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	440b      	add	r3, r1
 80023fe:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002402:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3303      	adds	r3, #3
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	061a      	lsls	r2, r3, #24
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3302      	adds	r3, #2
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	041b      	lsls	r3, r3, #16
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3301      	adds	r3, #1
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	4313      	orrs	r3, r2
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	7812      	ldrb	r2, [r2, #0]
 8002424:	4610      	mov	r0, r2
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	6811      	ldr	r1, [r2, #0]
 800242a:	ea43 0200 	orr.w	r2, r3, r0
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	440b      	add	r3, r1
 8002434:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002438:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	3318      	adds	r3, #24
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	4413      	add	r3, r2
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	6811      	ldr	r1, [r2, #0]
 800244c:	f043 0201 	orr.w	r2, r3, #1
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	3318      	adds	r3, #24
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	440b      	add	r3, r1
 8002458:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	e00e      	b.n	800247c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002462:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e006      	b.n	800247c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002472:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
  }
}
 800247c:	4618      	mov	r0, r3
 800247e:	3724      	adds	r7, #36	@ 0x24
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800249c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800249e:	7dfb      	ldrb	r3, [r7, #23]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d003      	beq.n	80024ac <HAL_CAN_GetRxMessage+0x24>
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	f040 80f3 	bne.w	8002692 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10e      	bne.n	80024d0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d116      	bne.n	80024ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0e7      	b.n	80026a0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d107      	bne.n	80024ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e0d8      	b.n	80026a0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	331b      	adds	r3, #27
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	4413      	add	r3, r2
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0204 	and.w	r2, r3, #4
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10c      	bne.n	8002526 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	331b      	adds	r3, #27
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	4413      	add	r3, r2
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	0d5b      	lsrs	r3, r3, #21
 800251c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	e00b      	b.n	800253e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	331b      	adds	r3, #27
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	4413      	add	r3, r2
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	08db      	lsrs	r3, r3, #3
 8002536:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	331b      	adds	r3, #27
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	4413      	add	r3, r2
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0202 	and.w	r2, r3, #2
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	331b      	adds	r3, #27
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	4413      	add	r3, r2
 8002560:	3304      	adds	r3, #4
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 020f 	and.w	r2, r3, #15
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	331b      	adds	r3, #27
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	4413      	add	r3, r2
 8002578:	3304      	adds	r3, #4
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	b2da      	uxtb	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	331b      	adds	r3, #27
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	4413      	add	r3, r2
 8002590:	3304      	adds	r3, #4
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	0c1b      	lsrs	r3, r3, #16
 8002596:	b29a      	uxth	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	0a1a      	lsrs	r2, r3, #8
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	3301      	adds	r3, #1
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	0c1a      	lsrs	r2, r3, #16
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	3302      	adds	r3, #2
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	0e1a      	lsrs	r2, r3, #24
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	3303      	adds	r3, #3
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	4413      	add	r3, r2
 800260a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	3304      	adds	r3, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	4413      	add	r3, r2
 8002622:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	0a1a      	lsrs	r2, r3, #8
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	3305      	adds	r3, #5
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	4413      	add	r3, r2
 800263c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	0c1a      	lsrs	r2, r3, #16
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	3306      	adds	r3, #6
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	4413      	add	r3, r2
 8002656:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	0e1a      	lsrs	r2, r3, #24
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	3307      	adds	r3, #7
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d108      	bne.n	800267e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0220 	orr.w	r2, r2, #32
 800267a:	60da      	str	r2, [r3, #12]
 800267c:	e007      	b.n	800268e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0220 	orr.w	r2, r2, #32
 800268c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	e006      	b.n	80026a0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
  }
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	371c      	adds	r7, #28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026bc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d002      	beq.n	80026ca <HAL_CAN_ActivateNotification+0x1e>
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d109      	bne.n	80026de <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6959      	ldr	r1, [r3, #20]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	e006      	b.n	80026ec <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
  }
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002708:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d002      	beq.n	8002716 <HAL_CAN_DeactivateNotification+0x1e>
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d10a      	bne.n	800272c <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6959      	ldr	r1, [r3, #20]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	43da      	mvns	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	400a      	ands	r2, r1
 8002726:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	e006      	b.n	800273a <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002730:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
  }
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b08a      	sub	sp, #40	@ 0x28
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800274e:	2300      	movs	r3, #0
 8002750:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d07c      	beq.n	8002886 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d023      	beq.n	80027de <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2201      	movs	r2, #1
 800279c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f983 	bl	8002ab4 <HAL_CAN_TxMailbox0CompleteCallback>
 80027ae:	e016      	b.n	80027de <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d004      	beq.n	80027c4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80027c2:	e00c      	b.n	80027de <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d004      	beq.n	80027d8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80027ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027d6:	e002      	b.n	80027de <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f989 	bl	8002af0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d024      	beq.n	8002832 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f963 	bl	8002ac8 <HAL_CAN_TxMailbox1CompleteCallback>
 8002802:	e016      	b.n	8002832 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800280a:	2b00      	cmp	r3, #0
 800280c:	d004      	beq.n	8002818 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002814:	627b      	str	r3, [r7, #36]	@ 0x24
 8002816:	e00c      	b.n	8002832 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800281e:	2b00      	cmp	r3, #0
 8002820:	d004      	beq.n	800282c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002824:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002828:	627b      	str	r3, [r7, #36]	@ 0x24
 800282a:	e002      	b.n	8002832 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f969 	bl	8002b04 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d024      	beq.n	8002886 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002844:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f943 	bl	8002adc <HAL_CAN_TxMailbox2CompleteCallback>
 8002856:	e016      	b.n	8002886 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d004      	beq.n	800286c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002864:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002868:	627b      	str	r3, [r7, #36]	@ 0x24
 800286a:	e00c      	b.n	8002886 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d004      	beq.n	8002880 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800287c:	627b      	str	r3, [r7, #36]	@ 0x24
 800287e:	e002      	b.n	8002886 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f949 	bl	8002b18 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00c      	beq.n	80028aa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	2b00      	cmp	r3, #0
 8002898:	d007      	beq.n	80028aa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2210      	movs	r2, #16
 80028a8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00b      	beq.n	80028cc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d006      	beq.n	80028cc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2208      	movs	r2, #8
 80028c4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f930 	bl	8002b2c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d009      	beq.n	80028ea <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7fe fc21 	bl	800112c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00c      	beq.n	800290e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d007      	beq.n	800290e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80028fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002900:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2210      	movs	r2, #16
 800290c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00b      	beq.n	8002930 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	d006      	beq.n	8002930 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2208      	movs	r2, #8
 8002928:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f912 	bl	8002b54 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f8f9 	bl	8002b40 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00b      	beq.n	8002970 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	2b00      	cmp	r3, #0
 8002960:	d006      	beq.n	8002970 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2210      	movs	r2, #16
 8002968:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f8fc 	bl	8002b68 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00b      	beq.n	8002992 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d006      	beq.n	8002992 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2208      	movs	r2, #8
 800298a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f8f5 	bl	8002b7c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d07b      	beq.n	8002a94 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d072      	beq.n	8002a8c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	f043 0302 	orr.w	r3, r3, #2
 80029dc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	f043 0304 	orr.w	r3, r3, #4
 80029f8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d043      	beq.n	8002a8c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d03e      	beq.n	8002a8c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a14:	2b60      	cmp	r3, #96	@ 0x60
 8002a16:	d02b      	beq.n	8002a70 <HAL_CAN_IRQHandler+0x32a>
 8002a18:	2b60      	cmp	r3, #96	@ 0x60
 8002a1a:	d82e      	bhi.n	8002a7a <HAL_CAN_IRQHandler+0x334>
 8002a1c:	2b50      	cmp	r3, #80	@ 0x50
 8002a1e:	d022      	beq.n	8002a66 <HAL_CAN_IRQHandler+0x320>
 8002a20:	2b50      	cmp	r3, #80	@ 0x50
 8002a22:	d82a      	bhi.n	8002a7a <HAL_CAN_IRQHandler+0x334>
 8002a24:	2b40      	cmp	r3, #64	@ 0x40
 8002a26:	d019      	beq.n	8002a5c <HAL_CAN_IRQHandler+0x316>
 8002a28:	2b40      	cmp	r3, #64	@ 0x40
 8002a2a:	d826      	bhi.n	8002a7a <HAL_CAN_IRQHandler+0x334>
 8002a2c:	2b30      	cmp	r3, #48	@ 0x30
 8002a2e:	d010      	beq.n	8002a52 <HAL_CAN_IRQHandler+0x30c>
 8002a30:	2b30      	cmp	r3, #48	@ 0x30
 8002a32:	d822      	bhi.n	8002a7a <HAL_CAN_IRQHandler+0x334>
 8002a34:	2b10      	cmp	r3, #16
 8002a36:	d002      	beq.n	8002a3e <HAL_CAN_IRQHandler+0x2f8>
 8002a38:	2b20      	cmp	r3, #32
 8002a3a:	d005      	beq.n	8002a48 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a3c:	e01d      	b.n	8002a7a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	f043 0308 	orr.w	r3, r3, #8
 8002a44:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a46:	e019      	b.n	8002a7c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4a:	f043 0310 	orr.w	r3, r3, #16
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a50:	e014      	b.n	8002a7c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	f043 0320 	orr.w	r3, r3, #32
 8002a58:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a5a:	e00f      	b.n	8002a7c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a62:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a64:	e00a      	b.n	8002a7c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a6e:	e005      	b.n	8002a7c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a76:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a78:	e000      	b.n	8002a7c <HAL_CAN_IRQHandler+0x336>
            break;
 8002a7a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002a8a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2204      	movs	r2, #4
 8002a92:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d008      	beq.n	8002aac <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f872 	bl	8002b90 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002aac:	bf00      	nop
 8002aae:	3728      	adds	r7, #40	@ 0x28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <__NVIC_SetPriorityGrouping>:
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002be8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bd6:	4a04      	ldr	r2, [pc, #16]	@ (8002be8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	60d3      	str	r3, [r2, #12]
}
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <__NVIC_GetPriorityGrouping>:
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf0:	4b04      	ldr	r3, [pc, #16]	@ (8002c04 <__NVIC_GetPriorityGrouping+0x18>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	0a1b      	lsrs	r3, r3, #8
 8002bf6:	f003 0307 	and.w	r3, r3, #7
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <__NVIC_EnableIRQ>:
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	db0b      	blt.n	8002c32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	f003 021f 	and.w	r2, r3, #31
 8002c20:	4907      	ldr	r1, [pc, #28]	@ (8002c40 <__NVIC_EnableIRQ+0x38>)
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	2001      	movs	r0, #1
 8002c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	e000e100 	.word	0xe000e100

08002c44 <__NVIC_DisableIRQ>:
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	db12      	blt.n	8002c7c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	f003 021f 	and.w	r2, r3, #31
 8002c5c:	490a      	ldr	r1, [pc, #40]	@ (8002c88 <__NVIC_DisableIRQ+0x44>)
 8002c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	2001      	movs	r0, #1
 8002c66:	fa00 f202 	lsl.w	r2, r0, r2
 8002c6a:	3320      	adds	r3, #32
 8002c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c70:	f3bf 8f4f 	dsb	sy
}
 8002c74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c76:	f3bf 8f6f 	isb	sy
}
 8002c7a:	bf00      	nop
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	e000e100 	.word	0xe000e100

08002c8c <__NVIC_SetPriority>:
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	6039      	str	r1, [r7, #0]
 8002c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	db0a      	blt.n	8002cb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	490c      	ldr	r1, [pc, #48]	@ (8002cd8 <__NVIC_SetPriority+0x4c>)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	0112      	lsls	r2, r2, #4
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	440b      	add	r3, r1
 8002cb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002cb4:	e00a      	b.n	8002ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	4908      	ldr	r1, [pc, #32]	@ (8002cdc <__NVIC_SetPriority+0x50>)
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	3b04      	subs	r3, #4
 8002cc4:	0112      	lsls	r2, r2, #4
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	440b      	add	r3, r1
 8002cca:	761a      	strb	r2, [r3, #24]
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000e100 	.word	0xe000e100
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <NVIC_EncodePriority>:
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b089      	sub	sp, #36	@ 0x24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f1c3 0307 	rsb	r3, r3, #7
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	bf28      	it	cs
 8002cfe:	2304      	movcs	r3, #4
 8002d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	3304      	adds	r3, #4
 8002d06:	2b06      	cmp	r3, #6
 8002d08:	d902      	bls.n	8002d10 <NVIC_EncodePriority+0x30>
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3b03      	subs	r3, #3
 8002d0e:	e000      	b.n	8002d12 <NVIC_EncodePriority+0x32>
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d14:	f04f 32ff 	mov.w	r2, #4294967295
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43da      	mvns	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	401a      	ands	r2, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d28:	f04f 31ff 	mov.w	r1, #4294967295
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d32:	43d9      	mvns	r1, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d38:	4313      	orrs	r3, r2
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3724      	adds	r7, #36	@ 0x24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff ff28 	bl	8002ba4 <__NVIC_SetPriorityGrouping>
}
 8002d54:	bf00      	nop
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d6e:	f7ff ff3d 	bl	8002bec <__NVIC_GetPriorityGrouping>
 8002d72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	68b9      	ldr	r1, [r7, #8]
 8002d78:	6978      	ldr	r0, [r7, #20]
 8002d7a:	f7ff ffb1 	bl	8002ce0 <NVIC_EncodePriority>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff ff80 	bl	8002c8c <__NVIC_SetPriority>
}
 8002d8c:	bf00      	nop
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff ff30 	bl	8002c08 <__NVIC_EnableIRQ>
}
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff ff40 	bl	8002c44 <__NVIC_DisableIRQ>
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d004      	beq.n	8002dea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2280      	movs	r2, #128	@ 0x80
 8002de4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e00c      	b.n	8002e04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2205      	movs	r2, #5
 8002dee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0201 	bic.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b089      	sub	sp, #36	@ 0x24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
 8002e2a:	e16b      	b.n	8003104 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	f040 815a 	bne.w	80030fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d00b      	beq.n	8002e6a <HAL_GPIO_Init+0x5a>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d007      	beq.n	8002e6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e5e:	2b11      	cmp	r3, #17
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b12      	cmp	r3, #18
 8002e68:	d130      	bne.n	8002ecc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	2203      	movs	r2, #3
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f003 0201 	and.w	r2, r3, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_Init+0xfc>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b12      	cmp	r3, #18
 8002f0a:	d123      	bne.n	8002f54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	08da      	lsrs	r2, r3, #3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3208      	adds	r2, #8
 8002f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	220f      	movs	r2, #15
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	08da      	lsrs	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3208      	adds	r2, #8
 8002f4e:	69b9      	ldr	r1, [r7, #24]
 8002f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	2203      	movs	r2, #3
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0203 	and.w	r2, r3, #3
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80b4 	beq.w	80030fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	4b60      	ldr	r3, [pc, #384]	@ (800311c <HAL_GPIO_Init+0x30c>)
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9e:	4a5f      	ldr	r2, [pc, #380]	@ (800311c <HAL_GPIO_Init+0x30c>)
 8002fa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fa6:	4b5d      	ldr	r3, [pc, #372]	@ (800311c <HAL_GPIO_Init+0x30c>)
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002faa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fb2:	4a5b      	ldr	r2, [pc, #364]	@ (8003120 <HAL_GPIO_Init+0x310>)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	3302      	adds	r3, #2
 8002fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	220f      	movs	r2, #15
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a52      	ldr	r2, [pc, #328]	@ (8003124 <HAL_GPIO_Init+0x314>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d02b      	beq.n	8003036 <HAL_GPIO_Init+0x226>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a51      	ldr	r2, [pc, #324]	@ (8003128 <HAL_GPIO_Init+0x318>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d025      	beq.n	8003032 <HAL_GPIO_Init+0x222>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a50      	ldr	r2, [pc, #320]	@ (800312c <HAL_GPIO_Init+0x31c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d01f      	beq.n	800302e <HAL_GPIO_Init+0x21e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a4f      	ldr	r2, [pc, #316]	@ (8003130 <HAL_GPIO_Init+0x320>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d019      	beq.n	800302a <HAL_GPIO_Init+0x21a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a4e      	ldr	r2, [pc, #312]	@ (8003134 <HAL_GPIO_Init+0x324>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d013      	beq.n	8003026 <HAL_GPIO_Init+0x216>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a4d      	ldr	r2, [pc, #308]	@ (8003138 <HAL_GPIO_Init+0x328>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00d      	beq.n	8003022 <HAL_GPIO_Init+0x212>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a4c      	ldr	r2, [pc, #304]	@ (800313c <HAL_GPIO_Init+0x32c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d007      	beq.n	800301e <HAL_GPIO_Init+0x20e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a4b      	ldr	r2, [pc, #300]	@ (8003140 <HAL_GPIO_Init+0x330>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d101      	bne.n	800301a <HAL_GPIO_Init+0x20a>
 8003016:	2307      	movs	r3, #7
 8003018:	e00e      	b.n	8003038 <HAL_GPIO_Init+0x228>
 800301a:	2308      	movs	r3, #8
 800301c:	e00c      	b.n	8003038 <HAL_GPIO_Init+0x228>
 800301e:	2306      	movs	r3, #6
 8003020:	e00a      	b.n	8003038 <HAL_GPIO_Init+0x228>
 8003022:	2305      	movs	r3, #5
 8003024:	e008      	b.n	8003038 <HAL_GPIO_Init+0x228>
 8003026:	2304      	movs	r3, #4
 8003028:	e006      	b.n	8003038 <HAL_GPIO_Init+0x228>
 800302a:	2303      	movs	r3, #3
 800302c:	e004      	b.n	8003038 <HAL_GPIO_Init+0x228>
 800302e:	2302      	movs	r3, #2
 8003030:	e002      	b.n	8003038 <HAL_GPIO_Init+0x228>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <HAL_GPIO_Init+0x228>
 8003036:	2300      	movs	r3, #0
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	f002 0203 	and.w	r2, r2, #3
 800303e:	0092      	lsls	r2, r2, #2
 8003040:	4093      	lsls	r3, r2
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003048:	4935      	ldr	r1, [pc, #212]	@ (8003120 <HAL_GPIO_Init+0x310>)
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	3302      	adds	r3, #2
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003056:	4b3b      	ldr	r3, [pc, #236]	@ (8003144 <HAL_GPIO_Init+0x334>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800307a:	4a32      	ldr	r2, [pc, #200]	@ (8003144 <HAL_GPIO_Init+0x334>)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003080:	4b30      	ldr	r3, [pc, #192]	@ (8003144 <HAL_GPIO_Init+0x334>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030a4:	4a27      	ldr	r2, [pc, #156]	@ (8003144 <HAL_GPIO_Init+0x334>)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030aa:	4b26      	ldr	r3, [pc, #152]	@ (8003144 <HAL_GPIO_Init+0x334>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003144 <HAL_GPIO_Init+0x334>)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003144 <HAL_GPIO_Init+0x334>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030f8:	4a12      	ldr	r2, [pc, #72]	@ (8003144 <HAL_GPIO_Init+0x334>)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3301      	adds	r3, #1
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	2b0f      	cmp	r3, #15
 8003108:	f67f ae90 	bls.w	8002e2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	3724      	adds	r7, #36	@ 0x24
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800
 8003120:	40013800 	.word	0x40013800
 8003124:	40020000 	.word	0x40020000
 8003128:	40020400 	.word	0x40020400
 800312c:	40020800 	.word	0x40020800
 8003130:	40020c00 	.word	0x40020c00
 8003134:	40021000 	.word	0x40021000
 8003138:	40021400 	.word	0x40021400
 800313c:	40021800 	.word	0x40021800
 8003140:	40021c00 	.word	0x40021c00
 8003144:	40013c00 	.word	0x40013c00

08003148 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	e0cd      	b.n	8003300 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003164:	2201      	movs	r2, #1
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4013      	ands	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	429a      	cmp	r2, r3
 800317c:	f040 80bd 	bne.w	80032fa <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003180:	4a65      	ldr	r2, [pc, #404]	@ (8003318 <HAL_GPIO_DeInit+0x1d0>)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	089b      	lsrs	r3, r3, #2
 8003186:	3302      	adds	r3, #2
 8003188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	220f      	movs	r2, #15
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	4013      	ands	r3, r2
 80031a0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a5d      	ldr	r2, [pc, #372]	@ (800331c <HAL_GPIO_DeInit+0x1d4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d02b      	beq.n	8003202 <HAL_GPIO_DeInit+0xba>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a5c      	ldr	r2, [pc, #368]	@ (8003320 <HAL_GPIO_DeInit+0x1d8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d025      	beq.n	80031fe <HAL_GPIO_DeInit+0xb6>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a5b      	ldr	r2, [pc, #364]	@ (8003324 <HAL_GPIO_DeInit+0x1dc>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d01f      	beq.n	80031fa <HAL_GPIO_DeInit+0xb2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a5a      	ldr	r2, [pc, #360]	@ (8003328 <HAL_GPIO_DeInit+0x1e0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d019      	beq.n	80031f6 <HAL_GPIO_DeInit+0xae>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a59      	ldr	r2, [pc, #356]	@ (800332c <HAL_GPIO_DeInit+0x1e4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d013      	beq.n	80031f2 <HAL_GPIO_DeInit+0xaa>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a58      	ldr	r2, [pc, #352]	@ (8003330 <HAL_GPIO_DeInit+0x1e8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00d      	beq.n	80031ee <HAL_GPIO_DeInit+0xa6>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a57      	ldr	r2, [pc, #348]	@ (8003334 <HAL_GPIO_DeInit+0x1ec>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d007      	beq.n	80031ea <HAL_GPIO_DeInit+0xa2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a56      	ldr	r2, [pc, #344]	@ (8003338 <HAL_GPIO_DeInit+0x1f0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d101      	bne.n	80031e6 <HAL_GPIO_DeInit+0x9e>
 80031e2:	2307      	movs	r3, #7
 80031e4:	e00e      	b.n	8003204 <HAL_GPIO_DeInit+0xbc>
 80031e6:	2308      	movs	r3, #8
 80031e8:	e00c      	b.n	8003204 <HAL_GPIO_DeInit+0xbc>
 80031ea:	2306      	movs	r3, #6
 80031ec:	e00a      	b.n	8003204 <HAL_GPIO_DeInit+0xbc>
 80031ee:	2305      	movs	r3, #5
 80031f0:	e008      	b.n	8003204 <HAL_GPIO_DeInit+0xbc>
 80031f2:	2304      	movs	r3, #4
 80031f4:	e006      	b.n	8003204 <HAL_GPIO_DeInit+0xbc>
 80031f6:	2303      	movs	r3, #3
 80031f8:	e004      	b.n	8003204 <HAL_GPIO_DeInit+0xbc>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e002      	b.n	8003204 <HAL_GPIO_DeInit+0xbc>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_GPIO_DeInit+0xbc>
 8003202:	2300      	movs	r3, #0
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	f002 0203 	and.w	r2, r2, #3
 800320a:	0092      	lsls	r2, r2, #2
 800320c:	4093      	lsls	r3, r2
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	429a      	cmp	r2, r3
 8003212:	d132      	bne.n	800327a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003214:	4b49      	ldr	r3, [pc, #292]	@ (800333c <HAL_GPIO_DeInit+0x1f4>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	43db      	mvns	r3, r3
 800321c:	4947      	ldr	r1, [pc, #284]	@ (800333c <HAL_GPIO_DeInit+0x1f4>)
 800321e:	4013      	ands	r3, r2
 8003220:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003222:	4b46      	ldr	r3, [pc, #280]	@ (800333c <HAL_GPIO_DeInit+0x1f4>)
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	43db      	mvns	r3, r3
 800322a:	4944      	ldr	r1, [pc, #272]	@ (800333c <HAL_GPIO_DeInit+0x1f4>)
 800322c:	4013      	ands	r3, r2
 800322e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003230:	4b42      	ldr	r3, [pc, #264]	@ (800333c <HAL_GPIO_DeInit+0x1f4>)
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	43db      	mvns	r3, r3
 8003238:	4940      	ldr	r1, [pc, #256]	@ (800333c <HAL_GPIO_DeInit+0x1f4>)
 800323a:	4013      	ands	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800323e:	4b3f      	ldr	r3, [pc, #252]	@ (800333c <HAL_GPIO_DeInit+0x1f4>)
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	43db      	mvns	r3, r3
 8003246:	493d      	ldr	r1, [pc, #244]	@ (800333c <HAL_GPIO_DeInit+0x1f4>)
 8003248:	4013      	ands	r3, r2
 800324a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	220f      	movs	r2, #15
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800325c:	4a2e      	ldr	r2, [pc, #184]	@ (8003318 <HAL_GPIO_DeInit+0x1d0>)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	089b      	lsrs	r3, r3, #2
 8003262:	3302      	adds	r3, #2
 8003264:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	43da      	mvns	r2, r3
 800326c:	482a      	ldr	r0, [pc, #168]	@ (8003318 <HAL_GPIO_DeInit+0x1d0>)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	089b      	lsrs	r3, r3, #2
 8003272:	400a      	ands	r2, r1
 8003274:	3302      	adds	r3, #2
 8003276:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	2103      	movs	r1, #3
 8003284:	fa01 f303 	lsl.w	r3, r1, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	401a      	ands	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	08da      	lsrs	r2, r3, #3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3208      	adds	r2, #8
 8003298:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	220f      	movs	r2, #15
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	08d2      	lsrs	r2, r2, #3
 80032b0:	4019      	ands	r1, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3208      	adds	r2, #8
 80032b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	2103      	movs	r1, #3
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	401a      	ands	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	2101      	movs	r1, #1
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	fa01 f303 	lsl.w	r3, r1, r3
 80032dc:	43db      	mvns	r3, r3
 80032de:	401a      	ands	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	2103      	movs	r1, #3
 80032ee:	fa01 f303 	lsl.w	r3, r1, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	401a      	ands	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	3301      	adds	r3, #1
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2b0f      	cmp	r3, #15
 8003304:	f67f af2e 	bls.w	8003164 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	371c      	adds	r7, #28
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40013800 	.word	0x40013800
 800331c:	40020000 	.word	0x40020000
 8003320:	40020400 	.word	0x40020400
 8003324:	40020800 	.word	0x40020800
 8003328:	40020c00 	.word	0x40020c00
 800332c:	40021000 	.word	0x40021000
 8003330:	40021400 	.word	0x40021400
 8003334:	40021800 	.word	0x40021800
 8003338:	40021c00 	.word	0x40021c00
 800333c:	40013c00 	.word	0x40013c00

08003340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	807b      	strh	r3, [r7, #2]
 800334c:	4613      	mov	r3, r2
 800334e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003350:	787b      	ldrb	r3, [r7, #1]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003356:	887a      	ldrh	r2, [r7, #2]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800335c:	e003      	b.n	8003366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800335e:	887b      	ldrh	r3, [r7, #2]
 8003360:	041a      	lsls	r2, r3, #16
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	619a      	str	r2, [r3, #24]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	460b      	mov	r3, r1
 800337c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695a      	ldr	r2, [r3, #20]
 8003382:	887b      	ldrh	r3, [r7, #2]
 8003384:	401a      	ands	r2, r3
 8003386:	887b      	ldrh	r3, [r7, #2]
 8003388:	429a      	cmp	r2, r3
 800338a:	d104      	bne.n	8003396 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800338c:	887b      	ldrh	r3, [r7, #2]
 800338e:	041a      	lsls	r2, r3, #16
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003394:	e002      	b.n	800339c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003396:	887a      	ldrh	r2, [r7, #2]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	619a      	str	r2, [r3, #24]
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e25e      	b.n	8003878 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d075      	beq.n	80034b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033c6:	4b88      	ldr	r3, [pc, #544]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d00c      	beq.n	80033ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033d2:	4b85      	ldr	r3, [pc, #532]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d112      	bne.n	8003404 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033de:	4b82      	ldr	r3, [pc, #520]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033ea:	d10b      	bne.n	8003404 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	4b7e      	ldr	r3, [pc, #504]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d05b      	beq.n	80034b0 <HAL_RCC_OscConfig+0x108>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d157      	bne.n	80034b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e239      	b.n	8003878 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800340c:	d106      	bne.n	800341c <HAL_RCC_OscConfig+0x74>
 800340e:	4b76      	ldr	r3, [pc, #472]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a75      	ldr	r2, [pc, #468]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	e01d      	b.n	8003458 <HAL_RCC_OscConfig+0xb0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x98>
 8003426:	4b70      	ldr	r3, [pc, #448]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a6f      	ldr	r2, [pc, #444]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 800342c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	4b6d      	ldr	r3, [pc, #436]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a6c      	ldr	r2, [pc, #432]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	e00b      	b.n	8003458 <HAL_RCC_OscConfig+0xb0>
 8003440:	4b69      	ldr	r3, [pc, #420]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a68      	ldr	r2, [pc, #416]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	4b66      	ldr	r3, [pc, #408]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a65      	ldr	r2, [pc, #404]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d013      	beq.n	8003488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7fe fc7c 	bl	8001d5c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003468:	f7fe fc78 	bl	8001d5c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	@ 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e1fe      	b.n	8003878 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b5b      	ldr	r3, [pc, #364]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0xc0>
 8003486:	e014      	b.n	80034b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fe fc68 	bl	8001d5c <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003490:	f7fe fc64 	bl	8001d5c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	@ 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e1ea      	b.n	8003878 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a2:	4b51      	ldr	r3, [pc, #324]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0xe8>
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d063      	beq.n	8003586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034be:	4b4a      	ldr	r3, [pc, #296]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00b      	beq.n	80034e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ca:	4b47      	ldr	r3, [pc, #284]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d11c      	bne.n	8003510 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034d6:	4b44      	ldr	r3, [pc, #272]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d116      	bne.n	8003510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e2:	4b41      	ldr	r3, [pc, #260]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_RCC_OscConfig+0x152>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d001      	beq.n	80034fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e1be      	b.n	8003878 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fa:	4b3b      	ldr	r3, [pc, #236]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4937      	ldr	r1, [pc, #220]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350e:	e03a      	b.n	8003586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d020      	beq.n	800355a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003518:	4b34      	ldr	r3, [pc, #208]	@ (80035ec <HAL_RCC_OscConfig+0x244>)
 800351a:	2201      	movs	r2, #1
 800351c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351e:	f7fe fc1d 	bl	8001d5c <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003526:	f7fe fc19 	bl	8001d5c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e19f      	b.n	8003878 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003538:	4b2b      	ldr	r3, [pc, #172]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f0      	beq.n	8003526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003544:	4b28      	ldr	r3, [pc, #160]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4925      	ldr	r1, [pc, #148]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003554:	4313      	orrs	r3, r2
 8003556:	600b      	str	r3, [r1, #0]
 8003558:	e015      	b.n	8003586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800355a:	4b24      	ldr	r3, [pc, #144]	@ (80035ec <HAL_RCC_OscConfig+0x244>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fe fbfc 	bl	8001d5c <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003568:	f7fe fbf8 	bl	8001d5c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e17e      	b.n	8003878 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357a:	4b1b      	ldr	r3, [pc, #108]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d036      	beq.n	8003600 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d016      	beq.n	80035c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800359a:	4b15      	ldr	r3, [pc, #84]	@ (80035f0 <HAL_RCC_OscConfig+0x248>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fe fbdc 	bl	8001d5c <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a8:	f7fe fbd8 	bl	8001d5c <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e15e      	b.n	8003878 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ba:	4b0b      	ldr	r3, [pc, #44]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 80035bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x200>
 80035c6:	e01b      	b.n	8003600 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c8:	4b09      	ldr	r3, [pc, #36]	@ (80035f0 <HAL_RCC_OscConfig+0x248>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ce:	f7fe fbc5 	bl	8001d5c <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d4:	e00e      	b.n	80035f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d6:	f7fe fbc1 	bl	8001d5c <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d907      	bls.n	80035f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e147      	b.n	8003878 <HAL_RCC_OscConfig+0x4d0>
 80035e8:	40023800 	.word	0x40023800
 80035ec:	42470000 	.word	0x42470000
 80035f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f4:	4b88      	ldr	r3, [pc, #544]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 80035f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1ea      	bne.n	80035d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 8097 	beq.w	800373c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360e:	2300      	movs	r3, #0
 8003610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003612:	4b81      	ldr	r3, [pc, #516]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10f      	bne.n	800363e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	4b7d      	ldr	r3, [pc, #500]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003626:	4a7c      	ldr	r2, [pc, #496]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 8003628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800362c:	6413      	str	r3, [r2, #64]	@ 0x40
 800362e:	4b7a      	ldr	r3, [pc, #488]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363a:	2301      	movs	r3, #1
 800363c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363e:	4b77      	ldr	r3, [pc, #476]	@ (800381c <HAL_RCC_OscConfig+0x474>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d118      	bne.n	800367c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364a:	4b74      	ldr	r3, [pc, #464]	@ (800381c <HAL_RCC_OscConfig+0x474>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a73      	ldr	r2, [pc, #460]	@ (800381c <HAL_RCC_OscConfig+0x474>)
 8003650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003656:	f7fe fb81 	bl	8001d5c <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365e:	f7fe fb7d 	bl	8001d5c <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e103      	b.n	8003878 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003670:	4b6a      	ldr	r3, [pc, #424]	@ (800381c <HAL_RCC_OscConfig+0x474>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d106      	bne.n	8003692 <HAL_RCC_OscConfig+0x2ea>
 8003684:	4b64      	ldr	r3, [pc, #400]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003688:	4a63      	ldr	r2, [pc, #396]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003690:	e01c      	b.n	80036cc <HAL_RCC_OscConfig+0x324>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b05      	cmp	r3, #5
 8003698:	d10c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x30c>
 800369a:	4b5f      	ldr	r3, [pc, #380]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369e:	4a5e      	ldr	r2, [pc, #376]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 80036a0:	f043 0304 	orr.w	r3, r3, #4
 80036a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80036a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036b2:	e00b      	b.n	80036cc <HAL_RCC_OscConfig+0x324>
 80036b4:	4b58      	ldr	r3, [pc, #352]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b8:	4a57      	ldr	r2, [pc, #348]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 80036ba:	f023 0301 	bic.w	r3, r3, #1
 80036be:	6713      	str	r3, [r2, #112]	@ 0x70
 80036c0:	4b55      	ldr	r3, [pc, #340]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c4:	4a54      	ldr	r2, [pc, #336]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 80036c6:	f023 0304 	bic.w	r3, r3, #4
 80036ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d015      	beq.n	8003700 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d4:	f7fe fb42 	bl	8001d5c <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036da:	e00a      	b.n	80036f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036dc:	f7fe fb3e 	bl	8001d5c <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e0c2      	b.n	8003878 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f2:	4b49      	ldr	r3, [pc, #292]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0ee      	beq.n	80036dc <HAL_RCC_OscConfig+0x334>
 80036fe:	e014      	b.n	800372a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003700:	f7fe fb2c 	bl	8001d5c <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003706:	e00a      	b.n	800371e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003708:	f7fe fb28 	bl	8001d5c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e0ac      	b.n	8003878 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371e:	4b3e      	ldr	r3, [pc, #248]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1ee      	bne.n	8003708 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800372a:	7dfb      	ldrb	r3, [r7, #23]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d105      	bne.n	800373c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003730:	4b39      	ldr	r3, [pc, #228]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 8003732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003734:	4a38      	ldr	r2, [pc, #224]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 8003736:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800373a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8098 	beq.w	8003876 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003746:	4b34      	ldr	r3, [pc, #208]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b08      	cmp	r3, #8
 8003750:	d05c      	beq.n	800380c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d141      	bne.n	80037de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375a:	4b31      	ldr	r3, [pc, #196]	@ (8003820 <HAL_RCC_OscConfig+0x478>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7fe fafc 	bl	8001d5c <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003768:	f7fe faf8 	bl	8001d5c <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e07e      	b.n	8003878 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377a:	4b27      	ldr	r3, [pc, #156]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69da      	ldr	r2, [r3, #28]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003794:	019b      	lsls	r3, r3, #6
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379c:	085b      	lsrs	r3, r3, #1
 800379e:	3b01      	subs	r3, #1
 80037a0:	041b      	lsls	r3, r3, #16
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a8:	061b      	lsls	r3, r3, #24
 80037aa:	491b      	ldr	r1, [pc, #108]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003820 <HAL_RCC_OscConfig+0x478>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b6:	f7fe fad1 	bl	8001d5c <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037be:	f7fe facd 	bl	8001d5c <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e053      	b.n	8003878 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d0:	4b11      	ldr	r3, [pc, #68]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_RCC_OscConfig+0x416>
 80037dc:	e04b      	b.n	8003876 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037de:	4b10      	ldr	r3, [pc, #64]	@ (8003820 <HAL_RCC_OscConfig+0x478>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fe faba 	bl	8001d5c <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fe fab6 	bl	8001d5c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e03c      	b.n	8003878 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fe:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x444>
 800380a:	e034      	b.n	8003876 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d107      	bne.n	8003824 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e02f      	b.n	8003878 <HAL_RCC_OscConfig+0x4d0>
 8003818:	40023800 	.word	0x40023800
 800381c:	40007000 	.word	0x40007000
 8003820:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003824:	4b16      	ldr	r3, [pc, #88]	@ (8003880 <HAL_RCC_OscConfig+0x4d8>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	429a      	cmp	r2, r3
 8003836:	d11c      	bne.n	8003872 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003842:	429a      	cmp	r2, r3
 8003844:	d115      	bne.n	8003872 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800384c:	4013      	ands	r3, r2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003852:	4293      	cmp	r3, r2
 8003854:	d10d      	bne.n	8003872 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d106      	bne.n	8003872 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800386e:	429a      	cmp	r2, r3
 8003870:	d001      	beq.n	8003876 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40023800 	.word	0x40023800

08003884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0cc      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003898:	4b68      	ldr	r3, [pc, #416]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 030f 	and.w	r3, r3, #15
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d90c      	bls.n	80038c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a6:	4b65      	ldr	r3, [pc, #404]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ae:	4b63      	ldr	r3, [pc, #396]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0b8      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d020      	beq.n	800390e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d8:	4b59      	ldr	r3, [pc, #356]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4a58      	ldr	r2, [pc, #352]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038f0:	4b53      	ldr	r3, [pc, #332]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	4a52      	ldr	r2, [pc, #328]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038fc:	4b50      	ldr	r3, [pc, #320]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	494d      	ldr	r1, [pc, #308]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	4313      	orrs	r3, r2
 800390c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d044      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d107      	bne.n	8003932 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003922:	4b47      	ldr	r3, [pc, #284]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d119      	bne.n	8003962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e07f      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d003      	beq.n	8003942 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800393e:	2b03      	cmp	r3, #3
 8003940:	d107      	bne.n	8003952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003942:	4b3f      	ldr	r3, [pc, #252]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e06f      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003952:	4b3b      	ldr	r3, [pc, #236]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e067      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003962:	4b37      	ldr	r3, [pc, #220]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f023 0203 	bic.w	r2, r3, #3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4934      	ldr	r1, [pc, #208]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	4313      	orrs	r3, r2
 8003972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003974:	f7fe f9f2 	bl	8001d5c <HAL_GetTick>
 8003978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397a:	e00a      	b.n	8003992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800397c:	f7fe f9ee 	bl	8001d5c <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800398a:	4293      	cmp	r3, r2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e04f      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003992:	4b2b      	ldr	r3, [pc, #172]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 020c 	and.w	r2, r3, #12
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d1eb      	bne.n	800397c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039a4:	4b25      	ldr	r3, [pc, #148]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d20c      	bcs.n	80039cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b22      	ldr	r3, [pc, #136]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ba:	4b20      	ldr	r3, [pc, #128]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e032      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d8:	4b19      	ldr	r3, [pc, #100]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4916      	ldr	r1, [pc, #88]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d009      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039f6:	4b12      	ldr	r3, [pc, #72]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	490e      	ldr	r1, [pc, #56]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a0a:	f000 f821 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	4b0b      	ldr	r3, [pc, #44]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	091b      	lsrs	r3, r3, #4
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	490a      	ldr	r1, [pc, #40]	@ (8003a44 <HAL_RCC_ClockConfig+0x1c0>)
 8003a1c:	5ccb      	ldrb	r3, [r1, r3]
 8003a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a22:	4a09      	ldr	r2, [pc, #36]	@ (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 8003a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a26:	4b09      	ldr	r3, [pc, #36]	@ (8003a4c <HAL_RCC_ClockConfig+0x1c8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fe f85a 	bl	8001ae4 <HAL_InitTick>

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40023c00 	.word	0x40023c00
 8003a40:	40023800 	.word	0x40023800
 8003a44:	08008ac4 	.word	0x08008ac4
 8003a48:	20000000 	.word	0x20000000
 8003a4c:	20000004 	.word	0x20000004

08003a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a54:	b094      	sub	sp, #80	@ 0x50
 8003a56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a60:	2300      	movs	r3, #0
 8003a62:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a68:	4b79      	ldr	r3, [pc, #484]	@ (8003c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 030c 	and.w	r3, r3, #12
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d00d      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0x40>
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	f200 80e1 	bhi.w	8003c3c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <HAL_RCC_GetSysClockFreq+0x34>
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d003      	beq.n	8003a8a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a82:	e0db      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a84:	4b73      	ldr	r3, [pc, #460]	@ (8003c54 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a86:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003a88:	e0db      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a8a:	4b73      	ldr	r3, [pc, #460]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a8e:	e0d8      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a90:	4b6f      	ldr	r3, [pc, #444]	@ (8003c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a98:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a9a:	4b6d      	ldr	r3, [pc, #436]	@ (8003c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d063      	beq.n	8003b6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8003c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	099b      	lsrs	r3, r3, #6
 8003aac:	2200      	movs	r2, #0
 8003aae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ab0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aba:	2300      	movs	r3, #0
 8003abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003abe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ac2:	4622      	mov	r2, r4
 8003ac4:	462b      	mov	r3, r5
 8003ac6:	f04f 0000 	mov.w	r0, #0
 8003aca:	f04f 0100 	mov.w	r1, #0
 8003ace:	0159      	lsls	r1, r3, #5
 8003ad0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ad4:	0150      	lsls	r0, r2, #5
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4621      	mov	r1, r4
 8003adc:	1a51      	subs	r1, r2, r1
 8003ade:	6139      	str	r1, [r7, #16]
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003af4:	4659      	mov	r1, fp
 8003af6:	018b      	lsls	r3, r1, #6
 8003af8:	4651      	mov	r1, sl
 8003afa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003afe:	4651      	mov	r1, sl
 8003b00:	018a      	lsls	r2, r1, #6
 8003b02:	4651      	mov	r1, sl
 8003b04:	ebb2 0801 	subs.w	r8, r2, r1
 8003b08:	4659      	mov	r1, fp
 8003b0a:	eb63 0901 	sbc.w	r9, r3, r1
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b22:	4690      	mov	r8, r2
 8003b24:	4699      	mov	r9, r3
 8003b26:	4623      	mov	r3, r4
 8003b28:	eb18 0303 	adds.w	r3, r8, r3
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	462b      	mov	r3, r5
 8003b30:	eb49 0303 	adc.w	r3, r9, r3
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b42:	4629      	mov	r1, r5
 8003b44:	024b      	lsls	r3, r1, #9
 8003b46:	4621      	mov	r1, r4
 8003b48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b4c:	4621      	mov	r1, r4
 8003b4e:	024a      	lsls	r2, r1, #9
 8003b50:	4610      	mov	r0, r2
 8003b52:	4619      	mov	r1, r3
 8003b54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b56:	2200      	movs	r2, #0
 8003b58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b60:	f7fc fb96 	bl	8000290 <__aeabi_uldivmod>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	4613      	mov	r3, r2
 8003b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b6c:	e058      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b6e:	4b38      	ldr	r3, [pc, #224]	@ (8003c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	099b      	lsrs	r3, r3, #6
 8003b74:	2200      	movs	r2, #0
 8003b76:	4618      	mov	r0, r3
 8003b78:	4611      	mov	r1, r2
 8003b7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b7e:	623b      	str	r3, [r7, #32]
 8003b80:	2300      	movs	r3, #0
 8003b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b88:	4642      	mov	r2, r8
 8003b8a:	464b      	mov	r3, r9
 8003b8c:	f04f 0000 	mov.w	r0, #0
 8003b90:	f04f 0100 	mov.w	r1, #0
 8003b94:	0159      	lsls	r1, r3, #5
 8003b96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b9a:	0150      	lsls	r0, r2, #5
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4641      	mov	r1, r8
 8003ba2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ba6:	4649      	mov	r1, r9
 8003ba8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bc0:	ebb2 040a 	subs.w	r4, r2, sl
 8003bc4:	eb63 050b 	sbc.w	r5, r3, fp
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	00eb      	lsls	r3, r5, #3
 8003bd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bd6:	00e2      	lsls	r2, r4, #3
 8003bd8:	4614      	mov	r4, r2
 8003bda:	461d      	mov	r5, r3
 8003bdc:	4643      	mov	r3, r8
 8003bde:	18e3      	adds	r3, r4, r3
 8003be0:	603b      	str	r3, [r7, #0]
 8003be2:	464b      	mov	r3, r9
 8003be4:	eb45 0303 	adc.w	r3, r5, r3
 8003be8:	607b      	str	r3, [r7, #4]
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bf6:	4629      	mov	r1, r5
 8003bf8:	028b      	lsls	r3, r1, #10
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c00:	4621      	mov	r1, r4
 8003c02:	028a      	lsls	r2, r1, #10
 8003c04:	4610      	mov	r0, r2
 8003c06:	4619      	mov	r1, r3
 8003c08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	61bb      	str	r3, [r7, #24]
 8003c0e:	61fa      	str	r2, [r7, #28]
 8003c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c14:	f7fc fb3c 	bl	8000290 <__aeabi_uldivmod>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c20:	4b0b      	ldr	r3, [pc, #44]	@ (8003c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	0c1b      	lsrs	r3, r3, #16
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003c30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c3a:	e002      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c3c:	4b05      	ldr	r3, [pc, #20]	@ (8003c54 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3750      	adds	r7, #80	@ 0x50
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c4e:	bf00      	nop
 8003c50:	40023800 	.word	0x40023800
 8003c54:	00f42400 	.word	0x00f42400
 8003c58:	007a1200 	.word	0x007a1200

08003c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c60:	4b03      	ldr	r3, [pc, #12]	@ (8003c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c62:	681b      	ldr	r3, [r3, #0]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	20000000 	.word	0x20000000

08003c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c78:	f7ff fff0 	bl	8003c5c <HAL_RCC_GetHCLKFreq>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	4b05      	ldr	r3, [pc, #20]	@ (8003c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	0a9b      	lsrs	r3, r3, #10
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	4903      	ldr	r1, [pc, #12]	@ (8003c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c8a:	5ccb      	ldrb	r3, [r1, r3]
 8003c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40023800 	.word	0x40023800
 8003c98:	08008ad4 	.word	0x08008ad4

08003c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ca0:	f7ff ffdc 	bl	8003c5c <HAL_RCC_GetHCLKFreq>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	4b05      	ldr	r3, [pc, #20]	@ (8003cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	0b5b      	lsrs	r3, r3, #13
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	4903      	ldr	r1, [pc, #12]	@ (8003cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cb2:	5ccb      	ldrb	r3, [r1, r3]
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	08008ad4 	.word	0x08008ad4

08003cc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	220f      	movs	r2, #15
 8003cd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cd4:	4b12      	ldr	r3, [pc, #72]	@ (8003d20 <HAL_RCC_GetClockConfig+0x5c>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 0203 	and.w	r2, r3, #3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8003d20 <HAL_RCC_GetClockConfig+0x5c>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cec:	4b0c      	ldr	r3, [pc, #48]	@ (8003d20 <HAL_RCC_GetClockConfig+0x5c>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003cf8:	4b09      	ldr	r3, [pc, #36]	@ (8003d20 <HAL_RCC_GetClockConfig+0x5c>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	08db      	lsrs	r3, r3, #3
 8003cfe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d06:	4b07      	ldr	r3, [pc, #28]	@ (8003d24 <HAL_RCC_GetClockConfig+0x60>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 020f 	and.w	r2, r3, #15
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	601a      	str	r2, [r3, #0]
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40023800 	.word	0x40023800
 8003d24:	40023c00 	.word	0x40023c00

08003d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e01d      	b.n	8003d76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f815 	bl	8003d7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3304      	adds	r3, #4
 8003d64:	4619      	mov	r1, r3
 8003d66:	4610      	mov	r0, r2
 8003d68:	f000 f968 	bl	800403c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b085      	sub	sp, #20
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0201 	orr.w	r2, r2, #1
 8003da8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b06      	cmp	r3, #6
 8003dba:	d007      	beq.n	8003dcc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b082      	sub	sp, #8
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d122      	bne.n	8003e36 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d11b      	bne.n	8003e36 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f06f 0202 	mvn.w	r2, #2
 8003e06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f8ee 	bl	8003ffe <HAL_TIM_IC_CaptureCallback>
 8003e22:	e005      	b.n	8003e30 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f8e0 	bl	8003fea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f8f1 	bl	8004012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d122      	bne.n	8003e8a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d11b      	bne.n	8003e8a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f06f 0204 	mvn.w	r2, #4
 8003e5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f8c4 	bl	8003ffe <HAL_TIM_IC_CaptureCallback>
 8003e76:	e005      	b.n	8003e84 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f8b6 	bl	8003fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f8c7 	bl	8004012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d122      	bne.n	8003ede <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d11b      	bne.n	8003ede <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f06f 0208 	mvn.w	r2, #8
 8003eae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2204      	movs	r2, #4
 8003eb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	f003 0303 	and.w	r3, r3, #3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f89a 	bl	8003ffe <HAL_TIM_IC_CaptureCallback>
 8003eca:	e005      	b.n	8003ed8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f88c 	bl	8003fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f89d 	bl	8004012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	2b10      	cmp	r3, #16
 8003eea:	d122      	bne.n	8003f32 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b10      	cmp	r3, #16
 8003ef8:	d11b      	bne.n	8003f32 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f06f 0210 	mvn.w	r2, #16
 8003f02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2208      	movs	r2, #8
 8003f08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f870 	bl	8003ffe <HAL_TIM_IC_CaptureCallback>
 8003f1e:	e005      	b.n	8003f2c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f862 	bl	8003fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f873 	bl	8004012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d10e      	bne.n	8003f5e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d107      	bne.n	8003f5e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f06f 0201 	mvn.w	r2, #1
 8003f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7fd fc9d 	bl	8001898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f68:	2b80      	cmp	r3, #128	@ 0x80
 8003f6a:	d10e      	bne.n	8003f8a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f76:	2b80      	cmp	r3, #128	@ 0x80
 8003f78:	d107      	bne.n	8003f8a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f903 	bl	8004190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f94:	2b40      	cmp	r3, #64	@ 0x40
 8003f96:	d10e      	bne.n	8003fb6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa2:	2b40      	cmp	r3, #64	@ 0x40
 8003fa4:	d107      	bne.n	8003fb6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f838 	bl	8004026 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f003 0320 	and.w	r3, r3, #32
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	d10e      	bne.n	8003fe2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d107      	bne.n	8003fe2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f06f 0220 	mvn.w	r2, #32
 8003fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f8cd 	bl	800417c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fe2:	bf00      	nop
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
	...

0800403c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a40      	ldr	r2, [pc, #256]	@ (8004150 <TIM_Base_SetConfig+0x114>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d013      	beq.n	800407c <TIM_Base_SetConfig+0x40>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800405a:	d00f      	beq.n	800407c <TIM_Base_SetConfig+0x40>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a3d      	ldr	r2, [pc, #244]	@ (8004154 <TIM_Base_SetConfig+0x118>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00b      	beq.n	800407c <TIM_Base_SetConfig+0x40>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a3c      	ldr	r2, [pc, #240]	@ (8004158 <TIM_Base_SetConfig+0x11c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d007      	beq.n	800407c <TIM_Base_SetConfig+0x40>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a3b      	ldr	r2, [pc, #236]	@ (800415c <TIM_Base_SetConfig+0x120>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d003      	beq.n	800407c <TIM_Base_SetConfig+0x40>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a3a      	ldr	r2, [pc, #232]	@ (8004160 <TIM_Base_SetConfig+0x124>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d108      	bne.n	800408e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	4313      	orrs	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a2f      	ldr	r2, [pc, #188]	@ (8004150 <TIM_Base_SetConfig+0x114>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d02b      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800409c:	d027      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a2c      	ldr	r2, [pc, #176]	@ (8004154 <TIM_Base_SetConfig+0x118>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d023      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004158 <TIM_Base_SetConfig+0x11c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d01f      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a2a      	ldr	r2, [pc, #168]	@ (800415c <TIM_Base_SetConfig+0x120>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d01b      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a29      	ldr	r2, [pc, #164]	@ (8004160 <TIM_Base_SetConfig+0x124>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d017      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a28      	ldr	r2, [pc, #160]	@ (8004164 <TIM_Base_SetConfig+0x128>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a27      	ldr	r2, [pc, #156]	@ (8004168 <TIM_Base_SetConfig+0x12c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00f      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a26      	ldr	r2, [pc, #152]	@ (800416c <TIM_Base_SetConfig+0x130>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00b      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a25      	ldr	r2, [pc, #148]	@ (8004170 <TIM_Base_SetConfig+0x134>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d007      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a24      	ldr	r2, [pc, #144]	@ (8004174 <TIM_Base_SetConfig+0x138>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d003      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a23      	ldr	r2, [pc, #140]	@ (8004178 <TIM_Base_SetConfig+0x13c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d108      	bne.n	8004100 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a0a      	ldr	r2, [pc, #40]	@ (8004150 <TIM_Base_SetConfig+0x114>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d003      	beq.n	8004134 <TIM_Base_SetConfig+0xf8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a0c      	ldr	r2, [pc, #48]	@ (8004160 <TIM_Base_SetConfig+0x124>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d103      	bne.n	800413c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	615a      	str	r2, [r3, #20]
}
 8004142:	bf00      	nop
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40010000 	.word	0x40010000
 8004154:	40000400 	.word	0x40000400
 8004158:	40000800 	.word	0x40000800
 800415c:	40000c00 	.word	0x40000c00
 8004160:	40010400 	.word	0x40010400
 8004164:	40014000 	.word	0x40014000
 8004168:	40014400 	.word	0x40014400
 800416c:	40014800 	.word	0x40014800
 8004170:	40001800 	.word	0x40001800
 8004174:	40001c00 	.word	0x40001c00
 8004178:	40002000 	.word	0x40002000

0800417c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e03f      	b.n	8004236 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d106      	bne.n	80041d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7fd fc1a 	bl	8001a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2224      	movs	r2, #36	@ 0x24
 80041d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 fb97 	bl	800491c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695a      	ldr	r2, [r3, #20]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800420c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800421c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b088      	sub	sp, #32
 8004242:	af02      	add	r7, sp, #8
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	603b      	str	r3, [r7, #0]
 800424a:	4613      	mov	r3, r2
 800424c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b20      	cmp	r3, #32
 800425c:	f040 8083 	bne.w	8004366 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <HAL_UART_Transmit+0x2e>
 8004266:	88fb      	ldrh	r3, [r7, #6]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e07b      	b.n	8004368 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_UART_Transmit+0x40>
 800427a:	2302      	movs	r3, #2
 800427c:	e074      	b.n	8004368 <HAL_UART_Transmit+0x12a>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2221      	movs	r2, #33	@ 0x21
 8004290:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004294:	f7fd fd62 	bl	8001d5c <HAL_GetTick>
 8004298:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	88fa      	ldrh	r2, [r7, #6]
 800429e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	88fa      	ldrh	r2, [r7, #6]
 80042a4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 80042ae:	e042      	b.n	8004336 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042c6:	d122      	bne.n	800430e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2200      	movs	r2, #0
 80042d0:	2180      	movs	r1, #128	@ 0x80
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 f9b6 	bl	8004644 <UART_WaitOnFlagUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e042      	b.n	8004368 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042f4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d103      	bne.n	8004306 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	3302      	adds	r3, #2
 8004302:	60bb      	str	r3, [r7, #8]
 8004304:	e017      	b.n	8004336 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	3301      	adds	r3, #1
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	e013      	b.n	8004336 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2200      	movs	r2, #0
 8004316:	2180      	movs	r1, #128	@ 0x80
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f993 	bl	8004644 <UART_WaitOnFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e01f      	b.n	8004368 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	60ba      	str	r2, [r7, #8]
 800432e:	781a      	ldrb	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800433a:	b29b      	uxth	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1b7      	bne.n	80042b0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2200      	movs	r2, #0
 8004348:	2140      	movs	r1, #64	@ 0x40
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 f97a 	bl	8004644 <UART_WaitOnFlagUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e006      	b.n	8004368 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2220      	movs	r2, #32
 800435e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	e000      	b.n	8004368 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004366:	2302      	movs	r3, #2
  }
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	4613      	mov	r3, r2
 800437c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b20      	cmp	r3, #32
 8004388:	d140      	bne.n	800440c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <HAL_UART_Receive_IT+0x26>
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e039      	b.n	800440e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_UART_Receive_IT+0x38>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e032      	b.n	800440e <HAL_UART_Receive_IT+0x9e>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->pRxBuffPtr = pData;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	629a      	str	r2, [r3, #40]	@ 0x28
    huart->RxXferSize = Size;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	88fa      	ldrh	r2, [r7, #6]
 80043ba:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	88fa      	ldrh	r2, [r7, #6]
 80043c0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2222      	movs	r2, #34	@ 0x22
 80043cc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043e6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695a      	ldr	r2, [r3, #20]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0201 	orr.w	r2, r2, #1
 80043f6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0220 	orr.w	r2, r2, #32
 8004406:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	e000      	b.n	800440e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800440c:	2302      	movs	r3, #2
  }
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
	...

0800441c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800443c:	2300      	movs	r3, #0
 800443e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f003 030f 	and.w	r3, r3, #15
 800444a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10d      	bne.n	800446e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b00      	cmp	r3, #0
 800445a:	d008      	beq.n	800446e <HAL_UART_IRQHandler+0x52>
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	f003 0320 	and.w	r3, r3, #32
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f9d6 	bl	8004818 <UART_Receive_IT>
      return;
 800446c:	e0d0      	b.n	8004610 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80b0 	beq.w	80045d6 <HAL_UART_IRQHandler+0x1ba>
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d105      	bne.n	800448c <HAL_UART_IRQHandler+0x70>
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 80a5 	beq.w	80045d6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <HAL_UART_IRQHandler+0x90>
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d005      	beq.n	80044ac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a4:	f043 0201 	orr.w	r2, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <HAL_UART_IRQHandler+0xb0>
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c4:	f043 0202 	orr.w	r2, r3, #2
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <HAL_UART_IRQHandler+0xd0>
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e4:	f043 0204 	orr.w	r2, r3, #4
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00f      	beq.n	8004516 <HAL_UART_IRQHandler+0xfa>
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d104      	bne.n	800450a <HAL_UART_IRQHandler+0xee>
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800450e:	f043 0208 	orr.w	r2, r3, #8
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800451a:	2b00      	cmp	r3, #0
 800451c:	d077      	beq.n	800460e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b00      	cmp	r3, #0
 8004526:	d007      	beq.n	8004538 <HAL_UART_IRQHandler+0x11c>
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	f003 0320 	and.w	r3, r3, #32
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f970 	bl	8004818 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004542:	2b40      	cmp	r3, #64	@ 0x40
 8004544:	bf0c      	ite	eq
 8004546:	2301      	moveq	r3, #1
 8004548:	2300      	movne	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d102      	bne.n	8004560 <HAL_UART_IRQHandler+0x144>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d031      	beq.n	80045c4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f8b9 	bl	80046d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004570:	2b40      	cmp	r3, #64	@ 0x40
 8004572:	d123      	bne.n	80045bc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695a      	ldr	r2, [r3, #20]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004582:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004588:	2b00      	cmp	r3, #0
 800458a:	d013      	beq.n	80045b4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004590:	4a21      	ldr	r2, [pc, #132]	@ (8004618 <HAL_UART_IRQHandler+0x1fc>)
 8004592:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004598:	4618      	mov	r0, r3
 800459a:	f7fe fc17 	bl	8002dcc <HAL_DMA_Abort_IT>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d016      	beq.n	80045d2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80045ae:	4610      	mov	r0, r2
 80045b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b2:	e00e      	b.n	80045d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f83b 	bl	8004630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ba:	e00a      	b.n	80045d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f837 	bl	8004630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c2:	e006      	b.n	80045d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f833 	bl	8004630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
    return;
 80045d0:	e01d      	b.n	800460e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d2:	bf00      	nop
    return;
 80045d4:	e01b      	b.n	800460e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d008      	beq.n	80045f2 <HAL_UART_IRQHandler+0x1d6>
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f8a6 	bl	800473c <UART_Transmit_IT>
    return;
 80045f0:	e00e      	b.n	8004610 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d009      	beq.n	8004610 <HAL_UART_IRQHandler+0x1f4>
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004602:	2b00      	cmp	r3, #0
 8004604:	d004      	beq.n	8004610 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f8ee 	bl	80047e8 <UART_EndTransmit_IT>
    return;
 800460c:	e000      	b.n	8004610 <HAL_UART_IRQHandler+0x1f4>
    return;
 800460e:	bf00      	nop
  }
}
 8004610:	3720      	adds	r7, #32
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	08004715 	.word	0x08004715

0800461c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	4613      	mov	r3, r2
 8004652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004654:	e02c      	b.n	80046b0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465c:	d028      	beq.n	80046b0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d007      	beq.n	8004674 <UART_WaitOnFlagUntilTimeout+0x30>
 8004664:	f7fd fb7a 	bl	8001d5c <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	429a      	cmp	r2, r3
 8004672:	d21d      	bcs.n	80046b0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8004682:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695a      	ldr	r2, [r3, #20]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0201 	bic.w	r2, r2, #1
 8004692:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e00f      	b.n	80046d0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	4013      	ands	r3, r2
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	429a      	cmp	r2, r3
 80046be:	bf0c      	ite	eq
 80046c0:	2301      	moveq	r3, #1
 80046c2:	2300      	movne	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	461a      	mov	r2, r3
 80046c8:	79fb      	ldrb	r3, [r7, #7]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d0c3      	beq.n	8004656 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 80046ee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695a      	ldr	r2, [r3, #20]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0201 	bic.w	r2, r2, #1
 80046fe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004720:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f7ff ff7e 	bl	8004630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004734:	bf00      	nop
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b21      	cmp	r3, #33	@ 0x21
 800474e:	d144      	bne.n	80047da <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004758:	d11a      	bne.n	8004790 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800476e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d105      	bne.n	8004784 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	1c9a      	adds	r2, r3, #2
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	621a      	str	r2, [r3, #32]
 8004782:	e00e      	b.n	80047a2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	621a      	str	r2, [r3, #32]
 800478e:	e008      	b.n	80047a2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	1c59      	adds	r1, r3, #1
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6211      	str	r1, [r2, #32]
 800479a:	781a      	ldrb	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	4619      	mov	r1, r3
 80047b0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10f      	bne.n	80047d6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68da      	ldr	r2, [r3, #12]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	e000      	b.n	80047dc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80047da:	2302      	movs	r3, #2
  }
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7ff ff07 	bl	800461c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b22      	cmp	r3, #34	@ 0x22
 800482a:	d171      	bne.n	8004910 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004834:	d123      	bne.n	800487e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10e      	bne.n	8004862 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	b29b      	uxth	r3, r3
 800484c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485a:	1c9a      	adds	r2, r3, #2
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004860:	e029      	b.n	80048b6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	b29b      	uxth	r3, r3
 800486a:	b2db      	uxtb	r3, r3
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	629a      	str	r2, [r3, #40]	@ 0x28
 800487c:	e01b      	b.n	80048b6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10a      	bne.n	800489c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6858      	ldr	r0, [r3, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004890:	1c59      	adds	r1, r3, #1
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6291      	str	r1, [r2, #40]	@ 0x28
 8004896:	b2c2      	uxtb	r2, r0
 8004898:	701a      	strb	r2, [r3, #0]
 800489a:	e00c      	b.n	80048b6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a8:	1c58      	adds	r0, r3, #1
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	6288      	str	r0, [r1, #40]	@ 0x28
 80048ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29b      	uxth	r3, r3
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	4619      	mov	r1, r3
 80048c4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d120      	bne.n	800490c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0220 	bic.w	r2, r2, #32
 80048d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695a      	ldr	r2, [r3, #20]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0201 	bic.w	r2, r2, #1
 80048f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fc fbfa 	bl	80010fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	e002      	b.n	8004912 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	e000      	b.n	8004912 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004910:	2302      	movs	r3, #2
  }
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800491c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004920:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8004924:	af00      	add	r7, sp, #0
 8004926:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800492a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004936:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800493a:	68d9      	ldr	r1, [r3, #12]
 800493c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	ea40 0301 	orr.w	r3, r0, r1
 8004946:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004948:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	431a      	orrs	r2, r3
 8004956:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	431a      	orrs	r2, r3
 800495e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 800496a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004976:	f021 010c 	bic.w	r1, r1, #12
 800497a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8004984:	430b      	orrs	r3, r1
 8004986:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004988:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004994:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004998:	6999      	ldr	r1, [r3, #24]
 800499a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	ea40 0301 	orr.w	r3, r0, r1
 80049a4:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049b0:	f040 824a 	bne.w	8004e48 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	4b96      	ldr	r3, [pc, #600]	@ (8004c14 <UART_SetConfig+0x2f8>)
 80049bc:	429a      	cmp	r2, r3
 80049be:	d006      	beq.n	80049ce <UART_SetConfig+0xb2>
 80049c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	4b94      	ldr	r3, [pc, #592]	@ (8004c18 <UART_SetConfig+0x2fc>)
 80049c8:	429a      	cmp	r2, r3
 80049ca:	f040 8129 	bne.w	8004c20 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049ce:	f7ff f965 	bl	8003c9c <HAL_RCC_GetPCLK2Freq>
 80049d2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80049da:	2200      	movs	r2, #0
 80049dc:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 80049e0:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 80049e4:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 80049e8:	4622      	mov	r2, r4
 80049ea:	462b      	mov	r3, r5
 80049ec:	1891      	adds	r1, r2, r2
 80049ee:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80049f2:	415b      	adcs	r3, r3
 80049f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80049f8:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80049fc:	4621      	mov	r1, r4
 80049fe:	1851      	adds	r1, r2, r1
 8004a00:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8004a04:	4629      	mov	r1, r5
 8004a06:	414b      	adcs	r3, r1
 8004a08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 8004a18:	4649      	mov	r1, r9
 8004a1a:	00cb      	lsls	r3, r1, #3
 8004a1c:	4641      	mov	r1, r8
 8004a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a22:	4641      	mov	r1, r8
 8004a24:	00ca      	lsls	r2, r1, #3
 8004a26:	4610      	mov	r0, r2
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4622      	mov	r2, r4
 8004a2e:	189b      	adds	r3, r3, r2
 8004a30:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8004a34:	462b      	mov	r3, r5
 8004a36:	460a      	mov	r2, r1
 8004a38:	eb42 0303 	adc.w	r3, r2, r3
 8004a3c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8004a40:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004a4c:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8004a50:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 8004a54:	460b      	mov	r3, r1
 8004a56:	18db      	adds	r3, r3, r3
 8004a58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	eb42 0303 	adc.w	r3, r2, r3
 8004a62:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a66:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8004a6a:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8004a6e:	f7fb fc0f 	bl	8000290 <__aeabi_uldivmod>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4b69      	ldr	r3, [pc, #420]	@ (8004c1c <UART_SetConfig+0x300>)
 8004a78:	fba3 2302 	umull	r2, r3, r3, r2
 8004a7c:	095b      	lsrs	r3, r3, #5
 8004a7e:	011c      	lsls	r4, r3, #4
 8004a80:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004a84:	2200      	movs	r2, #0
 8004a86:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8004a8a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8004a8e:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 8004a92:	4642      	mov	r2, r8
 8004a94:	464b      	mov	r3, r9
 8004a96:	1891      	adds	r1, r2, r2
 8004a98:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8004a9c:	415b      	adcs	r3, r3
 8004a9e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004aa2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8004aa6:	4641      	mov	r1, r8
 8004aa8:	1851      	adds	r1, r2, r1
 8004aaa:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8004aae:	4649      	mov	r1, r9
 8004ab0:	414b      	adcs	r3, r1
 8004ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 8004ac2:	4659      	mov	r1, fp
 8004ac4:	00cb      	lsls	r3, r1, #3
 8004ac6:	4651      	mov	r1, sl
 8004ac8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004acc:	4651      	mov	r1, sl
 8004ace:	00ca      	lsls	r2, r1, #3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	4642      	mov	r2, r8
 8004ad8:	189b      	adds	r3, r3, r2
 8004ada:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8004ade:	464b      	mov	r3, r9
 8004ae0:	460a      	mov	r2, r1
 8004ae2:	eb42 0303 	adc.w	r3, r2, r3
 8004ae6:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8004aea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8004af6:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8004afa:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 8004afe:	460b      	mov	r3, r1
 8004b00:	18db      	adds	r3, r3, r3
 8004b02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b06:	4613      	mov	r3, r2
 8004b08:	eb42 0303 	adc.w	r3, r2, r3
 8004b0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b10:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8004b14:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8004b18:	f7fb fbba 	bl	8000290 <__aeabi_uldivmod>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4611      	mov	r1, r2
 8004b22:	4b3e      	ldr	r3, [pc, #248]	@ (8004c1c <UART_SetConfig+0x300>)
 8004b24:	fba3 2301 	umull	r2, r3, r3, r1
 8004b28:	095b      	lsrs	r3, r3, #5
 8004b2a:	2264      	movs	r2, #100	@ 0x64
 8004b2c:	fb02 f303 	mul.w	r3, r2, r3
 8004b30:	1acb      	subs	r3, r1, r3
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b38:	4b38      	ldr	r3, [pc, #224]	@ (8004c1c <UART_SetConfig+0x300>)
 8004b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b46:	441c      	add	r4, r3
 8004b48:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004b52:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8004b56:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8004b5a:	4642      	mov	r2, r8
 8004b5c:	464b      	mov	r3, r9
 8004b5e:	1891      	adds	r1, r2, r2
 8004b60:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8004b64:	415b      	adcs	r3, r3
 8004b66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004b6a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8004b6e:	4641      	mov	r1, r8
 8004b70:	1851      	adds	r1, r2, r1
 8004b72:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8004b76:	4649      	mov	r1, r9
 8004b78:	414b      	adcs	r3, r1
 8004b7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 8004b8a:	4659      	mov	r1, fp
 8004b8c:	00cb      	lsls	r3, r1, #3
 8004b8e:	4651      	mov	r1, sl
 8004b90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b94:	4651      	mov	r1, sl
 8004b96:	00ca      	lsls	r2, r1, #3
 8004b98:	4610      	mov	r0, r2
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	4642      	mov	r2, r8
 8004ba0:	189b      	adds	r3, r3, r2
 8004ba2:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	460a      	mov	r2, r1
 8004baa:	eb42 0303 	adc.w	r3, r2, r3
 8004bae:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004bb2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8004bbe:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8004bc2:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	18db      	adds	r3, r3, r3
 8004bca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004bce:	4613      	mov	r3, r2
 8004bd0:	eb42 0303 	adc.w	r3, r2, r3
 8004bd4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004bd8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8004bdc:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8004be0:	f7fb fb56 	bl	8000290 <__aeabi_uldivmod>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4b0c      	ldr	r3, [pc, #48]	@ (8004c1c <UART_SetConfig+0x300>)
 8004bea:	fba3 1302 	umull	r1, r3, r3, r2
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	2164      	movs	r1, #100	@ 0x64
 8004bf2:	fb01 f303 	mul.w	r3, r1, r3
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	3332      	adds	r3, #50	@ 0x32
 8004bfc:	4a07      	ldr	r2, [pc, #28]	@ (8004c1c <UART_SetConfig+0x300>)
 8004bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004c02:	095b      	lsrs	r3, r3, #5
 8004c04:	f003 0207 	and.w	r2, r3, #7
 8004c08:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4422      	add	r2, r4
 8004c10:	609a      	str	r2, [r3, #8]
 8004c12:	e34a      	b.n	80052aa <UART_SetConfig+0x98e>
 8004c14:	40011000 	.word	0x40011000
 8004c18:	40011400 	.word	0x40011400
 8004c1c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c20:	f7ff f828 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 8004c24:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c28:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004c32:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8004c36:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 8004c3a:	4622      	mov	r2, r4
 8004c3c:	462b      	mov	r3, r5
 8004c3e:	1891      	adds	r1, r2, r2
 8004c40:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8004c44:	415b      	adcs	r3, r3
 8004c46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004c4a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004c4e:	4621      	mov	r1, r4
 8004c50:	eb12 0a01 	adds.w	sl, r2, r1
 8004c54:	4629      	mov	r1, r5
 8004c56:	eb43 0b01 	adc.w	fp, r3, r1
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c66:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c6e:	4692      	mov	sl, r2
 8004c70:	469b      	mov	fp, r3
 8004c72:	4623      	mov	r3, r4
 8004c74:	eb1a 0303 	adds.w	r3, sl, r3
 8004c78:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004c7c:	462b      	mov	r3, r5
 8004c7e:	eb4b 0303 	adc.w	r3, fp, r3
 8004c82:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004c86:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8004c92:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8004c96:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	18db      	adds	r3, r3, r3
 8004c9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	eb42 0303 	adc.w	r3, r2, r3
 8004ca8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004cac:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8004cb0:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8004cb4:	f7fb faec 	bl	8000290 <__aeabi_uldivmod>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4b61      	ldr	r3, [pc, #388]	@ (8004e44 <UART_SetConfig+0x528>)
 8004cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	011c      	lsls	r4, r3, #4
 8004cc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8004cd0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8004cd4:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 8004cd8:	4642      	mov	r2, r8
 8004cda:	464b      	mov	r3, r9
 8004cdc:	1891      	adds	r1, r2, r2
 8004cde:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004ce0:	415b      	adcs	r3, r3
 8004ce2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ce4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8004ce8:	4641      	mov	r1, r8
 8004cea:	1851      	adds	r1, r2, r1
 8004cec:	6739      	str	r1, [r7, #112]	@ 0x70
 8004cee:	4649      	mov	r1, r9
 8004cf0:	414b      	adcs	r3, r1
 8004cf2:	677b      	str	r3, [r7, #116]	@ 0x74
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 8004d00:	4659      	mov	r1, fp
 8004d02:	00cb      	lsls	r3, r1, #3
 8004d04:	4651      	mov	r1, sl
 8004d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d0a:	4651      	mov	r1, sl
 8004d0c:	00ca      	lsls	r2, r1, #3
 8004d0e:	4610      	mov	r0, r2
 8004d10:	4619      	mov	r1, r3
 8004d12:	4603      	mov	r3, r0
 8004d14:	4642      	mov	r2, r8
 8004d16:	189b      	adds	r3, r3, r2
 8004d18:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004d1c:	464b      	mov	r3, r9
 8004d1e:	460a      	mov	r2, r1
 8004d20:	eb42 0303 	adc.w	r3, r2, r3
 8004d24:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8004d28:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004d34:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8004d38:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	18db      	adds	r3, r3, r3
 8004d40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d42:	4613      	mov	r3, r2
 8004d44:	eb42 0303 	adc.w	r3, r2, r3
 8004d48:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d4a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004d4e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004d52:	f7fb fa9d 	bl	8000290 <__aeabi_uldivmod>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4b39      	ldr	r3, [pc, #228]	@ (8004e44 <UART_SetConfig+0x528>)
 8004d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	2264      	movs	r2, #100	@ 0x64
 8004d66:	fb02 f303 	mul.w	r3, r2, r3
 8004d6a:	1acb      	subs	r3, r1, r3
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d72:	4b34      	ldr	r3, [pc, #208]	@ (8004e44 <UART_SetConfig+0x528>)
 8004d74:	fba3 2302 	umull	r2, r3, r3, r2
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d80:	441c      	add	r4, r3
 8004d82:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004d86:	2200      	movs	r2, #0
 8004d88:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8004d8c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8004d90:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 8004d94:	4642      	mov	r2, r8
 8004d96:	464b      	mov	r3, r9
 8004d98:	1891      	adds	r1, r2, r2
 8004d9a:	6639      	str	r1, [r7, #96]	@ 0x60
 8004d9c:	415b      	adcs	r3, r3
 8004d9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004da0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8004da4:	4641      	mov	r1, r8
 8004da6:	1851      	adds	r1, r2, r1
 8004da8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004daa:	4649      	mov	r1, r9
 8004dac:	414b      	adcs	r3, r1
 8004dae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8004dbc:	4659      	mov	r1, fp
 8004dbe:	00cb      	lsls	r3, r1, #3
 8004dc0:	4651      	mov	r1, sl
 8004dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dc6:	4651      	mov	r1, sl
 8004dc8:	00ca      	lsls	r2, r1, #3
 8004dca:	4610      	mov	r0, r2
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4603      	mov	r3, r0
 8004dd0:	4642      	mov	r2, r8
 8004dd2:	189b      	adds	r3, r3, r2
 8004dd4:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8004dd8:	464b      	mov	r3, r9
 8004dda:	460a      	mov	r2, r1
 8004ddc:	eb42 0303 	adc.w	r3, r2, r3
 8004de0:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8004de4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8004df0:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8004df4:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8004df8:	460b      	mov	r3, r1
 8004dfa:	18db      	adds	r3, r3, r3
 8004dfc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dfe:	4613      	mov	r3, r2
 8004e00:	eb42 0303 	adc.w	r3, r2, r3
 8004e04:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e06:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e0a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8004e0e:	f7fb fa3f 	bl	8000290 <__aeabi_uldivmod>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	4b0b      	ldr	r3, [pc, #44]	@ (8004e44 <UART_SetConfig+0x528>)
 8004e18:	fba3 1302 	umull	r1, r3, r3, r2
 8004e1c:	095b      	lsrs	r3, r3, #5
 8004e1e:	2164      	movs	r1, #100	@ 0x64
 8004e20:	fb01 f303 	mul.w	r3, r1, r3
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	3332      	adds	r3, #50	@ 0x32
 8004e2a:	4a06      	ldr	r2, [pc, #24]	@ (8004e44 <UART_SetConfig+0x528>)
 8004e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e30:	095b      	lsrs	r3, r3, #5
 8004e32:	f003 0207 	and.w	r2, r3, #7
 8004e36:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4422      	add	r2, r4
 8004e3e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004e40:	e233      	b.n	80052aa <UART_SetConfig+0x98e>
 8004e42:	bf00      	nop
 8004e44:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e48:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	4b8d      	ldr	r3, [pc, #564]	@ (8005084 <UART_SetConfig+0x768>)
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d006      	beq.n	8004e62 <UART_SetConfig+0x546>
 8004e54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	4b8b      	ldr	r3, [pc, #556]	@ (8005088 <UART_SetConfig+0x76c>)
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	f040 8117 	bne.w	8005090 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e62:	f7fe ff1b 	bl	8003c9c <HAL_RCC_GetPCLK2Freq>
 8004e66:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8004e74:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8004e78:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8004e7c:	4622      	mov	r2, r4
 8004e7e:	462b      	mov	r3, r5
 8004e80:	1891      	adds	r1, r2, r2
 8004e82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e84:	415b      	adcs	r3, r3
 8004e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	eb12 0801 	adds.w	r8, r2, r1
 8004e92:	4629      	mov	r1, r5
 8004e94:	eb43 0901 	adc.w	r9, r3, r1
 8004e98:	f04f 0200 	mov.w	r2, #0
 8004e9c:	f04f 0300 	mov.w	r3, #0
 8004ea0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ea4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ea8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eac:	4690      	mov	r8, r2
 8004eae:	4699      	mov	r9, r3
 8004eb0:	4623      	mov	r3, r4
 8004eb2:	eb18 0303 	adds.w	r3, r8, r3
 8004eb6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004eba:	462b      	mov	r3, r5
 8004ebc:	eb49 0303 	adc.w	r3, r9, r3
 8004ec0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004ec4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004ed0:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8004ee0:	4629      	mov	r1, r5
 8004ee2:	008b      	lsls	r3, r1, #2
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eea:	4621      	mov	r1, r4
 8004eec:	008a      	lsls	r2, r1, #2
 8004eee:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8004ef2:	f7fb f9cd 	bl	8000290 <__aeabi_uldivmod>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	4b64      	ldr	r3, [pc, #400]	@ (800508c <UART_SetConfig+0x770>)
 8004efc:	fba3 2302 	umull	r2, r3, r3, r2
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	011c      	lsls	r4, r3, #4
 8004f04:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8004f0e:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8004f12:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 8004f16:	4642      	mov	r2, r8
 8004f18:	464b      	mov	r3, r9
 8004f1a:	1891      	adds	r1, r2, r2
 8004f1c:	6439      	str	r1, [r7, #64]	@ 0x40
 8004f1e:	415b      	adcs	r3, r3
 8004f20:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f26:	4641      	mov	r1, r8
 8004f28:	1851      	adds	r1, r2, r1
 8004f2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f2c:	4649      	mov	r1, r9
 8004f2e:	414b      	adcs	r3, r1
 8004f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f32:	f04f 0200 	mov.w	r2, #0
 8004f36:	f04f 0300 	mov.w	r3, #0
 8004f3a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 8004f3e:	4659      	mov	r1, fp
 8004f40:	00cb      	lsls	r3, r1, #3
 8004f42:	4651      	mov	r1, sl
 8004f44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f48:	4651      	mov	r1, sl
 8004f4a:	00ca      	lsls	r2, r1, #3
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4603      	mov	r3, r0
 8004f52:	4642      	mov	r2, r8
 8004f54:	189b      	adds	r3, r3, r2
 8004f56:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8004f5a:	464b      	mov	r3, r9
 8004f5c:	460a      	mov	r2, r1
 8004f5e:	eb42 0303 	adc.w	r3, r2, r3
 8004f62:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8004f66:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004f72:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8004f82:	4649      	mov	r1, r9
 8004f84:	008b      	lsls	r3, r1, #2
 8004f86:	4641      	mov	r1, r8
 8004f88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f8c:	4641      	mov	r1, r8
 8004f8e:	008a      	lsls	r2, r1, #2
 8004f90:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8004f94:	f7fb f97c 	bl	8000290 <__aeabi_uldivmod>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800508c <UART_SetConfig+0x770>)
 8004fa0:	fba3 2301 	umull	r2, r3, r3, r1
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	2264      	movs	r2, #100	@ 0x64
 8004fa8:	fb02 f303 	mul.w	r3, r2, r3
 8004fac:	1acb      	subs	r3, r1, r3
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	3332      	adds	r3, #50	@ 0x32
 8004fb2:	4a36      	ldr	r2, [pc, #216]	@ (800508c <UART_SetConfig+0x770>)
 8004fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb8:	095b      	lsrs	r3, r3, #5
 8004fba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fbe:	441c      	add	r4, r3
 8004fc0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8004fca:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8004fce:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 8004fd2:	4642      	mov	r2, r8
 8004fd4:	464b      	mov	r3, r9
 8004fd6:	1891      	adds	r1, r2, r2
 8004fd8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004fda:	415b      	adcs	r3, r3
 8004fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fde:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004fe2:	4641      	mov	r1, r8
 8004fe4:	1851      	adds	r1, r2, r1
 8004fe6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004fe8:	4649      	mov	r1, r9
 8004fea:	414b      	adcs	r3, r1
 8004fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fee:	f04f 0200 	mov.w	r2, #0
 8004ff2:	f04f 0300 	mov.w	r3, #0
 8004ff6:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8004ffa:	4659      	mov	r1, fp
 8004ffc:	00cb      	lsls	r3, r1, #3
 8004ffe:	4651      	mov	r1, sl
 8005000:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005004:	4651      	mov	r1, sl
 8005006:	00ca      	lsls	r2, r1, #3
 8005008:	4610      	mov	r0, r2
 800500a:	4619      	mov	r1, r3
 800500c:	4603      	mov	r3, r0
 800500e:	4642      	mov	r2, r8
 8005010:	189b      	adds	r3, r3, r2
 8005012:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005016:	464b      	mov	r3, r9
 8005018:	460a      	mov	r2, r1
 800501a:	eb42 0303 	adc.w	r3, r2, r3
 800501e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005022:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800502e:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	f04f 0300 	mov.w	r3, #0
 800503a:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 800503e:	4649      	mov	r1, r9
 8005040:	008b      	lsls	r3, r1, #2
 8005042:	4641      	mov	r1, r8
 8005044:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005048:	4641      	mov	r1, r8
 800504a:	008a      	lsls	r2, r1, #2
 800504c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8005050:	f7fb f91e 	bl	8000290 <__aeabi_uldivmod>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4b0c      	ldr	r3, [pc, #48]	@ (800508c <UART_SetConfig+0x770>)
 800505a:	fba3 1302 	umull	r1, r3, r3, r2
 800505e:	095b      	lsrs	r3, r3, #5
 8005060:	2164      	movs	r1, #100	@ 0x64
 8005062:	fb01 f303 	mul.w	r3, r1, r3
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	3332      	adds	r3, #50	@ 0x32
 800506c:	4a07      	ldr	r2, [pc, #28]	@ (800508c <UART_SetConfig+0x770>)
 800506e:	fba2 2303 	umull	r2, r3, r2, r3
 8005072:	095b      	lsrs	r3, r3, #5
 8005074:	f003 020f 	and.w	r2, r3, #15
 8005078:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4422      	add	r2, r4
 8005080:	609a      	str	r2, [r3, #8]
 8005082:	e112      	b.n	80052aa <UART_SetConfig+0x98e>
 8005084:	40011000 	.word	0x40011000
 8005088:	40011400 	.word	0x40011400
 800508c:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8005090:	f7fe fdf0 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 8005094:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005098:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800509c:	2200      	movs	r2, #0
 800509e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80050a2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80050a6:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 80050aa:	4642      	mov	r2, r8
 80050ac:	464b      	mov	r3, r9
 80050ae:	1891      	adds	r1, r2, r2
 80050b0:	6239      	str	r1, [r7, #32]
 80050b2:	415b      	adcs	r3, r3
 80050b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050ba:	4641      	mov	r1, r8
 80050bc:	1854      	adds	r4, r2, r1
 80050be:	4649      	mov	r1, r9
 80050c0:	eb43 0501 	adc.w	r5, r3, r1
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	00eb      	lsls	r3, r5, #3
 80050ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050d2:	00e2      	lsls	r2, r4, #3
 80050d4:	4614      	mov	r4, r2
 80050d6:	461d      	mov	r5, r3
 80050d8:	4643      	mov	r3, r8
 80050da:	18e3      	adds	r3, r4, r3
 80050dc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80050e0:	464b      	mov	r3, r9
 80050e2:	eb45 0303 	adc.w	r3, r5, r3
 80050e6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80050ea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80050f6:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	f04f 0300 	mov.w	r3, #0
 8005102:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8005106:	4629      	mov	r1, r5
 8005108:	008b      	lsls	r3, r1, #2
 800510a:	4621      	mov	r1, r4
 800510c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005110:	4621      	mov	r1, r4
 8005112:	008a      	lsls	r2, r1, #2
 8005114:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8005118:	f7fb f8ba 	bl	8000290 <__aeabi_uldivmod>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4b65      	ldr	r3, [pc, #404]	@ (80052b8 <UART_SetConfig+0x99c>)
 8005122:	fba3 2302 	umull	r2, r3, r3, r2
 8005126:	095b      	lsrs	r3, r3, #5
 8005128:	011c      	lsls	r4, r3, #4
 800512a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800512e:	2200      	movs	r2, #0
 8005130:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005134:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8005138:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 800513c:	4642      	mov	r2, r8
 800513e:	464b      	mov	r3, r9
 8005140:	1891      	adds	r1, r2, r2
 8005142:	61b9      	str	r1, [r7, #24]
 8005144:	415b      	adcs	r3, r3
 8005146:	61fb      	str	r3, [r7, #28]
 8005148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800514c:	4641      	mov	r1, r8
 800514e:	1851      	adds	r1, r2, r1
 8005150:	6139      	str	r1, [r7, #16]
 8005152:	4649      	mov	r1, r9
 8005154:	414b      	adcs	r3, r1
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005164:	4659      	mov	r1, fp
 8005166:	00cb      	lsls	r3, r1, #3
 8005168:	4651      	mov	r1, sl
 800516a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800516e:	4651      	mov	r1, sl
 8005170:	00ca      	lsls	r2, r1, #3
 8005172:	4610      	mov	r0, r2
 8005174:	4619      	mov	r1, r3
 8005176:	4603      	mov	r3, r0
 8005178:	4642      	mov	r2, r8
 800517a:	189b      	adds	r3, r3, r2
 800517c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005180:	464b      	mov	r3, r9
 8005182:	460a      	mov	r2, r1
 8005184:	eb42 0303 	adc.w	r3, r2, r3
 8005188:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800518c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005198:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 80051a8:	4649      	mov	r1, r9
 80051aa:	008b      	lsls	r3, r1, #2
 80051ac:	4641      	mov	r1, r8
 80051ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051b2:	4641      	mov	r1, r8
 80051b4:	008a      	lsls	r2, r1, #2
 80051b6:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 80051ba:	f7fb f869 	bl	8000290 <__aeabi_uldivmod>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4611      	mov	r1, r2
 80051c4:	4b3c      	ldr	r3, [pc, #240]	@ (80052b8 <UART_SetConfig+0x99c>)
 80051c6:	fba3 2301 	umull	r2, r3, r3, r1
 80051ca:	095b      	lsrs	r3, r3, #5
 80051cc:	2264      	movs	r2, #100	@ 0x64
 80051ce:	fb02 f303 	mul.w	r3, r2, r3
 80051d2:	1acb      	subs	r3, r1, r3
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	3332      	adds	r3, #50	@ 0x32
 80051d8:	4a37      	ldr	r2, [pc, #220]	@ (80052b8 <UART_SetConfig+0x99c>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051e4:	441c      	add	r4, r3
 80051e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80051f0:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80051f4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80051f8:	4642      	mov	r2, r8
 80051fa:	464b      	mov	r3, r9
 80051fc:	1891      	adds	r1, r2, r2
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	415b      	adcs	r3, r3
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005208:	4641      	mov	r1, r8
 800520a:	1851      	adds	r1, r2, r1
 800520c:	6039      	str	r1, [r7, #0]
 800520e:	4649      	mov	r1, r9
 8005210:	414b      	adcs	r3, r1
 8005212:	607b      	str	r3, [r7, #4]
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005220:	4659      	mov	r1, fp
 8005222:	00cb      	lsls	r3, r1, #3
 8005224:	4651      	mov	r1, sl
 8005226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800522a:	4651      	mov	r1, sl
 800522c:	00ca      	lsls	r2, r1, #3
 800522e:	4610      	mov	r0, r2
 8005230:	4619      	mov	r1, r3
 8005232:	4603      	mov	r3, r0
 8005234:	4642      	mov	r2, r8
 8005236:	189b      	adds	r3, r3, r2
 8005238:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800523c:	464b      	mov	r3, r9
 800523e:	460a      	mov	r2, r1
 8005240:	eb42 0303 	adc.w	r3, r2, r3
 8005244:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005248:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005254:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8005264:	4649      	mov	r1, r9
 8005266:	008b      	lsls	r3, r1, #2
 8005268:	4641      	mov	r1, r8
 800526a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800526e:	4641      	mov	r1, r8
 8005270:	008a      	lsls	r2, r1, #2
 8005272:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005276:	f7fb f80b 	bl	8000290 <__aeabi_uldivmod>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4b0e      	ldr	r3, [pc, #56]	@ (80052b8 <UART_SetConfig+0x99c>)
 8005280:	fba3 1302 	umull	r1, r3, r3, r2
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	2164      	movs	r1, #100	@ 0x64
 8005288:	fb01 f303 	mul.w	r3, r1, r3
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	3332      	adds	r3, #50	@ 0x32
 8005292:	4a09      	ldr	r2, [pc, #36]	@ (80052b8 <UART_SetConfig+0x99c>)
 8005294:	fba2 2303 	umull	r2, r3, r2, r3
 8005298:	095b      	lsrs	r3, r3, #5
 800529a:	f003 020f 	and.w	r2, r3, #15
 800529e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4422      	add	r2, r4
 80052a6:	609a      	str	r2, [r3, #8]
}
 80052a8:	e7ff      	b.n	80052aa <UART_SetConfig+0x98e>
 80052aa:	bf00      	nop
 80052ac:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80052b0:	46bd      	mov	sp, r7
 80052b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052b6:	bf00      	nop
 80052b8:	51eb851f 	.word	0x51eb851f

080052bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	4603      	mov	r3, r0
 80052c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80052c6:	2300      	movs	r3, #0
 80052c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80052ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ce:	2b84      	cmp	r3, #132	@ 0x84
 80052d0:	d005      	beq.n	80052de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80052d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4413      	add	r3, r2
 80052da:	3303      	adds	r3, #3
 80052dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80052de:	68fb      	ldr	r3, [r7, #12]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052f2:	f3ef 8305 	mrs	r3, IPSR
 80052f6:	607b      	str	r3, [r7, #4]
  return(result);
 80052f8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	bf14      	ite	ne
 80052fe:	2301      	movne	r3, #1
 8005300:	2300      	moveq	r3, #0
 8005302:	b2db      	uxtb	r3, r3
}
 8005304:	4618      	mov	r0, r3
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005314:	f001 fab8 	bl	8006888 <vTaskStartScheduler>
  
  return osOK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	bd80      	pop	{r7, pc}

0800531e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800531e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005320:	b089      	sub	sp, #36	@ 0x24
 8005322:	af04      	add	r7, sp, #16
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d020      	beq.n	8005372 <osThreadCreate+0x54>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d01c      	beq.n	8005372 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685c      	ldr	r4, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691e      	ldr	r6, [r3, #16]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff ffb6 	bl	80052bc <makeFreeRtosPriority>
 8005350:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800535a:	9202      	str	r2, [sp, #8]
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	9100      	str	r1, [sp, #0]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	4632      	mov	r2, r6
 8005364:	4629      	mov	r1, r5
 8005366:	4620      	mov	r0, r4
 8005368:	f001 f8c0 	bl	80064ec <xTaskCreateStatic>
 800536c:	4603      	mov	r3, r0
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	e01c      	b.n	80053ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685c      	ldr	r4, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800537e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff ff98 	bl	80052bc <makeFreeRtosPriority>
 800538c:	4602      	mov	r2, r0
 800538e:	f107 030c 	add.w	r3, r7, #12
 8005392:	9301      	str	r3, [sp, #4]
 8005394:	9200      	str	r2, [sp, #0]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	4632      	mov	r2, r6
 800539a:	4629      	mov	r1, r5
 800539c:	4620      	mov	r0, r4
 800539e:	f001 f905 	bl	80065ac <xTaskCreate>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d001      	beq.n	80053ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80053a8:	2300      	movs	r3, #0
 80053aa:	e000      	b.n	80053ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80053ac:	68fb      	ldr	r3, [r7, #12]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080053b8 <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
  taskYIELD();
 80053bc:	4b06      	ldr	r3, [pc, #24]	@ (80053d8 <osThreadYield+0x20>)
 80053be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	f3bf 8f6f 	isb	sy
  
  return osOK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	e000ed04 	.word	0xe000ed04

080053dc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <osDelay+0x16>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	e000      	b.n	80053f4 <osDelay+0x18>
 80053f2:	2301      	movs	r3, #1
 80053f4:	4618      	mov	r0, r3
 80053f6:	f001 fa11 	bl	800681c <vTaskDelay>
  
  return osOK;
 80053fa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af02      	add	r7, sp, #8
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8005412:	2300      	movs	r3, #0
 8005414:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8005416:	f7ff ff69 	bl	80052ec <inHandlerMode>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01c      	beq.n	800545a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8005420:	6839      	ldr	r1, [r7, #0]
 8005422:	f107 0208 	add.w	r2, r7, #8
 8005426:	f107 030c 	add.w	r3, r7, #12
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	4613      	mov	r3, r2
 800542e:	2201      	movs	r2, #1
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f001 ffeb 	bl	800740c <xTaskGenericNotifyFromISR>
 8005436:	4603      	mov	r3, r0
 8005438:	2b01      	cmp	r3, #1
 800543a:	d002      	beq.n	8005442 <osSignalSet+0x3e>
      return 0x80000000;
 800543c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005440:	e019      	b.n	8005476 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d015      	beq.n	8005474 <osSignalSet+0x70>
 8005448:	4b0d      	ldr	r3, [pc, #52]	@ (8005480 <osSignalSet+0x7c>)
 800544a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	f3bf 8f4f 	dsb	sy
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	e00c      	b.n	8005474 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800545a:	6839      	ldr	r1, [r7, #0]
 800545c:	f107 0308 	add.w	r3, r7, #8
 8005460:	2201      	movs	r2, #1
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f001 ff1a 	bl	800729c <xTaskGenericNotify>
 8005468:	4603      	mov	r3, r0
 800546a:	2b01      	cmp	r3, #1
 800546c:	d002      	beq.n	8005474 <osSignalSet+0x70>
    return 0x80000000;
 800546e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005472:	e000      	b.n	8005476 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8005474:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	e000ed04 	.word	0xe000ed04

08005484 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8005484:	b590      	push	{r4, r7, lr}
 8005486:	b089      	sub	sp, #36	@ 0x24
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8005490:	2300      	movs	r3, #0
 8005492:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8005494:	2300      	movs	r3, #0
 8005496:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549e:	d103      	bne.n	80054a8 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80054a0:	f04f 33ff 	mov.w	r3, #4294967295
 80054a4:	61fb      	str	r3, [r7, #28]
 80054a6:	e009      	b.n	80054bc <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d006      	beq.n	80054bc <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <osSignalWait+0x38>
      ticks = 1;
 80054b8:	2301      	movs	r3, #1
 80054ba:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80054bc:	f7ff ff16 	bl	80052ec <inHandlerMode>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80054c6:	2382      	movs	r3, #130	@ 0x82
 80054c8:	613b      	str	r3, [r7, #16]
 80054ca:	e01b      	b.n	8005504 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80054cc:	68b9      	ldr	r1, [r7, #8]
 80054ce:	f107 0310 	add.w	r3, r7, #16
 80054d2:	1d1a      	adds	r2, r3, #4
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	2000      	movs	r0, #0
 80054d8:	f001 fe86 	bl	80071e8 <xTaskNotifyWait>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d008      	beq.n	80054f4 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d102      	bne.n	80054ee <osSignalWait+0x6a>
 80054e8:	2300      	movs	r3, #0
 80054ea:	613b      	str	r3, [r7, #16]
 80054ec:	e00a      	b.n	8005504 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80054ee:	2340      	movs	r3, #64	@ 0x40
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	e007      	b.n	8005504 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	da02      	bge.n	8005500 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80054fa:	2386      	movs	r3, #134	@ 0x86
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	e001      	b.n	8005504 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8005500:	2308      	movs	r3, #8
 8005502:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	461c      	mov	r4, r3
 8005508:	f107 0310 	add.w	r3, r7, #16
 800550c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005510:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	3724      	adds	r7, #36	@ 0x24
 8005518:	46bd      	mov	sp, r7
 800551a:	bd90      	pop	{r4, r7, pc}

0800551c <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	3303      	adds	r3, #3
 800552a:	f023 0303 	bic.w	r3, r3, #3
 800552e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8005530:	2014      	movs	r0, #20
 8005532:	f002 fb03 	bl	8007b3c <pvPortMalloc>
 8005536:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d046      	beq.n	80055cc <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	2200      	movs	r2, #0
 8005550:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4618      	mov	r0, r3
 8005558:	f002 faf0 	bl	8007b3c <pvPortMalloc>
 800555c:	4602      	mov	r2, r0
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d02b      	beq.n	80055c2 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	fb02 f303 	mul.w	r3, r2, r3
 8005574:	4618      	mov	r0, r3
 8005576:	f002 fae1 	bl	8007b3c <pvPortMalloc>
 800557a:	4602      	mov	r2, r0
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d011      	beq.n	80055ac <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8005588:	2300      	movs	r3, #0
 800558a:	613b      	str	r3, [r7, #16]
 800558c:	e008      	b.n	80055a0 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	4413      	add	r3, r2
 8005596:	2200      	movs	r2, #0
 8005598:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	3301      	adds	r3, #1
 800559e:	613b      	str	r3, [r7, #16]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d3f1      	bcc.n	800558e <osPoolCreate+0x72>
 80055aa:	e00f      	b.n	80055cc <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f002 fb8b 	bl	8007ccc <vPortFree>
        vPortFree(thePool);
 80055b6:	6978      	ldr	r0, [r7, #20]
 80055b8:	f002 fb88 	bl	8007ccc <vPortFree>
        thePool = NULL;
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	e004      	b.n	80055cc <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80055c2:	6978      	ldr	r0, [r7, #20]
 80055c4:	f002 fb82 	bl	8007ccc <vPortFree>
      thePool = NULL;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80055cc:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b08a      	sub	sp, #40	@ 0x28
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 80055de:	2300      	movs	r3, #0
 80055e0:	627b      	str	r3, [r7, #36]	@ 0x24
  void *p = NULL;
 80055e2:	2300      	movs	r3, #0
 80055e4:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80055e6:	f7ff fe81 	bl	80052ec <inHandlerMode>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00e      	beq.n	800560e <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055f0:	f3ef 8211 	mrs	r2, BASEPRI
 80055f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	617a      	str	r2, [r7, #20]
 8005606:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005608:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800560a:	627b      	str	r3, [r7, #36]	@ 0x24
 800560c:	e001      	b.n	8005612 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800560e:	f002 f973 	bl	80078f8 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8005612:	2300      	movs	r3, #0
 8005614:	61fb      	str	r3, [r7, #28]
 8005616:	e029      	b.n	800566c <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	4413      	add	r3, r2
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6892      	ldr	r2, [r2, #8]
 8005624:	fbb3 f1f2 	udiv	r1, r3, r2
 8005628:	fb01 f202 	mul.w	r2, r1, r2
 800562c:	1a9b      	subs	r3, r3, r2
 800562e:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	4413      	add	r3, r2
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d113      	bne.n	8005666 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	4413      	add	r3, r2
 8005646:	2201      	movs	r2, #1
 8005648:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4619      	mov	r1, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	fb02 f303 	mul.w	r3, r2, r3
 800565a:	440b      	add	r3, r1
 800565c:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	611a      	str	r2, [r3, #16]
      break;
 8005664:	e007      	b.n	8005676 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	3301      	adds	r3, #1
 800566a:	61fb      	str	r3, [r7, #28]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	429a      	cmp	r2, r3
 8005674:	d3d0      	bcc.n	8005618 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8005676:	f7ff fe39 	bl	80052ec <inHandlerMode>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d005      	beq.n	800568c <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8005680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005682:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800568a:	e001      	b.n	8005690 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800568c:	f002 f966 	bl	800795c <vPortExitCritical>
  }
  
  return p;
 8005690:	6a3b      	ldr	r3, [r7, #32]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3728      	adds	r7, #40	@ 0x28
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800569a:	b480      	push	{r7}
 800569c:	b085      	sub	sp, #20
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <osPoolFree+0x14>
    return osErrorParameter;
 80056aa:	2380      	movs	r3, #128	@ 0x80
 80056ac:	e030      	b.n	8005710 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <osPoolFree+0x1e>
    return osErrorParameter;
 80056b4:	2380      	movs	r3, #128	@ 0x80
 80056b6:	e02b      	b.n	8005710 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d201      	bcs.n	80056c6 <osPoolFree+0x2c>
    return osErrorParameter;
 80056c2:	2380      	movs	r3, #128	@ 0x80
 80056c4:	e024      	b.n	8005710 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6812      	ldr	r2, [r2, #0]
 80056cc:	1a9b      	subs	r3, r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80056da:	fb01 f202 	mul.w	r2, r1, r2
 80056de:	1a9b      	subs	r3, r3, r2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <osPoolFree+0x4e>
    return osErrorParameter;
 80056e4:	2380      	movs	r3, #128	@ 0x80
 80056e6:	e013      	b.n	8005710 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f2:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d301      	bcc.n	8005702 <osPoolFree+0x68>
    return osErrorParameter;
 80056fe:	2380      	movs	r3, #128	@ 0x80
 8005700:	e006      	b.n	8005710 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4413      	add	r3, r2
 800570a:	2200      	movs	r2, #0
 800570c:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800571c:	b590      	push	{r4, r7, lr}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	613b      	str	r3, [r7, #16]
 8005732:	2300      	movs	r3, #0
 8005734:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689c      	ldr	r4, [r3, #8]
 800573a:	200c      	movs	r0, #12
 800573c:	f002 f9fe 	bl	8007b3c <pvPortMalloc>
 8005740:	4603      	mov	r3, r0
 8005742:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <osMailCreate+0x36>
    return NULL;
 800574e:	2300      	movs	r3, #0
 8005750:	e038      	b.n	80057c4 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	681c      	ldr	r4, [r3, #0]
 8005766:	2200      	movs	r2, #0
 8005768:	2104      	movs	r1, #4
 800576a:	f000 fa4d 	bl	8005c08 <xQueueGenericCreate>
 800576e:	4603      	mov	r3, r0
 8005770:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d107      	bne.n	800578e <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4618      	mov	r0, r3
 8005786:	f002 faa1 	bl	8007ccc <vPortFree>
    return NULL;
 800578a:	2300      	movs	r3, #0
 800578c:	e01a      	b.n	80057c4 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	681c      	ldr	r4, [r3, #0]
 8005794:	f107 030c 	add.w	r3, r7, #12
 8005798:	4618      	mov	r0, r3
 800579a:	f7ff febf 	bl	800551c <osPoolCreate>
 800579e:	4603      	mov	r3, r0
 80057a0:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d107      	bne.n	80057be <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f002 fa89 	bl	8007ccc <vPortFree>
    return NULL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	e002      	b.n	80057c4 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	371c      	adds	r7, #28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd90      	pop	{r4, r7, pc}

080057cc <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <osMailAlloc+0x14>
    return NULL;
 80057dc:	2300      	movs	r3, #0
 80057de:	e006      	b.n	80057ee <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff fef6 	bl	80055d6 <osPoolAlloc>
 80057ea:	60f8      	str	r0, [r7, #12]
  
  return p;
 80057ec:	68fb      	ldr	r3, [r7, #12]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <osMailCAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailCAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailCAlloc (osMailQId queue_id, uint32_t millisec)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	6039      	str	r1, [r7, #0]
  uint32_t i;
  void *p = osMailAlloc(queue_id, millisec);
 8005800:	6839      	ldr	r1, [r7, #0]
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7ff ffe2 	bl	80057cc <osMailAlloc>
 8005808:	60b8      	str	r0, [r7, #8]
  
  if (p) {
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d010      	beq.n	8005832 <osMailCAlloc+0x3c>
    for (i = 0; i < queue_id->queue_def->item_sz; i++) {
 8005810:	2300      	movs	r3, #0
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	e007      	b.n	8005826 <osMailCAlloc+0x30>
      ((uint8_t *)p)[i] = 0;
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	2200      	movs	r2, #0
 800581e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < queue_id->queue_def->item_sz; i++) {
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3301      	adds	r3, #1
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	429a      	cmp	r2, r3
 8005830:	d3f1      	bcc.n	8005816 <osMailCAlloc+0x20>
    }
  }
  
  return p;
 8005832:	68bb      	ldr	r3, [r7, #8]
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <osMailPut+0x14>
    return osErrorParameter;
 800584c:	2380      	movs	r3, #128	@ 0x80
 800584e:	e02c      	b.n	80058aa <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8005850:	2300      	movs	r3, #0
 8005852:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8005854:	f7ff fd4a 	bl	80052ec <inHandlerMode>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d018      	beq.n	8005890 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6858      	ldr	r0, [r3, #4]
 8005862:	f107 020c 	add.w	r2, r7, #12
 8005866:	4639      	mov	r1, r7
 8005868:	2300      	movs	r3, #0
 800586a:	f000 fb2f 	bl	8005ecc <xQueueGenericSendFromISR>
 800586e:	4603      	mov	r3, r0
 8005870:	2b01      	cmp	r3, #1
 8005872:	d001      	beq.n	8005878 <osMailPut+0x3c>
      return osErrorOS;
 8005874:	23ff      	movs	r3, #255	@ 0xff
 8005876:	e018      	b.n	80058aa <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d014      	beq.n	80058a8 <osMailPut+0x6c>
 800587e:	4b0d      	ldr	r3, [pc, #52]	@ (80058b4 <osMailPut+0x78>)
 8005880:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	e00b      	b.n	80058a8 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6858      	ldr	r0, [r3, #4]
 8005894:	4639      	mov	r1, r7
 8005896:	2300      	movs	r3, #0
 8005898:	2200      	movs	r2, #0
 800589a:	f000 fa15 	bl	8005cc8 <xQueueGenericSend>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d001      	beq.n	80058a8 <osMailPut+0x6c>
      return osErrorOS;
 80058a4:	23ff      	movs	r3, #255	@ 0xff
 80058a6:	e000      	b.n	80058aa <osMailPut+0x6e>
    }
  }
  
  return osOK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	e000ed04 	.word	0xe000ed04

080058b8 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80058b8:	b590      	push	{r4, r7, lr}
 80058ba:	b08b      	sub	sp, #44	@ 0x2c
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <osMailGet+0x2c>
    event.status = osErrorParameter;
 80058ce:	2380      	movs	r3, #128	@ 0x80
 80058d0:	617b      	str	r3, [r7, #20]
    return event;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	461c      	mov	r4, r3
 80058d6:	f107 0314 	add.w	r3, r7, #20
 80058da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80058de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80058e2:	e056      	b.n	8005992 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80058e4:	2300      	movs	r3, #0
 80058e6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80058e8:	2300      	movs	r3, #0
 80058ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f2:	d103      	bne.n	80058fc <osMailGet+0x44>
    ticks = portMAX_DELAY;
 80058f4:	f04f 33ff 	mov.w	r3, #4294967295
 80058f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80058fa:	e009      	b.n	8005910 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d006      	beq.n	8005910 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8005906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <osMailGet+0x58>
      ticks = 1;
 800590c:	2301      	movs	r3, #1
 800590e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005910:	f7ff fcec 	bl	80052ec <inHandlerMode>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d01d      	beq.n	8005956 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	6858      	ldr	r0, [r3, #4]
 800591e:	f107 0220 	add.w	r2, r7, #32
 8005922:	f107 0314 	add.w	r3, r7, #20
 8005926:	3304      	adds	r3, #4
 8005928:	4619      	mov	r1, r3
 800592a:	f000 fc4d 	bl	80061c8 <xQueueReceiveFromISR>
 800592e:	4603      	mov	r3, r0
 8005930:	2b01      	cmp	r3, #1
 8005932:	d102      	bne.n	800593a <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8005934:	2320      	movs	r3, #32
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	e001      	b.n	800593e <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800593a:	2300      	movs	r3, #0
 800593c:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01e      	beq.n	8005982 <osMailGet+0xca>
 8005944:	4b15      	ldr	r3, [pc, #84]	@ (800599c <osMailGet+0xe4>)
 8005946:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	e015      	b.n	8005982 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	6858      	ldr	r0, [r3, #4]
 800595a:	f107 0314 	add.w	r3, r7, #20
 800595e:	3304      	adds	r3, #4
 8005960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005962:	4619      	mov	r1, r3
 8005964:	f000 fb4e 	bl	8006004 <xQueueReceive>
 8005968:	4603      	mov	r3, r0
 800596a:	2b01      	cmp	r3, #1
 800596c:	d102      	bne.n	8005974 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800596e:	2320      	movs	r3, #32
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	e006      	b.n	8005982 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <osMailGet+0xc6>
 800597a:	2300      	movs	r3, #0
 800597c:	e000      	b.n	8005980 <osMailGet+0xc8>
 800597e:	2340      	movs	r3, #64	@ 0x40
 8005980:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	461c      	mov	r4, r3
 8005986:	f107 0314 	add.w	r3, r7, #20
 800598a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800598e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	372c      	adds	r7, #44	@ 0x2c
 8005996:	46bd      	mov	sp, r7
 8005998:	bd90      	pop	{r4, r7, pc}
 800599a:	bf00      	nop
 800599c:	e000ed04 	.word	0xe000ed04

080059a0 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <osMailFree+0x14>
    return osErrorParameter;
 80059b0:	2380      	movs	r3, #128	@ 0x80
 80059b2:	e006      	b.n	80059c2 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	6839      	ldr	r1, [r7, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff fe6d 	bl	800569a <osPoolFree>
 80059c0:	4603      	mov	r3, r0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f103 0208 	add.w	r2, r3, #8
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f04f 32ff 	mov.w	r2, #4294967295
 80059e2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f103 0208 	add.w	r2, r3, #8
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f103 0208 	add.w	r2, r3, #8
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059fe:	bf00      	nop
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	601a      	str	r2, [r3, #0]
}
 8005a60:	bf00      	nop
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a82:	d103      	bne.n	8005a8c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	e00c      	b.n	8005aa6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3308      	adds	r3, #8
 8005a90:	60fb      	str	r3, [r7, #12]
 8005a92:	e002      	b.n	8005a9a <vListInsert+0x2e>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d2f6      	bcs.n	8005a94 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	1c5a      	adds	r2, r3, #1
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	601a      	str	r2, [r3, #0]
}
 8005ad2:	bf00      	nop
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b085      	sub	sp, #20
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	6892      	ldr	r2, [r2, #8]
 8005af4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6852      	ldr	r2, [r2, #4]
 8005afe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d103      	bne.n	8005b12 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689a      	ldr	r2, [r3, #8]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	1e5a      	subs	r2, r3, #1
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
	...

08005b34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10b      	bne.n	8005b60 <xQueueGenericReset+0x2c>
	__asm volatile
 8005b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	60bb      	str	r3, [r7, #8]
}
 8005b5a:	bf00      	nop
 8005b5c:	bf00      	nop
 8005b5e:	e7fd      	b.n	8005b5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b60:	f001 feca 	bl	80078f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b6c:	68f9      	ldr	r1, [r7, #12]
 8005b6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b70:	fb01 f303 	mul.w	r3, r1, r3
 8005b74:	441a      	add	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b90:	3b01      	subs	r3, #1
 8005b92:	68f9      	ldr	r1, [r7, #12]
 8005b94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b96:	fb01 f303 	mul.w	r3, r1, r3
 8005b9a:	441a      	add	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	22ff      	movs	r2, #255	@ 0xff
 8005ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	22ff      	movs	r2, #255	@ 0xff
 8005bac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d114      	bne.n	8005be0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d01a      	beq.n	8005bf4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3310      	adds	r3, #16
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f001 f8aa 	bl	8006d1c <xTaskRemoveFromEventList>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d012      	beq.n	8005bf4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005bce:	4b0d      	ldr	r3, [pc, #52]	@ (8005c04 <xQueueGenericReset+0xd0>)
 8005bd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	e009      	b.n	8005bf4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3310      	adds	r3, #16
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff fef0 	bl	80059ca <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3324      	adds	r3, #36	@ 0x24
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff feeb 	bl	80059ca <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005bf4:	f001 feb2 	bl	800795c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005bf8:	2301      	movs	r3, #1
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	e000ed04 	.word	0xe000ed04

08005c08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08a      	sub	sp, #40	@ 0x28
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	4613      	mov	r3, r2
 8005c14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10b      	bne.n	8005c34 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	613b      	str	r3, [r7, #16]
}
 8005c2e:	bf00      	nop
 8005c30:	bf00      	nop
 8005c32:	e7fd      	b.n	8005c30 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d102      	bne.n	8005c40 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61fb      	str	r3, [r7, #28]
 8005c3e:	e004      	b.n	8005c4a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	fb02 f303 	mul.w	r3, r2, r3
 8005c48:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	3348      	adds	r3, #72	@ 0x48
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f001 ff74 	bl	8007b3c <pvPortMalloc>
 8005c54:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d011      	beq.n	8005c80 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	3348      	adds	r3, #72	@ 0x48
 8005c64:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c6e:	79fa      	ldrb	r2, [r7, #7]
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	4613      	mov	r3, r2
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	68b9      	ldr	r1, [r7, #8]
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 f805 	bl	8005c8a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c80:	69bb      	ldr	r3, [r7, #24]
	}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3720      	adds	r7, #32
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b084      	sub	sp, #16
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	60f8      	str	r0, [r7, #12]
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	607a      	str	r2, [r7, #4]
 8005c96:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d103      	bne.n	8005ca6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	e002      	b.n	8005cac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005cb8:	2101      	movs	r1, #1
 8005cba:	69b8      	ldr	r0, [r7, #24]
 8005cbc:	f7ff ff3a 	bl	8005b34 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005cc0:	bf00      	nop
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08e      	sub	sp, #56	@ 0x38
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10b      	bne.n	8005cfc <xQueueGenericSend+0x34>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005cf6:	bf00      	nop
 8005cf8:	bf00      	nop
 8005cfa:	e7fd      	b.n	8005cf8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d103      	bne.n	8005d0a <xQueueGenericSend+0x42>
 8005d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <xQueueGenericSend+0x46>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <xQueueGenericSend+0x48>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10b      	bne.n	8005d2c <xQueueGenericSend+0x64>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d26:	bf00      	nop
 8005d28:	bf00      	nop
 8005d2a:	e7fd      	b.n	8005d28 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d103      	bne.n	8005d3a <xQueueGenericSend+0x72>
 8005d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d101      	bne.n	8005d3e <xQueueGenericSend+0x76>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e000      	b.n	8005d40 <xQueueGenericSend+0x78>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10b      	bne.n	8005d5c <xQueueGenericSend+0x94>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	623b      	str	r3, [r7, #32]
}
 8005d56:	bf00      	nop
 8005d58:	bf00      	nop
 8005d5a:	e7fd      	b.n	8005d58 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d5c:	f001 f99e 	bl	800709c <xTaskGetSchedulerState>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d102      	bne.n	8005d6c <xQueueGenericSend+0xa4>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <xQueueGenericSend+0xa8>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e000      	b.n	8005d72 <xQueueGenericSend+0xaa>
 8005d70:	2300      	movs	r3, #0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10b      	bne.n	8005d8e <xQueueGenericSend+0xc6>
	__asm volatile
 8005d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	61fb      	str	r3, [r7, #28]
}
 8005d88:	bf00      	nop
 8005d8a:	bf00      	nop
 8005d8c:	e7fd      	b.n	8005d8a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d8e:	f001 fdb3 	bl	80078f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d302      	bcc.n	8005da4 <xQueueGenericSend+0xdc>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d129      	bne.n	8005df8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	68b9      	ldr	r1, [r7, #8]
 8005da8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005daa:	f000 fa8f 	bl	80062cc <prvCopyDataToQueue>
 8005dae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d010      	beq.n	8005dda <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dba:	3324      	adds	r3, #36	@ 0x24
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 ffad 	bl	8006d1c <xTaskRemoveFromEventList>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d013      	beq.n	8005df0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005dc8:	4b3f      	ldr	r3, [pc, #252]	@ (8005ec8 <xQueueGenericSend+0x200>)
 8005dca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	e00a      	b.n	8005df0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d007      	beq.n	8005df0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005de0:	4b39      	ldr	r3, [pc, #228]	@ (8005ec8 <xQueueGenericSend+0x200>)
 8005de2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005df0:	f001 fdb4 	bl	800795c <vPortExitCritical>
				return pdPASS;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e063      	b.n	8005ec0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d103      	bne.n	8005e06 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005dfe:	f001 fdad 	bl	800795c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e02:	2300      	movs	r3, #0
 8005e04:	e05c      	b.n	8005ec0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d106      	bne.n	8005e1a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e0c:	f107 0314 	add.w	r3, r7, #20
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 ffe7 	bl	8006de4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e16:	2301      	movs	r3, #1
 8005e18:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e1a:	f001 fd9f 	bl	800795c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e1e:	f000 fd95 	bl	800694c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e22:	f001 fd69 	bl	80078f8 <vPortEnterCritical>
 8005e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e2c:	b25b      	sxtb	r3, r3
 8005e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e32:	d103      	bne.n	8005e3c <xQueueGenericSend+0x174>
 8005e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e42:	b25b      	sxtb	r3, r3
 8005e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e48:	d103      	bne.n	8005e52 <xQueueGenericSend+0x18a>
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e52:	f001 fd83 	bl	800795c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e56:	1d3a      	adds	r2, r7, #4
 8005e58:	f107 0314 	add.w	r3, r7, #20
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 ffd6 	bl	8006e10 <xTaskCheckForTimeOut>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d124      	bne.n	8005eb4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e6c:	f000 fb26 	bl	80064bc <prvIsQueueFull>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d018      	beq.n	8005ea8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e78:	3310      	adds	r3, #16
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	4611      	mov	r1, r2
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 ff26 	bl	8006cd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e86:	f000 fab1 	bl	80063ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e8a:	f000 fd6d 	bl	8006968 <xTaskResumeAll>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f47f af7c 	bne.w	8005d8e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005e96:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec8 <xQueueGenericSend+0x200>)
 8005e98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	e772      	b.n	8005d8e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ea8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005eaa:	f000 fa9f 	bl	80063ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005eae:	f000 fd5b 	bl	8006968 <xTaskResumeAll>
 8005eb2:	e76c      	b.n	8005d8e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005eb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005eb6:	f000 fa99 	bl	80063ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005eba:	f000 fd55 	bl	8006968 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ebe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3738      	adds	r7, #56	@ 0x38
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	e000ed04 	.word	0xe000ed04

08005ecc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08e      	sub	sp, #56	@ 0x38
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10b      	bne.n	8005efc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ef6:	bf00      	nop
 8005ef8:	bf00      	nop
 8005efa:	e7fd      	b.n	8005ef8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d103      	bne.n	8005f0a <xQueueGenericSendFromISR+0x3e>
 8005f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <xQueueGenericSendFromISR+0x42>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <xQueueGenericSendFromISR+0x44>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10b      	bne.n	8005f2c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	623b      	str	r3, [r7, #32]
}
 8005f26:	bf00      	nop
 8005f28:	bf00      	nop
 8005f2a:	e7fd      	b.n	8005f28 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d103      	bne.n	8005f3a <xQueueGenericSendFromISR+0x6e>
 8005f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d101      	bne.n	8005f3e <xQueueGenericSendFromISR+0x72>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <xQueueGenericSendFromISR+0x74>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10b      	bne.n	8005f5c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	61fb      	str	r3, [r7, #28]
}
 8005f56:	bf00      	nop
 8005f58:	bf00      	nop
 8005f5a:	e7fd      	b.n	8005f58 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f5c:	f001 fdac 	bl	8007ab8 <vPortValidateInterruptPriority>
	__asm volatile
 8005f60:	f3ef 8211 	mrs	r2, BASEPRI
 8005f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	61ba      	str	r2, [r7, #24]
 8005f76:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005f78:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d302      	bcc.n	8005f8e <xQueueGenericSendFromISR+0xc2>
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d12c      	bne.n	8005fe8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	68b9      	ldr	r1, [r7, #8]
 8005f9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f9e:	f000 f995 	bl	80062cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005fa2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005faa:	d112      	bne.n	8005fd2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d016      	beq.n	8005fe2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb6:	3324      	adds	r3, #36	@ 0x24
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 feaf 	bl	8006d1c <xTaskRemoveFromEventList>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00e      	beq.n	8005fe2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00b      	beq.n	8005fe2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	e007      	b.n	8005fe2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005fd2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	b25a      	sxtb	r2, r3
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005fe6:	e001      	b.n	8005fec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fee:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f383 8811 	msr	BASEPRI, r3
}
 8005ff6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3738      	adds	r7, #56	@ 0x38
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b08c      	sub	sp, #48	@ 0x30
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006010:	2300      	movs	r3, #0
 8006012:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10b      	bne.n	8006036 <xQueueReceive+0x32>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	623b      	str	r3, [r7, #32]
}
 8006030:	bf00      	nop
 8006032:	bf00      	nop
 8006034:	e7fd      	b.n	8006032 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d103      	bne.n	8006044 <xQueueReceive+0x40>
 800603c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <xQueueReceive+0x44>
 8006044:	2301      	movs	r3, #1
 8006046:	e000      	b.n	800604a <xQueueReceive+0x46>
 8006048:	2300      	movs	r3, #0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10b      	bne.n	8006066 <xQueueReceive+0x62>
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	61fb      	str	r3, [r7, #28]
}
 8006060:	bf00      	nop
 8006062:	bf00      	nop
 8006064:	e7fd      	b.n	8006062 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006066:	f001 f819 	bl	800709c <xTaskGetSchedulerState>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d102      	bne.n	8006076 <xQueueReceive+0x72>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <xQueueReceive+0x76>
 8006076:	2301      	movs	r3, #1
 8006078:	e000      	b.n	800607c <xQueueReceive+0x78>
 800607a:	2300      	movs	r3, #0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10b      	bne.n	8006098 <xQueueReceive+0x94>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	61bb      	str	r3, [r7, #24]
}
 8006092:	bf00      	nop
 8006094:	bf00      	nop
 8006096:	e7fd      	b.n	8006094 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006098:	f001 fc2e 	bl	80078f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800609c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d01f      	beq.n	80060e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060a8:	68b9      	ldr	r1, [r7, #8]
 80060aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060ac:	f000 f978 	bl	80063a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b2:	1e5a      	subs	r2, r3, #1
 80060b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00f      	beq.n	80060e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c2:	3310      	adds	r3, #16
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fe29 	bl	8006d1c <xTaskRemoveFromEventList>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d007      	beq.n	80060e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80060d0:	4b3c      	ldr	r3, [pc, #240]	@ (80061c4 <xQueueReceive+0x1c0>)
 80060d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80060e0:	f001 fc3c 	bl	800795c <vPortExitCritical>
				return pdPASS;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e069      	b.n	80061bc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d103      	bne.n	80060f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060ee:	f001 fc35 	bl	800795c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80060f2:	2300      	movs	r3, #0
 80060f4:	e062      	b.n	80061bc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d106      	bne.n	800610a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060fc:	f107 0310 	add.w	r3, r7, #16
 8006100:	4618      	mov	r0, r3
 8006102:	f000 fe6f 	bl	8006de4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006106:	2301      	movs	r3, #1
 8006108:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800610a:	f001 fc27 	bl	800795c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800610e:	f000 fc1d 	bl	800694c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006112:	f001 fbf1 	bl	80078f8 <vPortEnterCritical>
 8006116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006118:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800611c:	b25b      	sxtb	r3, r3
 800611e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006122:	d103      	bne.n	800612c <xQueueReceive+0x128>
 8006124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800612c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006132:	b25b      	sxtb	r3, r3
 8006134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006138:	d103      	bne.n	8006142 <xQueueReceive+0x13e>
 800613a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006142:	f001 fc0b 	bl	800795c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006146:	1d3a      	adds	r2, r7, #4
 8006148:	f107 0310 	add.w	r3, r7, #16
 800614c:	4611      	mov	r1, r2
 800614e:	4618      	mov	r0, r3
 8006150:	f000 fe5e 	bl	8006e10 <xTaskCheckForTimeOut>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d123      	bne.n	80061a2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800615a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800615c:	f000 f998 	bl	8006490 <prvIsQueueEmpty>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d017      	beq.n	8006196 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006168:	3324      	adds	r3, #36	@ 0x24
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	4611      	mov	r1, r2
 800616e:	4618      	mov	r0, r3
 8006170:	f000 fdae 	bl	8006cd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006174:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006176:	f000 f939 	bl	80063ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800617a:	f000 fbf5 	bl	8006968 <xTaskResumeAll>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d189      	bne.n	8006098 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006184:	4b0f      	ldr	r3, [pc, #60]	@ (80061c4 <xQueueReceive+0x1c0>)
 8006186:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	f3bf 8f6f 	isb	sy
 8006194:	e780      	b.n	8006098 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006196:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006198:	f000 f928 	bl	80063ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800619c:	f000 fbe4 	bl	8006968 <xTaskResumeAll>
 80061a0:	e77a      	b.n	8006098 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80061a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061a4:	f000 f922 	bl	80063ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061a8:	f000 fbde 	bl	8006968 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061ae:	f000 f96f 	bl	8006490 <prvIsQueueEmpty>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f43f af6f 	beq.w	8006098 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80061ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3730      	adds	r7, #48	@ 0x30
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	e000ed04 	.word	0xe000ed04

080061c8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08e      	sub	sp, #56	@ 0x38
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80061d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10b      	bne.n	80061f6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	623b      	str	r3, [r7, #32]
}
 80061f0:	bf00      	nop
 80061f2:	bf00      	nop
 80061f4:	e7fd      	b.n	80061f2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d103      	bne.n	8006204 <xQueueReceiveFromISR+0x3c>
 80061fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <xQueueReceiveFromISR+0x40>
 8006204:	2301      	movs	r3, #1
 8006206:	e000      	b.n	800620a <xQueueReceiveFromISR+0x42>
 8006208:	2300      	movs	r3, #0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10b      	bne.n	8006226 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	61fb      	str	r3, [r7, #28]
}
 8006220:	bf00      	nop
 8006222:	bf00      	nop
 8006224:	e7fd      	b.n	8006222 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006226:	f001 fc47 	bl	8007ab8 <vPortValidateInterruptPriority>
	__asm volatile
 800622a:	f3ef 8211 	mrs	r2, BASEPRI
 800622e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	61ba      	str	r2, [r7, #24]
 8006240:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006242:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006244:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800624c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624e:	2b00      	cmp	r3, #0
 8006250:	d02f      	beq.n	80062b2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006258:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006260:	f000 f89e 	bl	80063a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006266:	1e5a      	subs	r2, r3, #1
 8006268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800626c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006274:	d112      	bne.n	800629c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d016      	beq.n	80062ac <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800627e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006280:	3310      	adds	r3, #16
 8006282:	4618      	mov	r0, r3
 8006284:	f000 fd4a 	bl	8006d1c <xTaskRemoveFromEventList>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00e      	beq.n	80062ac <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00b      	beq.n	80062ac <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	e007      	b.n	80062ac <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800629c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062a0:	3301      	adds	r3, #1
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	b25a      	sxtb	r2, r3
 80062a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80062ac:	2301      	movs	r3, #1
 80062ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80062b0:	e001      	b.n	80062b6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80062b2:	2300      	movs	r3, #0
 80062b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80062b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f383 8811 	msr	BASEPRI, r3
}
 80062c0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3738      	adds	r7, #56	@ 0x38
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80062d8:	2300      	movs	r3, #0
 80062da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10d      	bne.n	8006306 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d14d      	bne.n	800638e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 feee 	bl	80070d8 <xTaskPriorityDisinherit>
 80062fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	609a      	str	r2, [r3, #8]
 8006304:	e043      	b.n	800638e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d119      	bne.n	8006340 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6858      	ldr	r0, [r3, #4]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006314:	461a      	mov	r2, r3
 8006316:	68b9      	ldr	r1, [r7, #8]
 8006318:	f001 fed4 	bl	80080c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006324:	441a      	add	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	429a      	cmp	r2, r3
 8006334:	d32b      	bcc.n	800638e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	605a      	str	r2, [r3, #4]
 800633e:	e026      	b.n	800638e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	68d8      	ldr	r0, [r3, #12]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006348:	461a      	mov	r2, r3
 800634a:	68b9      	ldr	r1, [r7, #8]
 800634c:	f001 feba 	bl	80080c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	68da      	ldr	r2, [r3, #12]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006358:	425b      	negs	r3, r3
 800635a:	441a      	add	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	68da      	ldr	r2, [r3, #12]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	429a      	cmp	r2, r3
 800636a:	d207      	bcs.n	800637c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006374:	425b      	negs	r3, r3
 8006376:	441a      	add	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b02      	cmp	r3, #2
 8006380:	d105      	bne.n	800638e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	3b01      	subs	r3, #1
 800638c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006396:	697b      	ldr	r3, [r7, #20]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d018      	beq.n	80063e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ba:	441a      	add	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68da      	ldr	r2, [r3, #12]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d303      	bcc.n	80063d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68d9      	ldr	r1, [r3, #12]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063dc:	461a      	mov	r2, r3
 80063de:	6838      	ldr	r0, [r7, #0]
 80063e0:	f001 fe70 	bl	80080c4 <memcpy>
	}
}
 80063e4:	bf00      	nop
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80063f4:	f001 fa80 	bl	80078f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006400:	e011      	b.n	8006426 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006406:	2b00      	cmp	r3, #0
 8006408:	d012      	beq.n	8006430 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	3324      	adds	r3, #36	@ 0x24
 800640e:	4618      	mov	r0, r3
 8006410:	f000 fc84 	bl	8006d1c <xTaskRemoveFromEventList>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800641a:	f000 fd5d 	bl	8006ed8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	3b01      	subs	r3, #1
 8006422:	b2db      	uxtb	r3, r3
 8006424:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800642a:	2b00      	cmp	r3, #0
 800642c:	dce9      	bgt.n	8006402 <prvUnlockQueue+0x16>
 800642e:	e000      	b.n	8006432 <prvUnlockQueue+0x46>
					break;
 8006430:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	22ff      	movs	r2, #255	@ 0xff
 8006436:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800643a:	f001 fa8f 	bl	800795c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800643e:	f001 fa5b 	bl	80078f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006448:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800644a:	e011      	b.n	8006470 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d012      	beq.n	800647a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	3310      	adds	r3, #16
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fc5f 	bl	8006d1c <xTaskRemoveFromEventList>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006464:	f000 fd38 	bl	8006ed8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006468:	7bbb      	ldrb	r3, [r7, #14]
 800646a:	3b01      	subs	r3, #1
 800646c:	b2db      	uxtb	r3, r3
 800646e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006470:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006474:	2b00      	cmp	r3, #0
 8006476:	dce9      	bgt.n	800644c <prvUnlockQueue+0x60>
 8006478:	e000      	b.n	800647c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800647a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	22ff      	movs	r2, #255	@ 0xff
 8006480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006484:	f001 fa6a 	bl	800795c <vPortExitCritical>
}
 8006488:	bf00      	nop
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006498:	f001 fa2e 	bl	80078f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d102      	bne.n	80064aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80064a4:	2301      	movs	r3, #1
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	e001      	b.n	80064ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80064aa:	2300      	movs	r3, #0
 80064ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064ae:	f001 fa55 	bl	800795c <vPortExitCritical>

	return xReturn;
 80064b2:	68fb      	ldr	r3, [r7, #12]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064c4:	f001 fa18 	bl	80078f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d102      	bne.n	80064da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064d4:	2301      	movs	r3, #1
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	e001      	b.n	80064de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80064da:	2300      	movs	r3, #0
 80064dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064de:	f001 fa3d 	bl	800795c <vPortExitCritical>

	return xReturn;
 80064e2:	68fb      	ldr	r3, [r7, #12]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b08e      	sub	sp, #56	@ 0x38
 80064f0:	af04      	add	r7, sp, #16
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
 80064f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80064fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10b      	bne.n	8006518 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	623b      	str	r3, [r7, #32]
}
 8006512:	bf00      	nop
 8006514:	bf00      	nop
 8006516:	e7fd      	b.n	8006514 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10b      	bne.n	8006536 <xTaskCreateStatic+0x4a>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	61fb      	str	r3, [r7, #28]
}
 8006530:	bf00      	nop
 8006532:	bf00      	nop
 8006534:	e7fd      	b.n	8006532 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006536:	2354      	movs	r3, #84	@ 0x54
 8006538:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	2b54      	cmp	r3, #84	@ 0x54
 800653e:	d00b      	beq.n	8006558 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	61bb      	str	r3, [r7, #24]
}
 8006552:	bf00      	nop
 8006554:	bf00      	nop
 8006556:	e7fd      	b.n	8006554 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006558:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800655a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655c:	2b00      	cmp	r3, #0
 800655e:	d01e      	beq.n	800659e <xTaskCreateStatic+0xb2>
 8006560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006562:	2b00      	cmp	r3, #0
 8006564:	d01b      	beq.n	800659e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006568:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800656a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800656e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006572:	2202      	movs	r2, #2
 8006574:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006578:	2300      	movs	r3, #0
 800657a:	9303      	str	r3, [sp, #12]
 800657c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657e:	9302      	str	r3, [sp, #8]
 8006580:	f107 0314 	add.w	r3, r7, #20
 8006584:	9301      	str	r3, [sp, #4]
 8006586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f850 	bl	8006636 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006596:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006598:	f000 f8d6 	bl	8006748 <prvAddNewTaskToReadyList>
 800659c:	e001      	b.n	80065a2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80065a2:	697b      	ldr	r3, [r7, #20]
	}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3728      	adds	r7, #40	@ 0x28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08c      	sub	sp, #48	@ 0x30
 80065b0:	af04      	add	r7, sp, #16
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	603b      	str	r3, [r7, #0]
 80065b8:	4613      	mov	r3, r2
 80065ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065bc:	88fb      	ldrh	r3, [r7, #6]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4618      	mov	r0, r3
 80065c2:	f001 fabb 	bl	8007b3c <pvPortMalloc>
 80065c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00e      	beq.n	80065ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80065ce:	2054      	movs	r0, #84	@ 0x54
 80065d0:	f001 fab4 	bl	8007b3c <pvPortMalloc>
 80065d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80065e2:	e005      	b.n	80065f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80065e4:	6978      	ldr	r0, [r7, #20]
 80065e6:	f001 fb71 	bl	8007ccc <vPortFree>
 80065ea:	e001      	b.n	80065f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80065ec:	2300      	movs	r3, #0
 80065ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d017      	beq.n	8006626 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065fe:	88fa      	ldrh	r2, [r7, #6]
 8006600:	2300      	movs	r3, #0
 8006602:	9303      	str	r3, [sp, #12]
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	9302      	str	r3, [sp, #8]
 8006608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800660a:	9301      	str	r3, [sp, #4]
 800660c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	68b9      	ldr	r1, [r7, #8]
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 f80e 	bl	8006636 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800661a:	69f8      	ldr	r0, [r7, #28]
 800661c:	f000 f894 	bl	8006748 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006620:	2301      	movs	r3, #1
 8006622:	61bb      	str	r3, [r7, #24]
 8006624:	e002      	b.n	800662c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006626:	f04f 33ff 	mov.w	r3, #4294967295
 800662a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800662c:	69bb      	ldr	r3, [r7, #24]
	}
 800662e:	4618      	mov	r0, r3
 8006630:	3720      	adds	r7, #32
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b088      	sub	sp, #32
 800663a:	af00      	add	r7, sp, #0
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	60b9      	str	r1, [r7, #8]
 8006640:	607a      	str	r2, [r7, #4]
 8006642:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006646:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800664e:	3b01      	subs	r3, #1
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4413      	add	r3, r2
 8006654:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	f023 0307 	bic.w	r3, r3, #7
 800665c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	f003 0307 	and.w	r3, r3, #7
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00b      	beq.n	8006680 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	617b      	str	r3, [r7, #20]
}
 800667a:	bf00      	nop
 800667c:	bf00      	nop
 800667e:	e7fd      	b.n	800667c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d01f      	beq.n	80066c6 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006686:	2300      	movs	r3, #0
 8006688:	61fb      	str	r3, [r7, #28]
 800668a:	e012      	b.n	80066b2 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	4413      	add	r3, r2
 8006692:	7819      	ldrb	r1, [r3, #0]
 8006694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	4413      	add	r3, r2
 800669a:	3334      	adds	r3, #52	@ 0x34
 800669c:	460a      	mov	r2, r1
 800669e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	4413      	add	r3, r2
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d006      	beq.n	80066ba <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	3301      	adds	r3, #1
 80066b0:	61fb      	str	r3, [r7, #28]
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	2b0f      	cmp	r3, #15
 80066b6:	d9e9      	bls.n	800668c <prvInitialiseNewTask+0x56>
 80066b8:	e000      	b.n	80066bc <prvInitialiseNewTask+0x86>
			{
				break;
 80066ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066c4:	e003      	b.n	80066ce <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80066c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d0:	2b06      	cmp	r3, #6
 80066d2:	d901      	bls.n	80066d8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066d4:	2306      	movs	r3, #6
 80066d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80066d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80066de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066e2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80066e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e6:	2200      	movs	r2, #0
 80066e8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ec:	3304      	adds	r3, #4
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff f98b 	bl	8005a0a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f6:	3318      	adds	r3, #24
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7ff f986 	bl	8005a0a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006702:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006706:	f1c3 0207 	rsb	r2, r3, #7
 800670a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800670e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006710:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006712:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006716:	2200      	movs	r2, #0
 8006718:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800671a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	68f9      	ldr	r1, [r7, #12]
 8006726:	69b8      	ldr	r0, [r7, #24]
 8006728:	f000 ffb4 	bl	8007694 <pxPortInitialiseStack>
 800672c:	4602      	mov	r2, r0
 800672e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006730:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800673c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800673e:	bf00      	nop
 8006740:	3720      	adds	r7, #32
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
	...

08006748 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006750:	f001 f8d2 	bl	80078f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006754:	4b2a      	ldr	r3, [pc, #168]	@ (8006800 <prvAddNewTaskToReadyList+0xb8>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	3301      	adds	r3, #1
 800675a:	4a29      	ldr	r2, [pc, #164]	@ (8006800 <prvAddNewTaskToReadyList+0xb8>)
 800675c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800675e:	4b29      	ldr	r3, [pc, #164]	@ (8006804 <prvAddNewTaskToReadyList+0xbc>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d109      	bne.n	800677a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006766:	4a27      	ldr	r2, [pc, #156]	@ (8006804 <prvAddNewTaskToReadyList+0xbc>)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800676c:	4b24      	ldr	r3, [pc, #144]	@ (8006800 <prvAddNewTaskToReadyList+0xb8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d110      	bne.n	8006796 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006774:	f000 fbd4 	bl	8006f20 <prvInitialiseTaskLists>
 8006778:	e00d      	b.n	8006796 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800677a:	4b23      	ldr	r3, [pc, #140]	@ (8006808 <prvAddNewTaskToReadyList+0xc0>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d109      	bne.n	8006796 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006782:	4b20      	ldr	r3, [pc, #128]	@ (8006804 <prvAddNewTaskToReadyList+0xbc>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800678c:	429a      	cmp	r2, r3
 800678e:	d802      	bhi.n	8006796 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006790:	4a1c      	ldr	r2, [pc, #112]	@ (8006804 <prvAddNewTaskToReadyList+0xbc>)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006796:	4b1d      	ldr	r3, [pc, #116]	@ (800680c <prvAddNewTaskToReadyList+0xc4>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3301      	adds	r3, #1
 800679c:	4a1b      	ldr	r2, [pc, #108]	@ (800680c <prvAddNewTaskToReadyList+0xc4>)
 800679e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a4:	2201      	movs	r2, #1
 80067a6:	409a      	lsls	r2, r3
 80067a8:	4b19      	ldr	r3, [pc, #100]	@ (8006810 <prvAddNewTaskToReadyList+0xc8>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	4a18      	ldr	r2, [pc, #96]	@ (8006810 <prvAddNewTaskToReadyList+0xc8>)
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4a15      	ldr	r2, [pc, #84]	@ (8006814 <prvAddNewTaskToReadyList+0xcc>)
 80067c0:	441a      	add	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	3304      	adds	r3, #4
 80067c6:	4619      	mov	r1, r3
 80067c8:	4610      	mov	r0, r2
 80067ca:	f7ff f92b 	bl	8005a24 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80067ce:	f001 f8c5 	bl	800795c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80067d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006808 <prvAddNewTaskToReadyList+0xc0>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00e      	beq.n	80067f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80067da:	4b0a      	ldr	r3, [pc, #40]	@ (8006804 <prvAddNewTaskToReadyList+0xbc>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d207      	bcs.n	80067f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006818 <prvAddNewTaskToReadyList+0xd0>)
 80067ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067f8:	bf00      	nop
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	200004d4 	.word	0x200004d4
 8006804:	200003d4 	.word	0x200003d4
 8006808:	200004e0 	.word	0x200004e0
 800680c:	200004f0 	.word	0x200004f0
 8006810:	200004dc 	.word	0x200004dc
 8006814:	200003d8 	.word	0x200003d8
 8006818:	e000ed04 	.word	0xe000ed04

0800681c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006824:	2300      	movs	r3, #0
 8006826:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d018      	beq.n	8006860 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800682e:	4b14      	ldr	r3, [pc, #80]	@ (8006880 <vTaskDelay+0x64>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00b      	beq.n	800684e <vTaskDelay+0x32>
	__asm volatile
 8006836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	60bb      	str	r3, [r7, #8]
}
 8006848:	bf00      	nop
 800684a:	bf00      	nop
 800684c:	e7fd      	b.n	800684a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800684e:	f000 f87d 	bl	800694c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006852:	2100      	movs	r1, #0
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 feb7 	bl	80075c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800685a:	f000 f885 	bl	8006968 <xTaskResumeAll>
 800685e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d107      	bne.n	8006876 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006866:	4b07      	ldr	r3, [pc, #28]	@ (8006884 <vTaskDelay+0x68>)
 8006868:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006876:	bf00      	nop
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	200004fc 	.word	0x200004fc
 8006884:	e000ed04 	.word	0xe000ed04

08006888 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b08a      	sub	sp, #40	@ 0x28
 800688c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800688e:	2300      	movs	r3, #0
 8006890:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006892:	2300      	movs	r3, #0
 8006894:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006896:	463a      	mov	r2, r7
 8006898:	1d39      	adds	r1, r7, #4
 800689a:	f107 0308 	add.w	r3, r7, #8
 800689e:	4618      	mov	r0, r3
 80068a0:	f7f9 ffb6 	bl	8000810 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	9202      	str	r2, [sp, #8]
 80068ac:	9301      	str	r3, [sp, #4]
 80068ae:	2300      	movs	r3, #0
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	2300      	movs	r3, #0
 80068b4:	460a      	mov	r2, r1
 80068b6:	491f      	ldr	r1, [pc, #124]	@ (8006934 <vTaskStartScheduler+0xac>)
 80068b8:	481f      	ldr	r0, [pc, #124]	@ (8006938 <vTaskStartScheduler+0xb0>)
 80068ba:	f7ff fe17 	bl	80064ec <xTaskCreateStatic>
 80068be:	4603      	mov	r3, r0
 80068c0:	4a1e      	ldr	r2, [pc, #120]	@ (800693c <vTaskStartScheduler+0xb4>)
 80068c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068c4:	4b1d      	ldr	r3, [pc, #116]	@ (800693c <vTaskStartScheduler+0xb4>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068cc:	2301      	movs	r3, #1
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	e001      	b.n	80068d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80068d2:	2300      	movs	r3, #0
 80068d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d116      	bne.n	800690a <vTaskStartScheduler+0x82>
	__asm volatile
 80068dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	613b      	str	r3, [r7, #16]
}
 80068ee:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068f0:	4b13      	ldr	r3, [pc, #76]	@ (8006940 <vTaskStartScheduler+0xb8>)
 80068f2:	f04f 32ff 	mov.w	r2, #4294967295
 80068f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068f8:	4b12      	ldr	r3, [pc, #72]	@ (8006944 <vTaskStartScheduler+0xbc>)
 80068fa:	2201      	movs	r2, #1
 80068fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80068fe:	4b12      	ldr	r3, [pc, #72]	@ (8006948 <vTaskStartScheduler+0xc0>)
 8006900:	2200      	movs	r2, #0
 8006902:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006904:	f000 ff54 	bl	80077b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006908:	e00f      	b.n	800692a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006910:	d10b      	bne.n	800692a <vTaskStartScheduler+0xa2>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	60fb      	str	r3, [r7, #12]
}
 8006924:	bf00      	nop
 8006926:	bf00      	nop
 8006928:	e7fd      	b.n	8006926 <vTaskStartScheduler+0x9e>
}
 800692a:	bf00      	nop
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	08008aa4 	.word	0x08008aa4
 8006938:	08006ef1 	.word	0x08006ef1
 800693c:	200004f8 	.word	0x200004f8
 8006940:	200004f4 	.word	0x200004f4
 8006944:	200004e0 	.word	0x200004e0
 8006948:	200004d8 	.word	0x200004d8

0800694c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006950:	4b04      	ldr	r3, [pc, #16]	@ (8006964 <vTaskSuspendAll+0x18>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3301      	adds	r3, #1
 8006956:	4a03      	ldr	r2, [pc, #12]	@ (8006964 <vTaskSuspendAll+0x18>)
 8006958:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800695a:	bf00      	nop
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	200004fc 	.word	0x200004fc

08006968 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006972:	2300      	movs	r3, #0
 8006974:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006976:	4b42      	ldr	r3, [pc, #264]	@ (8006a80 <xTaskResumeAll+0x118>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10b      	bne.n	8006996 <xTaskResumeAll+0x2e>
	__asm volatile
 800697e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	603b      	str	r3, [r7, #0]
}
 8006990:	bf00      	nop
 8006992:	bf00      	nop
 8006994:	e7fd      	b.n	8006992 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006996:	f000 ffaf 	bl	80078f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800699a:	4b39      	ldr	r3, [pc, #228]	@ (8006a80 <xTaskResumeAll+0x118>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3b01      	subs	r3, #1
 80069a0:	4a37      	ldr	r2, [pc, #220]	@ (8006a80 <xTaskResumeAll+0x118>)
 80069a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069a4:	4b36      	ldr	r3, [pc, #216]	@ (8006a80 <xTaskResumeAll+0x118>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d161      	bne.n	8006a70 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069ac:	4b35      	ldr	r3, [pc, #212]	@ (8006a84 <xTaskResumeAll+0x11c>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d05d      	beq.n	8006a70 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069b4:	e02e      	b.n	8006a14 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069b6:	4b34      	ldr	r3, [pc, #208]	@ (8006a88 <xTaskResumeAll+0x120>)
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3318      	adds	r3, #24
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7ff f88b 	bl	8005ade <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	3304      	adds	r3, #4
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7ff f886 	bl	8005ade <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d6:	2201      	movs	r2, #1
 80069d8:	409a      	lsls	r2, r3
 80069da:	4b2c      	ldr	r3, [pc, #176]	@ (8006a8c <xTaskResumeAll+0x124>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4313      	orrs	r3, r2
 80069e0:	4a2a      	ldr	r2, [pc, #168]	@ (8006a8c <xTaskResumeAll+0x124>)
 80069e2:	6013      	str	r3, [r2, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069e8:	4613      	mov	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4a27      	ldr	r2, [pc, #156]	@ (8006a90 <xTaskResumeAll+0x128>)
 80069f2:	441a      	add	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	3304      	adds	r3, #4
 80069f8:	4619      	mov	r1, r3
 80069fa:	4610      	mov	r0, r2
 80069fc:	f7ff f812 	bl	8005a24 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a04:	4b23      	ldr	r3, [pc, #140]	@ (8006a94 <xTaskResumeAll+0x12c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d302      	bcc.n	8006a14 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006a0e:	4b22      	ldr	r3, [pc, #136]	@ (8006a98 <xTaskResumeAll+0x130>)
 8006a10:	2201      	movs	r2, #1
 8006a12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a14:	4b1c      	ldr	r3, [pc, #112]	@ (8006a88 <xTaskResumeAll+0x120>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1cc      	bne.n	80069b6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a22:	f000 fb1b 	bl	800705c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006a26:	4b1d      	ldr	r3, [pc, #116]	@ (8006a9c <xTaskResumeAll+0x134>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d010      	beq.n	8006a54 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a32:	f000 f837 	bl	8006aa4 <xTaskIncrementTick>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d002      	beq.n	8006a42 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006a3c:	4b16      	ldr	r3, [pc, #88]	@ (8006a98 <xTaskResumeAll+0x130>)
 8006a3e:	2201      	movs	r2, #1
 8006a40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1f1      	bne.n	8006a32 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006a4e:	4b13      	ldr	r3, [pc, #76]	@ (8006a9c <xTaskResumeAll+0x134>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a54:	4b10      	ldr	r3, [pc, #64]	@ (8006a98 <xTaskResumeAll+0x130>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d009      	beq.n	8006a70 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a60:	4b0f      	ldr	r3, [pc, #60]	@ (8006aa0 <xTaskResumeAll+0x138>)
 8006a62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a70:	f000 ff74 	bl	800795c <vPortExitCritical>

	return xAlreadyYielded;
 8006a74:	68bb      	ldr	r3, [r7, #8]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	200004fc 	.word	0x200004fc
 8006a84:	200004d4 	.word	0x200004d4
 8006a88:	20000494 	.word	0x20000494
 8006a8c:	200004dc 	.word	0x200004dc
 8006a90:	200003d8 	.word	0x200003d8
 8006a94:	200003d4 	.word	0x200003d4
 8006a98:	200004e8 	.word	0x200004e8
 8006a9c:	200004e4 	.word	0x200004e4
 8006aa0:	e000ed04 	.word	0xe000ed04

08006aa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aae:	4b4f      	ldr	r3, [pc, #316]	@ (8006bec <xTaskIncrementTick+0x148>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f040 8089 	bne.w	8006bca <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ab8:	4b4d      	ldr	r3, [pc, #308]	@ (8006bf0 <xTaskIncrementTick+0x14c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3301      	adds	r3, #1
 8006abe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ac0:	4a4b      	ldr	r2, [pc, #300]	@ (8006bf0 <xTaskIncrementTick+0x14c>)
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d121      	bne.n	8006b10 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006acc:	4b49      	ldr	r3, [pc, #292]	@ (8006bf4 <xTaskIncrementTick+0x150>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00b      	beq.n	8006aee <xTaskIncrementTick+0x4a>
	__asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ada:	f383 8811 	msr	BASEPRI, r3
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	603b      	str	r3, [r7, #0]
}
 8006ae8:	bf00      	nop
 8006aea:	bf00      	nop
 8006aec:	e7fd      	b.n	8006aea <xTaskIncrementTick+0x46>
 8006aee:	4b41      	ldr	r3, [pc, #260]	@ (8006bf4 <xTaskIncrementTick+0x150>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	4b40      	ldr	r3, [pc, #256]	@ (8006bf8 <xTaskIncrementTick+0x154>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a3e      	ldr	r2, [pc, #248]	@ (8006bf4 <xTaskIncrementTick+0x150>)
 8006afa:	6013      	str	r3, [r2, #0]
 8006afc:	4a3e      	ldr	r2, [pc, #248]	@ (8006bf8 <xTaskIncrementTick+0x154>)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	4b3e      	ldr	r3, [pc, #248]	@ (8006bfc <xTaskIncrementTick+0x158>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	3301      	adds	r3, #1
 8006b08:	4a3c      	ldr	r2, [pc, #240]	@ (8006bfc <xTaskIncrementTick+0x158>)
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	f000 faa6 	bl	800705c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b10:	4b3b      	ldr	r3, [pc, #236]	@ (8006c00 <xTaskIncrementTick+0x15c>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d348      	bcc.n	8006bac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b1a:	4b36      	ldr	r3, [pc, #216]	@ (8006bf4 <xTaskIncrementTick+0x150>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d104      	bne.n	8006b2e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b24:	4b36      	ldr	r3, [pc, #216]	@ (8006c00 <xTaskIncrementTick+0x15c>)
 8006b26:	f04f 32ff 	mov.w	r2, #4294967295
 8006b2a:	601a      	str	r2, [r3, #0]
					break;
 8006b2c:	e03e      	b.n	8006bac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b2e:	4b31      	ldr	r3, [pc, #196]	@ (8006bf4 <xTaskIncrementTick+0x150>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d203      	bcs.n	8006b4e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b46:	4a2e      	ldr	r2, [pc, #184]	@ (8006c00 <xTaskIncrementTick+0x15c>)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b4c:	e02e      	b.n	8006bac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	3304      	adds	r3, #4
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fe ffc3 	bl	8005ade <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d004      	beq.n	8006b6a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	3318      	adds	r3, #24
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7fe ffba 	bl	8005ade <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6e:	2201      	movs	r2, #1
 8006b70:	409a      	lsls	r2, r3
 8006b72:	4b24      	ldr	r3, [pc, #144]	@ (8006c04 <xTaskIncrementTick+0x160>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	4a22      	ldr	r2, [pc, #136]	@ (8006c04 <xTaskIncrementTick+0x160>)
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b80:	4613      	mov	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4a1f      	ldr	r2, [pc, #124]	@ (8006c08 <xTaskIncrementTick+0x164>)
 8006b8a:	441a      	add	r2, r3
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	3304      	adds	r3, #4
 8006b90:	4619      	mov	r1, r3
 8006b92:	4610      	mov	r0, r2
 8006b94:	f7fe ff46 	bl	8005a24 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8006c0c <xTaskIncrementTick+0x168>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d3b9      	bcc.n	8006b1a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006baa:	e7b6      	b.n	8006b1a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bac:	4b17      	ldr	r3, [pc, #92]	@ (8006c0c <xTaskIncrementTick+0x168>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bb2:	4915      	ldr	r1, [pc, #84]	@ (8006c08 <xTaskIncrementTick+0x164>)
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	440b      	add	r3, r1
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d907      	bls.n	8006bd4 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	617b      	str	r3, [r7, #20]
 8006bc8:	e004      	b.n	8006bd4 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006bca:	4b11      	ldr	r3, [pc, #68]	@ (8006c10 <xTaskIncrementTick+0x16c>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	4a0f      	ldr	r2, [pc, #60]	@ (8006c10 <xTaskIncrementTick+0x16c>)
 8006bd2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8006c14 <xTaskIncrementTick+0x170>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006be0:	697b      	ldr	r3, [r7, #20]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	200004fc 	.word	0x200004fc
 8006bf0:	200004d8 	.word	0x200004d8
 8006bf4:	2000048c 	.word	0x2000048c
 8006bf8:	20000490 	.word	0x20000490
 8006bfc:	200004ec 	.word	0x200004ec
 8006c00:	200004f4 	.word	0x200004f4
 8006c04:	200004dc 	.word	0x200004dc
 8006c08:	200003d8 	.word	0x200003d8
 8006c0c:	200003d4 	.word	0x200003d4
 8006c10:	200004e4 	.word	0x200004e4
 8006c14:	200004e8 	.word	0x200004e8

08006c18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c1e:	4b27      	ldr	r3, [pc, #156]	@ (8006cbc <vTaskSwitchContext+0xa4>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c26:	4b26      	ldr	r3, [pc, #152]	@ (8006cc0 <vTaskSwitchContext+0xa8>)
 8006c28:	2201      	movs	r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c2c:	e040      	b.n	8006cb0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006c2e:	4b24      	ldr	r3, [pc, #144]	@ (8006cc0 <vTaskSwitchContext+0xa8>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c34:	4b23      	ldr	r3, [pc, #140]	@ (8006cc4 <vTaskSwitchContext+0xac>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	fab3 f383 	clz	r3, r3
 8006c40:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006c42:	7afb      	ldrb	r3, [r7, #11]
 8006c44:	f1c3 031f 	rsb	r3, r3, #31
 8006c48:	617b      	str	r3, [r7, #20]
 8006c4a:	491f      	ldr	r1, [pc, #124]	@ (8006cc8 <vTaskSwitchContext+0xb0>)
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	440b      	add	r3, r1
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10b      	bne.n	8006c76 <vTaskSwitchContext+0x5e>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	607b      	str	r3, [r7, #4]
}
 8006c70:	bf00      	nop
 8006c72:	bf00      	nop
 8006c74:	e7fd      	b.n	8006c72 <vTaskSwitchContext+0x5a>
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4a11      	ldr	r2, [pc, #68]	@ (8006cc8 <vTaskSwitchContext+0xb0>)
 8006c82:	4413      	add	r3, r2
 8006c84:	613b      	str	r3, [r7, #16]
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	605a      	str	r2, [r3, #4]
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	3308      	adds	r3, #8
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d104      	bne.n	8006ca6 <vTaskSwitchContext+0x8e>
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	605a      	str	r2, [r3, #4]
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	4a07      	ldr	r2, [pc, #28]	@ (8006ccc <vTaskSwitchContext+0xb4>)
 8006cae:	6013      	str	r3, [r2, #0]
}
 8006cb0:	bf00      	nop
 8006cb2:	371c      	adds	r7, #28
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	200004fc 	.word	0x200004fc
 8006cc0:	200004e8 	.word	0x200004e8
 8006cc4:	200004dc 	.word	0x200004dc
 8006cc8:	200003d8 	.word	0x200003d8
 8006ccc:	200003d4 	.word	0x200003d4

08006cd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10b      	bne.n	8006cf8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	60fb      	str	r3, [r7, #12]
}
 8006cf2:	bf00      	nop
 8006cf4:	bf00      	nop
 8006cf6:	e7fd      	b.n	8006cf4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cf8:	4b07      	ldr	r3, [pc, #28]	@ (8006d18 <vTaskPlaceOnEventList+0x48>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3318      	adds	r3, #24
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7fe feb3 	bl	8005a6c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d06:	2101      	movs	r1, #1
 8006d08:	6838      	ldr	r0, [r7, #0]
 8006d0a:	f000 fc5d 	bl	80075c8 <prvAddCurrentTaskToDelayedList>
}
 8006d0e:	bf00      	nop
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	200003d4 	.word	0x200003d4

08006d1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10b      	bne.n	8006d4a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	60fb      	str	r3, [r7, #12]
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop
 8006d48:	e7fd      	b.n	8006d46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	3318      	adds	r3, #24
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fe fec5 	bl	8005ade <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d54:	4b1d      	ldr	r3, [pc, #116]	@ (8006dcc <xTaskRemoveFromEventList+0xb0>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d11c      	bne.n	8006d96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	3304      	adds	r3, #4
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fe febc 	bl	8005ade <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	409a      	lsls	r2, r3
 8006d6e:	4b18      	ldr	r3, [pc, #96]	@ (8006dd0 <xTaskRemoveFromEventList+0xb4>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	4a16      	ldr	r2, [pc, #88]	@ (8006dd0 <xTaskRemoveFromEventList+0xb4>)
 8006d76:	6013      	str	r3, [r2, #0]
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4a13      	ldr	r2, [pc, #76]	@ (8006dd4 <xTaskRemoveFromEventList+0xb8>)
 8006d86:	441a      	add	r2, r3
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4610      	mov	r0, r2
 8006d90:	f7fe fe48 	bl	8005a24 <vListInsertEnd>
 8006d94:	e005      	b.n	8006da2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	3318      	adds	r3, #24
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	480e      	ldr	r0, [pc, #56]	@ (8006dd8 <xTaskRemoveFromEventList+0xbc>)
 8006d9e:	f7fe fe41 	bl	8005a24 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006da6:	4b0d      	ldr	r3, [pc, #52]	@ (8006ddc <xTaskRemoveFromEventList+0xc0>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d905      	bls.n	8006dbc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006db0:	2301      	movs	r3, #1
 8006db2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006db4:	4b0a      	ldr	r3, [pc, #40]	@ (8006de0 <xTaskRemoveFromEventList+0xc4>)
 8006db6:	2201      	movs	r2, #1
 8006db8:	601a      	str	r2, [r3, #0]
 8006dba:	e001      	b.n	8006dc0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006dc0:	697b      	ldr	r3, [r7, #20]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	200004fc 	.word	0x200004fc
 8006dd0:	200004dc 	.word	0x200004dc
 8006dd4:	200003d8 	.word	0x200003d8
 8006dd8:	20000494 	.word	0x20000494
 8006ddc:	200003d4 	.word	0x200003d4
 8006de0:	200004e8 	.word	0x200004e8

08006de4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006dec:	4b06      	ldr	r3, [pc, #24]	@ (8006e08 <vTaskInternalSetTimeOutState+0x24>)
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006df4:	4b05      	ldr	r3, [pc, #20]	@ (8006e0c <vTaskInternalSetTimeOutState+0x28>)
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	605a      	str	r2, [r3, #4]
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	200004ec 	.word	0x200004ec
 8006e0c:	200004d8 	.word	0x200004d8

08006e10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b088      	sub	sp, #32
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10b      	bne.n	8006e38 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	613b      	str	r3, [r7, #16]
}
 8006e32:	bf00      	nop
 8006e34:	bf00      	nop
 8006e36:	e7fd      	b.n	8006e34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10b      	bne.n	8006e56 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	60fb      	str	r3, [r7, #12]
}
 8006e50:	bf00      	nop
 8006e52:	bf00      	nop
 8006e54:	e7fd      	b.n	8006e52 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006e56:	f000 fd4f 	bl	80078f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ed0 <xTaskCheckForTimeOut+0xc0>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	69ba      	ldr	r2, [r7, #24]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e72:	d102      	bne.n	8006e7a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e74:	2300      	movs	r3, #0
 8006e76:	61fb      	str	r3, [r7, #28]
 8006e78:	e023      	b.n	8006ec2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	4b15      	ldr	r3, [pc, #84]	@ (8006ed4 <xTaskCheckForTimeOut+0xc4>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d007      	beq.n	8006e96 <xTaskCheckForTimeOut+0x86>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d302      	bcc.n	8006e96 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e90:	2301      	movs	r3, #1
 8006e92:	61fb      	str	r3, [r7, #28]
 8006e94:	e015      	b.n	8006ec2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d20b      	bcs.n	8006eb8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	1ad2      	subs	r2, r2, r3
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7ff ff99 	bl	8006de4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	61fb      	str	r3, [r7, #28]
 8006eb6:	e004      	b.n	8006ec2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ec2:	f000 fd4b 	bl	800795c <vPortExitCritical>

	return xReturn;
 8006ec6:	69fb      	ldr	r3, [r7, #28]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3720      	adds	r7, #32
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	200004d8 	.word	0x200004d8
 8006ed4:	200004ec 	.word	0x200004ec

08006ed8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006edc:	4b03      	ldr	r3, [pc, #12]	@ (8006eec <vTaskMissedYield+0x14>)
 8006ede:	2201      	movs	r2, #1
 8006ee0:	601a      	str	r2, [r3, #0]
}
 8006ee2:	bf00      	nop
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	200004e8 	.word	0x200004e8

08006ef0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ef8:	f000 f852 	bl	8006fa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006efc:	4b06      	ldr	r3, [pc, #24]	@ (8006f18 <prvIdleTask+0x28>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d9f9      	bls.n	8006ef8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f04:	4b05      	ldr	r3, [pc, #20]	@ (8006f1c <prvIdleTask+0x2c>)
 8006f06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f0a:	601a      	str	r2, [r3, #0]
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f14:	e7f0      	b.n	8006ef8 <prvIdleTask+0x8>
 8006f16:	bf00      	nop
 8006f18:	200003d8 	.word	0x200003d8
 8006f1c:	e000ed04 	.word	0xe000ed04

08006f20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f26:	2300      	movs	r3, #0
 8006f28:	607b      	str	r3, [r7, #4]
 8006f2a:	e00c      	b.n	8006f46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4a12      	ldr	r2, [pc, #72]	@ (8006f80 <prvInitialiseTaskLists+0x60>)
 8006f38:	4413      	add	r3, r2
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe fd45 	bl	80059ca <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3301      	adds	r3, #1
 8006f44:	607b      	str	r3, [r7, #4]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b06      	cmp	r3, #6
 8006f4a:	d9ef      	bls.n	8006f2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f4c:	480d      	ldr	r0, [pc, #52]	@ (8006f84 <prvInitialiseTaskLists+0x64>)
 8006f4e:	f7fe fd3c 	bl	80059ca <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f52:	480d      	ldr	r0, [pc, #52]	@ (8006f88 <prvInitialiseTaskLists+0x68>)
 8006f54:	f7fe fd39 	bl	80059ca <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f58:	480c      	ldr	r0, [pc, #48]	@ (8006f8c <prvInitialiseTaskLists+0x6c>)
 8006f5a:	f7fe fd36 	bl	80059ca <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f5e:	480c      	ldr	r0, [pc, #48]	@ (8006f90 <prvInitialiseTaskLists+0x70>)
 8006f60:	f7fe fd33 	bl	80059ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f64:	480b      	ldr	r0, [pc, #44]	@ (8006f94 <prvInitialiseTaskLists+0x74>)
 8006f66:	f7fe fd30 	bl	80059ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f98 <prvInitialiseTaskLists+0x78>)
 8006f6c:	4a05      	ldr	r2, [pc, #20]	@ (8006f84 <prvInitialiseTaskLists+0x64>)
 8006f6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f70:	4b0a      	ldr	r3, [pc, #40]	@ (8006f9c <prvInitialiseTaskLists+0x7c>)
 8006f72:	4a05      	ldr	r2, [pc, #20]	@ (8006f88 <prvInitialiseTaskLists+0x68>)
 8006f74:	601a      	str	r2, [r3, #0]
}
 8006f76:	bf00      	nop
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	200003d8 	.word	0x200003d8
 8006f84:	20000464 	.word	0x20000464
 8006f88:	20000478 	.word	0x20000478
 8006f8c:	20000494 	.word	0x20000494
 8006f90:	200004a8 	.word	0x200004a8
 8006f94:	200004c0 	.word	0x200004c0
 8006f98:	2000048c 	.word	0x2000048c
 8006f9c:	20000490 	.word	0x20000490

08006fa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fa6:	e019      	b.n	8006fdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006fa8:	f000 fca6 	bl	80078f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fac:	4b10      	ldr	r3, [pc, #64]	@ (8006ff0 <prvCheckTasksWaitingTermination+0x50>)
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fe fd90 	bl	8005ade <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff4 <prvCheckTasksWaitingTermination+0x54>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8006ff4 <prvCheckTasksWaitingTermination+0x54>)
 8006fc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff8 <prvCheckTasksWaitingTermination+0x58>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	4a0a      	ldr	r2, [pc, #40]	@ (8006ff8 <prvCheckTasksWaitingTermination+0x58>)
 8006fd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006fd2:	f000 fcc3 	bl	800795c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f810 	bl	8006ffc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fdc:	4b06      	ldr	r3, [pc, #24]	@ (8006ff8 <prvCheckTasksWaitingTermination+0x58>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e1      	bne.n	8006fa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fe4:	bf00      	nop
 8006fe6:	bf00      	nop
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	200004a8 	.word	0x200004a8
 8006ff4:	200004d4 	.word	0x200004d4
 8006ff8:	200004bc 	.word	0x200004bc

08006ffc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800700a:	2b00      	cmp	r3, #0
 800700c:	d108      	bne.n	8007020 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007012:	4618      	mov	r0, r3
 8007014:	f000 fe5a 	bl	8007ccc <vPortFree>
				vPortFree( pxTCB );
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fe57 	bl	8007ccc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800701e:	e019      	b.n	8007054 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007026:	2b01      	cmp	r3, #1
 8007028:	d103      	bne.n	8007032 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fe4e 	bl	8007ccc <vPortFree>
	}
 8007030:	e010      	b.n	8007054 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007038:	2b02      	cmp	r3, #2
 800703a:	d00b      	beq.n	8007054 <prvDeleteTCB+0x58>
	__asm volatile
 800703c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	60fb      	str	r3, [r7, #12]
}
 800704e:	bf00      	nop
 8007050:	bf00      	nop
 8007052:	e7fd      	b.n	8007050 <prvDeleteTCB+0x54>
	}
 8007054:	bf00      	nop
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007062:	4b0c      	ldr	r3, [pc, #48]	@ (8007094 <prvResetNextTaskUnblockTime+0x38>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d104      	bne.n	8007076 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800706c:	4b0a      	ldr	r3, [pc, #40]	@ (8007098 <prvResetNextTaskUnblockTime+0x3c>)
 800706e:	f04f 32ff 	mov.w	r2, #4294967295
 8007072:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007074:	e008      	b.n	8007088 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007076:	4b07      	ldr	r3, [pc, #28]	@ (8007094 <prvResetNextTaskUnblockTime+0x38>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	4a04      	ldr	r2, [pc, #16]	@ (8007098 <prvResetNextTaskUnblockTime+0x3c>)
 8007086:	6013      	str	r3, [r2, #0]
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	2000048c 	.word	0x2000048c
 8007098:	200004f4 	.word	0x200004f4

0800709c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80070a2:	4b0b      	ldr	r3, [pc, #44]	@ (80070d0 <xTaskGetSchedulerState+0x34>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d102      	bne.n	80070b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070aa:	2301      	movs	r3, #1
 80070ac:	607b      	str	r3, [r7, #4]
 80070ae:	e008      	b.n	80070c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070b0:	4b08      	ldr	r3, [pc, #32]	@ (80070d4 <xTaskGetSchedulerState+0x38>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d102      	bne.n	80070be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070b8:	2302      	movs	r3, #2
 80070ba:	607b      	str	r3, [r7, #4]
 80070bc:	e001      	b.n	80070c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070be:	2300      	movs	r3, #0
 80070c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070c2:	687b      	ldr	r3, [r7, #4]
	}
 80070c4:	4618      	mov	r0, r3
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	200004e0 	.word	0x200004e0
 80070d4:	200004fc 	.word	0x200004fc

080070d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070e4:	2300      	movs	r3, #0
 80070e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d070      	beq.n	80071d0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070ee:	4b3b      	ldr	r3, [pc, #236]	@ (80071dc <xTaskPriorityDisinherit+0x104>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d00b      	beq.n	8007110 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80070f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	60fb      	str	r3, [r7, #12]
}
 800710a:	bf00      	nop
 800710c:	bf00      	nop
 800710e:	e7fd      	b.n	800710c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10b      	bne.n	8007130 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	60bb      	str	r3, [r7, #8]
}
 800712a:	bf00      	nop
 800712c:	bf00      	nop
 800712e:	e7fd      	b.n	800712c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007134:	1e5a      	subs	r2, r3, #1
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007142:	429a      	cmp	r2, r3
 8007144:	d044      	beq.n	80071d0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800714a:	2b00      	cmp	r3, #0
 800714c:	d140      	bne.n	80071d0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	3304      	adds	r3, #4
 8007152:	4618      	mov	r0, r3
 8007154:	f7fe fcc3 	bl	8005ade <uxListRemove>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d115      	bne.n	800718a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007162:	491f      	ldr	r1, [pc, #124]	@ (80071e0 <xTaskPriorityDisinherit+0x108>)
 8007164:	4613      	mov	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	440b      	add	r3, r1
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10a      	bne.n	800718a <xTaskPriorityDisinherit+0xb2>
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007178:	2201      	movs	r2, #1
 800717a:	fa02 f303 	lsl.w	r3, r2, r3
 800717e:	43da      	mvns	r2, r3
 8007180:	4b18      	ldr	r3, [pc, #96]	@ (80071e4 <xTaskPriorityDisinherit+0x10c>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4013      	ands	r3, r2
 8007186:	4a17      	ldr	r2, [pc, #92]	@ (80071e4 <xTaskPriorityDisinherit+0x10c>)
 8007188:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007196:	f1c3 0207 	rsb	r2, r3, #7
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a2:	2201      	movs	r2, #1
 80071a4:	409a      	lsls	r2, r3
 80071a6:	4b0f      	ldr	r3, [pc, #60]	@ (80071e4 <xTaskPriorityDisinherit+0x10c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	4a0d      	ldr	r2, [pc, #52]	@ (80071e4 <xTaskPriorityDisinherit+0x10c>)
 80071ae:	6013      	str	r3, [r2, #0]
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071b4:	4613      	mov	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4a08      	ldr	r2, [pc, #32]	@ (80071e0 <xTaskPriorityDisinherit+0x108>)
 80071be:	441a      	add	r2, r3
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	3304      	adds	r3, #4
 80071c4:	4619      	mov	r1, r3
 80071c6:	4610      	mov	r0, r2
 80071c8:	f7fe fc2c 	bl	8005a24 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071cc:	2301      	movs	r3, #1
 80071ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071d0:	697b      	ldr	r3, [r7, #20]
	}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3718      	adds	r7, #24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	200003d4 	.word	0x200003d4
 80071e0:	200003d8 	.word	0x200003d8
 80071e4:	200004dc 	.word	0x200004dc

080071e8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b086      	sub	sp, #24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
 80071f4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80071f6:	f000 fb7f 	bl	80078f8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80071fa:	4b26      	ldr	r3, [pc, #152]	@ (8007294 <xTaskNotifyWait+0xac>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b02      	cmp	r3, #2
 8007206:	d01a      	beq.n	800723e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007208:	4b22      	ldr	r3, [pc, #136]	@ (8007294 <xTaskNotifyWait+0xac>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	43d2      	mvns	r2, r2
 8007212:	400a      	ands	r2, r1
 8007214:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007216:	4b1f      	ldr	r3, [pc, #124]	@ (8007294 <xTaskNotifyWait+0xac>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00b      	beq.n	800723e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007226:	2101      	movs	r1, #1
 8007228:	6838      	ldr	r0, [r7, #0]
 800722a:	f000 f9cd 	bl	80075c8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800722e:	4b1a      	ldr	r3, [pc, #104]	@ (8007298 <xTaskNotifyWait+0xb0>)
 8007230:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800723e:	f000 fb8d 	bl	800795c <vPortExitCritical>

		taskENTER_CRITICAL();
 8007242:	f000 fb59 	bl	80078f8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d004      	beq.n	8007256 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800724c:	4b11      	ldr	r3, [pc, #68]	@ (8007294 <xTaskNotifyWait+0xac>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007256:	4b0f      	ldr	r3, [pc, #60]	@ (8007294 <xTaskNotifyWait+0xac>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b02      	cmp	r3, #2
 8007262:	d002      	beq.n	800726a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007264:	2300      	movs	r3, #0
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	e008      	b.n	800727c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800726a:	4b0a      	ldr	r3, [pc, #40]	@ (8007294 <xTaskNotifyWait+0xac>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	43d2      	mvns	r2, r2
 8007274:	400a      	ands	r2, r1
 8007276:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 8007278:	2301      	movs	r3, #1
 800727a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800727c:	4b05      	ldr	r3, [pc, #20]	@ (8007294 <xTaskNotifyWait+0xac>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 8007286:	f000 fb69 	bl	800795c <vPortExitCritical>

		return xReturn;
 800728a:	697b      	ldr	r3, [r7, #20]
	}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	200003d4 	.word	0x200003d4
 8007298:	e000ed04 	.word	0xe000ed04

0800729c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800729c:	b580      	push	{r7, lr}
 800729e:	b08a      	sub	sp, #40	@ 0x28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	4613      	mov	r3, r2
 80072aa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80072ac:	2301      	movs	r3, #1
 80072ae:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10b      	bne.n	80072ce <xTaskGenericNotify+0x32>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	61bb      	str	r3, [r7, #24]
}
 80072c8:	bf00      	nop
 80072ca:	bf00      	nop
 80072cc:	e7fd      	b.n	80072ca <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80072d2:	f000 fb11 	bl	80078f8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80072ea:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	2202      	movs	r2, #2
 80072f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 80072f4:	79fb      	ldrb	r3, [r7, #7]
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	d827      	bhi.n	800734a <xTaskGenericNotify+0xae>
 80072fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007300 <xTaskGenericNotify+0x64>)
 80072fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007300:	0800736d 	.word	0x0800736d
 8007304:	08007315 	.word	0x08007315
 8007308:	08007323 	.word	0x08007323
 800730c:	0800732f 	.word	0x0800732f
 8007310:	08007337 	.word	0x08007337
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	431a      	orrs	r2, r3
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8007320:	e027      	b.n	8007372 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007322:	6a3b      	ldr	r3, [r7, #32]
 8007324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007326:	1c5a      	adds	r2, r3, #1
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800732c:	e021      	b.n	8007372 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8007334:	e01d      	b.n	8007372 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007336:	7ffb      	ldrb	r3, [r7, #31]
 8007338:	2b02      	cmp	r3, #2
 800733a:	d003      	beq.n	8007344 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800733c:	6a3b      	ldr	r3, [r7, #32]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007342:	e016      	b.n	8007372 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8007344:	2300      	movs	r3, #0
 8007346:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8007348:	e013      	b.n	8007372 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800734e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007352:	d00d      	beq.n	8007370 <xTaskGenericNotify+0xd4>
	__asm volatile
 8007354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007358:	f383 8811 	msr	BASEPRI, r3
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	617b      	str	r3, [r7, #20]
}
 8007366:	bf00      	nop
 8007368:	bf00      	nop
 800736a:	e7fd      	b.n	8007368 <xTaskGenericNotify+0xcc>
					break;
 800736c:	bf00      	nop
 800736e:	e000      	b.n	8007372 <xTaskGenericNotify+0xd6>

					break;
 8007370:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007372:	7ffb      	ldrb	r3, [r7, #31]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d13a      	bne.n	80073ee <xTaskGenericNotify+0x152>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	3304      	adds	r3, #4
 800737c:	4618      	mov	r0, r3
 800737e:	f7fe fbae 	bl	8005ade <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007386:	2201      	movs	r2, #1
 8007388:	409a      	lsls	r2, r3
 800738a:	4b1c      	ldr	r3, [pc, #112]	@ (80073fc <xTaskGenericNotify+0x160>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4313      	orrs	r3, r2
 8007390:	4a1a      	ldr	r2, [pc, #104]	@ (80073fc <xTaskGenericNotify+0x160>)
 8007392:	6013      	str	r3, [r2, #0]
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007398:	4613      	mov	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4413      	add	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4a17      	ldr	r2, [pc, #92]	@ (8007400 <xTaskGenericNotify+0x164>)
 80073a2:	441a      	add	r2, r3
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	3304      	adds	r3, #4
 80073a8:	4619      	mov	r1, r3
 80073aa:	4610      	mov	r0, r2
 80073ac:	f7fe fb3a 	bl	8005a24 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00b      	beq.n	80073d0 <xTaskGenericNotify+0x134>
	__asm volatile
 80073b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	613b      	str	r3, [r7, #16]
}
 80073ca:	bf00      	nop
 80073cc:	bf00      	nop
 80073ce:	e7fd      	b.n	80073cc <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007404 <xTaskGenericNotify+0x168>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073da:	429a      	cmp	r2, r3
 80073dc:	d907      	bls.n	80073ee <xTaskGenericNotify+0x152>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80073de:	4b0a      	ldr	r3, [pc, #40]	@ (8007408 <xTaskGenericNotify+0x16c>)
 80073e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80073ee:	f000 fab5 	bl	800795c <vPortExitCritical>

		return xReturn;
 80073f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3728      	adds	r7, #40	@ 0x28
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	200004dc 	.word	0x200004dc
 8007400:	200003d8 	.word	0x200003d8
 8007404:	200003d4 	.word	0x200003d4
 8007408:	e000ed04 	.word	0xe000ed04

0800740c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800740c:	b580      	push	{r7, lr}
 800740e:	b08e      	sub	sp, #56	@ 0x38
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	603b      	str	r3, [r7, #0]
 8007418:	4613      	mov	r3, r2
 800741a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800741c:	2301      	movs	r3, #1
 800741e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10b      	bne.n	800743e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007438:	bf00      	nop
 800743a:	bf00      	nop
 800743c:	e7fd      	b.n	800743a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800743e:	f000 fb3b 	bl	8007ab8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8007446:	f3ef 8211 	mrs	r2, BASEPRI
 800744a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	623a      	str	r2, [r7, #32]
 800745c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800745e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007460:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d003      	beq.n	8007470 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007472:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800747a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747c:	2202      	movs	r2, #2
 800747e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 8007482:	79fb      	ldrb	r3, [r7, #7]
 8007484:	2b04      	cmp	r3, #4
 8007486:	d829      	bhi.n	80074dc <xTaskGenericNotifyFromISR+0xd0>
 8007488:	a201      	add	r2, pc, #4	@ (adr r2, 8007490 <xTaskGenericNotifyFromISR+0x84>)
 800748a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748e:	bf00      	nop
 8007490:	080074ff 	.word	0x080074ff
 8007494:	080074a5 	.word	0x080074a5
 8007498:	080074b3 	.word	0x080074b3
 800749c:	080074bf 	.word	0x080074bf
 80074a0:	080074c7 	.word	0x080074c7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80074a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	431a      	orrs	r2, r3
 80074ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ae:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80074b0:	e028      	b.n	8007504 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80074b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074b6:	1c5a      	adds	r2, r3, #1
 80074b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ba:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80074bc:	e022      	b.n	8007504 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80074be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80074c4:	e01e      	b.n	8007504 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80074c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d003      	beq.n	80074d6 <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80074ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80074d4:	e016      	b.n	8007504 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 80074d6:	2300      	movs	r3, #0
 80074d8:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80074da:	e013      	b.n	8007504 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80074dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e4:	d00d      	beq.n	8007502 <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	61bb      	str	r3, [r7, #24]
}
 80074f8:	bf00      	nop
 80074fa:	bf00      	nop
 80074fc:	e7fd      	b.n	80074fa <xTaskGenericNotifyFromISR+0xee>
					break;
 80074fe:	bf00      	nop
 8007500:	e000      	b.n	8007504 <xTaskGenericNotifyFromISR+0xf8>
					break;
 8007502:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007504:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007508:	2b01      	cmp	r3, #1
 800750a:	d146      	bne.n	800759a <xTaskGenericNotifyFromISR+0x18e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800750c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00b      	beq.n	800752c <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8007514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	617b      	str	r3, [r7, #20]
}
 8007526:	bf00      	nop
 8007528:	bf00      	nop
 800752a:	e7fd      	b.n	8007528 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800752c:	4b20      	ldr	r3, [pc, #128]	@ (80075b0 <xTaskGenericNotifyFromISR+0x1a4>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d11c      	bne.n	800756e <xTaskGenericNotifyFromISR+0x162>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007536:	3304      	adds	r3, #4
 8007538:	4618      	mov	r0, r3
 800753a:	f7fe fad0 	bl	8005ade <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800753e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007542:	2201      	movs	r2, #1
 8007544:	409a      	lsls	r2, r3
 8007546:	4b1b      	ldr	r3, [pc, #108]	@ (80075b4 <xTaskGenericNotifyFromISR+0x1a8>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4313      	orrs	r3, r2
 800754c:	4a19      	ldr	r2, [pc, #100]	@ (80075b4 <xTaskGenericNotifyFromISR+0x1a8>)
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007554:	4613      	mov	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4a16      	ldr	r2, [pc, #88]	@ (80075b8 <xTaskGenericNotifyFromISR+0x1ac>)
 800755e:	441a      	add	r2, r3
 8007560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007562:	3304      	adds	r3, #4
 8007564:	4619      	mov	r1, r3
 8007566:	4610      	mov	r0, r2
 8007568:	f7fe fa5c 	bl	8005a24 <vListInsertEnd>
 800756c:	e005      	b.n	800757a <xTaskGenericNotifyFromISR+0x16e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800756e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007570:	3318      	adds	r3, #24
 8007572:	4619      	mov	r1, r3
 8007574:	4811      	ldr	r0, [pc, #68]	@ (80075bc <xTaskGenericNotifyFromISR+0x1b0>)
 8007576:	f7fe fa55 	bl	8005a24 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800757a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800757e:	4b10      	ldr	r3, [pc, #64]	@ (80075c0 <xTaskGenericNotifyFromISR+0x1b4>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007584:	429a      	cmp	r2, r3
 8007586:	d908      	bls.n	800759a <xTaskGenericNotifyFromISR+0x18e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007588:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800758a:	2b00      	cmp	r3, #0
 800758c:	d002      	beq.n	8007594 <xTaskGenericNotifyFromISR+0x188>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800758e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007590:	2201      	movs	r2, #1
 8007592:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007594:	4b0b      	ldr	r3, [pc, #44]	@ (80075c4 <xTaskGenericNotifyFromISR+0x1b8>)
 8007596:	2201      	movs	r2, #1
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800759c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	f383 8811 	msr	BASEPRI, r3
}
 80075a4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80075a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3738      	adds	r7, #56	@ 0x38
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	200004fc 	.word	0x200004fc
 80075b4:	200004dc 	.word	0x200004dc
 80075b8:	200003d8 	.word	0x200003d8
 80075bc:	20000494 	.word	0x20000494
 80075c0:	200003d4 	.word	0x200003d4
 80075c4:	200004e8 	.word	0x200004e8

080075c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075d2:	4b29      	ldr	r3, [pc, #164]	@ (8007678 <prvAddCurrentTaskToDelayedList+0xb0>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075d8:	4b28      	ldr	r3, [pc, #160]	@ (800767c <prvAddCurrentTaskToDelayedList+0xb4>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3304      	adds	r3, #4
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fe fa7d 	bl	8005ade <uxListRemove>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10b      	bne.n	8007602 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80075ea:	4b24      	ldr	r3, [pc, #144]	@ (800767c <prvAddCurrentTaskToDelayedList+0xb4>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f0:	2201      	movs	r2, #1
 80075f2:	fa02 f303 	lsl.w	r3, r2, r3
 80075f6:	43da      	mvns	r2, r3
 80075f8:	4b21      	ldr	r3, [pc, #132]	@ (8007680 <prvAddCurrentTaskToDelayedList+0xb8>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4013      	ands	r3, r2
 80075fe:	4a20      	ldr	r2, [pc, #128]	@ (8007680 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007600:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007608:	d10a      	bne.n	8007620 <prvAddCurrentTaskToDelayedList+0x58>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d007      	beq.n	8007620 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007610:	4b1a      	ldr	r3, [pc, #104]	@ (800767c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	3304      	adds	r3, #4
 8007616:	4619      	mov	r1, r3
 8007618:	481a      	ldr	r0, [pc, #104]	@ (8007684 <prvAddCurrentTaskToDelayedList+0xbc>)
 800761a:	f7fe fa03 	bl	8005a24 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800761e:	e026      	b.n	800766e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4413      	add	r3, r2
 8007626:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007628:	4b14      	ldr	r3, [pc, #80]	@ (800767c <prvAddCurrentTaskToDelayedList+0xb4>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	429a      	cmp	r2, r3
 8007636:	d209      	bcs.n	800764c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007638:	4b13      	ldr	r3, [pc, #76]	@ (8007688 <prvAddCurrentTaskToDelayedList+0xc0>)
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	4b0f      	ldr	r3, [pc, #60]	@ (800767c <prvAddCurrentTaskToDelayedList+0xb4>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3304      	adds	r3, #4
 8007642:	4619      	mov	r1, r3
 8007644:	4610      	mov	r0, r2
 8007646:	f7fe fa11 	bl	8005a6c <vListInsert>
}
 800764a:	e010      	b.n	800766e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800764c:	4b0f      	ldr	r3, [pc, #60]	@ (800768c <prvAddCurrentTaskToDelayedList+0xc4>)
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	4b0a      	ldr	r3, [pc, #40]	@ (800767c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3304      	adds	r3, #4
 8007656:	4619      	mov	r1, r3
 8007658:	4610      	mov	r0, r2
 800765a:	f7fe fa07 	bl	8005a6c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800765e:	4b0c      	ldr	r3, [pc, #48]	@ (8007690 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	429a      	cmp	r2, r3
 8007666:	d202      	bcs.n	800766e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007668:	4a09      	ldr	r2, [pc, #36]	@ (8007690 <prvAddCurrentTaskToDelayedList+0xc8>)
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	6013      	str	r3, [r2, #0]
}
 800766e:	bf00      	nop
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	200004d8 	.word	0x200004d8
 800767c:	200003d4 	.word	0x200003d4
 8007680:	200004dc 	.word	0x200004dc
 8007684:	200004c0 	.word	0x200004c0
 8007688:	20000490 	.word	0x20000490
 800768c:	2000048c 	.word	0x2000048c
 8007690:	200004f4 	.word	0x200004f4

08007694 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	3b04      	subs	r3, #4
 80076a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80076ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	3b04      	subs	r3, #4
 80076b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f023 0201 	bic.w	r2, r3, #1
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	3b04      	subs	r3, #4
 80076c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076c4:	4a0c      	ldr	r2, [pc, #48]	@ (80076f8 <pxPortInitialiseStack+0x64>)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	3b14      	subs	r3, #20
 80076ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	3b04      	subs	r3, #4
 80076da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f06f 0202 	mvn.w	r2, #2
 80076e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	3b20      	subs	r3, #32
 80076e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076ea:	68fb      	ldr	r3, [r7, #12]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3714      	adds	r7, #20
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr
 80076f8:	080076fd 	.word	0x080076fd

080076fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007706:	4b13      	ldr	r3, [pc, #76]	@ (8007754 <prvTaskExitError+0x58>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770e:	d00b      	beq.n	8007728 <prvTaskExitError+0x2c>
	__asm volatile
 8007710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	60fb      	str	r3, [r7, #12]
}
 8007722:	bf00      	nop
 8007724:	bf00      	nop
 8007726:	e7fd      	b.n	8007724 <prvTaskExitError+0x28>
	__asm volatile
 8007728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772c:	f383 8811 	msr	BASEPRI, r3
 8007730:	f3bf 8f6f 	isb	sy
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	60bb      	str	r3, [r7, #8]
}
 800773a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800773c:	bf00      	nop
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d0fc      	beq.n	800773e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007744:	bf00      	nop
 8007746:	bf00      	nop
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	2000000c 	.word	0x2000000c
	...

08007760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007760:	4b07      	ldr	r3, [pc, #28]	@ (8007780 <pxCurrentTCBConst2>)
 8007762:	6819      	ldr	r1, [r3, #0]
 8007764:	6808      	ldr	r0, [r1, #0]
 8007766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776a:	f380 8809 	msr	PSP, r0
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f04f 0000 	mov.w	r0, #0
 8007776:	f380 8811 	msr	BASEPRI, r0
 800777a:	4770      	bx	lr
 800777c:	f3af 8000 	nop.w

08007780 <pxCurrentTCBConst2>:
 8007780:	200003d4 	.word	0x200003d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop

08007788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007788:	4808      	ldr	r0, [pc, #32]	@ (80077ac <prvPortStartFirstTask+0x24>)
 800778a:	6800      	ldr	r0, [r0, #0]
 800778c:	6800      	ldr	r0, [r0, #0]
 800778e:	f380 8808 	msr	MSP, r0
 8007792:	f04f 0000 	mov.w	r0, #0
 8007796:	f380 8814 	msr	CONTROL, r0
 800779a:	b662      	cpsie	i
 800779c:	b661      	cpsie	f
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	df00      	svc	0
 80077a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077aa:	bf00      	nop
 80077ac:	e000ed08 	.word	0xe000ed08

080077b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077b6:	4b47      	ldr	r3, [pc, #284]	@ (80078d4 <xPortStartScheduler+0x124>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a47      	ldr	r2, [pc, #284]	@ (80078d8 <xPortStartScheduler+0x128>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d10b      	bne.n	80077d8 <xPortStartScheduler+0x28>
	__asm volatile
 80077c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	613b      	str	r3, [r7, #16]
}
 80077d2:	bf00      	nop
 80077d4:	bf00      	nop
 80077d6:	e7fd      	b.n	80077d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077d8:	4b3e      	ldr	r3, [pc, #248]	@ (80078d4 <xPortStartScheduler+0x124>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a3f      	ldr	r2, [pc, #252]	@ (80078dc <xPortStartScheduler+0x12c>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d10b      	bne.n	80077fa <xPortStartScheduler+0x4a>
	__asm volatile
 80077e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	60fb      	str	r3, [r7, #12]
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop
 80077f8:	e7fd      	b.n	80077f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077fa:	4b39      	ldr	r3, [pc, #228]	@ (80078e0 <xPortStartScheduler+0x130>)
 80077fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	b2db      	uxtb	r3, r3
 8007804:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	22ff      	movs	r2, #255	@ 0xff
 800780a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	b2db      	uxtb	r3, r3
 8007812:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007814:	78fb      	ldrb	r3, [r7, #3]
 8007816:	b2db      	uxtb	r3, r3
 8007818:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800781c:	b2da      	uxtb	r2, r3
 800781e:	4b31      	ldr	r3, [pc, #196]	@ (80078e4 <xPortStartScheduler+0x134>)
 8007820:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007822:	4b31      	ldr	r3, [pc, #196]	@ (80078e8 <xPortStartScheduler+0x138>)
 8007824:	2207      	movs	r2, #7
 8007826:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007828:	e009      	b.n	800783e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800782a:	4b2f      	ldr	r3, [pc, #188]	@ (80078e8 <xPortStartScheduler+0x138>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3b01      	subs	r3, #1
 8007830:	4a2d      	ldr	r2, [pc, #180]	@ (80078e8 <xPortStartScheduler+0x138>)
 8007832:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007834:	78fb      	ldrb	r3, [r7, #3]
 8007836:	b2db      	uxtb	r3, r3
 8007838:	005b      	lsls	r3, r3, #1
 800783a:	b2db      	uxtb	r3, r3
 800783c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800783e:	78fb      	ldrb	r3, [r7, #3]
 8007840:	b2db      	uxtb	r3, r3
 8007842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007846:	2b80      	cmp	r3, #128	@ 0x80
 8007848:	d0ef      	beq.n	800782a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800784a:	4b27      	ldr	r3, [pc, #156]	@ (80078e8 <xPortStartScheduler+0x138>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f1c3 0307 	rsb	r3, r3, #7
 8007852:	2b04      	cmp	r3, #4
 8007854:	d00b      	beq.n	800786e <xPortStartScheduler+0xbe>
	__asm volatile
 8007856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	60bb      	str	r3, [r7, #8]
}
 8007868:	bf00      	nop
 800786a:	bf00      	nop
 800786c:	e7fd      	b.n	800786a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800786e:	4b1e      	ldr	r3, [pc, #120]	@ (80078e8 <xPortStartScheduler+0x138>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	021b      	lsls	r3, r3, #8
 8007874:	4a1c      	ldr	r2, [pc, #112]	@ (80078e8 <xPortStartScheduler+0x138>)
 8007876:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007878:	4b1b      	ldr	r3, [pc, #108]	@ (80078e8 <xPortStartScheduler+0x138>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007880:	4a19      	ldr	r2, [pc, #100]	@ (80078e8 <xPortStartScheduler+0x138>)
 8007882:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	b2da      	uxtb	r2, r3
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800788c:	4b17      	ldr	r3, [pc, #92]	@ (80078ec <xPortStartScheduler+0x13c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a16      	ldr	r2, [pc, #88]	@ (80078ec <xPortStartScheduler+0x13c>)
 8007892:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007896:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007898:	4b14      	ldr	r3, [pc, #80]	@ (80078ec <xPortStartScheduler+0x13c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a13      	ldr	r2, [pc, #76]	@ (80078ec <xPortStartScheduler+0x13c>)
 800789e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80078a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078a4:	f000 f8da 	bl	8007a5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078a8:	4b11      	ldr	r3, [pc, #68]	@ (80078f0 <xPortStartScheduler+0x140>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078ae:	f000 f8f9 	bl	8007aa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078b2:	4b10      	ldr	r3, [pc, #64]	@ (80078f4 <xPortStartScheduler+0x144>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a0f      	ldr	r2, [pc, #60]	@ (80078f4 <xPortStartScheduler+0x144>)
 80078b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80078bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078be:	f7ff ff63 	bl	8007788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078c2:	f7ff f9a9 	bl	8006c18 <vTaskSwitchContext>
	prvTaskExitError();
 80078c6:	f7ff ff19 	bl	80076fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3718      	adds	r7, #24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	e000ed00 	.word	0xe000ed00
 80078d8:	410fc271 	.word	0x410fc271
 80078dc:	410fc270 	.word	0x410fc270
 80078e0:	e000e400 	.word	0xe000e400
 80078e4:	20000500 	.word	0x20000500
 80078e8:	20000504 	.word	0x20000504
 80078ec:	e000ed20 	.word	0xe000ed20
 80078f0:	2000000c 	.word	0x2000000c
 80078f4:	e000ef34 	.word	0xe000ef34

080078f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	607b      	str	r3, [r7, #4]
}
 8007910:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007912:	4b10      	ldr	r3, [pc, #64]	@ (8007954 <vPortEnterCritical+0x5c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	3301      	adds	r3, #1
 8007918:	4a0e      	ldr	r2, [pc, #56]	@ (8007954 <vPortEnterCritical+0x5c>)
 800791a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800791c:	4b0d      	ldr	r3, [pc, #52]	@ (8007954 <vPortEnterCritical+0x5c>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d110      	bne.n	8007946 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007924:	4b0c      	ldr	r3, [pc, #48]	@ (8007958 <vPortEnterCritical+0x60>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00b      	beq.n	8007946 <vPortEnterCritical+0x4e>
	__asm volatile
 800792e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	603b      	str	r3, [r7, #0]
}
 8007940:	bf00      	nop
 8007942:	bf00      	nop
 8007944:	e7fd      	b.n	8007942 <vPortEnterCritical+0x4a>
	}
}
 8007946:	bf00      	nop
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	2000000c 	.word	0x2000000c
 8007958:	e000ed04 	.word	0xe000ed04

0800795c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007962:	4b12      	ldr	r3, [pc, #72]	@ (80079ac <vPortExitCritical+0x50>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10b      	bne.n	8007982 <vPortExitCritical+0x26>
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	607b      	str	r3, [r7, #4]
}
 800797c:	bf00      	nop
 800797e:	bf00      	nop
 8007980:	e7fd      	b.n	800797e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007982:	4b0a      	ldr	r3, [pc, #40]	@ (80079ac <vPortExitCritical+0x50>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3b01      	subs	r3, #1
 8007988:	4a08      	ldr	r2, [pc, #32]	@ (80079ac <vPortExitCritical+0x50>)
 800798a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800798c:	4b07      	ldr	r3, [pc, #28]	@ (80079ac <vPortExitCritical+0x50>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d105      	bne.n	80079a0 <vPortExitCritical+0x44>
 8007994:	2300      	movs	r3, #0
 8007996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	f383 8811 	msr	BASEPRI, r3
}
 800799e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	2000000c 	.word	0x2000000c

080079b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079b0:	f3ef 8009 	mrs	r0, PSP
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	4b15      	ldr	r3, [pc, #84]	@ (8007a10 <pxCurrentTCBConst>)
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	f01e 0f10 	tst.w	lr, #16
 80079c0:	bf08      	it	eq
 80079c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ca:	6010      	str	r0, [r2, #0]
 80079cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80079d4:	f380 8811 	msr	BASEPRI, r0
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	f7ff f91a 	bl	8006c18 <vTaskSwitchContext>
 80079e4:	f04f 0000 	mov.w	r0, #0
 80079e8:	f380 8811 	msr	BASEPRI, r0
 80079ec:	bc09      	pop	{r0, r3}
 80079ee:	6819      	ldr	r1, [r3, #0]
 80079f0:	6808      	ldr	r0, [r1, #0]
 80079f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f6:	f01e 0f10 	tst.w	lr, #16
 80079fa:	bf08      	it	eq
 80079fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a00:	f380 8809 	msr	PSP, r0
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	f3af 8000 	nop.w

08007a10 <pxCurrentTCBConst>:
 8007a10:	200003d4 	.word	0x200003d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop

08007a18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	607b      	str	r3, [r7, #4]
}
 8007a30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a32:	f7ff f837 	bl	8006aa4 <xTaskIncrementTick>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d003      	beq.n	8007a44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a3c:	4b06      	ldr	r3, [pc, #24]	@ (8007a58 <SysTick_Handler+0x40>)
 8007a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a42:	601a      	str	r2, [r3, #0]
 8007a44:	2300      	movs	r3, #0
 8007a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	f383 8811 	msr	BASEPRI, r3
}
 8007a4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a50:	bf00      	nop
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	e000ed04 	.word	0xe000ed04

08007a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a60:	4b0b      	ldr	r3, [pc, #44]	@ (8007a90 <vPortSetupTimerInterrupt+0x34>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a66:	4b0b      	ldr	r3, [pc, #44]	@ (8007a94 <vPortSetupTimerInterrupt+0x38>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a98 <vPortSetupTimerInterrupt+0x3c>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a0a      	ldr	r2, [pc, #40]	@ (8007a9c <vPortSetupTimerInterrupt+0x40>)
 8007a72:	fba2 2303 	umull	r2, r3, r2, r3
 8007a76:	099b      	lsrs	r3, r3, #6
 8007a78:	4a09      	ldr	r2, [pc, #36]	@ (8007aa0 <vPortSetupTimerInterrupt+0x44>)
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a7e:	4b04      	ldr	r3, [pc, #16]	@ (8007a90 <vPortSetupTimerInterrupt+0x34>)
 8007a80:	2207      	movs	r2, #7
 8007a82:	601a      	str	r2, [r3, #0]
}
 8007a84:	bf00      	nop
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	e000e010 	.word	0xe000e010
 8007a94:	e000e018 	.word	0xe000e018
 8007a98:	20000000 	.word	0x20000000
 8007a9c:	10624dd3 	.word	0x10624dd3
 8007aa0:	e000e014 	.word	0xe000e014

08007aa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007aa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ab4 <vPortEnableVFP+0x10>
 8007aa8:	6801      	ldr	r1, [r0, #0]
 8007aaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007aae:	6001      	str	r1, [r0, #0]
 8007ab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ab2:	bf00      	nop
 8007ab4:	e000ed88 	.word	0xe000ed88

08007ab8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007abe:	f3ef 8305 	mrs	r3, IPSR
 8007ac2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2b0f      	cmp	r3, #15
 8007ac8:	d915      	bls.n	8007af6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007aca:	4a18      	ldr	r2, [pc, #96]	@ (8007b2c <vPortValidateInterruptPriority+0x74>)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4413      	add	r3, r2
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ad4:	4b16      	ldr	r3, [pc, #88]	@ (8007b30 <vPortValidateInterruptPriority+0x78>)
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	7afa      	ldrb	r2, [r7, #11]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d20b      	bcs.n	8007af6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	607b      	str	r3, [r7, #4]
}
 8007af0:	bf00      	nop
 8007af2:	bf00      	nop
 8007af4:	e7fd      	b.n	8007af2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007af6:	4b0f      	ldr	r3, [pc, #60]	@ (8007b34 <vPortValidateInterruptPriority+0x7c>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007afe:	4b0e      	ldr	r3, [pc, #56]	@ (8007b38 <vPortValidateInterruptPriority+0x80>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d90b      	bls.n	8007b1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b0a:	f383 8811 	msr	BASEPRI, r3
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f3bf 8f4f 	dsb	sy
 8007b16:	603b      	str	r3, [r7, #0]
}
 8007b18:	bf00      	nop
 8007b1a:	bf00      	nop
 8007b1c:	e7fd      	b.n	8007b1a <vPortValidateInterruptPriority+0x62>
	}
 8007b1e:	bf00      	nop
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	e000e3f0 	.word	0xe000e3f0
 8007b30:	20000500 	.word	0x20000500
 8007b34:	e000ed0c 	.word	0xe000ed0c
 8007b38:	20000504 	.word	0x20000504

08007b3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08a      	sub	sp, #40	@ 0x28
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b44:	2300      	movs	r3, #0
 8007b46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b48:	f7fe ff00 	bl	800694c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b4c:	4b5a      	ldr	r3, [pc, #360]	@ (8007cb8 <pvPortMalloc+0x17c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b54:	f000 f916 	bl	8007d84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b58:	4b58      	ldr	r3, [pc, #352]	@ (8007cbc <pvPortMalloc+0x180>)
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4013      	ands	r3, r2
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f040 8090 	bne.w	8007c86 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d01e      	beq.n	8007baa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007b6c:	2208      	movs	r2, #8
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4413      	add	r3, r2
 8007b72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f003 0307 	and.w	r3, r3, #7
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d015      	beq.n	8007baa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f023 0307 	bic.w	r3, r3, #7
 8007b84:	3308      	adds	r3, #8
 8007b86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f003 0307 	and.w	r3, r3, #7
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00b      	beq.n	8007baa <pvPortMalloc+0x6e>
	__asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	617b      	str	r3, [r7, #20]
}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop
 8007ba8:	e7fd      	b.n	8007ba6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d06a      	beq.n	8007c86 <pvPortMalloc+0x14a>
 8007bb0:	4b43      	ldr	r3, [pc, #268]	@ (8007cc0 <pvPortMalloc+0x184>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d865      	bhi.n	8007c86 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007bba:	4b42      	ldr	r3, [pc, #264]	@ (8007cc4 <pvPortMalloc+0x188>)
 8007bbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bbe:	4b41      	ldr	r3, [pc, #260]	@ (8007cc4 <pvPortMalloc+0x188>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bc4:	e004      	b.n	8007bd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d903      	bls.n	8007be2 <pvPortMalloc+0xa6>
 8007bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1f1      	bne.n	8007bc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007be2:	4b35      	ldr	r3, [pc, #212]	@ (8007cb8 <pvPortMalloc+0x17c>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d04c      	beq.n	8007c86 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2208      	movs	r2, #8
 8007bf2:	4413      	add	r3, r2
 8007bf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c00:	685a      	ldr	r2, [r3, #4]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	1ad2      	subs	r2, r2, r3
 8007c06:	2308      	movs	r3, #8
 8007c08:	005b      	lsls	r3, r3, #1
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d920      	bls.n	8007c50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4413      	add	r3, r2
 8007c14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	f003 0307 	and.w	r3, r3, #7
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00b      	beq.n	8007c38 <pvPortMalloc+0xfc>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	613b      	str	r3, [r7, #16]
}
 8007c32:	bf00      	nop
 8007c34:	bf00      	nop
 8007c36:	e7fd      	b.n	8007c34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	1ad2      	subs	r2, r2, r3
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c4a:	69b8      	ldr	r0, [r7, #24]
 8007c4c:	f000 f8fc 	bl	8007e48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c50:	4b1b      	ldr	r3, [pc, #108]	@ (8007cc0 <pvPortMalloc+0x184>)
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	4a19      	ldr	r2, [pc, #100]	@ (8007cc0 <pvPortMalloc+0x184>)
 8007c5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c5e:	4b18      	ldr	r3, [pc, #96]	@ (8007cc0 <pvPortMalloc+0x184>)
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	4b19      	ldr	r3, [pc, #100]	@ (8007cc8 <pvPortMalloc+0x18c>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d203      	bcs.n	8007c72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c6a:	4b15      	ldr	r3, [pc, #84]	@ (8007cc0 <pvPortMalloc+0x184>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a16      	ldr	r2, [pc, #88]	@ (8007cc8 <pvPortMalloc+0x18c>)
 8007c70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	4b11      	ldr	r3, [pc, #68]	@ (8007cbc <pvPortMalloc+0x180>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c86:	f7fe fe6f 	bl	8006968 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	f003 0307 	and.w	r3, r3, #7
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00b      	beq.n	8007cac <pvPortMalloc+0x170>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	60fb      	str	r3, [r7, #12]
}
 8007ca6:	bf00      	nop
 8007ca8:	bf00      	nop
 8007caa:	e7fd      	b.n	8007ca8 <pvPortMalloc+0x16c>
	return pvReturn;
 8007cac:	69fb      	ldr	r3, [r7, #28]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3728      	adds	r7, #40	@ 0x28
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	20004110 	.word	0x20004110
 8007cbc:	2000411c 	.word	0x2000411c
 8007cc0:	20004114 	.word	0x20004114
 8007cc4:	20004108 	.word	0x20004108
 8007cc8:	20004118 	.word	0x20004118

08007ccc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d04a      	beq.n	8007d74 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007cde:	2308      	movs	r3, #8
 8007ce0:	425b      	negs	r3, r3
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	4b22      	ldr	r3, [pc, #136]	@ (8007d7c <vPortFree+0xb0>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10b      	bne.n	8007d12 <vPortFree+0x46>
	__asm volatile
 8007cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	60fb      	str	r3, [r7, #12]
}
 8007d0c:	bf00      	nop
 8007d0e:	bf00      	nop
 8007d10:	e7fd      	b.n	8007d0e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00b      	beq.n	8007d32 <vPortFree+0x66>
	__asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d1e:	f383 8811 	msr	BASEPRI, r3
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	60bb      	str	r3, [r7, #8]
}
 8007d2c:	bf00      	nop
 8007d2e:	bf00      	nop
 8007d30:	e7fd      	b.n	8007d2e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	4b11      	ldr	r3, [pc, #68]	@ (8007d7c <vPortFree+0xb0>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d019      	beq.n	8007d74 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d115      	bne.n	8007d74 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d7c <vPortFree+0xb0>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	43db      	mvns	r3, r3
 8007d52:	401a      	ands	r2, r3
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d58:	f7fe fdf8 	bl	800694c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	4b07      	ldr	r3, [pc, #28]	@ (8007d80 <vPortFree+0xb4>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4413      	add	r3, r2
 8007d66:	4a06      	ldr	r2, [pc, #24]	@ (8007d80 <vPortFree+0xb4>)
 8007d68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d6a:	6938      	ldr	r0, [r7, #16]
 8007d6c:	f000 f86c 	bl	8007e48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007d70:	f7fe fdfa 	bl	8006968 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d74:	bf00      	nop
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	2000411c 	.word	0x2000411c
 8007d80:	20004114 	.word	0x20004114

08007d84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d8a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007d8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d90:	4b27      	ldr	r3, [pc, #156]	@ (8007e30 <prvHeapInit+0xac>)
 8007d92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f003 0307 	and.w	r3, r3, #7
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00c      	beq.n	8007db8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3307      	adds	r3, #7
 8007da2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f023 0307 	bic.w	r3, r3, #7
 8007daa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	4a1f      	ldr	r2, [pc, #124]	@ (8007e30 <prvHeapInit+0xac>)
 8007db4:	4413      	add	r3, r2
 8007db6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8007e34 <prvHeapInit+0xb0>)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8007e34 <prvHeapInit+0xb0>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	4413      	add	r3, r2
 8007dce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007dd0:	2208      	movs	r2, #8
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	1a9b      	subs	r3, r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f023 0307 	bic.w	r3, r3, #7
 8007dde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	4a15      	ldr	r2, [pc, #84]	@ (8007e38 <prvHeapInit+0xb4>)
 8007de4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007de6:	4b14      	ldr	r3, [pc, #80]	@ (8007e38 <prvHeapInit+0xb4>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2200      	movs	r2, #0
 8007dec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dee:	4b12      	ldr	r3, [pc, #72]	@ (8007e38 <prvHeapInit+0xb4>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	1ad2      	subs	r2, r2, r3
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e04:	4b0c      	ldr	r3, [pc, #48]	@ (8007e38 <prvHeapInit+0xb4>)
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	4a0a      	ldr	r2, [pc, #40]	@ (8007e3c <prvHeapInit+0xb8>)
 8007e12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	4a09      	ldr	r2, [pc, #36]	@ (8007e40 <prvHeapInit+0xbc>)
 8007e1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e1c:	4b09      	ldr	r3, [pc, #36]	@ (8007e44 <prvHeapInit+0xc0>)
 8007e1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e22:	601a      	str	r2, [r3, #0]
}
 8007e24:	bf00      	nop
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	20000508 	.word	0x20000508
 8007e34:	20004108 	.word	0x20004108
 8007e38:	20004110 	.word	0x20004110
 8007e3c:	20004118 	.word	0x20004118
 8007e40:	20004114 	.word	0x20004114
 8007e44:	2000411c 	.word	0x2000411c

08007e48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e50:	4b28      	ldr	r3, [pc, #160]	@ (8007ef4 <prvInsertBlockIntoFreeList+0xac>)
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	e002      	b.n	8007e5c <prvInsertBlockIntoFreeList+0x14>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	60fb      	str	r3, [r7, #12]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d8f7      	bhi.n	8007e56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	4413      	add	r3, r2
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d108      	bne.n	8007e8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	441a      	add	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	441a      	add	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d118      	bne.n	8007ed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	4b15      	ldr	r3, [pc, #84]	@ (8007ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d00d      	beq.n	8007ec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	441a      	add	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	e008      	b.n	8007ed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	e003      	b.n	8007ed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d002      	beq.n	8007ee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ee6:	bf00      	nop
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	20004108 	.word	0x20004108
 8007ef8:	20004110 	.word	0x20004110

08007efc <atoi>:
 8007efc:	220a      	movs	r2, #10
 8007efe:	2100      	movs	r1, #0
 8007f00:	f000 b87a 	b.w	8007ff8 <strtol>

08007f04 <_strtol_l.constprop.0>:
 8007f04:	2b24      	cmp	r3, #36	@ 0x24
 8007f06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f0a:	4686      	mov	lr, r0
 8007f0c:	4690      	mov	r8, r2
 8007f0e:	d801      	bhi.n	8007f14 <_strtol_l.constprop.0+0x10>
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d106      	bne.n	8007f22 <_strtol_l.constprop.0+0x1e>
 8007f14:	f000 f8a2 	bl	800805c <__errno>
 8007f18:	2316      	movs	r3, #22
 8007f1a:	6003      	str	r3, [r0, #0]
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f22:	4834      	ldr	r0, [pc, #208]	@ (8007ff4 <_strtol_l.constprop.0+0xf0>)
 8007f24:	460d      	mov	r5, r1
 8007f26:	462a      	mov	r2, r5
 8007f28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f2c:	5d06      	ldrb	r6, [r0, r4]
 8007f2e:	f016 0608 	ands.w	r6, r6, #8
 8007f32:	d1f8      	bne.n	8007f26 <_strtol_l.constprop.0+0x22>
 8007f34:	2c2d      	cmp	r4, #45	@ 0x2d
 8007f36:	d12d      	bne.n	8007f94 <_strtol_l.constprop.0+0x90>
 8007f38:	782c      	ldrb	r4, [r5, #0]
 8007f3a:	2601      	movs	r6, #1
 8007f3c:	1c95      	adds	r5, r2, #2
 8007f3e:	f033 0210 	bics.w	r2, r3, #16
 8007f42:	d109      	bne.n	8007f58 <_strtol_l.constprop.0+0x54>
 8007f44:	2c30      	cmp	r4, #48	@ 0x30
 8007f46:	d12a      	bne.n	8007f9e <_strtol_l.constprop.0+0x9a>
 8007f48:	782a      	ldrb	r2, [r5, #0]
 8007f4a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f4e:	2a58      	cmp	r2, #88	@ 0x58
 8007f50:	d125      	bne.n	8007f9e <_strtol_l.constprop.0+0x9a>
 8007f52:	786c      	ldrb	r4, [r5, #1]
 8007f54:	2310      	movs	r3, #16
 8007f56:	3502      	adds	r5, #2
 8007f58:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007f5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f60:	2200      	movs	r2, #0
 8007f62:	fbbc f9f3 	udiv	r9, ip, r3
 8007f66:	4610      	mov	r0, r2
 8007f68:	fb03 ca19 	mls	sl, r3, r9, ip
 8007f6c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007f70:	2f09      	cmp	r7, #9
 8007f72:	d81b      	bhi.n	8007fac <_strtol_l.constprop.0+0xa8>
 8007f74:	463c      	mov	r4, r7
 8007f76:	42a3      	cmp	r3, r4
 8007f78:	dd27      	ble.n	8007fca <_strtol_l.constprop.0+0xc6>
 8007f7a:	1c57      	adds	r7, r2, #1
 8007f7c:	d007      	beq.n	8007f8e <_strtol_l.constprop.0+0x8a>
 8007f7e:	4581      	cmp	r9, r0
 8007f80:	d320      	bcc.n	8007fc4 <_strtol_l.constprop.0+0xc0>
 8007f82:	d101      	bne.n	8007f88 <_strtol_l.constprop.0+0x84>
 8007f84:	45a2      	cmp	sl, r4
 8007f86:	db1d      	blt.n	8007fc4 <_strtol_l.constprop.0+0xc0>
 8007f88:	fb00 4003 	mla	r0, r0, r3, r4
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f92:	e7eb      	b.n	8007f6c <_strtol_l.constprop.0+0x68>
 8007f94:	2c2b      	cmp	r4, #43	@ 0x2b
 8007f96:	bf04      	itt	eq
 8007f98:	782c      	ldrbeq	r4, [r5, #0]
 8007f9a:	1c95      	addeq	r5, r2, #2
 8007f9c:	e7cf      	b.n	8007f3e <_strtol_l.constprop.0+0x3a>
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1da      	bne.n	8007f58 <_strtol_l.constprop.0+0x54>
 8007fa2:	2c30      	cmp	r4, #48	@ 0x30
 8007fa4:	bf0c      	ite	eq
 8007fa6:	2308      	moveq	r3, #8
 8007fa8:	230a      	movne	r3, #10
 8007faa:	e7d5      	b.n	8007f58 <_strtol_l.constprop.0+0x54>
 8007fac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007fb0:	2f19      	cmp	r7, #25
 8007fb2:	d801      	bhi.n	8007fb8 <_strtol_l.constprop.0+0xb4>
 8007fb4:	3c37      	subs	r4, #55	@ 0x37
 8007fb6:	e7de      	b.n	8007f76 <_strtol_l.constprop.0+0x72>
 8007fb8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007fbc:	2f19      	cmp	r7, #25
 8007fbe:	d804      	bhi.n	8007fca <_strtol_l.constprop.0+0xc6>
 8007fc0:	3c57      	subs	r4, #87	@ 0x57
 8007fc2:	e7d8      	b.n	8007f76 <_strtol_l.constprop.0+0x72>
 8007fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc8:	e7e1      	b.n	8007f8e <_strtol_l.constprop.0+0x8a>
 8007fca:	1c53      	adds	r3, r2, #1
 8007fcc:	d108      	bne.n	8007fe0 <_strtol_l.constprop.0+0xdc>
 8007fce:	2322      	movs	r3, #34	@ 0x22
 8007fd0:	f8ce 3000 	str.w	r3, [lr]
 8007fd4:	4660      	mov	r0, ip
 8007fd6:	f1b8 0f00 	cmp.w	r8, #0
 8007fda:	d0a0      	beq.n	8007f1e <_strtol_l.constprop.0+0x1a>
 8007fdc:	1e69      	subs	r1, r5, #1
 8007fde:	e006      	b.n	8007fee <_strtol_l.constprop.0+0xea>
 8007fe0:	b106      	cbz	r6, 8007fe4 <_strtol_l.constprop.0+0xe0>
 8007fe2:	4240      	negs	r0, r0
 8007fe4:	f1b8 0f00 	cmp.w	r8, #0
 8007fe8:	d099      	beq.n	8007f1e <_strtol_l.constprop.0+0x1a>
 8007fea:	2a00      	cmp	r2, #0
 8007fec:	d1f6      	bne.n	8007fdc <_strtol_l.constprop.0+0xd8>
 8007fee:	f8c8 1000 	str.w	r1, [r8]
 8007ff2:	e794      	b.n	8007f1e <_strtol_l.constprop.0+0x1a>
 8007ff4:	08008add 	.word	0x08008add

08007ff8 <strtol>:
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	460a      	mov	r2, r1
 8007ffc:	4601      	mov	r1, r0
 8007ffe:	4802      	ldr	r0, [pc, #8]	@ (8008008 <strtol+0x10>)
 8008000:	6800      	ldr	r0, [r0, #0]
 8008002:	f7ff bf7f 	b.w	8007f04 <_strtol_l.constprop.0>
 8008006:	bf00      	nop
 8008008:	20000010 	.word	0x20000010

0800800c <siprintf>:
 800800c:	b40e      	push	{r1, r2, r3}
 800800e:	b500      	push	{lr}
 8008010:	b09c      	sub	sp, #112	@ 0x70
 8008012:	ab1d      	add	r3, sp, #116	@ 0x74
 8008014:	9002      	str	r0, [sp, #8]
 8008016:	9006      	str	r0, [sp, #24]
 8008018:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800801c:	4809      	ldr	r0, [pc, #36]	@ (8008044 <siprintf+0x38>)
 800801e:	9107      	str	r1, [sp, #28]
 8008020:	9104      	str	r1, [sp, #16]
 8008022:	4909      	ldr	r1, [pc, #36]	@ (8008048 <siprintf+0x3c>)
 8008024:	f853 2b04 	ldr.w	r2, [r3], #4
 8008028:	9105      	str	r1, [sp, #20]
 800802a:	6800      	ldr	r0, [r0, #0]
 800802c:	9301      	str	r3, [sp, #4]
 800802e:	a902      	add	r1, sp, #8
 8008030:	f000 f9aa 	bl	8008388 <_svfiprintf_r>
 8008034:	9b02      	ldr	r3, [sp, #8]
 8008036:	2200      	movs	r2, #0
 8008038:	701a      	strb	r2, [r3, #0]
 800803a:	b01c      	add	sp, #112	@ 0x70
 800803c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008040:	b003      	add	sp, #12
 8008042:	4770      	bx	lr
 8008044:	20000010 	.word	0x20000010
 8008048:	ffff0208 	.word	0xffff0208

0800804c <memset>:
 800804c:	4402      	add	r2, r0
 800804e:	4603      	mov	r3, r0
 8008050:	4293      	cmp	r3, r2
 8008052:	d100      	bne.n	8008056 <memset+0xa>
 8008054:	4770      	bx	lr
 8008056:	f803 1b01 	strb.w	r1, [r3], #1
 800805a:	e7f9      	b.n	8008050 <memset+0x4>

0800805c <__errno>:
 800805c:	4b01      	ldr	r3, [pc, #4]	@ (8008064 <__errno+0x8>)
 800805e:	6818      	ldr	r0, [r3, #0]
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	20000010 	.word	0x20000010

08008068 <__libc_init_array>:
 8008068:	b570      	push	{r4, r5, r6, lr}
 800806a:	4d0d      	ldr	r5, [pc, #52]	@ (80080a0 <__libc_init_array+0x38>)
 800806c:	4c0d      	ldr	r4, [pc, #52]	@ (80080a4 <__libc_init_array+0x3c>)
 800806e:	1b64      	subs	r4, r4, r5
 8008070:	10a4      	asrs	r4, r4, #2
 8008072:	2600      	movs	r6, #0
 8008074:	42a6      	cmp	r6, r4
 8008076:	d109      	bne.n	800808c <__libc_init_array+0x24>
 8008078:	4d0b      	ldr	r5, [pc, #44]	@ (80080a8 <__libc_init_array+0x40>)
 800807a:	4c0c      	ldr	r4, [pc, #48]	@ (80080ac <__libc_init_array+0x44>)
 800807c:	f000 fc6e 	bl	800895c <_init>
 8008080:	1b64      	subs	r4, r4, r5
 8008082:	10a4      	asrs	r4, r4, #2
 8008084:	2600      	movs	r6, #0
 8008086:	42a6      	cmp	r6, r4
 8008088:	d105      	bne.n	8008096 <__libc_init_array+0x2e>
 800808a:	bd70      	pop	{r4, r5, r6, pc}
 800808c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008090:	4798      	blx	r3
 8008092:	3601      	adds	r6, #1
 8008094:	e7ee      	b.n	8008074 <__libc_init_array+0xc>
 8008096:	f855 3b04 	ldr.w	r3, [r5], #4
 800809a:	4798      	blx	r3
 800809c:	3601      	adds	r6, #1
 800809e:	e7f2      	b.n	8008086 <__libc_init_array+0x1e>
 80080a0:	08008c18 	.word	0x08008c18
 80080a4:	08008c18 	.word	0x08008c18
 80080a8:	08008c18 	.word	0x08008c18
 80080ac:	08008c1c 	.word	0x08008c1c

080080b0 <__retarget_lock_acquire_recursive>:
 80080b0:	4770      	bx	lr

080080b2 <__retarget_lock_release_recursive>:
 80080b2:	4770      	bx	lr

080080b4 <strcpy>:
 80080b4:	4603      	mov	r3, r0
 80080b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080ba:	f803 2b01 	strb.w	r2, [r3], #1
 80080be:	2a00      	cmp	r2, #0
 80080c0:	d1f9      	bne.n	80080b6 <strcpy+0x2>
 80080c2:	4770      	bx	lr

080080c4 <memcpy>:
 80080c4:	440a      	add	r2, r1
 80080c6:	4291      	cmp	r1, r2
 80080c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80080cc:	d100      	bne.n	80080d0 <memcpy+0xc>
 80080ce:	4770      	bx	lr
 80080d0:	b510      	push	{r4, lr}
 80080d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080da:	4291      	cmp	r1, r2
 80080dc:	d1f9      	bne.n	80080d2 <memcpy+0xe>
 80080de:	bd10      	pop	{r4, pc}

080080e0 <_free_r>:
 80080e0:	b538      	push	{r3, r4, r5, lr}
 80080e2:	4605      	mov	r5, r0
 80080e4:	2900      	cmp	r1, #0
 80080e6:	d041      	beq.n	800816c <_free_r+0x8c>
 80080e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080ec:	1f0c      	subs	r4, r1, #4
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	bfb8      	it	lt
 80080f2:	18e4      	addlt	r4, r4, r3
 80080f4:	f000 f8e0 	bl	80082b8 <__malloc_lock>
 80080f8:	4a1d      	ldr	r2, [pc, #116]	@ (8008170 <_free_r+0x90>)
 80080fa:	6813      	ldr	r3, [r2, #0]
 80080fc:	b933      	cbnz	r3, 800810c <_free_r+0x2c>
 80080fe:	6063      	str	r3, [r4, #4]
 8008100:	6014      	str	r4, [r2, #0]
 8008102:	4628      	mov	r0, r5
 8008104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008108:	f000 b8dc 	b.w	80082c4 <__malloc_unlock>
 800810c:	42a3      	cmp	r3, r4
 800810e:	d908      	bls.n	8008122 <_free_r+0x42>
 8008110:	6820      	ldr	r0, [r4, #0]
 8008112:	1821      	adds	r1, r4, r0
 8008114:	428b      	cmp	r3, r1
 8008116:	bf01      	itttt	eq
 8008118:	6819      	ldreq	r1, [r3, #0]
 800811a:	685b      	ldreq	r3, [r3, #4]
 800811c:	1809      	addeq	r1, r1, r0
 800811e:	6021      	streq	r1, [r4, #0]
 8008120:	e7ed      	b.n	80080fe <_free_r+0x1e>
 8008122:	461a      	mov	r2, r3
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	b10b      	cbz	r3, 800812c <_free_r+0x4c>
 8008128:	42a3      	cmp	r3, r4
 800812a:	d9fa      	bls.n	8008122 <_free_r+0x42>
 800812c:	6811      	ldr	r1, [r2, #0]
 800812e:	1850      	adds	r0, r2, r1
 8008130:	42a0      	cmp	r0, r4
 8008132:	d10b      	bne.n	800814c <_free_r+0x6c>
 8008134:	6820      	ldr	r0, [r4, #0]
 8008136:	4401      	add	r1, r0
 8008138:	1850      	adds	r0, r2, r1
 800813a:	4283      	cmp	r3, r0
 800813c:	6011      	str	r1, [r2, #0]
 800813e:	d1e0      	bne.n	8008102 <_free_r+0x22>
 8008140:	6818      	ldr	r0, [r3, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	6053      	str	r3, [r2, #4]
 8008146:	4408      	add	r0, r1
 8008148:	6010      	str	r0, [r2, #0]
 800814a:	e7da      	b.n	8008102 <_free_r+0x22>
 800814c:	d902      	bls.n	8008154 <_free_r+0x74>
 800814e:	230c      	movs	r3, #12
 8008150:	602b      	str	r3, [r5, #0]
 8008152:	e7d6      	b.n	8008102 <_free_r+0x22>
 8008154:	6820      	ldr	r0, [r4, #0]
 8008156:	1821      	adds	r1, r4, r0
 8008158:	428b      	cmp	r3, r1
 800815a:	bf04      	itt	eq
 800815c:	6819      	ldreq	r1, [r3, #0]
 800815e:	685b      	ldreq	r3, [r3, #4]
 8008160:	6063      	str	r3, [r4, #4]
 8008162:	bf04      	itt	eq
 8008164:	1809      	addeq	r1, r1, r0
 8008166:	6021      	streq	r1, [r4, #0]
 8008168:	6054      	str	r4, [r2, #4]
 800816a:	e7ca      	b.n	8008102 <_free_r+0x22>
 800816c:	bd38      	pop	{r3, r4, r5, pc}
 800816e:	bf00      	nop
 8008170:	20004264 	.word	0x20004264

08008174 <sbrk_aligned>:
 8008174:	b570      	push	{r4, r5, r6, lr}
 8008176:	4e0f      	ldr	r6, [pc, #60]	@ (80081b4 <sbrk_aligned+0x40>)
 8008178:	460c      	mov	r4, r1
 800817a:	6831      	ldr	r1, [r6, #0]
 800817c:	4605      	mov	r5, r0
 800817e:	b911      	cbnz	r1, 8008186 <sbrk_aligned+0x12>
 8008180:	f000 fba6 	bl	80088d0 <_sbrk_r>
 8008184:	6030      	str	r0, [r6, #0]
 8008186:	4621      	mov	r1, r4
 8008188:	4628      	mov	r0, r5
 800818a:	f000 fba1 	bl	80088d0 <_sbrk_r>
 800818e:	1c43      	adds	r3, r0, #1
 8008190:	d103      	bne.n	800819a <sbrk_aligned+0x26>
 8008192:	f04f 34ff 	mov.w	r4, #4294967295
 8008196:	4620      	mov	r0, r4
 8008198:	bd70      	pop	{r4, r5, r6, pc}
 800819a:	1cc4      	adds	r4, r0, #3
 800819c:	f024 0403 	bic.w	r4, r4, #3
 80081a0:	42a0      	cmp	r0, r4
 80081a2:	d0f8      	beq.n	8008196 <sbrk_aligned+0x22>
 80081a4:	1a21      	subs	r1, r4, r0
 80081a6:	4628      	mov	r0, r5
 80081a8:	f000 fb92 	bl	80088d0 <_sbrk_r>
 80081ac:	3001      	adds	r0, #1
 80081ae:	d1f2      	bne.n	8008196 <sbrk_aligned+0x22>
 80081b0:	e7ef      	b.n	8008192 <sbrk_aligned+0x1e>
 80081b2:	bf00      	nop
 80081b4:	20004260 	.word	0x20004260

080081b8 <_malloc_r>:
 80081b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081bc:	1ccd      	adds	r5, r1, #3
 80081be:	f025 0503 	bic.w	r5, r5, #3
 80081c2:	3508      	adds	r5, #8
 80081c4:	2d0c      	cmp	r5, #12
 80081c6:	bf38      	it	cc
 80081c8:	250c      	movcc	r5, #12
 80081ca:	2d00      	cmp	r5, #0
 80081cc:	4606      	mov	r6, r0
 80081ce:	db01      	blt.n	80081d4 <_malloc_r+0x1c>
 80081d0:	42a9      	cmp	r1, r5
 80081d2:	d904      	bls.n	80081de <_malloc_r+0x26>
 80081d4:	230c      	movs	r3, #12
 80081d6:	6033      	str	r3, [r6, #0]
 80081d8:	2000      	movs	r0, #0
 80081da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80082b4 <_malloc_r+0xfc>
 80081e2:	f000 f869 	bl	80082b8 <__malloc_lock>
 80081e6:	f8d8 3000 	ldr.w	r3, [r8]
 80081ea:	461c      	mov	r4, r3
 80081ec:	bb44      	cbnz	r4, 8008240 <_malloc_r+0x88>
 80081ee:	4629      	mov	r1, r5
 80081f0:	4630      	mov	r0, r6
 80081f2:	f7ff ffbf 	bl	8008174 <sbrk_aligned>
 80081f6:	1c43      	adds	r3, r0, #1
 80081f8:	4604      	mov	r4, r0
 80081fa:	d158      	bne.n	80082ae <_malloc_r+0xf6>
 80081fc:	f8d8 4000 	ldr.w	r4, [r8]
 8008200:	4627      	mov	r7, r4
 8008202:	2f00      	cmp	r7, #0
 8008204:	d143      	bne.n	800828e <_malloc_r+0xd6>
 8008206:	2c00      	cmp	r4, #0
 8008208:	d04b      	beq.n	80082a2 <_malloc_r+0xea>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	4639      	mov	r1, r7
 800820e:	4630      	mov	r0, r6
 8008210:	eb04 0903 	add.w	r9, r4, r3
 8008214:	f000 fb5c 	bl	80088d0 <_sbrk_r>
 8008218:	4581      	cmp	r9, r0
 800821a:	d142      	bne.n	80082a2 <_malloc_r+0xea>
 800821c:	6821      	ldr	r1, [r4, #0]
 800821e:	1a6d      	subs	r5, r5, r1
 8008220:	4629      	mov	r1, r5
 8008222:	4630      	mov	r0, r6
 8008224:	f7ff ffa6 	bl	8008174 <sbrk_aligned>
 8008228:	3001      	adds	r0, #1
 800822a:	d03a      	beq.n	80082a2 <_malloc_r+0xea>
 800822c:	6823      	ldr	r3, [r4, #0]
 800822e:	442b      	add	r3, r5
 8008230:	6023      	str	r3, [r4, #0]
 8008232:	f8d8 3000 	ldr.w	r3, [r8]
 8008236:	685a      	ldr	r2, [r3, #4]
 8008238:	bb62      	cbnz	r2, 8008294 <_malloc_r+0xdc>
 800823a:	f8c8 7000 	str.w	r7, [r8]
 800823e:	e00f      	b.n	8008260 <_malloc_r+0xa8>
 8008240:	6822      	ldr	r2, [r4, #0]
 8008242:	1b52      	subs	r2, r2, r5
 8008244:	d420      	bmi.n	8008288 <_malloc_r+0xd0>
 8008246:	2a0b      	cmp	r2, #11
 8008248:	d917      	bls.n	800827a <_malloc_r+0xc2>
 800824a:	1961      	adds	r1, r4, r5
 800824c:	42a3      	cmp	r3, r4
 800824e:	6025      	str	r5, [r4, #0]
 8008250:	bf18      	it	ne
 8008252:	6059      	strne	r1, [r3, #4]
 8008254:	6863      	ldr	r3, [r4, #4]
 8008256:	bf08      	it	eq
 8008258:	f8c8 1000 	streq.w	r1, [r8]
 800825c:	5162      	str	r2, [r4, r5]
 800825e:	604b      	str	r3, [r1, #4]
 8008260:	4630      	mov	r0, r6
 8008262:	f000 f82f 	bl	80082c4 <__malloc_unlock>
 8008266:	f104 000b 	add.w	r0, r4, #11
 800826a:	1d23      	adds	r3, r4, #4
 800826c:	f020 0007 	bic.w	r0, r0, #7
 8008270:	1ac2      	subs	r2, r0, r3
 8008272:	bf1c      	itt	ne
 8008274:	1a1b      	subne	r3, r3, r0
 8008276:	50a3      	strne	r3, [r4, r2]
 8008278:	e7af      	b.n	80081da <_malloc_r+0x22>
 800827a:	6862      	ldr	r2, [r4, #4]
 800827c:	42a3      	cmp	r3, r4
 800827e:	bf0c      	ite	eq
 8008280:	f8c8 2000 	streq.w	r2, [r8]
 8008284:	605a      	strne	r2, [r3, #4]
 8008286:	e7eb      	b.n	8008260 <_malloc_r+0xa8>
 8008288:	4623      	mov	r3, r4
 800828a:	6864      	ldr	r4, [r4, #4]
 800828c:	e7ae      	b.n	80081ec <_malloc_r+0x34>
 800828e:	463c      	mov	r4, r7
 8008290:	687f      	ldr	r7, [r7, #4]
 8008292:	e7b6      	b.n	8008202 <_malloc_r+0x4a>
 8008294:	461a      	mov	r2, r3
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	42a3      	cmp	r3, r4
 800829a:	d1fb      	bne.n	8008294 <_malloc_r+0xdc>
 800829c:	2300      	movs	r3, #0
 800829e:	6053      	str	r3, [r2, #4]
 80082a0:	e7de      	b.n	8008260 <_malloc_r+0xa8>
 80082a2:	230c      	movs	r3, #12
 80082a4:	6033      	str	r3, [r6, #0]
 80082a6:	4630      	mov	r0, r6
 80082a8:	f000 f80c 	bl	80082c4 <__malloc_unlock>
 80082ac:	e794      	b.n	80081d8 <_malloc_r+0x20>
 80082ae:	6005      	str	r5, [r0, #0]
 80082b0:	e7d6      	b.n	8008260 <_malloc_r+0xa8>
 80082b2:	bf00      	nop
 80082b4:	20004264 	.word	0x20004264

080082b8 <__malloc_lock>:
 80082b8:	4801      	ldr	r0, [pc, #4]	@ (80082c0 <__malloc_lock+0x8>)
 80082ba:	f7ff bef9 	b.w	80080b0 <__retarget_lock_acquire_recursive>
 80082be:	bf00      	nop
 80082c0:	2000425c 	.word	0x2000425c

080082c4 <__malloc_unlock>:
 80082c4:	4801      	ldr	r0, [pc, #4]	@ (80082cc <__malloc_unlock+0x8>)
 80082c6:	f7ff bef4 	b.w	80080b2 <__retarget_lock_release_recursive>
 80082ca:	bf00      	nop
 80082cc:	2000425c 	.word	0x2000425c

080082d0 <__ssputs_r>:
 80082d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d4:	688e      	ldr	r6, [r1, #8]
 80082d6:	461f      	mov	r7, r3
 80082d8:	42be      	cmp	r6, r7
 80082da:	680b      	ldr	r3, [r1, #0]
 80082dc:	4682      	mov	sl, r0
 80082de:	460c      	mov	r4, r1
 80082e0:	4690      	mov	r8, r2
 80082e2:	d82d      	bhi.n	8008340 <__ssputs_r+0x70>
 80082e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80082ec:	d026      	beq.n	800833c <__ssputs_r+0x6c>
 80082ee:	6965      	ldr	r5, [r4, #20]
 80082f0:	6909      	ldr	r1, [r1, #16]
 80082f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082f6:	eba3 0901 	sub.w	r9, r3, r1
 80082fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082fe:	1c7b      	adds	r3, r7, #1
 8008300:	444b      	add	r3, r9
 8008302:	106d      	asrs	r5, r5, #1
 8008304:	429d      	cmp	r5, r3
 8008306:	bf38      	it	cc
 8008308:	461d      	movcc	r5, r3
 800830a:	0553      	lsls	r3, r2, #21
 800830c:	d527      	bpl.n	800835e <__ssputs_r+0x8e>
 800830e:	4629      	mov	r1, r5
 8008310:	f7ff ff52 	bl	80081b8 <_malloc_r>
 8008314:	4606      	mov	r6, r0
 8008316:	b360      	cbz	r0, 8008372 <__ssputs_r+0xa2>
 8008318:	6921      	ldr	r1, [r4, #16]
 800831a:	464a      	mov	r2, r9
 800831c:	f7ff fed2 	bl	80080c4 <memcpy>
 8008320:	89a3      	ldrh	r3, [r4, #12]
 8008322:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800832a:	81a3      	strh	r3, [r4, #12]
 800832c:	6126      	str	r6, [r4, #16]
 800832e:	6165      	str	r5, [r4, #20]
 8008330:	444e      	add	r6, r9
 8008332:	eba5 0509 	sub.w	r5, r5, r9
 8008336:	6026      	str	r6, [r4, #0]
 8008338:	60a5      	str	r5, [r4, #8]
 800833a:	463e      	mov	r6, r7
 800833c:	42be      	cmp	r6, r7
 800833e:	d900      	bls.n	8008342 <__ssputs_r+0x72>
 8008340:	463e      	mov	r6, r7
 8008342:	6820      	ldr	r0, [r4, #0]
 8008344:	4632      	mov	r2, r6
 8008346:	4641      	mov	r1, r8
 8008348:	f000 faa8 	bl	800889c <memmove>
 800834c:	68a3      	ldr	r3, [r4, #8]
 800834e:	1b9b      	subs	r3, r3, r6
 8008350:	60a3      	str	r3, [r4, #8]
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	4433      	add	r3, r6
 8008356:	6023      	str	r3, [r4, #0]
 8008358:	2000      	movs	r0, #0
 800835a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800835e:	462a      	mov	r2, r5
 8008360:	f000 fac6 	bl	80088f0 <_realloc_r>
 8008364:	4606      	mov	r6, r0
 8008366:	2800      	cmp	r0, #0
 8008368:	d1e0      	bne.n	800832c <__ssputs_r+0x5c>
 800836a:	6921      	ldr	r1, [r4, #16]
 800836c:	4650      	mov	r0, sl
 800836e:	f7ff feb7 	bl	80080e0 <_free_r>
 8008372:	230c      	movs	r3, #12
 8008374:	f8ca 3000 	str.w	r3, [sl]
 8008378:	89a3      	ldrh	r3, [r4, #12]
 800837a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800837e:	81a3      	strh	r3, [r4, #12]
 8008380:	f04f 30ff 	mov.w	r0, #4294967295
 8008384:	e7e9      	b.n	800835a <__ssputs_r+0x8a>
	...

08008388 <_svfiprintf_r>:
 8008388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838c:	4698      	mov	r8, r3
 800838e:	898b      	ldrh	r3, [r1, #12]
 8008390:	061b      	lsls	r3, r3, #24
 8008392:	b09d      	sub	sp, #116	@ 0x74
 8008394:	4607      	mov	r7, r0
 8008396:	460d      	mov	r5, r1
 8008398:	4614      	mov	r4, r2
 800839a:	d510      	bpl.n	80083be <_svfiprintf_r+0x36>
 800839c:	690b      	ldr	r3, [r1, #16]
 800839e:	b973      	cbnz	r3, 80083be <_svfiprintf_r+0x36>
 80083a0:	2140      	movs	r1, #64	@ 0x40
 80083a2:	f7ff ff09 	bl	80081b8 <_malloc_r>
 80083a6:	6028      	str	r0, [r5, #0]
 80083a8:	6128      	str	r0, [r5, #16]
 80083aa:	b930      	cbnz	r0, 80083ba <_svfiprintf_r+0x32>
 80083ac:	230c      	movs	r3, #12
 80083ae:	603b      	str	r3, [r7, #0]
 80083b0:	f04f 30ff 	mov.w	r0, #4294967295
 80083b4:	b01d      	add	sp, #116	@ 0x74
 80083b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ba:	2340      	movs	r3, #64	@ 0x40
 80083bc:	616b      	str	r3, [r5, #20]
 80083be:	2300      	movs	r3, #0
 80083c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80083c2:	2320      	movs	r3, #32
 80083c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80083cc:	2330      	movs	r3, #48	@ 0x30
 80083ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800856c <_svfiprintf_r+0x1e4>
 80083d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083d6:	f04f 0901 	mov.w	r9, #1
 80083da:	4623      	mov	r3, r4
 80083dc:	469a      	mov	sl, r3
 80083de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083e2:	b10a      	cbz	r2, 80083e8 <_svfiprintf_r+0x60>
 80083e4:	2a25      	cmp	r2, #37	@ 0x25
 80083e6:	d1f9      	bne.n	80083dc <_svfiprintf_r+0x54>
 80083e8:	ebba 0b04 	subs.w	fp, sl, r4
 80083ec:	d00b      	beq.n	8008406 <_svfiprintf_r+0x7e>
 80083ee:	465b      	mov	r3, fp
 80083f0:	4622      	mov	r2, r4
 80083f2:	4629      	mov	r1, r5
 80083f4:	4638      	mov	r0, r7
 80083f6:	f7ff ff6b 	bl	80082d0 <__ssputs_r>
 80083fa:	3001      	adds	r0, #1
 80083fc:	f000 80a7 	beq.w	800854e <_svfiprintf_r+0x1c6>
 8008400:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008402:	445a      	add	r2, fp
 8008404:	9209      	str	r2, [sp, #36]	@ 0x24
 8008406:	f89a 3000 	ldrb.w	r3, [sl]
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 809f 	beq.w	800854e <_svfiprintf_r+0x1c6>
 8008410:	2300      	movs	r3, #0
 8008412:	f04f 32ff 	mov.w	r2, #4294967295
 8008416:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800841a:	f10a 0a01 	add.w	sl, sl, #1
 800841e:	9304      	str	r3, [sp, #16]
 8008420:	9307      	str	r3, [sp, #28]
 8008422:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008426:	931a      	str	r3, [sp, #104]	@ 0x68
 8008428:	4654      	mov	r4, sl
 800842a:	2205      	movs	r2, #5
 800842c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008430:	484e      	ldr	r0, [pc, #312]	@ (800856c <_svfiprintf_r+0x1e4>)
 8008432:	f7f7 fedd 	bl	80001f0 <memchr>
 8008436:	9a04      	ldr	r2, [sp, #16]
 8008438:	b9d8      	cbnz	r0, 8008472 <_svfiprintf_r+0xea>
 800843a:	06d0      	lsls	r0, r2, #27
 800843c:	bf44      	itt	mi
 800843e:	2320      	movmi	r3, #32
 8008440:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008444:	0711      	lsls	r1, r2, #28
 8008446:	bf44      	itt	mi
 8008448:	232b      	movmi	r3, #43	@ 0x2b
 800844a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800844e:	f89a 3000 	ldrb.w	r3, [sl]
 8008452:	2b2a      	cmp	r3, #42	@ 0x2a
 8008454:	d015      	beq.n	8008482 <_svfiprintf_r+0xfa>
 8008456:	9a07      	ldr	r2, [sp, #28]
 8008458:	4654      	mov	r4, sl
 800845a:	2000      	movs	r0, #0
 800845c:	f04f 0c0a 	mov.w	ip, #10
 8008460:	4621      	mov	r1, r4
 8008462:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008466:	3b30      	subs	r3, #48	@ 0x30
 8008468:	2b09      	cmp	r3, #9
 800846a:	d94b      	bls.n	8008504 <_svfiprintf_r+0x17c>
 800846c:	b1b0      	cbz	r0, 800849c <_svfiprintf_r+0x114>
 800846e:	9207      	str	r2, [sp, #28]
 8008470:	e014      	b.n	800849c <_svfiprintf_r+0x114>
 8008472:	eba0 0308 	sub.w	r3, r0, r8
 8008476:	fa09 f303 	lsl.w	r3, r9, r3
 800847a:	4313      	orrs	r3, r2
 800847c:	9304      	str	r3, [sp, #16]
 800847e:	46a2      	mov	sl, r4
 8008480:	e7d2      	b.n	8008428 <_svfiprintf_r+0xa0>
 8008482:	9b03      	ldr	r3, [sp, #12]
 8008484:	1d19      	adds	r1, r3, #4
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	9103      	str	r1, [sp, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	bfbb      	ittet	lt
 800848e:	425b      	neglt	r3, r3
 8008490:	f042 0202 	orrlt.w	r2, r2, #2
 8008494:	9307      	strge	r3, [sp, #28]
 8008496:	9307      	strlt	r3, [sp, #28]
 8008498:	bfb8      	it	lt
 800849a:	9204      	strlt	r2, [sp, #16]
 800849c:	7823      	ldrb	r3, [r4, #0]
 800849e:	2b2e      	cmp	r3, #46	@ 0x2e
 80084a0:	d10a      	bne.n	80084b8 <_svfiprintf_r+0x130>
 80084a2:	7863      	ldrb	r3, [r4, #1]
 80084a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80084a6:	d132      	bne.n	800850e <_svfiprintf_r+0x186>
 80084a8:	9b03      	ldr	r3, [sp, #12]
 80084aa:	1d1a      	adds	r2, r3, #4
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	9203      	str	r2, [sp, #12]
 80084b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084b4:	3402      	adds	r4, #2
 80084b6:	9305      	str	r3, [sp, #20]
 80084b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800857c <_svfiprintf_r+0x1f4>
 80084bc:	7821      	ldrb	r1, [r4, #0]
 80084be:	2203      	movs	r2, #3
 80084c0:	4650      	mov	r0, sl
 80084c2:	f7f7 fe95 	bl	80001f0 <memchr>
 80084c6:	b138      	cbz	r0, 80084d8 <_svfiprintf_r+0x150>
 80084c8:	9b04      	ldr	r3, [sp, #16]
 80084ca:	eba0 000a 	sub.w	r0, r0, sl
 80084ce:	2240      	movs	r2, #64	@ 0x40
 80084d0:	4082      	lsls	r2, r0
 80084d2:	4313      	orrs	r3, r2
 80084d4:	3401      	adds	r4, #1
 80084d6:	9304      	str	r3, [sp, #16]
 80084d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084dc:	4824      	ldr	r0, [pc, #144]	@ (8008570 <_svfiprintf_r+0x1e8>)
 80084de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084e2:	2206      	movs	r2, #6
 80084e4:	f7f7 fe84 	bl	80001f0 <memchr>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	d036      	beq.n	800855a <_svfiprintf_r+0x1d2>
 80084ec:	4b21      	ldr	r3, [pc, #132]	@ (8008574 <_svfiprintf_r+0x1ec>)
 80084ee:	bb1b      	cbnz	r3, 8008538 <_svfiprintf_r+0x1b0>
 80084f0:	9b03      	ldr	r3, [sp, #12]
 80084f2:	3307      	adds	r3, #7
 80084f4:	f023 0307 	bic.w	r3, r3, #7
 80084f8:	3308      	adds	r3, #8
 80084fa:	9303      	str	r3, [sp, #12]
 80084fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084fe:	4433      	add	r3, r6
 8008500:	9309      	str	r3, [sp, #36]	@ 0x24
 8008502:	e76a      	b.n	80083da <_svfiprintf_r+0x52>
 8008504:	fb0c 3202 	mla	r2, ip, r2, r3
 8008508:	460c      	mov	r4, r1
 800850a:	2001      	movs	r0, #1
 800850c:	e7a8      	b.n	8008460 <_svfiprintf_r+0xd8>
 800850e:	2300      	movs	r3, #0
 8008510:	3401      	adds	r4, #1
 8008512:	9305      	str	r3, [sp, #20]
 8008514:	4619      	mov	r1, r3
 8008516:	f04f 0c0a 	mov.w	ip, #10
 800851a:	4620      	mov	r0, r4
 800851c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008520:	3a30      	subs	r2, #48	@ 0x30
 8008522:	2a09      	cmp	r2, #9
 8008524:	d903      	bls.n	800852e <_svfiprintf_r+0x1a6>
 8008526:	2b00      	cmp	r3, #0
 8008528:	d0c6      	beq.n	80084b8 <_svfiprintf_r+0x130>
 800852a:	9105      	str	r1, [sp, #20]
 800852c:	e7c4      	b.n	80084b8 <_svfiprintf_r+0x130>
 800852e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008532:	4604      	mov	r4, r0
 8008534:	2301      	movs	r3, #1
 8008536:	e7f0      	b.n	800851a <_svfiprintf_r+0x192>
 8008538:	ab03      	add	r3, sp, #12
 800853a:	9300      	str	r3, [sp, #0]
 800853c:	462a      	mov	r2, r5
 800853e:	4b0e      	ldr	r3, [pc, #56]	@ (8008578 <_svfiprintf_r+0x1f0>)
 8008540:	a904      	add	r1, sp, #16
 8008542:	4638      	mov	r0, r7
 8008544:	f3af 8000 	nop.w
 8008548:	1c42      	adds	r2, r0, #1
 800854a:	4606      	mov	r6, r0
 800854c:	d1d6      	bne.n	80084fc <_svfiprintf_r+0x174>
 800854e:	89ab      	ldrh	r3, [r5, #12]
 8008550:	065b      	lsls	r3, r3, #25
 8008552:	f53f af2d 	bmi.w	80083b0 <_svfiprintf_r+0x28>
 8008556:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008558:	e72c      	b.n	80083b4 <_svfiprintf_r+0x2c>
 800855a:	ab03      	add	r3, sp, #12
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	462a      	mov	r2, r5
 8008560:	4b05      	ldr	r3, [pc, #20]	@ (8008578 <_svfiprintf_r+0x1f0>)
 8008562:	a904      	add	r1, sp, #16
 8008564:	4638      	mov	r0, r7
 8008566:	f000 f879 	bl	800865c <_printf_i>
 800856a:	e7ed      	b.n	8008548 <_svfiprintf_r+0x1c0>
 800856c:	08008bdd 	.word	0x08008bdd
 8008570:	08008be7 	.word	0x08008be7
 8008574:	00000000 	.word	0x00000000
 8008578:	080082d1 	.word	0x080082d1
 800857c:	08008be3 	.word	0x08008be3

08008580 <_printf_common>:
 8008580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008584:	4616      	mov	r6, r2
 8008586:	4698      	mov	r8, r3
 8008588:	688a      	ldr	r2, [r1, #8]
 800858a:	690b      	ldr	r3, [r1, #16]
 800858c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008590:	4293      	cmp	r3, r2
 8008592:	bfb8      	it	lt
 8008594:	4613      	movlt	r3, r2
 8008596:	6033      	str	r3, [r6, #0]
 8008598:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800859c:	4607      	mov	r7, r0
 800859e:	460c      	mov	r4, r1
 80085a0:	b10a      	cbz	r2, 80085a6 <_printf_common+0x26>
 80085a2:	3301      	adds	r3, #1
 80085a4:	6033      	str	r3, [r6, #0]
 80085a6:	6823      	ldr	r3, [r4, #0]
 80085a8:	0699      	lsls	r1, r3, #26
 80085aa:	bf42      	ittt	mi
 80085ac:	6833      	ldrmi	r3, [r6, #0]
 80085ae:	3302      	addmi	r3, #2
 80085b0:	6033      	strmi	r3, [r6, #0]
 80085b2:	6825      	ldr	r5, [r4, #0]
 80085b4:	f015 0506 	ands.w	r5, r5, #6
 80085b8:	d106      	bne.n	80085c8 <_printf_common+0x48>
 80085ba:	f104 0a19 	add.w	sl, r4, #25
 80085be:	68e3      	ldr	r3, [r4, #12]
 80085c0:	6832      	ldr	r2, [r6, #0]
 80085c2:	1a9b      	subs	r3, r3, r2
 80085c4:	42ab      	cmp	r3, r5
 80085c6:	dc26      	bgt.n	8008616 <_printf_common+0x96>
 80085c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80085cc:	6822      	ldr	r2, [r4, #0]
 80085ce:	3b00      	subs	r3, #0
 80085d0:	bf18      	it	ne
 80085d2:	2301      	movne	r3, #1
 80085d4:	0692      	lsls	r2, r2, #26
 80085d6:	d42b      	bmi.n	8008630 <_printf_common+0xb0>
 80085d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80085dc:	4641      	mov	r1, r8
 80085de:	4638      	mov	r0, r7
 80085e0:	47c8      	blx	r9
 80085e2:	3001      	adds	r0, #1
 80085e4:	d01e      	beq.n	8008624 <_printf_common+0xa4>
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	6922      	ldr	r2, [r4, #16]
 80085ea:	f003 0306 	and.w	r3, r3, #6
 80085ee:	2b04      	cmp	r3, #4
 80085f0:	bf02      	ittt	eq
 80085f2:	68e5      	ldreq	r5, [r4, #12]
 80085f4:	6833      	ldreq	r3, [r6, #0]
 80085f6:	1aed      	subeq	r5, r5, r3
 80085f8:	68a3      	ldr	r3, [r4, #8]
 80085fa:	bf0c      	ite	eq
 80085fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008600:	2500      	movne	r5, #0
 8008602:	4293      	cmp	r3, r2
 8008604:	bfc4      	itt	gt
 8008606:	1a9b      	subgt	r3, r3, r2
 8008608:	18ed      	addgt	r5, r5, r3
 800860a:	2600      	movs	r6, #0
 800860c:	341a      	adds	r4, #26
 800860e:	42b5      	cmp	r5, r6
 8008610:	d11a      	bne.n	8008648 <_printf_common+0xc8>
 8008612:	2000      	movs	r0, #0
 8008614:	e008      	b.n	8008628 <_printf_common+0xa8>
 8008616:	2301      	movs	r3, #1
 8008618:	4652      	mov	r2, sl
 800861a:	4641      	mov	r1, r8
 800861c:	4638      	mov	r0, r7
 800861e:	47c8      	blx	r9
 8008620:	3001      	adds	r0, #1
 8008622:	d103      	bne.n	800862c <_printf_common+0xac>
 8008624:	f04f 30ff 	mov.w	r0, #4294967295
 8008628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800862c:	3501      	adds	r5, #1
 800862e:	e7c6      	b.n	80085be <_printf_common+0x3e>
 8008630:	18e1      	adds	r1, r4, r3
 8008632:	1c5a      	adds	r2, r3, #1
 8008634:	2030      	movs	r0, #48	@ 0x30
 8008636:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800863a:	4422      	add	r2, r4
 800863c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008640:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008644:	3302      	adds	r3, #2
 8008646:	e7c7      	b.n	80085d8 <_printf_common+0x58>
 8008648:	2301      	movs	r3, #1
 800864a:	4622      	mov	r2, r4
 800864c:	4641      	mov	r1, r8
 800864e:	4638      	mov	r0, r7
 8008650:	47c8      	blx	r9
 8008652:	3001      	adds	r0, #1
 8008654:	d0e6      	beq.n	8008624 <_printf_common+0xa4>
 8008656:	3601      	adds	r6, #1
 8008658:	e7d9      	b.n	800860e <_printf_common+0x8e>
	...

0800865c <_printf_i>:
 800865c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008660:	7e0f      	ldrb	r7, [r1, #24]
 8008662:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008664:	2f78      	cmp	r7, #120	@ 0x78
 8008666:	4691      	mov	r9, r2
 8008668:	4680      	mov	r8, r0
 800866a:	460c      	mov	r4, r1
 800866c:	469a      	mov	sl, r3
 800866e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008672:	d807      	bhi.n	8008684 <_printf_i+0x28>
 8008674:	2f62      	cmp	r7, #98	@ 0x62
 8008676:	d80a      	bhi.n	800868e <_printf_i+0x32>
 8008678:	2f00      	cmp	r7, #0
 800867a:	f000 80d2 	beq.w	8008822 <_printf_i+0x1c6>
 800867e:	2f58      	cmp	r7, #88	@ 0x58
 8008680:	f000 80b9 	beq.w	80087f6 <_printf_i+0x19a>
 8008684:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008688:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800868c:	e03a      	b.n	8008704 <_printf_i+0xa8>
 800868e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008692:	2b15      	cmp	r3, #21
 8008694:	d8f6      	bhi.n	8008684 <_printf_i+0x28>
 8008696:	a101      	add	r1, pc, #4	@ (adr r1, 800869c <_printf_i+0x40>)
 8008698:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800869c:	080086f5 	.word	0x080086f5
 80086a0:	08008709 	.word	0x08008709
 80086a4:	08008685 	.word	0x08008685
 80086a8:	08008685 	.word	0x08008685
 80086ac:	08008685 	.word	0x08008685
 80086b0:	08008685 	.word	0x08008685
 80086b4:	08008709 	.word	0x08008709
 80086b8:	08008685 	.word	0x08008685
 80086bc:	08008685 	.word	0x08008685
 80086c0:	08008685 	.word	0x08008685
 80086c4:	08008685 	.word	0x08008685
 80086c8:	08008809 	.word	0x08008809
 80086cc:	08008733 	.word	0x08008733
 80086d0:	080087c3 	.word	0x080087c3
 80086d4:	08008685 	.word	0x08008685
 80086d8:	08008685 	.word	0x08008685
 80086dc:	0800882b 	.word	0x0800882b
 80086e0:	08008685 	.word	0x08008685
 80086e4:	08008733 	.word	0x08008733
 80086e8:	08008685 	.word	0x08008685
 80086ec:	08008685 	.word	0x08008685
 80086f0:	080087cb 	.word	0x080087cb
 80086f4:	6833      	ldr	r3, [r6, #0]
 80086f6:	1d1a      	adds	r2, r3, #4
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	6032      	str	r2, [r6, #0]
 80086fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008700:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008704:	2301      	movs	r3, #1
 8008706:	e09d      	b.n	8008844 <_printf_i+0x1e8>
 8008708:	6833      	ldr	r3, [r6, #0]
 800870a:	6820      	ldr	r0, [r4, #0]
 800870c:	1d19      	adds	r1, r3, #4
 800870e:	6031      	str	r1, [r6, #0]
 8008710:	0606      	lsls	r6, r0, #24
 8008712:	d501      	bpl.n	8008718 <_printf_i+0xbc>
 8008714:	681d      	ldr	r5, [r3, #0]
 8008716:	e003      	b.n	8008720 <_printf_i+0xc4>
 8008718:	0645      	lsls	r5, r0, #25
 800871a:	d5fb      	bpl.n	8008714 <_printf_i+0xb8>
 800871c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008720:	2d00      	cmp	r5, #0
 8008722:	da03      	bge.n	800872c <_printf_i+0xd0>
 8008724:	232d      	movs	r3, #45	@ 0x2d
 8008726:	426d      	negs	r5, r5
 8008728:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800872c:	4859      	ldr	r0, [pc, #356]	@ (8008894 <_printf_i+0x238>)
 800872e:	230a      	movs	r3, #10
 8008730:	e011      	b.n	8008756 <_printf_i+0xfa>
 8008732:	6821      	ldr	r1, [r4, #0]
 8008734:	6833      	ldr	r3, [r6, #0]
 8008736:	0608      	lsls	r0, r1, #24
 8008738:	f853 5b04 	ldr.w	r5, [r3], #4
 800873c:	d402      	bmi.n	8008744 <_printf_i+0xe8>
 800873e:	0649      	lsls	r1, r1, #25
 8008740:	bf48      	it	mi
 8008742:	b2ad      	uxthmi	r5, r5
 8008744:	2f6f      	cmp	r7, #111	@ 0x6f
 8008746:	4853      	ldr	r0, [pc, #332]	@ (8008894 <_printf_i+0x238>)
 8008748:	6033      	str	r3, [r6, #0]
 800874a:	bf14      	ite	ne
 800874c:	230a      	movne	r3, #10
 800874e:	2308      	moveq	r3, #8
 8008750:	2100      	movs	r1, #0
 8008752:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008756:	6866      	ldr	r6, [r4, #4]
 8008758:	60a6      	str	r6, [r4, #8]
 800875a:	2e00      	cmp	r6, #0
 800875c:	bfa2      	ittt	ge
 800875e:	6821      	ldrge	r1, [r4, #0]
 8008760:	f021 0104 	bicge.w	r1, r1, #4
 8008764:	6021      	strge	r1, [r4, #0]
 8008766:	b90d      	cbnz	r5, 800876c <_printf_i+0x110>
 8008768:	2e00      	cmp	r6, #0
 800876a:	d04b      	beq.n	8008804 <_printf_i+0x1a8>
 800876c:	4616      	mov	r6, r2
 800876e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008772:	fb03 5711 	mls	r7, r3, r1, r5
 8008776:	5dc7      	ldrb	r7, [r0, r7]
 8008778:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800877c:	462f      	mov	r7, r5
 800877e:	42bb      	cmp	r3, r7
 8008780:	460d      	mov	r5, r1
 8008782:	d9f4      	bls.n	800876e <_printf_i+0x112>
 8008784:	2b08      	cmp	r3, #8
 8008786:	d10b      	bne.n	80087a0 <_printf_i+0x144>
 8008788:	6823      	ldr	r3, [r4, #0]
 800878a:	07df      	lsls	r7, r3, #31
 800878c:	d508      	bpl.n	80087a0 <_printf_i+0x144>
 800878e:	6923      	ldr	r3, [r4, #16]
 8008790:	6861      	ldr	r1, [r4, #4]
 8008792:	4299      	cmp	r1, r3
 8008794:	bfde      	ittt	le
 8008796:	2330      	movle	r3, #48	@ 0x30
 8008798:	f806 3c01 	strble.w	r3, [r6, #-1]
 800879c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80087a0:	1b92      	subs	r2, r2, r6
 80087a2:	6122      	str	r2, [r4, #16]
 80087a4:	f8cd a000 	str.w	sl, [sp]
 80087a8:	464b      	mov	r3, r9
 80087aa:	aa03      	add	r2, sp, #12
 80087ac:	4621      	mov	r1, r4
 80087ae:	4640      	mov	r0, r8
 80087b0:	f7ff fee6 	bl	8008580 <_printf_common>
 80087b4:	3001      	adds	r0, #1
 80087b6:	d14a      	bne.n	800884e <_printf_i+0x1f2>
 80087b8:	f04f 30ff 	mov.w	r0, #4294967295
 80087bc:	b004      	add	sp, #16
 80087be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	f043 0320 	orr.w	r3, r3, #32
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	4833      	ldr	r0, [pc, #204]	@ (8008898 <_printf_i+0x23c>)
 80087cc:	2778      	movs	r7, #120	@ 0x78
 80087ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	6831      	ldr	r1, [r6, #0]
 80087d6:	061f      	lsls	r7, r3, #24
 80087d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80087dc:	d402      	bmi.n	80087e4 <_printf_i+0x188>
 80087de:	065f      	lsls	r7, r3, #25
 80087e0:	bf48      	it	mi
 80087e2:	b2ad      	uxthmi	r5, r5
 80087e4:	6031      	str	r1, [r6, #0]
 80087e6:	07d9      	lsls	r1, r3, #31
 80087e8:	bf44      	itt	mi
 80087ea:	f043 0320 	orrmi.w	r3, r3, #32
 80087ee:	6023      	strmi	r3, [r4, #0]
 80087f0:	b11d      	cbz	r5, 80087fa <_printf_i+0x19e>
 80087f2:	2310      	movs	r3, #16
 80087f4:	e7ac      	b.n	8008750 <_printf_i+0xf4>
 80087f6:	4827      	ldr	r0, [pc, #156]	@ (8008894 <_printf_i+0x238>)
 80087f8:	e7e9      	b.n	80087ce <_printf_i+0x172>
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	f023 0320 	bic.w	r3, r3, #32
 8008800:	6023      	str	r3, [r4, #0]
 8008802:	e7f6      	b.n	80087f2 <_printf_i+0x196>
 8008804:	4616      	mov	r6, r2
 8008806:	e7bd      	b.n	8008784 <_printf_i+0x128>
 8008808:	6833      	ldr	r3, [r6, #0]
 800880a:	6825      	ldr	r5, [r4, #0]
 800880c:	6961      	ldr	r1, [r4, #20]
 800880e:	1d18      	adds	r0, r3, #4
 8008810:	6030      	str	r0, [r6, #0]
 8008812:	062e      	lsls	r6, r5, #24
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	d501      	bpl.n	800881c <_printf_i+0x1c0>
 8008818:	6019      	str	r1, [r3, #0]
 800881a:	e002      	b.n	8008822 <_printf_i+0x1c6>
 800881c:	0668      	lsls	r0, r5, #25
 800881e:	d5fb      	bpl.n	8008818 <_printf_i+0x1bc>
 8008820:	8019      	strh	r1, [r3, #0]
 8008822:	2300      	movs	r3, #0
 8008824:	6123      	str	r3, [r4, #16]
 8008826:	4616      	mov	r6, r2
 8008828:	e7bc      	b.n	80087a4 <_printf_i+0x148>
 800882a:	6833      	ldr	r3, [r6, #0]
 800882c:	1d1a      	adds	r2, r3, #4
 800882e:	6032      	str	r2, [r6, #0]
 8008830:	681e      	ldr	r6, [r3, #0]
 8008832:	6862      	ldr	r2, [r4, #4]
 8008834:	2100      	movs	r1, #0
 8008836:	4630      	mov	r0, r6
 8008838:	f7f7 fcda 	bl	80001f0 <memchr>
 800883c:	b108      	cbz	r0, 8008842 <_printf_i+0x1e6>
 800883e:	1b80      	subs	r0, r0, r6
 8008840:	6060      	str	r0, [r4, #4]
 8008842:	6863      	ldr	r3, [r4, #4]
 8008844:	6123      	str	r3, [r4, #16]
 8008846:	2300      	movs	r3, #0
 8008848:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800884c:	e7aa      	b.n	80087a4 <_printf_i+0x148>
 800884e:	6923      	ldr	r3, [r4, #16]
 8008850:	4632      	mov	r2, r6
 8008852:	4649      	mov	r1, r9
 8008854:	4640      	mov	r0, r8
 8008856:	47d0      	blx	sl
 8008858:	3001      	adds	r0, #1
 800885a:	d0ad      	beq.n	80087b8 <_printf_i+0x15c>
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	079b      	lsls	r3, r3, #30
 8008860:	d413      	bmi.n	800888a <_printf_i+0x22e>
 8008862:	68e0      	ldr	r0, [r4, #12]
 8008864:	9b03      	ldr	r3, [sp, #12]
 8008866:	4298      	cmp	r0, r3
 8008868:	bfb8      	it	lt
 800886a:	4618      	movlt	r0, r3
 800886c:	e7a6      	b.n	80087bc <_printf_i+0x160>
 800886e:	2301      	movs	r3, #1
 8008870:	4632      	mov	r2, r6
 8008872:	4649      	mov	r1, r9
 8008874:	4640      	mov	r0, r8
 8008876:	47d0      	blx	sl
 8008878:	3001      	adds	r0, #1
 800887a:	d09d      	beq.n	80087b8 <_printf_i+0x15c>
 800887c:	3501      	adds	r5, #1
 800887e:	68e3      	ldr	r3, [r4, #12]
 8008880:	9903      	ldr	r1, [sp, #12]
 8008882:	1a5b      	subs	r3, r3, r1
 8008884:	42ab      	cmp	r3, r5
 8008886:	dcf2      	bgt.n	800886e <_printf_i+0x212>
 8008888:	e7eb      	b.n	8008862 <_printf_i+0x206>
 800888a:	2500      	movs	r5, #0
 800888c:	f104 0619 	add.w	r6, r4, #25
 8008890:	e7f5      	b.n	800887e <_printf_i+0x222>
 8008892:	bf00      	nop
 8008894:	08008bee 	.word	0x08008bee
 8008898:	08008bff 	.word	0x08008bff

0800889c <memmove>:
 800889c:	4288      	cmp	r0, r1
 800889e:	b510      	push	{r4, lr}
 80088a0:	eb01 0402 	add.w	r4, r1, r2
 80088a4:	d902      	bls.n	80088ac <memmove+0x10>
 80088a6:	4284      	cmp	r4, r0
 80088a8:	4623      	mov	r3, r4
 80088aa:	d807      	bhi.n	80088bc <memmove+0x20>
 80088ac:	1e43      	subs	r3, r0, #1
 80088ae:	42a1      	cmp	r1, r4
 80088b0:	d008      	beq.n	80088c4 <memmove+0x28>
 80088b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088ba:	e7f8      	b.n	80088ae <memmove+0x12>
 80088bc:	4402      	add	r2, r0
 80088be:	4601      	mov	r1, r0
 80088c0:	428a      	cmp	r2, r1
 80088c2:	d100      	bne.n	80088c6 <memmove+0x2a>
 80088c4:	bd10      	pop	{r4, pc}
 80088c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088ce:	e7f7      	b.n	80088c0 <memmove+0x24>

080088d0 <_sbrk_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	4d06      	ldr	r5, [pc, #24]	@ (80088ec <_sbrk_r+0x1c>)
 80088d4:	2300      	movs	r3, #0
 80088d6:	4604      	mov	r4, r0
 80088d8:	4608      	mov	r0, r1
 80088da:	602b      	str	r3, [r5, #0]
 80088dc:	f7f9 f996 	bl	8001c0c <_sbrk>
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	d102      	bne.n	80088ea <_sbrk_r+0x1a>
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	b103      	cbz	r3, 80088ea <_sbrk_r+0x1a>
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	bd38      	pop	{r3, r4, r5, pc}
 80088ec:	20004258 	.word	0x20004258

080088f0 <_realloc_r>:
 80088f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f4:	4680      	mov	r8, r0
 80088f6:	4615      	mov	r5, r2
 80088f8:	460c      	mov	r4, r1
 80088fa:	b921      	cbnz	r1, 8008906 <_realloc_r+0x16>
 80088fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008900:	4611      	mov	r1, r2
 8008902:	f7ff bc59 	b.w	80081b8 <_malloc_r>
 8008906:	b92a      	cbnz	r2, 8008914 <_realloc_r+0x24>
 8008908:	f7ff fbea 	bl	80080e0 <_free_r>
 800890c:	2400      	movs	r4, #0
 800890e:	4620      	mov	r0, r4
 8008910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008914:	f000 f81a 	bl	800894c <_malloc_usable_size_r>
 8008918:	4285      	cmp	r5, r0
 800891a:	4606      	mov	r6, r0
 800891c:	d802      	bhi.n	8008924 <_realloc_r+0x34>
 800891e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008922:	d8f4      	bhi.n	800890e <_realloc_r+0x1e>
 8008924:	4629      	mov	r1, r5
 8008926:	4640      	mov	r0, r8
 8008928:	f7ff fc46 	bl	80081b8 <_malloc_r>
 800892c:	4607      	mov	r7, r0
 800892e:	2800      	cmp	r0, #0
 8008930:	d0ec      	beq.n	800890c <_realloc_r+0x1c>
 8008932:	42b5      	cmp	r5, r6
 8008934:	462a      	mov	r2, r5
 8008936:	4621      	mov	r1, r4
 8008938:	bf28      	it	cs
 800893a:	4632      	movcs	r2, r6
 800893c:	f7ff fbc2 	bl	80080c4 <memcpy>
 8008940:	4621      	mov	r1, r4
 8008942:	4640      	mov	r0, r8
 8008944:	f7ff fbcc 	bl	80080e0 <_free_r>
 8008948:	463c      	mov	r4, r7
 800894a:	e7e0      	b.n	800890e <_realloc_r+0x1e>

0800894c <_malloc_usable_size_r>:
 800894c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008950:	1f18      	subs	r0, r3, #4
 8008952:	2b00      	cmp	r3, #0
 8008954:	bfbc      	itt	lt
 8008956:	580b      	ldrlt	r3, [r1, r0]
 8008958:	18c0      	addlt	r0, r0, r3
 800895a:	4770      	bx	lr

0800895c <_init>:
 800895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895e:	bf00      	nop
 8008960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008962:	bc08      	pop	{r3}
 8008964:	469e      	mov	lr, r3
 8008966:	4770      	bx	lr

08008968 <_fini>:
 8008968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896a:	bf00      	nop
 800896c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800896e:	bc08      	pop	{r3}
 8008970:	469e      	mov	lr, r3
 8008972:	4770      	bx	lr
