
STM32F407VGT6_CAN_Sniffer_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         000086f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08008884  08008884  00009884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008af0  08008af0  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  08008af0  08008af0  00009af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008af8  08008af8  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008af8  08008af8  00009af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008afc  08008afc  00009afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008b00  0000a000  2**2
=======
  1 .text         00008804  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08008994  08008994  00009994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c30  08008c30  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  08008c30  08008c30  00009c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c38  08008c38  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c38  08008c38  00009c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c3c  08008c3c  00009c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008c40  0000a000  2**2
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a060  2**0
                  CONTENTS
 10 .bss          00004200  20000060  20000060  0000a060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004260  20004260  0000a060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013cfa  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000338b  00000000  00000000  0001dd8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  00021118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f0b  00000000  00000000  000224c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d55  00000000  00000000  000233d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 18 .debug_line   00014ad2  00000000  00000000  00047128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d66d1  00000000  00000000  0005bbfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001322cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057e8  00000000  00000000  00132310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009f  00000000  00000000  00137af8  2**0
=======
 18 .debug_line   00014b1a  00000000  00000000  000471de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d675d  00000000  00000000  0005bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00132455  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000580c  00000000  00000000  00132498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009f  00000000  00000000  00137ca4  2**0
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001b0:	0800886c 	.word	0x0800886c
=======
 80001b0:	0800897c 	.word	0x0800897c
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
<<<<<<< HEAD
 80001cc:	0800886c 	.word	0x0800886c
=======
 80001cc:	0800897c 	.word	0x0800897c
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <cobs_encode>:
 *                 operation and the length of the result (that was written to
 *                 dst_buf_ptr)
 */
cobs_encode_result cobs_encode(void * dst_buf_ptr, size_t dst_buf_len,
                               const void * src_ptr, size_t src_len)
{
 8000580:	b480      	push	{r7}
 8000582:	b08f      	sub	sp, #60	@ 0x3c
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
 800058c:	603b      	str	r3, [r7, #0]
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	2300      	movs	r3, #0
 8000594:	753b      	strb	r3, [r7, #20]
    const uint8_t *     src_read_ptr        = src_ptr;
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	637b      	str	r3, [r7, #52]	@ 0x34
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800059e:	4413      	add	r3, r2
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t *           dst_buf_start_ptr   = dst_buf_ptr;
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	623b      	str	r3, [r7, #32]
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4413      	add	r3, r2
 80005ac:	61fb      	str	r3, [r7, #28]
    uint8_t *           dst_code_write_ptr  = dst_buf_ptr;
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	633b      	str	r3, [r7, #48]	@ 0x30
    uint8_t *           dst_write_ptr       = dst_code_write_ptr + 1;
 80005b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005b4:	3301      	adds	r3, #1
 80005b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t             src_byte            = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	76fb      	strb	r3, [r7, #27]
    uint8_t             search_len          = 1;
 80005bc:	2301      	movs	r3, #1
 80005be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b


    /* First, do a NULL pointer check and return immediately if it fails. */
    if ((dst_buf_ptr == NULL) || (src_ptr == NULL))
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d002      	beq.n	80005ce <cobs_encode+0x4e>
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d10a      	bne.n	80005e4 <cobs_encode+0x64>
    {
        result.status = COBS_ENCODE_NULL_POINTER;
 80005ce:	2301      	movs	r3, #1
 80005d0:	753b      	strb	r3, [r7, #20]
        return result;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	461a      	mov	r2, r3
 80005d6:	f107 0310 	add.w	r3, r7, #16
 80005da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80005de:	e882 0003 	stmia.w	r2, {r0, r1}
 80005e2:	e05f      	b.n	80006a4 <cobs_encode+0x124>
    }

    if (src_len != 0)
 80005e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d040      	beq.n	800066c <cobs_encode+0xec>
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
 80005ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d305      	bcc.n	80005fe <cobs_encode+0x7e>
            {
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
 80005f2:	7d3b      	ldrb	r3, [r7, #20]
 80005f4:	f043 0302 	orr.w	r3, r3, #2
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	753b      	strb	r3, [r7, #20]
                break;
 80005fc:	e036      	b.n	800066c <cobs_encode+0xec>
            }

            src_byte = *src_read_ptr++;
 80005fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000600:	1c5a      	adds	r2, r3, #1
 8000602:	637a      	str	r2, [r7, #52]	@ 0x34
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	76fb      	strb	r3, [r7, #27]
            if (src_byte == 0)
 8000608:	7efb      	ldrb	r3, [r7, #27]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d10f      	bne.n	800062e <cobs_encode+0xae>
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
 800060e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000610:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000614:	701a      	strb	r2, [r3, #0]
                dst_code_write_ptr = dst_write_ptr++;
 8000616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000618:	1c5a      	adds	r2, r3, #1
 800061a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800061c:	633b      	str	r3, [r7, #48]	@ 0x30
                search_len = 1;
 800061e:	2301      	movs	r3, #1
 8000620:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                if (src_read_ptr >= src_end_ptr)
 8000624:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000628:	429a      	cmp	r2, r3
 800062a:	d3de      	bcc.n	80005ea <cobs_encode+0x6a>
                {
                    break;
 800062c:	e01e      	b.n	800066c <cobs_encode+0xec>
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
 800062e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000630:	1c5a      	adds	r2, r3, #1
 8000632:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000634:	7efa      	ldrb	r2, [r7, #27]
 8000636:	701a      	strb	r2, [r3, #0]
                search_len++;
 8000638:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800063c:	3301      	adds	r3, #1
 800063e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                if (src_read_ptr >= src_end_ptr)
 8000642:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000646:	429a      	cmp	r2, r3
 8000648:	d20f      	bcs.n	800066a <cobs_encode+0xea>
                {
                    break;
                }
                if (search_len == 0xFF)
 800064a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800064e:	2bff      	cmp	r3, #255	@ 0xff
 8000650:	d1cb      	bne.n	80005ea <cobs_encode+0x6a>
                {
                    /* We have a long string of non-zero bytes, so we need
                     * to write out a length code of 0xFF. */
                    *dst_code_write_ptr = search_len;
 8000652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000654:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000658:	701a      	strb	r2, [r3, #0]
                    dst_code_write_ptr = dst_write_ptr++;
 800065a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800065c:	1c5a      	adds	r2, r3, #1
 800065e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000660:	633b      	str	r3, [r7, #48]	@ 0x30
                    search_len = 1;
 8000662:	2301      	movs	r3, #1
 8000664:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            if (dst_write_ptr >= dst_buf_end_ptr)
 8000668:	e7bf      	b.n	80005ea <cobs_encode+0x6a>
                    break;
 800066a:	bf00      	nop

    /* We've reached the end of the source data (or possibly run out of output buffer)
     * Finalise the remaining output. In particular, write the code (length) byte.
     * Update the pointer to calculate the final output length.
     */
    if (dst_code_write_ptr >= dst_buf_end_ptr)
 800066c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800066e:	69fb      	ldr	r3, [r7, #28]
 8000670:	429a      	cmp	r2, r3
 8000672:	d307      	bcc.n	8000684 <cobs_encode+0x104>
    {
        /* We've run out of output buffer to write the code byte. */
        result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
 8000674:	7d3b      	ldrb	r3, [r7, #20]
 8000676:	f043 0302 	orr.w	r3, r3, #2
 800067a:	b2db      	uxtb	r3, r3
 800067c:	753b      	strb	r3, [r7, #20]
        dst_write_ptr = dst_buf_end_ptr;
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000682:	e003      	b.n	800068c <cobs_encode+0x10c>
    }
    else
    {
        /* Write the last code (length) byte. */
        *dst_code_write_ptr = search_len;
 8000684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000686:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800068a:	701a      	strb	r2, [r3, #0]
    }

    /* Calculate the output length, from the value of dst_code_write_ptr */
    result.out_len = dst_write_ptr - dst_buf_start_ptr;
 800068c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800068e:	6a3b      	ldr	r3, [r7, #32]
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	613b      	str	r3, [r7, #16]

    return result;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	461a      	mov	r2, r3
 8000698:	f107 0310 	add.w	r3, r7, #16
 800069c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006a0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80006a4:	68f8      	ldr	r0, [r7, #12]
 80006a6:	373c      	adds	r7, #60	@ 0x3c
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <cobs_decode>:
 *                 operation and the length of the result (that was written to
 *                 dst_buf_ptr)
 */
cobs_decode_result cobs_decode(void * dst_buf_ptr, size_t dst_buf_len,
                               const void * src_ptr, size_t src_len)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b08f      	sub	sp, #60	@ 0x3c
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	603b      	str	r3, [r7, #0]
    cobs_decode_result  result              = { 0, COBS_DECODE_OK };
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	2300      	movs	r3, #0
 80006c4:	753b      	strb	r3, [r7, #20]
    const uint8_t *     src_read_ptr        = src_ptr;
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	637b      	str	r3, [r7, #52]	@ 0x34
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
 80006ca:	683a      	ldr	r2, [r7, #0]
 80006cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006ce:	4413      	add	r3, r2
 80006d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t *           dst_buf_start_ptr   = dst_buf_ptr;
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4413      	add	r3, r2
 80006dc:	623b      	str	r3, [r7, #32]
    uint8_t *           dst_write_ptr       = dst_buf_ptr;
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	633b      	str	r3, [r7, #48]	@ 0x30
    uint8_t             i;
    uint8_t             len_code;


    /* First, do a NULL pointer check and return immediately if it fails. */
    if ((dst_buf_ptr == NULL) || (src_ptr == NULL))
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d002      	beq.n	80006ee <cobs_decode+0x3e>
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d10a      	bne.n	8000704 <cobs_decode+0x54>
    {
        result.status = COBS_DECODE_NULL_POINTER;
 80006ee:	2301      	movs	r3, #1
 80006f0:	753b      	strb	r3, [r7, #20]
        return result;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	461a      	mov	r2, r3
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006fe:	e882 0003 	stmia.w	r2, {r0, r1}
 8000702:	e07e      	b.n	8000802 <cobs_decode+0x152>
    }

    if (src_len != 0)
 8000704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000706:	2b00      	cmp	r3, #0
 8000708:	d06f      	beq.n	80007ea <cobs_decode+0x13a>
    {
        for (;;)
        {
            len_code = *src_read_ptr++;
 800070a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800070c:	1c5a      	adds	r2, r3, #1
 800070e:	637a      	str	r2, [r7, #52]	@ 0x34
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            if (len_code == 0)
 8000716:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800071a:	2b00      	cmp	r3, #0
 800071c:	d105      	bne.n	800072a <cobs_decode+0x7a>
            {
                result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
 800071e:	7d3b      	ldrb	r3, [r7, #20]
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	b2db      	uxtb	r3, r3
 8000726:	753b      	strb	r3, [r7, #20]
                break;
 8000728:	e05f      	b.n	80007ea <cobs_decode+0x13a>
            }
            len_code--;
 800072a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800072e:	3b01      	subs	r3, #1
 8000730:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

            /* Check length code against remaining input bytes */
            remaining_bytes = src_end_ptr - src_read_ptr;
 8000734:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	61fb      	str	r3, [r7, #28]
            if (len_code > remaining_bytes)
 800073c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000740:	69fa      	ldr	r2, [r7, #28]
 8000742:	429a      	cmp	r2, r3
 8000744:	d207      	bcs.n	8000756 <cobs_decode+0xa6>
            {
                result.status |= COBS_DECODE_INPUT_TOO_SHORT;
 8000746:	7d3b      	ldrb	r3, [r7, #20]
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	b2db      	uxtb	r3, r3
 800074e:	753b      	strb	r3, [r7, #20]
                len_code = remaining_bytes;
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }

            /* Check length code against remaining output buffer space */
            remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
 8000756:	6a3a      	ldr	r2, [r7, #32]
 8000758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800075a:	1ad3      	subs	r3, r2, r3
 800075c:	61fb      	str	r3, [r7, #28]
            if (len_code > remaining_bytes)
 800075e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000762:	69fa      	ldr	r2, [r7, #28]
 8000764:	429a      	cmp	r2, r3
 8000766:	d207      	bcs.n	8000778 <cobs_decode+0xc8>
            {
                result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
 8000768:	7d3b      	ldrb	r3, [r7, #20]
 800076a:	f043 0302 	orr.w	r3, r3, #2
 800076e:	b2db      	uxtb	r3, r3
 8000770:	753b      	strb	r3, [r7, #20]
                len_code = remaining_bytes;
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }

            for (i = len_code; i != 0; i--)
 8000778:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800077c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000780:	e016      	b.n	80007b0 <cobs_decode+0x100>
            {
                src_byte = *src_read_ptr++;
 8000782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000784:	1c5a      	adds	r2, r3, #1
 8000786:	637a      	str	r2, [r7, #52]	@ 0x34
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	76fb      	strb	r3, [r7, #27]
                if (src_byte == 0)
 800078c:	7efb      	ldrb	r3, [r7, #27]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d104      	bne.n	800079c <cobs_decode+0xec>
                {
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
 8000792:	7d3b      	ldrb	r3, [r7, #20]
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	b2db      	uxtb	r3, r3
 800079a:	753b      	strb	r3, [r7, #20]
                }
                *dst_write_ptr++ = src_byte;
 800079c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800079e:	1c5a      	adds	r2, r3, #1
 80007a0:	633a      	str	r2, [r7, #48]	@ 0x30
 80007a2:	7efa      	ldrb	r2, [r7, #27]
 80007a4:	701a      	strb	r2, [r3, #0]
            for (i = len_code; i != 0; i--)
 80007a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007aa:	3b01      	subs	r3, #1
 80007ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80007b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1e4      	bne.n	8000782 <cobs_decode+0xd2>
            }

            if (src_read_ptr >= src_end_ptr)
 80007b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007bc:	429a      	cmp	r2, r3
 80007be:	d213      	bcs.n	80007e8 <cobs_decode+0x138>
            {
                break;
            }

            /* Add a zero to the end */
            if (len_code != 0xFE)
 80007c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80007c4:	2bfe      	cmp	r3, #254	@ 0xfe
 80007c6:	d0a0      	beq.n	800070a <cobs_decode+0x5a>
            {
                if (dst_write_ptr >= dst_buf_end_ptr)
 80007c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80007ca:	6a3b      	ldr	r3, [r7, #32]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d305      	bcc.n	80007dc <cobs_decode+0x12c>
                {
                    result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
 80007d0:	7d3b      	ldrb	r3, [r7, #20]
 80007d2:	f043 0302 	orr.w	r3, r3, #2
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	753b      	strb	r3, [r7, #20]
                    break;
 80007da:	e006      	b.n	80007ea <cobs_decode+0x13a>
                }
                *dst_write_ptr++ = 0;
 80007dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007de:	1c5a      	adds	r2, r3, #1
 80007e0:	633a      	str	r2, [r7, #48]	@ 0x30
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
            len_code = *src_read_ptr++;
 80007e6:	e790      	b.n	800070a <cobs_decode+0x5a>
                break;
 80007e8:	bf00      	nop
            }
        }
    }

    result.out_len = dst_write_ptr - dst_buf_start_ptr;
 80007ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80007ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	613b      	str	r3, [r7, #16]

    return result;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	461a      	mov	r2, r3
 80007f6:	f107 0310 	add.w	r3, r7, #16
 80007fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007fe:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000802:	68f8      	ldr	r0, [r7, #12]
 8000804:	373c      	adds	r7, #60	@ 0x3c
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
	...

08000810 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4a07      	ldr	r2, [pc, #28]	@ (800083c <vApplicationGetIdleTaskMemory+0x2c>)
 8000820:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	4a06      	ldr	r2, [pc, #24]	@ (8000840 <vApplicationGetIdleTaskMemory+0x30>)
 8000826:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2280      	movs	r2, #128	@ 0x80
 800082c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	2000007c 	.word	0x2000007c
 8000840:	200000d0 	.word	0x200000d0

08000844 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000848:	f3bf 8f4f 	dsb	sy
}
 800084c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <__NVIC_SystemReset+0x24>)
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000856:	4904      	ldr	r1, [pc, #16]	@ (8000868 <__NVIC_SystemReset+0x24>)
 8000858:	4b04      	ldr	r3, [pc, #16]	@ (800086c <__NVIC_SystemReset+0x28>)
 800085a:	4313      	orrs	r3, r2
 800085c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800085e:	f3bf 8f4f 	dsb	sy
}
 8000862:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <__NVIC_SystemReset+0x20>
 8000868:	e000ed00 	.word	0xe000ed00
 800086c:	05fa0004 	.word	0x05fa0004

08000870 <bootLEDIndicator>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define NUMBER_BLINKS 20

void bootLEDIndicator(void) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
	int blinkCounter = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
	while (blinkCounter < NUMBER_BLINKS) {
 800087a:	e00a      	b.n	8000892 <bootLEDIndicator+0x22>
		HAL_GPIO_TogglePin(ORANGE_LED_SYSTEM_GPIO_Port, ORANGE_LED_SYSTEM_Pin);
 800087c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000880:	480a      	ldr	r0, [pc, #40]	@ (80008ac <bootLEDIndicator+0x3c>)
<<<<<<< HEAD
 8000882:	f002 fcfc 	bl	800327e <HAL_GPIO_TogglePin>
		HAL_Delay(30);
 8000886:	201e      	movs	r0, #30
 8000888:	f001 fa20 	bl	8001ccc <HAL_Delay>
=======
 8000882:	f002 fd84 	bl	800338e <HAL_GPIO_TogglePin>
		HAL_Delay(30);
 8000886:	201e      	movs	r0, #30
 8000888:	f001 fa82 	bl	8001d90 <HAL_Delay>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		blinkCounter++;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3301      	adds	r3, #1
 8000890:	607b      	str	r3, [r7, #4]
	while (blinkCounter < NUMBER_BLINKS) {
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b13      	cmp	r3, #19
 8000896:	ddf1      	ble.n	800087c <bootLEDIndicator+0xc>
	}
	HAL_GPIO_WritePin(ORANGE_LED_SYSTEM_GPIO_Port, ORANGE_LED_SYSTEM_Pin, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800089e:	4803      	ldr	r0, [pc, #12]	@ (80008ac <bootLEDIndicator+0x3c>)
<<<<<<< HEAD
 80008a0:	f002 fcd4 	bl	800324c <HAL_GPIO_WritePin>
=======
 80008a0:	f002 fd5c 	bl	800335c <HAL_GPIO_WritePin>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40020c00 	.word	0x40020c00

080008b0 <substr>:
void substr(char *str, char *sub, int start, int len) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
 80008bc:	603b      	str	r3, [r7, #0]
	memcpy(sub, &str[start], len);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	4413      	add	r3, r2
 80008c4:	683a      	ldr	r2, [r7, #0]
 80008c6:	4619      	mov	r1, r3
 80008c8:	68b8      	ldr	r0, [r7, #8]
<<<<<<< HEAD
 80008ca:	f007 fb83 	bl	8007fd4 <memcpy>
=======
 80008ca:	f007 fc0b 	bl	80080e4 <memcpy>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	sub[len] = '\0';
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	4413      	add	r3, r2
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <toInteger>:

int toInteger(uint8_t *stringToConvert, int len) {
 80008e0:	b480      	push	{r7}
 80008e2:	b087      	sub	sp, #28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
	int counter = len - 1;
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	617b      	str	r3, [r7, #20]
	int exp = 1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	613b      	str	r3, [r7, #16]
	int value = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
	while (counter >= 0) {
 80008f8:	e013      	b.n	8000922 <toInteger+0x42>
		value = value + (stringToConvert[counter] - '0') * exp;
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	3b30      	subs	r3, #48	@ 0x30
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	fb02 f303 	mul.w	r3, r2, r3
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	4413      	add	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]
		exp = exp * 10;
 8000910:	693a      	ldr	r2, [r7, #16]
 8000912:	4613      	mov	r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	613b      	str	r3, [r7, #16]
		counter--;
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	3b01      	subs	r3, #1
 8000920:	617b      	str	r3, [r7, #20]
	while (counter >= 0) {
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	2b00      	cmp	r3, #0
 8000926:	dae8      	bge.n	80008fa <toInteger+0x1a>
	}
	return value;
 8000928:	68fb      	ldr	r3, [r7, #12]
}
 800092a:	4618      	mov	r0, r3
 800092c:	371c      	adds	r7, #28
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <sendCANMessage>:
uint32_t sendCANMessage(uint8_t dlc, uint32_t msgID, bool isRTR,bool isStandard, uint8_t *data) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	@ 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6039      	str	r1, [r7, #0]
 8000940:	4611      	mov	r1, r2
 8000942:	461a      	mov	r2, r3
 8000944:	4603      	mov	r3, r0
 8000946:	71fb      	strb	r3, [r7, #7]
 8000948:	460b      	mov	r3, r1
 800094a:	71bb      	strb	r3, [r7, #6]
 800094c:	4613      	mov	r3, r2
 800094e:	717b      	strb	r3, [r7, #5]

	uint32_t TxMailbox;
	CAN_TxHeaderTypeDef pHeader;
	pHeader.DLC = dlc;
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	61fb      	str	r3, [r7, #28]

	if (isStandard) {
 8000954:	797b      	ldrb	r3, [r7, #5]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d004      	beq.n	8000964 <sendCANMessage+0x2c>
		pHeader.IDE = CAN_ID_STD;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
		pHeader.StdId = msgID;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	e003      	b.n	800096c <sendCANMessage+0x34>
	} else {
		pHeader.IDE = CAN_ID_EXT;
 8000964:	2304      	movs	r3, #4
 8000966:	617b      	str	r3, [r7, #20]
		pHeader.ExtId = msgID;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	613b      	str	r3, [r7, #16]
	}
	if (isRTR) {
 800096c:	79bb      	ldrb	r3, [r7, #6]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d002      	beq.n	8000978 <sendCANMessage+0x40>
		pHeader.RTR = CAN_RTR_REMOTE;
 8000972:	2302      	movs	r3, #2
 8000974:	61bb      	str	r3, [r7, #24]
 8000976:	e001      	b.n	800097c <sendCANMessage+0x44>
	} else {
		pHeader.RTR = CAN_RTR_DATA;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
	}

	HAL_GPIO_TogglePin(BLUE_LED_CANTX_GPIO_Port,BLUE_LED_CANTX_Pin);
 800097c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000980:	4807      	ldr	r0, [pc, #28]	@ (80009a0 <sendCANMessage+0x68>)
<<<<<<< HEAD
 8000982:	f002 fc7c 	bl	800327e <HAL_GPIO_TogglePin>
=======
 8000982:	f002 fd04 	bl	800338e <HAL_GPIO_TogglePin>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	HAL_CAN_AddTxMessage(&hcan1, &pHeader, data, &TxMailbox);
 8000986:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800098a:	f107 010c 	add.w	r1, r7, #12
 800098e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000990:	4804      	ldr	r0, [pc, #16]	@ (80009a4 <sendCANMessage+0x6c>)
<<<<<<< HEAD
 8000992:	f001 fc4a 	bl	800222a <HAL_CAN_AddTxMessage>
=======
 8000992:	f001 fcac 	bl	80022ee <HAL_CAN_AddTxMessage>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	return TxMailbox;
 8000996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000998:	4618      	mov	r0, r3
 800099a:	3728      	adds	r7, #40	@ 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40020c00 	.word	0x40020c00
 80009a4:	200002d0 	.word	0x200002d0

080009a8 <setSinfferCANFilter>:

void setSinfferCANFilter(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
	/* Default filter - accept all to CAN_FIFO*/
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdHigh = 0x00005;
 80009b2:	2305      	movs	r3, #5
 80009b4:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterBank = 0x0000;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80009be:	2301      	movs	r3, #1
 80009c0:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x200 << 5;  //11-bit ID, in top bits
 80009c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009c6:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80009dc:	463b      	mov	r3, r7
 80009de:	4619      	mov	r1, r3
 80009e0:	4803      	ldr	r0, [pc, #12]	@ (80009f0 <setSinfferCANFilter+0x48>)
<<<<<<< HEAD
 80009e2:	f001 fab5 	bl	8001f50 <HAL_CAN_ConfigFilter>
=======
 80009e2:	f001 fb17 	bl	8002014 <HAL_CAN_ConfigFilter>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	@ 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200002d0 	.word	0x200002d0

080009f4 <processMessageComand>:

void processMessageComand(char *decodedCommand) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b09c      	sub	sp, #112	@ 0x70
 80009f8:	af02      	add	r7, sp, #8
 80009fa:	6078      	str	r0, [r7, #4]
	uint8_t cursor = 1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	if (decodedCommand[cursor] == 'T') {
 8000a02:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b54      	cmp	r3, #84	@ 0x54
 8000a0e:	d142      	bne.n	8000a96 <processMessageComand+0xa2>
		bootLEDIndicator();
 8000a10:	f7ff ff2e 	bl	8000870 <bootLEDIndicator>
		cursor++;
 8000a14:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000a18:	3301      	adds	r3, #1
 8000a1a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		uint8_t messageID_str[9];
		substr((char*) decodedCommand, (char*) messageID_str, cursor, 9);
 8000a1e:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000a22:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000a26:	2309      	movs	r3, #9
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff ff41 	bl	80008b0 <substr>

		int msgID = toInteger(messageID_str, 9);
 8000a2e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000a32:	2109      	movs	r1, #9
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff53 	bl	80008e0 <toInteger>
 8000a3a:	64b8      	str	r0, [r7, #72]	@ 0x48
		cursor += 9;
 8000a3c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000a40:	3309      	adds	r3, #9
 8000a42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

		uint8_t dlc_str[1];
		substr((char*) decodedCommand, (char*) dlc_str, cursor, 1);
 8000a46:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000a4a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000a4e:	2301      	movs	r3, #1
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff ff2d 	bl	80008b0 <substr>
		uint8_t dlc = atoi((char*) dlc_str);
<<<<<<< HEAD
 8000a56:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f007 f9d6 	bl	8007e0c <atoi>
 8000a60:	4603      	mov	r3, r0
 8000a62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
=======
 8000a52:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a56:	4618      	mov	r0, r3
 8000a58:	f007 fa60 	bl	8007f1c <atoi>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

		cursor++;
 8000a66:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		uint8_t data[8];
		substr((char*) decodedCommand, (char*) data, cursor, 8);
 8000a70:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000a74:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000a78:	2308      	movs	r3, #8
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ff18 	bl	80008b0 <substr>

		sendCANMessage(dlc, msgID, false, false, data);
 8000a80:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000a82:	f897 0047 	ldrb.w	r0, [r7, #71]	@ 0x47
 8000a86:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f7ff ff52 	bl	8000938 <sendCANMessage>
	else{
		bootLEDIndicator();

	}

}
 8000a94:	e0bf      	b.n	8000c16 <processMessageComand+0x222>
	} else if (decodedCommand[cursor] == 'R') {
 8000a96:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b52      	cmp	r3, #82	@ 0x52
 8000aa2:	d133      	bne.n	8000b0c <processMessageComand+0x118>
		cursor++;
 8000aa4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		substr((char*) decodedCommand, (char*) messageID_str, cursor, 9);
 8000aae:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000ab2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000ab6:	2309      	movs	r3, #9
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff fef9 	bl	80008b0 <substr>
		int msgID = toInteger(messageID_str, 9);
 8000abe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac2:	2109      	movs	r1, #9
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff0b 	bl	80008e0 <toInteger>
 8000aca:	6538      	str	r0, [r7, #80]	@ 0x50
		cursor += 9;
 8000acc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000ad0:	3309      	adds	r3, #9
 8000ad2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		substr((char*) decodedCommand, (char*) dlc_str, cursor, 1);
 8000ad6:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000ada:	f107 0120 	add.w	r1, r7, #32
 8000ade:	2301      	movs	r3, #1
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff fee5 	bl	80008b0 <substr>
		uint8_t dlc = toInteger(dlc_str, 1);
 8000ae6:	f107 0320 	add.w	r3, r7, #32
 8000aea:	2101      	movs	r1, #1
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fef7 	bl	80008e0 <toInteger>
 8000af2:	4603      	mov	r3, r0
 8000af4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		sendCANMessage(dlc, msgID, true, false, 0x00);
 8000af8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000afa:	f897 004f 	ldrb.w	r0, [r7, #79]	@ 0x4f
 8000afe:	2300      	movs	r3, #0
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	2300      	movs	r3, #0
 8000b04:	2201      	movs	r2, #1
 8000b06:	f7ff ff17 	bl	8000938 <sendCANMessage>
}
 8000b0a:	e084      	b.n	8000c16 <processMessageComand+0x222>
	} else if (decodedCommand[cursor] == 't') {
 8000b0c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	4413      	add	r3, r2
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b74      	cmp	r3, #116	@ 0x74
 8000b18:	d141      	bne.n	8000b9e <processMessageComand+0x1aa>
		cursor++;
 8000b1a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000b1e:	3301      	adds	r3, #1
 8000b20:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		substr((char*) decodedCommand, (char*) messageID_str, cursor, 4);
 8000b24:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000b28:	f107 011c 	add.w	r1, r7, #28
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff febe 	bl	80008b0 <substr>
		int msgID = toInteger(messageID_str, 4);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	2104      	movs	r1, #4
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fed0 	bl	80008e0 <toInteger>
 8000b40:	65b8      	str	r0, [r7, #88]	@ 0x58
		cursor += 4;
 8000b42:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000b46:	3304      	adds	r3, #4
 8000b48:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		substr((char*) decodedCommand, (char*) dlc_str, cursor, 1);
 8000b4c:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000b50:	f107 0118 	add.w	r1, r7, #24
 8000b54:	2301      	movs	r3, #1
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff feaa 	bl	80008b0 <substr>
		uint8_t dlc = toInteger(dlc_str, 1);
 8000b5c:	f107 0318 	add.w	r3, r7, #24
 8000b60:	2101      	movs	r1, #1
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff febc 	bl	80008e0 <toInteger>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		cursor++;
 8000b6e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000b72:	3301      	adds	r3, #1
 8000b74:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		substr((char*) decodedCommand, (char*) data, cursor, 8);
 8000b78:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000b7c:	f107 0110 	add.w	r1, r7, #16
 8000b80:	2308      	movs	r3, #8
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff fe94 	bl	80008b0 <substr>
		sendCANMessage(dlc, msgID, false, true, data);
 8000b88:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8000b8a:	f897 0057 	ldrb.w	r0, [r7, #87]	@ 0x57
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	2301      	movs	r3, #1
 8000b96:	2200      	movs	r2, #0
 8000b98:	f7ff fece 	bl	8000938 <sendCANMessage>
}
 8000b9c:	e03b      	b.n	8000c16 <processMessageComand+0x222>
	} else if (decodedCommand[cursor] == 'r') {
 8000b9e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b72      	cmp	r3, #114	@ 0x72
 8000baa:	d132      	bne.n	8000c12 <processMessageComand+0x21e>
		cursor++;
 8000bac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		substr((char*) decodedCommand, (char*) messageID_str, cursor, 4);
 8000bb6:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000bba:	f107 010c 	add.w	r1, r7, #12
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff fe75 	bl	80008b0 <substr>
		int msgID = toInteger(messageID_str, 4);
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	2104      	movs	r1, #4
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fe87 	bl	80008e0 <toInteger>
 8000bd2:	6638      	str	r0, [r7, #96]	@ 0x60
		cursor += 4;
 8000bd4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000bd8:	3304      	adds	r3, #4
 8000bda:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		substr((char*) decodedCommand, (char*) dlc_str, cursor, 1);
 8000bde:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000be2:	f107 0108 	add.w	r1, r7, #8
 8000be6:	2301      	movs	r3, #1
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff fe61 	bl	80008b0 <substr>
		uint8_t dlc = atoi((char*) dlc_str);
<<<<<<< HEAD
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f007 f90a 	bl	8007e0c <atoi>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
=======
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f007 f994 	bl	8007f1c <atoi>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		sendCANMessage(dlc, msgID, true, true, 0x00);
 8000bfe:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000c00:	f897 005f 	ldrb.w	r0, [r7, #95]	@ 0x5f
 8000c04:	2300      	movs	r3, #0
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	2301      	movs	r3, #1
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f7ff fe94 	bl	8000938 <sendCANMessage>
}
 8000c10:	e001      	b.n	8000c16 <processMessageComand+0x222>
		bootLEDIndicator();
 8000c12:	f7ff fe2d 	bl	8000870 <bootLEDIndicator>
}
 8000c16:	bf00      	nop
 8000c18:	3768      	adds	r7, #104	@ 0x68
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <processBitRateCommand>:

void processBitRateCommand(char *decodedCommand) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

	uint8_t bitrateSrt[4];
	substr((char*) decodedCommand, (char*) bitrateSrt, 1, 4);
<<<<<<< HEAD
 8000c28:	f107 010c 	add.w	r1, r7, #12
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	2201      	movs	r2, #1
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff fe3d 	bl	80008b0 <substr>
	int bitRate = toInteger(bitrateSrt, 4);
 8000c36:	f107 030c 	add.w	r3, r7, #12
 8000c3a:	2104      	movs	r1, #4
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fe4f 	bl	80008e0 <toInteger>
 8000c42:	6138      	str	r0, [r7, #16]
=======
 8000c1c:	f107 010c 	add.w	r1, r7, #12
 8000c20:	2304      	movs	r3, #4
 8000c22:	2201      	movs	r2, #1
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff fe43 	bl	80008b0 <substr>
	int bitRate = toInteger(bitrateSrt, 4);
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	2104      	movs	r1, #4
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fe55 	bl	80008e0 <toInteger>
 8000c36:	6138      	str	r0, [r7, #16]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	bool idetified = false;
 8000c44:	2300      	movs	r3, #0
 8000c46:	75fb      	strb	r3, [r7, #23]

	switch (bitRate) {
<<<<<<< HEAD
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c4e:	d055      	beq.n	8000cfc <processBitRateCommand+0xdc>
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c56:	dc57      	bgt.n	8000d08 <processBitRateCommand+0xe8>
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c5e:	d047      	beq.n	8000cf0 <processBitRateCommand+0xd0>
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c66:	dc4f      	bgt.n	8000d08 <processBitRateCommand+0xe8>
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	2bfa      	cmp	r3, #250	@ 0xfa
 8000c6c:	d03a      	beq.n	8000ce4 <processBitRateCommand+0xc4>
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	2bfa      	cmp	r3, #250	@ 0xfa
 8000c72:	dc49      	bgt.n	8000d08 <processBitRateCommand+0xe8>
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	2b7d      	cmp	r3, #125	@ 0x7d
 8000c78:	d02e      	beq.n	8000cd8 <processBitRateCommand+0xb8>
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	2b7d      	cmp	r3, #125	@ 0x7d
 8000c7e:	dc43      	bgt.n	8000d08 <processBitRateCommand+0xe8>
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	2b64      	cmp	r3, #100	@ 0x64
 8000c84:	d022      	beq.n	8000ccc <processBitRateCommand+0xac>
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	2b64      	cmp	r3, #100	@ 0x64
 8000c8a:	dc3d      	bgt.n	8000d08 <processBitRateCommand+0xe8>
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	2b32      	cmp	r3, #50	@ 0x32
 8000c90:	d016      	beq.n	8000cc0 <processBitRateCommand+0xa0>
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	2b32      	cmp	r3, #50	@ 0x32
 8000c96:	dc37      	bgt.n	8000d08 <processBitRateCommand+0xe8>
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	2b0a      	cmp	r3, #10
 8000c9c:	d003      	beq.n	8000ca6 <processBitRateCommand+0x86>
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	2b14      	cmp	r3, #20
 8000ca2:	d007      	beq.n	8000cb4 <processBitRateCommand+0x94>
 8000ca4:	e030      	b.n	8000d08 <processBitRateCommand+0xe8>
	case 10:
		hcan1.Init.Prescaler = 300;
 8000ca6:	4b23      	ldr	r3, [pc, #140]	@ (8000d34 <processBitRateCommand+0x114>)
 8000ca8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000cac:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	75fb      	strb	r3, [r7, #23]
		break;
 8000cb2:	e029      	b.n	8000d08 <processBitRateCommand+0xe8>
	case 20:
		hcan1.Init.Prescaler = 150;
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <processBitRateCommand+0x114>)
 8000cb6:	2296      	movs	r2, #150	@ 0x96
 8000cb8:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	75fb      	strb	r3, [r7, #23]
		break;
 8000cbe:	e023      	b.n	8000d08 <processBitRateCommand+0xe8>
	case 50:
		hcan1.Init.Prescaler = 60;
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <processBitRateCommand+0x114>)
 8000cc2:	223c      	movs	r2, #60	@ 0x3c
 8000cc4:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	75fb      	strb	r3, [r7, #23]
		break;
 8000cca:	e01d      	b.n	8000d08 <processBitRateCommand+0xe8>
	case 100:
		hcan1.Init.Prescaler = 30;
 8000ccc:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <processBitRateCommand+0x114>)
 8000cce:	221e      	movs	r2, #30
 8000cd0:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	75fb      	strb	r3, [r7, #23]
		break;
 8000cd6:	e017      	b.n	8000d08 <processBitRateCommand+0xe8>
	case 125:
		hcan1.Init.Prescaler = 24;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	@ (8000d34 <processBitRateCommand+0x114>)
 8000cda:	2218      	movs	r2, #24
 8000cdc:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	75fb      	strb	r3, [r7, #23]
		break;
 8000ce2:	e011      	b.n	8000d08 <processBitRateCommand+0xe8>
	case 250:
		hcan1.Init.Prescaler = 12;
 8000ce4:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <processBitRateCommand+0x114>)
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000cea:	2301      	movs	r3, #1
 8000cec:	75fb      	strb	r3, [r7, #23]
		break;
 8000cee:	e00b      	b.n	8000d08 <processBitRateCommand+0xe8>
	case 500:
		hcan1.Init.Prescaler = 6;
 8000cf0:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <processBitRateCommand+0x114>)
 8000cf2:	2206      	movs	r2, #6
 8000cf4:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	75fb      	strb	r3, [r7, #23]
		break;
 8000cfa:	e005      	b.n	8000d08 <processBitRateCommand+0xe8>
	case 1000:
		hcan1.Init.Prescaler = 3;
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d34 <processBitRateCommand+0x114>)
 8000cfe:	2203      	movs	r2, #3
 8000d00:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000d02:	2301      	movs	r3, #1
 8000d04:	75fb      	strb	r3, [r7, #23]
		break;
 8000d06:	bf00      	nop
	}
	if (idetified) {
 8000d08:	7dfb      	ldrb	r3, [r7, #23]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d00e      	beq.n	8000d2c <processBitRateCommand+0x10c>
		HAL_CAN_DeInit(&hcan1);
 8000d0e:	4809      	ldr	r0, [pc, #36]	@ (8000d34 <processBitRateCommand+0x114>)
 8000d10:	f001 f8fb 	bl	8001f0a <HAL_CAN_DeInit>
		HAL_CAN_Init(&hcan1);
 8000d14:	4807      	ldr	r0, [pc, #28]	@ (8000d34 <processBitRateCommand+0x114>)
 8000d16:	f000 fffd 	bl	8001d14 <HAL_CAN_Init>
		setSinfferCANFilter();
 8000d1a:	f7ff fe45 	bl	80009a8 <setSinfferCANFilter>
		HAL_CAN_Start(&hcan1);
 8000d1e:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <processBitRateCommand+0x114>)
 8000d20:	f001 f9f6 	bl	8002110 <HAL_CAN_Start>
		HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000d24:	2102      	movs	r1, #2
 8000d26:	4803      	ldr	r0, [pc, #12]	@ (8000d34 <processBitRateCommand+0x114>)
 8000d28:	f001 fc6c 	bl	8002604 <HAL_CAN_ActivateNotification>
	}
}
 8000d2c:	bf00      	nop
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	200002d0 	.word	0x200002d0
=======
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c42:	d055      	beq.n	8000cf0 <processBitRateCommand+0xdc>
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c4a:	dc57      	bgt.n	8000cfc <processBitRateCommand+0xe8>
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c52:	d047      	beq.n	8000ce4 <processBitRateCommand+0xd0>
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c5a:	dc4f      	bgt.n	8000cfc <processBitRateCommand+0xe8>
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	2bfa      	cmp	r3, #250	@ 0xfa
 8000c60:	d03a      	beq.n	8000cd8 <processBitRateCommand+0xc4>
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	2bfa      	cmp	r3, #250	@ 0xfa
 8000c66:	dc49      	bgt.n	8000cfc <processBitRateCommand+0xe8>
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	2b7d      	cmp	r3, #125	@ 0x7d
 8000c6c:	d02e      	beq.n	8000ccc <processBitRateCommand+0xb8>
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	2b7d      	cmp	r3, #125	@ 0x7d
 8000c72:	dc43      	bgt.n	8000cfc <processBitRateCommand+0xe8>
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	2b64      	cmp	r3, #100	@ 0x64
 8000c78:	d022      	beq.n	8000cc0 <processBitRateCommand+0xac>
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	2b64      	cmp	r3, #100	@ 0x64
 8000c7e:	dc3d      	bgt.n	8000cfc <processBitRateCommand+0xe8>
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	2b32      	cmp	r3, #50	@ 0x32
 8000c84:	d016      	beq.n	8000cb4 <processBitRateCommand+0xa0>
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	2b32      	cmp	r3, #50	@ 0x32
 8000c8a:	dc37      	bgt.n	8000cfc <processBitRateCommand+0xe8>
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	2b0a      	cmp	r3, #10
 8000c90:	d003      	beq.n	8000c9a <processBitRateCommand+0x86>
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	2b14      	cmp	r3, #20
 8000c96:	d007      	beq.n	8000ca8 <processBitRateCommand+0x94>
 8000c98:	e030      	b.n	8000cfc <processBitRateCommand+0xe8>
	case 10:
		hcan1.Init.Prescaler = 300;
 8000c9a:	4b25      	ldr	r3, [pc, #148]	@ (8000d30 <processBitRateCommand+0x11c>)
 8000c9c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000ca0:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	75fb      	strb	r3, [r7, #23]
		break;
 8000ca6:	e029      	b.n	8000cfc <processBitRateCommand+0xe8>
	case 20:
		hcan1.Init.Prescaler = 150;
 8000ca8:	4b21      	ldr	r3, [pc, #132]	@ (8000d30 <processBitRateCommand+0x11c>)
 8000caa:	2296      	movs	r2, #150	@ 0x96
 8000cac:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	75fb      	strb	r3, [r7, #23]
		break;
 8000cb2:	e023      	b.n	8000cfc <processBitRateCommand+0xe8>
	case 50:
		hcan1.Init.Prescaler = 60;
 8000cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d30 <processBitRateCommand+0x11c>)
 8000cb6:	223c      	movs	r2, #60	@ 0x3c
 8000cb8:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	75fb      	strb	r3, [r7, #23]
		break;
 8000cbe:	e01d      	b.n	8000cfc <processBitRateCommand+0xe8>
	case 100:
		hcan1.Init.Prescaler = 30;
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d30 <processBitRateCommand+0x11c>)
 8000cc2:	221e      	movs	r2, #30
 8000cc4:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	75fb      	strb	r3, [r7, #23]
		break;
 8000cca:	e017      	b.n	8000cfc <processBitRateCommand+0xe8>
	case 125:
		hcan1.Init.Prescaler = 24;
 8000ccc:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <processBitRateCommand+0x11c>)
 8000cce:	2218      	movs	r2, #24
 8000cd0:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	75fb      	strb	r3, [r7, #23]
		break;
 8000cd6:	e011      	b.n	8000cfc <processBitRateCommand+0xe8>
	case 250:
		hcan1.Init.Prescaler = 12;
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <processBitRateCommand+0x11c>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	75fb      	strb	r3, [r7, #23]
		break;
 8000ce2:	e00b      	b.n	8000cfc <processBitRateCommand+0xe8>
	case 500:
		hcan1.Init.Prescaler = 6;
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <processBitRateCommand+0x11c>)
 8000ce6:	2206      	movs	r2, #6
 8000ce8:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000cea:	2301      	movs	r3, #1
 8000cec:	75fb      	strb	r3, [r7, #23]
		break;
 8000cee:	e005      	b.n	8000cfc <processBitRateCommand+0xe8>
	case 1000:
		hcan1.Init.Prescaler = 3;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <processBitRateCommand+0x11c>)
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	605a      	str	r2, [r3, #4]
		idetified = true;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	75fb      	strb	r3, [r7, #23]
		break;
 8000cfa:	bf00      	nop
	}
	if (idetified) {
 8000cfc:	7dfb      	ldrb	r3, [r7, #23]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d012      	beq.n	8000d28 <processBitRateCommand+0x114>
		HAL_CAN_DeInit(&hcan1);
 8000d02:	480b      	ldr	r0, [pc, #44]	@ (8000d30 <processBitRateCommand+0x11c>)
 8000d04:	f001 f963 	bl	8001fce <HAL_CAN_DeInit>
		HAL_CAN_Init(&hcan1);
 8000d08:	4809      	ldr	r0, [pc, #36]	@ (8000d30 <processBitRateCommand+0x11c>)
 8000d0a:	f001 f865 	bl	8001dd8 <HAL_CAN_Init>
		setSinfferCANFilter();
 8000d0e:	f7ff fe4b 	bl	80009a8 <setSinfferCANFilter>
		HAL_CAN_Start(&hcan1);
 8000d12:	4807      	ldr	r0, [pc, #28]	@ (8000d30 <processBitRateCommand+0x11c>)
 8000d14:	f001 fa5e 	bl	80021d4 <HAL_CAN_Start>
		if (snifferAtivityStatus != SNIFFER_STOPPED) {
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <processBitRateCommand+0x120>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d003      	beq.n	8000d28 <processBitRateCommand+0x114>
			HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000d20:	2102      	movs	r1, #2
 8000d22:	4803      	ldr	r0, [pc, #12]	@ (8000d30 <processBitRateCommand+0x11c>)
 8000d24:	f001 fcd0 	bl	80026c8 <HAL_CAN_ActivateNotification>
		}
	}
}
 8000d28:	bf00      	nop
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	200002d0 	.word	0x200002d0
 8000d34:	20000388 	.word	0x20000388
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

08000d38 <processLoopBackModeCommand>:
void processLoopBackModeCommand(char *decodedCommand) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

	uint8_t mode[2];
	bool idetified = false;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]
	substr((char*) decodedCommand, (char*) mode, 1, 2);
 8000d44:	f107 010c 	add.w	r1, r7, #12
 8000d48:	2302      	movs	r3, #2
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff fdaf 	bl	80008b0 <substr>
	if (!strcmp((char*) mode, "LB")) {
 8000d52:	f107 030c 	add.w	r3, r7, #12
<<<<<<< HEAD
 8000d56:	4929      	ldr	r1, [pc, #164]	@ (8000dfc <processLoopBackModeCommand+0xc4>)
=======
 8000d56:	492b      	ldr	r1, [pc, #172]	@ (8000e04 <processLoopBackModeCommand+0xcc>)
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fa39 	bl	80001d0 <strcmp>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d106      	bne.n	8000d72 <processLoopBackModeCommand+0x3a>
		hcan1.Init.Mode = CAN_MODE_LOOPBACK;
<<<<<<< HEAD
 8000d64:	4b26      	ldr	r3, [pc, #152]	@ (8000e00 <processLoopBackModeCommand+0xc8>)
=======
 8000d64:	4b28      	ldr	r3, [pc, #160]	@ (8000e08 <processLoopBackModeCommand+0xd0>)
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
 8000d66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d6a:	609a      	str	r2, [r3, #8]
		idetified = true;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	e02d      	b.n	8000dce <processLoopBackModeCommand+0x96>
	} else if (!strcmp((char*) mode, "SM")) {
 8000d72:	f107 030c 	add.w	r3, r7, #12
<<<<<<< HEAD
 8000d76:	4923      	ldr	r1, [pc, #140]	@ (8000e04 <processLoopBackModeCommand+0xcc>)
=======
 8000d76:	4925      	ldr	r1, [pc, #148]	@ (8000e0c <processLoopBackModeCommand+0xd4>)
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fa29 	bl	80001d0 <strcmp>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d106      	bne.n	8000d92 <processLoopBackModeCommand+0x5a>
		hcan1.Init.Mode = CAN_MODE_SILENT;
<<<<<<< HEAD
 8000d84:	4b1e      	ldr	r3, [pc, #120]	@ (8000e00 <processLoopBackModeCommand+0xc8>)
=======
 8000d84:	4b20      	ldr	r3, [pc, #128]	@ (8000e08 <processLoopBackModeCommand+0xd0>)
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
 8000d86:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000d8a:	609a      	str	r2, [r3, #8]
		idetified = true;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
 8000d90:	e01d      	b.n	8000dce <processLoopBackModeCommand+0x96>
	} else if (!strcmp((char*) mode, "NM")) {
 8000d92:	f107 030c 	add.w	r3, r7, #12
<<<<<<< HEAD
 8000d96:	491c      	ldr	r1, [pc, #112]	@ (8000e08 <processLoopBackModeCommand+0xd0>)
=======
 8000d96:	491e      	ldr	r1, [pc, #120]	@ (8000e10 <processLoopBackModeCommand+0xd8>)
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fa19 	bl	80001d0 <strcmp>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d105      	bne.n	8000db0 <processLoopBackModeCommand+0x78>
		hcan1.Init.Mode = CAN_MODE_NORMAL;
<<<<<<< HEAD
 8000da4:	4b16      	ldr	r3, [pc, #88]	@ (8000e00 <processLoopBackModeCommand+0xc8>)
=======
 8000da4:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <processLoopBackModeCommand+0xd0>)
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
		idetified = true;
 8000daa:	2301      	movs	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	e00e      	b.n	8000dce <processLoopBackModeCommand+0x96>
	} else if (!strcmp((char*) mode, "SL")) {
 8000db0:	f107 030c 	add.w	r3, r7, #12
<<<<<<< HEAD
 8000db4:	4915      	ldr	r1, [pc, #84]	@ (8000e0c <processLoopBackModeCommand+0xd4>)
=======
 8000db4:	4917      	ldr	r1, [pc, #92]	@ (8000e14 <processLoopBackModeCommand+0xdc>)
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fa0a 	bl	80001d0 <strcmp>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d105      	bne.n	8000dce <processLoopBackModeCommand+0x96>
		hcan1.Init.Mode = CAN_MODE_SILENT_LOOPBACK;
<<<<<<< HEAD
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <processLoopBackModeCommand+0xc8>)
=======
 8000dc2:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <processLoopBackModeCommand+0xd0>)
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
 8000dc4:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8000dc8:	609a      	str	r2, [r3, #8]
		idetified = true;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	73fb      	strb	r3, [r7, #15]
	}
	if (idetified) {
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	2b00      	cmp	r3, #0
<<<<<<< HEAD
 8000dd2:	d00e      	beq.n	8000df2 <processLoopBackModeCommand+0xba>
		HAL_CAN_DeInit(&hcan1);
 8000dd4:	480a      	ldr	r0, [pc, #40]	@ (8000e00 <processLoopBackModeCommand+0xc8>)
 8000dd6:	f001 f898 	bl	8001f0a <HAL_CAN_DeInit>
		HAL_CAN_Init(&hcan1);
 8000dda:	4809      	ldr	r0, [pc, #36]	@ (8000e00 <processLoopBackModeCommand+0xc8>)
 8000ddc:	f000 ff9a 	bl	8001d14 <HAL_CAN_Init>
		setSinfferCANFilter();
 8000de0:	f7ff fde2 	bl	80009a8 <setSinfferCANFilter>
		HAL_CAN_Start(&hcan1);
 8000de4:	4806      	ldr	r0, [pc, #24]	@ (8000e00 <processLoopBackModeCommand+0xc8>)
 8000de6:	f001 f993 	bl	8002110 <HAL_CAN_Start>
		HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000dea:	2102      	movs	r1, #2
 8000dec:	4804      	ldr	r0, [pc, #16]	@ (8000e00 <processLoopBackModeCommand+0xc8>)
 8000dee:	f001 fc09 	bl	8002604 <HAL_CAN_ActivateNotification>
	}
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	08008884 	.word	0x08008884
 8000e00:	200002d0 	.word	0x200002d0
 8000e04:	08008888 	.word	0x08008888
 8000e08:	0800888c 	.word	0x0800888c
 8000e0c:	08008890 	.word	0x08008890

08000e10 <processRebootCommand>:

void processRebootCommand() {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 8000e14:	f7ff fd16 	bl	8000844 <__NVIC_SystemReset>

08000e18 <setDatagramTypeIdentifer>:
=======
 8000dd2:	d012      	beq.n	8000dfa <processLoopBackModeCommand+0xc2>
		HAL_CAN_DeInit(&hcan1);
 8000dd4:	480c      	ldr	r0, [pc, #48]	@ (8000e08 <processLoopBackModeCommand+0xd0>)
 8000dd6:	f001 f8fa 	bl	8001fce <HAL_CAN_DeInit>
		HAL_CAN_Init(&hcan1);
 8000dda:	480b      	ldr	r0, [pc, #44]	@ (8000e08 <processLoopBackModeCommand+0xd0>)
 8000ddc:	f000 fffc 	bl	8001dd8 <HAL_CAN_Init>
		setSinfferCANFilter();
 8000de0:	f7ff fde2 	bl	80009a8 <setSinfferCANFilter>
		HAL_CAN_Start(&hcan1);
 8000de4:	4808      	ldr	r0, [pc, #32]	@ (8000e08 <processLoopBackModeCommand+0xd0>)
 8000de6:	f001 f9f5 	bl	80021d4 <HAL_CAN_Start>
		if (snifferAtivityStatus != SNIFFER_STOPPED) {
 8000dea:	4b0b      	ldr	r3, [pc, #44]	@ (8000e18 <processLoopBackModeCommand+0xe0>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <processLoopBackModeCommand+0xc2>
			HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000df2:	2102      	movs	r1, #2
 8000df4:	4804      	ldr	r0, [pc, #16]	@ (8000e08 <processLoopBackModeCommand+0xd0>)
 8000df6:	f001 fc67 	bl	80026c8 <HAL_CAN_ActivateNotification>
		}

	}
}
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	08008994 	.word	0x08008994
 8000e08:	200002d0 	.word	0x200002d0
 8000e0c:	08008998 	.word	0x08008998
 8000e10:	0800899c 	.word	0x0800899c
 8000e14:	080089a0 	.word	0x080089a0
 8000e18:	20000388 	.word	0x20000388

08000e1c <processActivitySniferComand>:

void processActivitySniferComand(char *decodedCommand) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

	uint8_t activityMode[3];
	substr((char*) decodedCommand, (char*) activityMode, 1, 3);
 8000e24:	f107 010c 	add.w	r1, r7, #12
 8000e28:	2303      	movs	r3, #3
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff fd3f 	bl	80008b0 <substr>

	if (!strcmp((char*) activityMode, "ON_")) {
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	4911      	ldr	r1, [pc, #68]	@ (8000e7c <processActivitySniferComand+0x60>)
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff f9c9 	bl	80001d0 <strcmp>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d107      	bne.n	8000e54 <processActivitySniferComand+0x38>
		snifferAtivityStatus = SNIFFER_ACTIVE;
 8000e44:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <processActivitySniferComand+0x64>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
		HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	480d      	ldr	r0, [pc, #52]	@ (8000e84 <processActivitySniferComand+0x68>)
 8000e4e:	f001 fc3b 	bl	80026c8 <HAL_CAN_ActivateNotification>
	else if (!strcmp((char*) activityMode, "OFF")) {
		HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
		snifferAtivityStatus = SNIFFER_STOPPED;

	}
}
 8000e52:	e00f      	b.n	8000e74 <processActivitySniferComand+0x58>
	else if (!strcmp((char*) activityMode, "OFF")) {
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	490b      	ldr	r1, [pc, #44]	@ (8000e88 <processActivitySniferComand+0x6c>)
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff f9b8 	bl	80001d0 <strcmp>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d106      	bne.n	8000e74 <processActivitySniferComand+0x58>
		HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e66:	2102      	movs	r1, #2
 8000e68:	4806      	ldr	r0, [pc, #24]	@ (8000e84 <processActivitySniferComand+0x68>)
 8000e6a:	f001 fc53 	bl	8002714 <HAL_CAN_DeactivateNotification>
		snifferAtivityStatus = SNIFFER_STOPPED;
 8000e6e:	4b04      	ldr	r3, [pc, #16]	@ (8000e80 <processActivitySniferComand+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	080089a4 	.word	0x080089a4
 8000e80:	20000388 	.word	0x20000388
 8000e84:	200002d0 	.word	0x200002d0
 8000e88:	080089a8 	.word	0x080089a8

08000e8c <processRebootCommand>:
void processRebootCommand() {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 8000e90:	f7ff fcd8 	bl	8000844 <__NVIC_SystemReset>

08000e94 <setDatagramTypeIdentifer>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
}

void setDatagramTypeIdentifer(uint32_t ide, uint32_t rtr, uint8_t *pExitBuffer,
		uint8_t *pCursor) {
<<<<<<< HEAD
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	603b      	str	r3, [r7, #0]
	if (ide == CAN_ID_STD) {
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d115      	bne.n	8000e58 <setDatagramTypeIdentifer+0x40>
		if (rtr == CAN_RTR_DATA) {
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d107      	bne.n	8000e42 <setDatagramTypeIdentifer+0x2a>
			pExitBuffer[*pCursor] = 't';
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	2274      	movs	r2, #116	@ 0x74
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	e022      	b.n	8000e88 <setDatagramTypeIdentifer+0x70>
		} else if (rtr == CAN_RTR_REMOTE) {
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d11f      	bne.n	8000e88 <setDatagramTypeIdentifer+0x70>
			pExitBuffer[*pCursor] = 'r';
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	2272      	movs	r2, #114	@ 0x72
 8000e54:	701a      	strb	r2, [r3, #0]
 8000e56:	e017      	b.n	8000e88 <setDatagramTypeIdentifer+0x70>
		}
	} else if (ide == CAN_ID_EXT) {
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	d114      	bne.n	8000e88 <setDatagramTypeIdentifer+0x70>

		if (rtr == CAN_RTR_DATA) {
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d107      	bne.n	8000e74 <setDatagramTypeIdentifer+0x5c>
			pExitBuffer[*pCursor] = 'T';
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	2254      	movs	r2, #84	@ 0x54
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	e009      	b.n	8000e88 <setDatagramTypeIdentifer+0x70>
		} else if (rtr == CAN_RTR_REMOTE) {
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d106      	bne.n	8000e88 <setDatagramTypeIdentifer+0x70>
			pExitBuffer[*pCursor] = 'R';
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4413      	add	r3, r2
 8000e84:	2252      	movs	r2, #82	@ 0x52
 8000e86:	701a      	strb	r2, [r3, #0]
		}
	}
	*pCursor = *pCursor + 1;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	701a      	strb	r2, [r3, #0]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <setFormatedDatagramIdentifer>:

void setFormatedDatagramIdentifer(uint32_t idNum, uint8_t *pExitBuffer,uint8_t *pCursor, int len) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]

	char *id = (char*) pvPortMalloc(sizeof(char) * (len + 1));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f006 fdca 	bl	8007a4c <pvPortMalloc>
 8000eb8:	6138      	str	r0, [r7, #16]
	int numOfDigits = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
	int valueToConsume = idNum;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	61bb      	str	r3, [r7, #24]

	while (valueToConsume != 0) {
 8000ec2:	e00a      	b.n	8000eda <setFormatedDatagramIdentifer+0x3a>
		valueToConsume /= 10;     // n = n/10
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	4a20      	ldr	r2, [pc, #128]	@ (8000f48 <setFormatedDatagramIdentifer+0xa8>)
 8000ec8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ecc:	1092      	asrs	r2, r2, #2
 8000ece:	17db      	asrs	r3, r3, #31
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	61bb      	str	r3, [r7, #24]
		++numOfDigits;
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	61fb      	str	r3, [r7, #28]
	while (valueToConsume != 0) {
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1f1      	bne.n	8000ec4 <setFormatedDatagramIdentifer+0x24>
	}

	sprintf(id + (len - numOfDigits), "%d", (int) idNum);
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4413      	add	r3, r2
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	4917      	ldr	r1, [pc, #92]	@ (8000f4c <setFormatedDatagramIdentifer+0xac>)
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f007 f813 	bl	8007f1c <siprintf>
	for (int eraser = 0; eraser < (len - numOfDigits); eraser++) {
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	e007      	b.n	8000f0c <setFormatedDatagramIdentifer+0x6c>
		id[eraser] = '0';
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4413      	add	r3, r2
 8000f02:	2230      	movs	r2, #48	@ 0x30
 8000f04:	701a      	strb	r2, [r3, #0]
	for (int eraser = 0; eraser < (len - numOfDigits); eraser++) {
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	dbf1      	blt.n	8000efc <setFormatedDatagramIdentifer+0x5c>
	}
	strcpy((char*) pExitBuffer + *pCursor, id);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	4413      	add	r3, r2
 8000f22:	6939      	ldr	r1, [r7, #16]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f007 f84d 	bl	8007fc4 <strcpy>
	vPortFree(id);
 8000f2a:	6938      	ldr	r0, [r7, #16]
 8000f2c:	f006 fe56 	bl	8007bdc <vPortFree>
	*pCursor = *pCursor + len;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	781a      	ldrb	r2, [r3, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	4413      	add	r3, r2
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	701a      	strb	r2, [r3, #0]
}
 8000f40:	bf00      	nop
 8000f42:	3720      	adds	r7, #32
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	66666667 	.word	0x66666667
 8000f4c:	08008894 	.word	0x08008894

08000f50 <setDatagramIdentifer>:

void setDatagramIdentifer(CAN_RxHeaderTypeDef receivedCANHeader,
		uint8_t *pExitBuffer, uint8_t *pCursor) {
 8000f50:	b084      	sub	sp, #16
 8000f52:	b580      	push	{r7, lr}
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	f107 0c08 	add.w	ip, r7, #8
 8000f5a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (receivedCANHeader.IDE == CAN_ID_EXT) {
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	2b04      	cmp	r3, #4
 8000f62:	d105      	bne.n	8000f70 <setDatagramIdentifer+0x20>
		setFormatedDatagramIdentifer(receivedCANHeader.ExtId, pExitBuffer,
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	2309      	movs	r3, #9
 8000f68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000f6c:	f7ff ff98 	bl	8000ea0 <setFormatedDatagramIdentifer>
				pCursor, 9);
	}
	if (receivedCANHeader.IDE == CAN_ID_STD) {
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d105      	bne.n	8000f82 <setDatagramIdentifer+0x32>
		setFormatedDatagramIdentifer(receivedCANHeader.StdId, pExitBuffer,
 8000f76:	68b8      	ldr	r0, [r7, #8]
 8000f78:	2304      	movs	r3, #4
 8000f7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000f7e:	f7ff ff8f 	bl	8000ea0 <setFormatedDatagramIdentifer>
				pCursor, 4);
	}
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f8a:	b004      	add	sp, #16
 8000f8c:	4770      	bx	lr
	...

08000f90 <setDLC>:

void setDLC(uint32_t dlc, uint8_t *pExitBuffer, uint8_t *pCursor) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
	sprintf((char*) pExitBuffer + *pCursor, "%d", (int) dlc);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4906      	ldr	r1, [pc, #24]	@ (8000fc4 <setDLC+0x34>)
 8000faa:	4618      	mov	r0, r3
 8000fac:	f006 ffb6 	bl	8007f1c <siprintf>
	*pCursor = *pCursor + 1;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	701a      	strb	r2, [r3, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	08008894 	.word	0x08008894

08000fc8 <setData>:

void setData(uint8_t *data, int dlc, uint8_t *pExitBuffer, uint8_t *pCursor) {
 8000fc8:	b480      	push	{r7}
 8000fca:	b087      	sub	sp, #28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	603b      	str	r3, [r7, #0]
	for (int counter = 0; counter < dlc; counter++) {
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	e00f      	b.n	8000ffc <setData+0x34>
		pExitBuffer[*pCursor + counter] = data[counter];
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	441a      	add	r2, r3
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	440b      	add	r3, r1
 8000fec:	4619      	mov	r1, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	440b      	add	r3, r1
 8000ff2:	7812      	ldrb	r2, [r2, #0]
 8000ff4:	701a      	strb	r2, [r3, #0]
	for (int counter = 0; counter < dlc; counter++) {
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	429a      	cmp	r2, r3
 8001002:	dbeb      	blt.n	8000fdc <setData+0x14>
	}
	*pCursor = *pCursor + dlc;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	781a      	ldrb	r2, [r3, #0]
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	4413      	add	r3, r2
 800100e:	b2da      	uxtb	r2, r3
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	701a      	strb	r2, [r3, #0]
}
 8001014:	bf00      	nop
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <serializeDatagram>:

uint8_t serializeDatagram(uint8_t *pExitBuffer,CAN_RxHeaderTypeDef receivedCANHeader, uint8_t *rxData) {
 8001020:	b084      	sub	sp, #16
 8001022:	b590      	push	{r4, r7, lr}
 8001024:	b08b      	sub	sp, #44	@ 0x2c
 8001026:	af06      	add	r7, sp, #24
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800102e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	uint8_t cursor = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]

	setDatagramTypeIdentifer(receivedCANHeader.IDE, receivedCANHeader.RTR,
 8001036:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001038:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800103a:	f107 030f 	add.w	r3, r7, #15
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	f7ff feea 	bl	8000e18 <setDatagramTypeIdentifer>
			pExitBuffer, &cursor);
	setDatagramIdentifer(receivedCANHeader, pExitBuffer, &cursor);
 8001044:	f107 030f 	add.w	r3, r7, #15
 8001048:	9304      	str	r3, [sp, #16]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	9303      	str	r3, [sp, #12]
 800104e:	466c      	mov	r4, sp
 8001050:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001054:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001058:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800105c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001060:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001062:	f7ff ff75 	bl	8000f50 <setDatagramIdentifer>
	setDLC(receivedCANHeader.DLC, pExitBuffer, &cursor);
 8001066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001068:	f107 020f 	add.w	r2, r7, #15
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff8e 	bl	8000f90 <setDLC>
	if (receivedCANHeader.RTR == CAN_RTR_DATA) {
 8001074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001076:	2b00      	cmp	r3, #0
 8001078:	d107      	bne.n	800108a <serializeDatagram+0x6a>
		setData(rxData, receivedCANHeader.DLC, pExitBuffer, &cursor);
 800107a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800107c:	4619      	mov	r1, r3
 800107e:	f107 030f 	add.w	r3, r7, #15
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001086:	f7ff ff9f 	bl	8000fc8 <setData>
	}

	return cursor;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001096:	b004      	add	sp, #16
 8001098:	4770      	bx	lr
	...

0800109c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance) {
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_UART_RxCpltCallback+0x28>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d105      	bne.n	80010bc <HAL_UART_RxCpltCallback+0x20>
		osSignalSet(receiveCommandsTaskId, osAnySignal);
 80010b0:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <HAL_UART_RxCpltCallback+0x2c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f004 f92a 	bl	8005310 <osSignalSet>

	}
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200002f8 	.word	0x200002f8
 80010c8:	20000338 	.word	0x20000338

080010cc <HAL_CAN_RxFifo0MsgPendingCallback>:


 void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxMessageHeader,rxDataReceived) == HAL_OK) {
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80010d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80010d8:	2100      	movs	r1, #0
 80010da:	480c      	ldr	r0, [pc, #48]	@ (800110c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80010dc:	f001 f980 	bl	80023e0 <HAL_CAN_GetRxMessage>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d105      	bne.n	80010f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
  		osSignalSet(receivedDatagramTaskId, osAnySignal);
 80010e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f004 f90f 	bl	8005310 <osSignalSet>
  	}
  	HAL_GPIO_TogglePin(RED_LED_CANRX_GPIO_Port,RED_LED_CANRX_Pin);
 80010f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010f6:	4807      	ldr	r0, [pc, #28]	@ (8001114 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80010f8:	f002 f8c1 	bl	800327e <HAL_GPIO_TogglePin>
=======
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	603b      	str	r3, [r7, #0]
	if (ide == CAN_ID_STD) {
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d115      	bne.n	8000ed4 <setDatagramTypeIdentifer+0x40>
		if (rtr == CAN_RTR_DATA) {
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d107      	bne.n	8000ebe <setDatagramTypeIdentifer+0x2a>
			pExitBuffer[*pCursor] = 't';
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	2274      	movs	r2, #116	@ 0x74
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	e022      	b.n	8000f04 <setDatagramTypeIdentifer+0x70>
		} else if (rtr == CAN_RTR_REMOTE) {
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d11f      	bne.n	8000f04 <setDatagramTypeIdentifer+0x70>
			pExitBuffer[*pCursor] = 'r';
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	2272      	movs	r2, #114	@ 0x72
 8000ed0:	701a      	strb	r2, [r3, #0]
 8000ed2:	e017      	b.n	8000f04 <setDatagramTypeIdentifer+0x70>
		}
	} else if (ide == CAN_ID_EXT) {
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	d114      	bne.n	8000f04 <setDatagramTypeIdentifer+0x70>

		if (rtr == CAN_RTR_DATA) {
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d107      	bne.n	8000ef0 <setDatagramTypeIdentifer+0x5c>
			pExitBuffer[*pCursor] = 'T';
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	2254      	movs	r2, #84	@ 0x54
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	e009      	b.n	8000f04 <setDatagramTypeIdentifer+0x70>
		} else if (rtr == CAN_RTR_REMOTE) {
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d106      	bne.n	8000f04 <setDatagramTypeIdentifer+0x70>
			pExitBuffer[*pCursor] = 'R';
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4413      	add	r3, r2
 8000f00:	2252      	movs	r2, #82	@ 0x52
 8000f02:	701a      	strb	r2, [r3, #0]
		}
	}
	*pCursor = *pCursor + 1;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	701a      	strb	r2, [r3, #0]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <setFormatedDatagramIdentifer>:

void setFormatedDatagramIdentifer(uint32_t idNum, uint8_t *pExitBuffer,uint8_t *pCursor, int len) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	603b      	str	r3, [r7, #0]

	char *id = (char*) pvPortMalloc(sizeof(char) * (len + 1));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f006 fe14 	bl	8007b5c <pvPortMalloc>
 8000f34:	6138      	str	r0, [r7, #16]
	int numOfDigits = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
	int valueToConsume = idNum;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	61bb      	str	r3, [r7, #24]

	while (valueToConsume != 0) {
 8000f3e:	e00a      	b.n	8000f56 <setFormatedDatagramIdentifer+0x3a>
		valueToConsume /= 10;     // n = n/10
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	4a20      	ldr	r2, [pc, #128]	@ (8000fc4 <setFormatedDatagramIdentifer+0xa8>)
 8000f44:	fb82 1203 	smull	r1, r2, r2, r3
 8000f48:	1092      	asrs	r2, r2, #2
 8000f4a:	17db      	asrs	r3, r3, #31
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	61bb      	str	r3, [r7, #24]
		++numOfDigits;
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	3301      	adds	r3, #1
 8000f54:	61fb      	str	r3, [r7, #28]
	while (valueToConsume != 0) {
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1f1      	bne.n	8000f40 <setFormatedDatagramIdentifer+0x24>
	}

	sprintf(id + (len - numOfDigits), "%d", (int) idNum);
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	461a      	mov	r2, r3
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4413      	add	r3, r2
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	4917      	ldr	r1, [pc, #92]	@ (8000fc8 <setFormatedDatagramIdentifer+0xac>)
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f007 f85d 	bl	800802c <siprintf>
	for (int eraser = 0; eraser < (len - numOfDigits); eraser++) {
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	e007      	b.n	8000f88 <setFormatedDatagramIdentifer+0x6c>
		id[eraser] = '0';
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	2230      	movs	r2, #48	@ 0x30
 8000f80:	701a      	strb	r2, [r3, #0]
	for (int eraser = 0; eraser < (len - numOfDigits); eraser++) {
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3301      	adds	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	dbf1      	blt.n	8000f78 <setFormatedDatagramIdentifer+0x5c>
	}
	strcpy((char*) pExitBuffer + *pCursor, id);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	6939      	ldr	r1, [r7, #16]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f007 f897 	bl	80080d4 <strcpy>
	vPortFree(id);
 8000fa6:	6938      	ldr	r0, [r7, #16]
 8000fa8:	f006 fea0 	bl	8007cec <vPortFree>
	*pCursor = *pCursor + len;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	781a      	ldrb	r2, [r3, #0]
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	4413      	add	r3, r2
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	701a      	strb	r2, [r3, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	3720      	adds	r7, #32
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	66666667 	.word	0x66666667
 8000fc8:	080089ac 	.word	0x080089ac

08000fcc <setDatagramIdentifer>:

void setDatagramIdentifer(CAN_RxHeaderTypeDef receivedCANHeader,
		uint8_t *pExitBuffer, uint8_t *pCursor) {
 8000fcc:	b084      	sub	sp, #16
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	f107 0c08 	add.w	ip, r7, #8
 8000fd6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (receivedCANHeader.IDE == CAN_ID_EXT) {
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d105      	bne.n	8000fec <setDatagramIdentifer+0x20>
		setFormatedDatagramIdentifer(receivedCANHeader.ExtId, pExitBuffer,
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	2309      	movs	r3, #9
 8000fe4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000fe6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000fe8:	f7ff ff98 	bl	8000f1c <setFormatedDatagramIdentifer>
				pCursor, 9);
	}
	if (receivedCANHeader.IDE == CAN_ID_STD) {
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d105      	bne.n	8000ffe <setDatagramIdentifer+0x32>
		setFormatedDatagramIdentifer(receivedCANHeader.StdId, pExitBuffer,
 8000ff2:	68b8      	ldr	r0, [r7, #8]
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ff8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000ffa:	f7ff ff8f 	bl	8000f1c <setFormatedDatagramIdentifer>
				pCursor, 4);
	}
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001006:	b004      	add	sp, #16
 8001008:	4770      	bx	lr
	...

0800100c <setDLC>:

void setDLC(uint32_t dlc, uint8_t *pExitBuffer, uint8_t *pCursor) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
	sprintf((char*) pExitBuffer + *pCursor, "%d", (int) dlc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	4413      	add	r3, r2
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	4906      	ldr	r1, [pc, #24]	@ (8001040 <setDLC+0x34>)
 8001026:	4618      	mov	r0, r3
 8001028:	f007 f800 	bl	800802c <siprintf>
	*pCursor = *pCursor + 1;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	b2da      	uxtb	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	701a      	strb	r2, [r3, #0]
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	080089ac 	.word	0x080089ac

08001044 <setData>:

void setData(uint8_t *data, int dlc, uint8_t *pExitBuffer, uint8_t *pCursor) {
 8001044:	b480      	push	{r7}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	603b      	str	r3, [r7, #0]
	for (int counter = 0; counter < dlc; counter++) {
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	e00f      	b.n	8001078 <setData+0x34>
		pExitBuffer[*pCursor + counter] = data[counter];
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	441a      	add	r2, r3
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	4619      	mov	r1, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	440b      	add	r3, r1
 8001068:	4619      	mov	r1, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	440b      	add	r3, r1
 800106e:	7812      	ldrb	r2, [r2, #0]
 8001070:	701a      	strb	r2, [r3, #0]
	for (int counter = 0; counter < dlc; counter++) {
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	3301      	adds	r3, #1
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	429a      	cmp	r2, r3
 800107e:	dbeb      	blt.n	8001058 <setData+0x14>
	}
	*pCursor = *pCursor + dlc;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	781a      	ldrb	r2, [r3, #0]
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	4413      	add	r3, r2
 800108a:	b2da      	uxtb	r2, r3
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	701a      	strb	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	371c      	adds	r7, #28
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <serializeDatagram>:

uint8_t serializeDatagram(uint8_t *pExitBuffer,CAN_RxHeaderTypeDef receivedCANHeader, uint8_t *rxData) {
 800109c:	b084      	sub	sp, #16
 800109e:	b590      	push	{r4, r7, lr}
 80010a0:	b08b      	sub	sp, #44	@ 0x2c
 80010a2:	af06      	add	r7, sp, #24
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80010aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	uint8_t cursor = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	73fb      	strb	r3, [r7, #15]

	setDatagramTypeIdentifer(receivedCANHeader.IDE, receivedCANHeader.RTR,
 80010b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80010b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80010b6:	f107 030f 	add.w	r3, r7, #15
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	f7ff feea 	bl	8000e94 <setDatagramTypeIdentifer>
			pExitBuffer, &cursor);
	setDatagramIdentifer(receivedCANHeader, pExitBuffer, &cursor);
 80010c0:	f107 030f 	add.w	r3, r7, #15
 80010c4:	9304      	str	r3, [sp, #16]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	9303      	str	r3, [sp, #12]
 80010ca:	466c      	mov	r4, sp
 80010cc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80010d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010de:	f7ff ff75 	bl	8000fcc <setDatagramIdentifer>
	setDLC(receivedCANHeader.DLC, pExitBuffer, &cursor);
 80010e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010e4:	f107 020f 	add.w	r2, r7, #15
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff ff8e 	bl	800100c <setDLC>
	if (receivedCANHeader.RTR == CAN_RTR_DATA) {
 80010f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d107      	bne.n	8001106 <serializeDatagram+0x6a>
		setData(rxData, receivedCANHeader.DLC, pExitBuffer, &cursor);
 80010f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010f8:	4619      	mov	r1, r3
 80010fa:	f107 030f 	add.w	r3, r7, #15
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001102:	f7ff ff9f 	bl	8001044 <setData>
	}

	return cursor;
 8001106:	7bfb      	ldrb	r3, [r7, #15]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001112:	b004      	add	sp, #16
 8001114:	4770      	bx	lr
	...

08001118 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance) {
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <HAL_UART_RxCpltCallback+0x28>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	429a      	cmp	r2, r3
 800112a:	d105      	bne.n	8001138 <HAL_UART_RxCpltCallback+0x20>
		osSignalSet(receiveCommandsTaskId, osAnySignal);
 800112c:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <HAL_UART_RxCpltCallback+0x2c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f004 f974 	bl	8005420 <osSignalSet>
	}
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200002f8 	.word	0x200002f8
 8001144:	2000033c 	.word	0x2000033c

08001148 <HAL_CAN_RxFifo0MsgPendingCallback>:


 void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxMessageHeader,rxDataReceived) == HAL_OK) {
 8001150:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001152:	4a0e      	ldr	r2, [pc, #56]	@ (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001154:	2100      	movs	r1, #0
 8001156:	480e      	ldr	r0, [pc, #56]	@ (8001190 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001158:	f001 f9a4 	bl	80024a4 <HAL_CAN_GetRxMessage>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d109      	bne.n	8001176 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
  		if (snifferAtivityStatus == SNIFFER_ACTIVE) {
 8001162:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d105      	bne.n	8001176 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
  			osSignalSet(receivedDatagramTaskId, osAnySignal);
 800116a:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f004 f955 	bl	8005420 <osSignalSet>

  		}
  	}
  	HAL_GPIO_TogglePin(RED_LED_CANRX_GPIO_Port,RED_LED_CANRX_Pin);
 8001176:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800117a:	4808      	ldr	r0, [pc, #32]	@ (800119c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800117c:	f002 f907 	bl	800338e <HAL_GPIO_TogglePin>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
//  	} else {
//  		sprintf(debugMessage, "Extended CAN ID: 0x%" PRIx32 "\r\n", rxMessageHeader.ExtId);
//  	}
//  	HAL_UART_Transmit(&huart3, (uint8_t*)debugMessage, strlen(debugMessage), HAL_MAX_DELAY);

 }
<<<<<<< HEAD
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	2000037c 	.word	0x2000037c
 8001108:	20000360 	.word	0x20000360
 800110c:	200002d0 	.word	0x200002d0
 8001110:	20000344 	.word	0x20000344
 8001114:	40020c00 	.word	0x40020c00

08001118 <main>:
=======
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000380 	.word	0x20000380
 800118c:	20000364 	.word	0x20000364
 8001190:	200002d0 	.word	0x200002d0
 8001194:	20000388 	.word	0x20000388
 8001198:	20000348 	.word	0x20000348
 800119c:	40020c00 	.word	0x40020c00

080011a0 <main>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b0a4      	sub	sp, #144	@ 0x90
 800111c:	af00      	add	r7, sp, #0
=======
 80011a0:	b5b0      	push	{r4, r5, r7, lr}
 80011a2:	b0aa      	sub	sp, #168	@ 0xa8
 80011a4:	af00      	add	r7, sp, #0
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 800111e:	f000 fd93 	bl	8001c48 <HAL_Init>
=======
 80011a6:	f000 fdb1 	bl	8001d0c <HAL_Init>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8001122:	f000 f8a7 	bl	8001274 <SystemClock_Config>
=======
 80011aa:	f000 f8c5 	bl	8001338 <SystemClock_Config>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 8001126:	f000 f96f 	bl	8001408 <MX_GPIO_Init>
  MX_CAN1_Init();
 800112a:	f000 f90d 	bl	8001348 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 800112e:	f000 f941 	bl	80013b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, rxUARTBuff, 1);
 8001132:	2201      	movs	r2, #1
 8001134:	493e      	ldr	r1, [pc, #248]	@ (8001230 <main+0x118>)
 8001136:	483f      	ldr	r0, [pc, #252]	@ (8001234 <main+0x11c>)
 8001138:	f003 f8a0 	bl	800427c <HAL_UART_Receive_IT>
	setSinfferCANFilter();
 800113c:	f7ff fc34 	bl	80009a8 <setSinfferCANFilter>

	/*Original code */
	HAL_CAN_Start(&hcan1);
 8001140:	483d      	ldr	r0, [pc, #244]	@ (8001238 <main+0x120>)
 8001142:	f000 ffe5 	bl	8002110 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001146:	2102      	movs	r1, #2
 8001148:	483b      	ldr	r0, [pc, #236]	@ (8001238 <main+0x120>)
 800114a:	f001 fa5b 	bl	8002604 <HAL_CAN_ActivateNotification>
=======
 80011ae:	f000 f98d 	bl	80014cc <MX_GPIO_Init>
  MX_CAN1_Init();
 80011b2:	f000 f92b 	bl	800140c <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80011b6:	f000 f95f 	bl	8001478 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, rxUARTBuff, 1);
 80011ba:	2201      	movs	r2, #1
 80011bc:	494a      	ldr	r1, [pc, #296]	@ (80012e8 <main+0x148>)
 80011be:	484b      	ldr	r0, [pc, #300]	@ (80012ec <main+0x14c>)
 80011c0:	f003 f8e4 	bl	800438c <HAL_UART_Receive_IT>
	setSinfferCANFilter();
 80011c4:	f7ff fbf0 	bl	80009a8 <setSinfferCANFilter>

	/*Original code */
	HAL_CAN_Start(&hcan1);
 80011c8:	4849      	ldr	r0, [pc, #292]	@ (80012f0 <main+0x150>)
 80011ca:	f001 f803 	bl	80021d4 <HAL_CAN_Start>
	if (snifferAtivityStatus != SNIFFER_STOPPED) {
 80011ce:	4b49      	ldr	r3, [pc, #292]	@ (80012f4 <main+0x154>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <main+0x3e>
		HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80011d6:	2102      	movs	r1, #2
 80011d8:	4845      	ldr	r0, [pc, #276]	@ (80012f0 <main+0x150>)
 80011da:	f001 fa75 	bl	80026c8 <HAL_CAN_ActivateNotification>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	pendingCommandsQueue = osMailCreate(osMailQ(pendingCommandsQueue), NULL); // create pendingCommandsQueue
<<<<<<< HEAD
 800114e:	2100      	movs	r1, #0
 8001150:	483a      	ldr	r0, [pc, #232]	@ (800123c <main+0x124>)
 8001152:	f004 fa69 	bl	8005628 <osMailCreate>
 8001156:	4603      	mov	r3, r0
 8001158:	4a39      	ldr	r2, [pc, #228]	@ (8001240 <main+0x128>)
 800115a:	6013      	str	r3, [r2, #0]
	canDatagramsQueue = osMailCreate(osMailQ(canDatagramsQueue), NULL);
 800115c:	2100      	movs	r1, #0
 800115e:	4839      	ldr	r0, [pc, #228]	@ (8001244 <main+0x12c>)
 8001160:	f004 fa62 	bl	8005628 <osMailCreate>
 8001164:	4603      	mov	r3, r0
 8001166:	4a38      	ldr	r2, [pc, #224]	@ (8001248 <main+0x130>)
 8001168:	6013      	str	r3, [r2, #0]
  /* definition and creation of defaultTask */

=======
 80011de:	2100      	movs	r1, #0
 80011e0:	4845      	ldr	r0, [pc, #276]	@ (80012f8 <main+0x158>)
 80011e2:	f004 faa9 	bl	8005738 <osMailCreate>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a44      	ldr	r2, [pc, #272]	@ (80012fc <main+0x15c>)
 80011ea:	6013      	str	r3, [r2, #0]
	canDatagramsQueue = osMailCreate(osMailQ(canDatagramsQueue), NULL);
 80011ec:	2100      	movs	r1, #0
 80011ee:	4844      	ldr	r0, [pc, #272]	@ (8001300 <main+0x160>)
 80011f0:	f004 faa2 	bl	8005738 <osMailCreate>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a43      	ldr	r2, [pc, #268]	@ (8001304 <main+0x164>)
 80011f8:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80011fa:	4b43      	ldr	r3, [pc, #268]	@ (8001308 <main+0x168>)
 80011fc:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8001200:	461d      	mov	r5, r3
 8001202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001206:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800120a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800120e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f004 f890 	bl	800533a <osThreadCreate>
 800121a:	4603      	mov	r3, r0
 800121c:	4a3b      	ldr	r2, [pc, #236]	@ (800130c <main+0x16c>)
 800121e:	6013      	str	r3, [r2, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /* USER CODE BEGIN RTOS_THREADS */

	osThreadDef(rcvCommandTask, rcvCommandThread, osPriorityRealtime, 0, 128);
<<<<<<< HEAD
 800116a:	4b38      	ldr	r3, [pc, #224]	@ (800124c <main+0x134>)
 800116c:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8001170:	461d      	mov	r5, r3
 8001172:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001176:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800117a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	receiveCommandsTaskId = osThreadCreate(osThread(rcvCommandTask), NULL);
 800117e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f004 f850 	bl	800522a <osThreadCreate>
 800118a:	4603      	mov	r3, r0
 800118c:	4a30      	ldr	r2, [pc, #192]	@ (8001250 <main+0x138>)
 800118e:	6013      	str	r3, [r2, #0]

	osThreadDef(executeCommandTask, executeCommandThread, osPriorityRealtime, 0,128);
 8001190:	4b30      	ldr	r3, [pc, #192]	@ (8001254 <main+0x13c>)
 8001192:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001196:	461d      	mov	r5, r3
 8001198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	executeCommmandtaskID = osThreadCreate(osThread(executeCommandTask), NULL);
 80011a4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f004 f83d 	bl	800522a <osThreadCreate>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a29      	ldr	r2, [pc, #164]	@ (8001258 <main+0x140>)
 80011b4:	6013      	str	r3, [r2, #0]

	osThreadDef(forwardDatagramsTask, fordwardDatagramsThread, osPriorityNormal,0, 640);
 80011b6:	4b29      	ldr	r3, [pc, #164]	@ (800125c <main+0x144>)
 80011b8:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80011bc:	461d      	mov	r5, r3
 80011be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	forwardDatagramTaskId = osThreadCreate(osThread(forwardDatagramsTask),NULL);
 80011ca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f004 f82a 	bl	800522a <osThreadCreate>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4a21      	ldr	r2, [pc, #132]	@ (8001260 <main+0x148>)
 80011da:	6013      	str	r3, [r2, #0]

	osThreadDef(receiveDatagramsTask, recieivedDatagramsThread,osPriorityNormal, 0, 640);
 80011dc:	4b21      	ldr	r3, [pc, #132]	@ (8001264 <main+0x14c>)
 80011de:	f107 0420 	add.w	r4, r7, #32
 80011e2:	461d      	mov	r5, r3
 80011e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	receivedDatagramTaskId = osThreadCreate(osThread(receiveDatagramsTask),NULL);
 80011f0:	f107 0320 	add.w	r3, r7, #32
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f004 f817 	bl	800522a <osThreadCreate>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001268 <main+0x150>)
 8001200:	6013      	str	r3, [r2, #0]

	osThreadDef(idleTask, idleThread, osPriorityIdle, 0, 128);
 8001202:	4b1a      	ldr	r3, [pc, #104]	@ (800126c <main+0x154>)
 8001204:	1d3c      	adds	r4, r7, #4
 8001206:	461d      	mov	r5, r3
 8001208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800120a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800120c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001210:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	idleTaskId = osThreadCreate(osThread(idleTask), NULL);
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f004 f806 	bl	800522a <osThreadCreate>
 800121e:	4603      	mov	r3, r0
 8001220:	4a13      	ldr	r2, [pc, #76]	@ (8001270 <main+0x158>)
 8001222:	6013      	str	r3, [r2, #0]

	bootLEDIndicator();
 8001224:	f7ff fb24 	bl	8000870 <bootLEDIndicator>
=======
 8001220:	4b3b      	ldr	r3, [pc, #236]	@ (8001310 <main+0x170>)
 8001222:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001226:	461d      	mov	r5, r3
 8001228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001230:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	receiveCommandsTaskId = osThreadCreate(osThread(rcvCommandTask), NULL);
 8001234:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f004 f87d 	bl	800533a <osThreadCreate>
 8001240:	4603      	mov	r3, r0
 8001242:	4a34      	ldr	r2, [pc, #208]	@ (8001314 <main+0x174>)
 8001244:	6013      	str	r3, [r2, #0]

	osThreadDef(executeCommandTask, executeCommandThread, osPriorityRealtime, 0,128);
 8001246:	4b34      	ldr	r3, [pc, #208]	@ (8001318 <main+0x178>)
 8001248:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800124c:	461d      	mov	r5, r3
 800124e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001252:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001256:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	executeCommmandtaskID = osThreadCreate(osThread(executeCommandTask), NULL);
 800125a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f004 f86a 	bl	800533a <osThreadCreate>
 8001266:	4603      	mov	r3, r0
 8001268:	4a2c      	ldr	r2, [pc, #176]	@ (800131c <main+0x17c>)
 800126a:	6013      	str	r3, [r2, #0]

	osThreadDef(forwardDatagramsTask, fordwardDatagramsThread, osPriorityNormal,0, 640);
 800126c:	4b2c      	ldr	r3, [pc, #176]	@ (8001320 <main+0x180>)
 800126e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001272:	461d      	mov	r5, r3
 8001274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001278:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800127c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	forwardDatagramTaskId = osThreadCreate(osThread(forwardDatagramsTask),NULL);
 8001280:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f004 f857 	bl	800533a <osThreadCreate>
 800128c:	4603      	mov	r3, r0
 800128e:	4a25      	ldr	r2, [pc, #148]	@ (8001324 <main+0x184>)
 8001290:	6013      	str	r3, [r2, #0]

	osThreadDef(receiveDatagramsTask, recieivedDatagramsThread,osPriorityNormal, 0, 640);
 8001292:	4b25      	ldr	r3, [pc, #148]	@ (8001328 <main+0x188>)
 8001294:	f107 041c 	add.w	r4, r7, #28
 8001298:	461d      	mov	r5, r3
 800129a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800129c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800129e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	receivedDatagramTaskId = osThreadCreate(osThread(receiveDatagramsTask),NULL);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f004 f844 	bl	800533a <osThreadCreate>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4a1d      	ldr	r2, [pc, #116]	@ (800132c <main+0x18c>)
 80012b6:	6013      	str	r3, [r2, #0]

	osThreadDef(idleTask, idleThread, osPriorityIdle, 0, 128);
 80012b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001330 <main+0x190>)
 80012ba:	463c      	mov	r4, r7
 80012bc:	461d      	mov	r5, r3
 80012be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	idleTaskId = osThreadCreate(osThread(idleTask), NULL);
 80012ca:	463b      	mov	r3, r7
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f004 f833 	bl	800533a <osThreadCreate>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4a17      	ldr	r2, [pc, #92]	@ (8001334 <main+0x194>)
 80012d8:	6013      	str	r3, [r2, #0]

	bootLEDIndicator();
 80012da:	f7ff fac9 	bl	8000870 <bootLEDIndicator>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
<<<<<<< HEAD
 8001228:	f003 fff8 	bl	800521c <osKernelStart>
=======
 80012de:	f004 f825 	bl	800532c <osKernelStart>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
<<<<<<< HEAD
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <main+0x114>
 8001230:	2000035c 	.word	0x2000035c
 8001234:	200002f8 	.word	0x200002f8
 8001238:	200002d0 	.word	0x200002d0
 800123c:	0800898c 	.word	0x0800898c
 8001240:	20000350 	.word	0x20000350
 8001244:	08008998 	.word	0x08008998
 8001248:	20000358 	.word	0x20000358
 800124c:	080088a8 	.word	0x080088a8
 8001250:	20000338 	.word	0x20000338
 8001254:	080088d8 	.word	0x080088d8
 8001258:	2000033c 	.word	0x2000033c
 800125c:	0800890c 	.word	0x0800890c
 8001260:	20000340 	.word	0x20000340
 8001264:	08008940 	.word	0x08008940
 8001268:	20000344 	.word	0x20000344
 800126c:	08008968 	.word	0x08008968
 8001270:	20000348 	.word	0x20000348

08001274 <SystemClock_Config>:
=======
 80012e2:	bf00      	nop
 80012e4:	e7fd      	b.n	80012e2 <main+0x142>
 80012e6:	bf00      	nop
 80012e8:	20000360 	.word	0x20000360
 80012ec:	200002f8 	.word	0x200002f8
 80012f0:	200002d0 	.word	0x200002d0
 80012f4:	20000388 	.word	0x20000388
 80012f8:	08008acc 	.word	0x08008acc
 80012fc:	20000354 	.word	0x20000354
 8001300:	08008ad8 	.word	0x08008ad8
 8001304:	2000035c 	.word	0x2000035c
 8001308:	080089bc 	.word	0x080089bc
 800130c:	20000338 	.word	0x20000338
 8001310:	080089e8 	.word	0x080089e8
 8001314:	2000033c 	.word	0x2000033c
 8001318:	08008a18 	.word	0x08008a18
 800131c:	20000340 	.word	0x20000340
 8001320:	08008a4c 	.word	0x08008a4c
 8001324:	20000344 	.word	0x20000344
 8001328:	08008a80 	.word	0x08008a80
 800132c:	20000348 	.word	0x20000348
 8001330:	08008aa8 	.word	0x08008aa8
 8001334:	2000034c 	.word	0x2000034c

08001338 <SystemClock_Config>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8001274:	b580      	push	{r7, lr}
 8001276:	b094      	sub	sp, #80	@ 0x50
 8001278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127a:	f107 0320 	add.w	r3, r7, #32
 800127e:	2230      	movs	r2, #48	@ 0x30
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f006 fe6a 	bl	8007f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
=======
 8001338:	b580      	push	{r7, lr}
 800133a:	b094      	sub	sp, #80	@ 0x50
 800133c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133e:	f107 0320 	add.w	r3, r7, #32
 8001342:	2230      	movs	r2, #48	@ 0x30
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f006 fe90 	bl	800806c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	4b28      	ldr	r3, [pc, #160]	@ (8001340 <SystemClock_Config+0xcc>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a0:	4a27      	ldr	r2, [pc, #156]	@ (8001340 <SystemClock_Config+0xcc>)
 80012a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a8:	4b25      	ldr	r3, [pc, #148]	@ (8001340 <SystemClock_Config+0xcc>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	4b22      	ldr	r3, [pc, #136]	@ (8001344 <SystemClock_Config+0xd0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a21      	ldr	r2, [pc, #132]	@ (8001344 <SystemClock_Config+0xd0>)
 80012be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <SystemClock_Config+0xd0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
=======
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	4b28      	ldr	r3, [pc, #160]	@ (8001404 <SystemClock_Config+0xcc>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001364:	4a27      	ldr	r2, [pc, #156]	@ (8001404 <SystemClock_Config+0xcc>)
 8001366:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800136a:	6413      	str	r3, [r2, #64]	@ 0x40
 800136c:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <SystemClock_Config+0xcc>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001378:	2300      	movs	r3, #0
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <SystemClock_Config+0xd0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a21      	ldr	r2, [pc, #132]	@ (8001408 <SystemClock_Config+0xd0>)
 8001382:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <SystemClock_Config+0xd0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< HEAD
 80012d0:	2301      	movs	r3, #1
 80012d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012da:	2302      	movs	r3, #2
 80012dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012e4:	2304      	movs	r3, #4
 80012e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012e8:	23a8      	movs	r3, #168	@ 0xa8
 80012ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ec:	2302      	movs	r3, #2
 80012ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012f0:	2304      	movs	r3, #4
 80012f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f4:	f107 0320 	add.w	r3, r7, #32
 80012f8:	4618      	mov	r0, r3
 80012fa:	f001 ffdb 	bl	80032b4 <HAL_RCC_OscConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001304:	f000 fa86 	bl	8001814 <Error_Handler>
=======
 8001394:	2301      	movs	r3, #1
 8001396:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001398:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139e:	2302      	movs	r3, #2
 80013a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013a8:	2304      	movs	r3, #4
 80013aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013ac:	23a8      	movs	r3, #168	@ 0xa8
 80013ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013b0:	2302      	movs	r3, #2
 80013b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013b4:	2304      	movs	r3, #4
 80013b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b8:	f107 0320 	add.w	r3, r7, #32
 80013bc:	4618      	mov	r0, r3
 80013be:	f002 f801 	bl	80033c4 <HAL_RCC_OscConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013c8:	f000 fa86 	bl	80018d8 <Error_Handler>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8001308:	230f      	movs	r3, #15
 800130a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130c:	2302      	movs	r3, #2
 800130e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001314:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001318:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800131a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800131e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2105      	movs	r1, #5
 8001326:	4618      	mov	r0, r3
 8001328:	f002 fa32 	bl	8003790 <HAL_RCC_ClockConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001332:	f000 fa6f 	bl	8001814 <Error_Handler>
  }
}
 8001336:	bf00      	nop
 8001338:	3750      	adds	r7, #80	@ 0x50
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40007000 	.word	0x40007000

08001348 <MX_CAN1_Init>:
=======
 80013cc:	230f      	movs	r3, #15
 80013ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d0:	2302      	movs	r3, #2
 80013d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	2105      	movs	r1, #5
 80013ea:	4618      	mov	r0, r3
 80013ec:	f002 fa58 	bl	80038a0 <HAL_RCC_ClockConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013f6:	f000 fa6f 	bl	80018d8 <Error_Handler>
  }
}
 80013fa:	bf00      	nop
 80013fc:	3750      	adds	r7, #80	@ 0x50
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40007000 	.word	0x40007000

0800140c <MX_CAN1_Init>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
<<<<<<< HEAD
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
=======
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
<<<<<<< HEAD
 800134c:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <MX_CAN1_Init+0x64>)
 800134e:	4a18      	ldr	r2, [pc, #96]	@ (80013b0 <MX_CAN1_Init+0x68>)
 8001350:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 24;
 8001352:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <MX_CAN1_Init+0x64>)
 8001354:	2218      	movs	r2, #24
 8001356:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001358:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <MX_CAN1_Init+0x64>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800135e:	4b13      	ldr	r3, [pc, #76]	@ (80013ac <MX_CAN1_Init+0x64>)
 8001360:	2200      	movs	r2, #0
 8001362:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001364:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <MX_CAN1_Init+0x64>)
 8001366:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 800136a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800136c:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <MX_CAN1_Init+0x64>)
 800136e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001372:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001374:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <MX_CAN1_Init+0x64>)
 8001376:	2200      	movs	r2, #0
 8001378:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800137a:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <MX_CAN1_Init+0x64>)
 800137c:	2200      	movs	r2, #0
 800137e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001380:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <MX_CAN1_Init+0x64>)
 8001382:	2200      	movs	r2, #0
 8001384:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <MX_CAN1_Init+0x64>)
 8001388:	2200      	movs	r2, #0
 800138a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800138c:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <MX_CAN1_Init+0x64>)
 800138e:	2200      	movs	r2, #0
 8001390:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <MX_CAN1_Init+0x64>)
 8001394:	2200      	movs	r2, #0
 8001396:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	@ (80013ac <MX_CAN1_Init+0x64>)
 800139a:	f000 fcbb 	bl	8001d14 <HAL_CAN_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80013a4:	f000 fa36 	bl	8001814 <Error_Handler>
=======
 8001410:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <MX_CAN1_Init+0x64>)
 8001412:	4a18      	ldr	r2, [pc, #96]	@ (8001474 <MX_CAN1_Init+0x68>)
 8001414:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8001416:	4b16      	ldr	r3, [pc, #88]	@ (8001470 <MX_CAN1_Init+0x64>)
 8001418:	220c      	movs	r2, #12
 800141a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800141c:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <MX_CAN1_Init+0x64>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001422:	4b13      	ldr	r3, [pc, #76]	@ (8001470 <MX_CAN1_Init+0x64>)
 8001424:	2200      	movs	r2, #0
 8001426:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <MX_CAN1_Init+0x64>)
 800142a:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 800142e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001430:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <MX_CAN1_Init+0x64>)
 8001432:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001436:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001438:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <MX_CAN1_Init+0x64>)
 800143a:	2200      	movs	r2, #0
 800143c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800143e:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <MX_CAN1_Init+0x64>)
 8001440:	2200      	movs	r2, #0
 8001442:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001444:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <MX_CAN1_Init+0x64>)
 8001446:	2200      	movs	r2, #0
 8001448:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <MX_CAN1_Init+0x64>)
 800144c:	2200      	movs	r2, #0
 800144e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001450:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <MX_CAN1_Init+0x64>)
 8001452:	2200      	movs	r2, #0
 8001454:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <MX_CAN1_Init+0x64>)
 8001458:	2200      	movs	r2, #0
 800145a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800145c:	4804      	ldr	r0, [pc, #16]	@ (8001470 <MX_CAN1_Init+0x64>)
 800145e:	f000 fcbb 	bl	8001dd8 <HAL_CAN_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001468:	f000 fa36 	bl	80018d8 <Error_Handler>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
<<<<<<< HEAD
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200002d0 	.word	0x200002d0
 80013b0:	40006400 	.word	0x40006400

080013b4 <MX_USART1_UART_Init>:
=======
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200002d0 	.word	0x200002d0
 8001474:	40006400 	.word	0x40006400

08001478 <MX_USART1_UART_Init>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
=======
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 80013b8:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <MX_USART1_UART_Init+0x4c>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	@ (8001404 <MX_USART1_UART_Init+0x50>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013be:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <MX_USART1_UART_Init+0x4c>)
 80013c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <MX_USART1_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <MX_USART1_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <MX_USART1_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <MX_USART1_UART_Init+0x4c>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <MX_USART1_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <MX_USART1_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	@ (8001400 <MX_USART1_UART_Init+0x4c>)
 80013ec:	f002 fe60 	bl	80040b0 <HAL_UART_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013f6:	f000 fa0d 	bl	8001814 <Error_Handler>
=======
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 800147e:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <MX_USART1_UART_Init+0x50>)
 8001480:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 8001484:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001488:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ae:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <MX_USART1_UART_Init+0x4c>)
 80014b0:	f002 fe86 	bl	80041c0 <HAL_UART_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014ba:	f000 fa0d 	bl	80018d8 <Error_Handler>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200002f8 	.word	0x200002f8
 8001404:	40011000 	.word	0x40011000

08001408 <MX_GPIO_Init>:
=======
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200002f8 	.word	0x200002f8
 80014c8:	40011000 	.word	0x40011000

080014cc <MX_GPIO_Init>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	@ 0x28
 800140c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	4b27      	ldr	r3, [pc, #156]	@ (80014c0 <MX_GPIO_Init+0xb8>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	4a26      	ldr	r2, [pc, #152]	@ (80014c0 <MX_GPIO_Init+0xb8>)
 8001428:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800142c:	6313      	str	r3, [r2, #48]	@ 0x30
 800142e:	4b24      	ldr	r3, [pc, #144]	@ (80014c0 <MX_GPIO_Init+0xb8>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b20      	ldr	r3, [pc, #128]	@ (80014c0 <MX_GPIO_Init+0xb8>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	4a1f      	ldr	r2, [pc, #124]	@ (80014c0 <MX_GPIO_Init+0xb8>)
 8001444:	f043 0308 	orr.w	r3, r3, #8
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <MX_GPIO_Init+0xb8>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <MX_GPIO_Init+0xb8>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	4a18      	ldr	r2, [pc, #96]	@ (80014c0 <MX_GPIO_Init+0xb8>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6313      	str	r3, [r2, #48]	@ 0x30
 8001466:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <MX_GPIO_Init+0xb8>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <MX_GPIO_Init+0xb8>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	4a11      	ldr	r2, [pc, #68]	@ (80014c0 <MX_GPIO_Init+0xb8>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	6313      	str	r3, [r2, #48]	@ 0x30
 8001482:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <MX_GPIO_Init+0xb8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_IDLE_Pin|ORANGE_LED_SYSTEM_Pin|RED_LED_CANRX_Pin|BLUE_LED_CANTX_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001494:	480b      	ldr	r0, [pc, #44]	@ (80014c4 <MX_GPIO_Init+0xbc>)
 8001496:	f001 fed9 	bl	800324c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN_LED_IDLE_Pin ORANGE_LED_SYSTEM_Pin RED_LED_CANRX_Pin BLUE_LED_CANTX_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_IDLE_Pin|ORANGE_LED_SYSTEM_Pin|RED_LED_CANRX_Pin|BLUE_LED_CANTX_Pin;
 800149a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4804      	ldr	r0, [pc, #16]	@ (80014c4 <MX_GPIO_Init+0xbc>)
 80014b4:	f001 fc32 	bl	8002d1c <HAL_GPIO_Init>

}
 80014b8:	bf00      	nop
 80014ba:	3728      	adds	r7, #40	@ 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020c00 	.word	0x40020c00

080014c8 <rcvCommandThread>:

/* USER CODE BEGIN 4 */
void rcvCommandThread(void const *argument) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08c      	sub	sp, #48	@ 0x30
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	uint8_t rxCommandBuff[SIZE_RX] = { 0 };
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
	volatile uint8_t cursor = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	75fb      	strb	r3, [r7, #23]
	uint8_t rxValue[1] = { 0 };
 80014e6:	2300      	movs	r3, #0
 80014e8:	753b      	strb	r3, [r7, #20]
	osEvent evt;
	while (true) {
		evt = osSignalWait(osAnySignal, 1);//osWaitForever
 80014ea:	f107 0308 	add.w	r3, r7, #8
 80014ee:	2201      	movs	r2, #1
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 ff4c 	bl	8005390 <osSignalWait>
		if (evt.status == osEventSignal) {
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d13e      	bne.n	800157c <rcvCommandThread+0xb4>
			rxValue[0] = rxUARTBuff[0];
 80014fe:	4b21      	ldr	r3, [pc, #132]	@ (8001584 <rcvCommandThread+0xbc>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	753b      	strb	r3, [r7, #20]
			HAL_UART_Receive_IT(&huart1, rxUARTBuff, 1);
 8001504:	2201      	movs	r2, #1
 8001506:	491f      	ldr	r1, [pc, #124]	@ (8001584 <rcvCommandThread+0xbc>)
 8001508:	481f      	ldr	r0, [pc, #124]	@ (8001588 <rcvCommandThread+0xc0>)
 800150a:	f002 feb7 	bl	800427c <HAL_UART_Receive_IT>
			rxCommandBuff[cursor] = rxValue[0];
 800150e:	7dfb      	ldrb	r3, [r7, #23]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	7d3a      	ldrb	r2, [r7, #20]
 8001514:	3330      	adds	r3, #48	@ 0x30
 8001516:	443b      	add	r3, r7
 8001518:	f803 2c18 	strb.w	r2, [r3, #-24]
			cursor++;
 800151c:	7dfb      	ldrb	r3, [r7, #23]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	3301      	adds	r3, #1
 8001522:	b2db      	uxtb	r3, r3
 8001524:	75fb      	strb	r3, [r7, #23]
			if (cursor >= SIZE_RX) {
 8001526:	7dfb      	ldrb	r3, [r7, #23]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b13      	cmp	r3, #19
 800152c:	d901      	bls.n	8001532 <rcvCommandThread+0x6a>
				cursor = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	75fb      	strb	r3, [r7, #23]
			}
			if (rxValue[0] == 0x00) {
 8001532:	7d3b      	ldrb	r3, [r7, #20]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1d8      	bne.n	80014ea <rcvCommandThread+0x22>
				SnniferCommand *pendingCmd;
				pendingCmd = osMailCAlloc(pendingCommandsQueue, 1); // osWaitForever
 8001538:	4b14      	ldr	r3, [pc, #80]	@ (800158c <rcvCommandThread+0xc4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2101      	movs	r1, #1
 800153e:	4618      	mov	r0, r3
 8001540:	f004 f8df 	bl	8005702 <osMailCAlloc>
 8001544:	62f8      	str	r0, [r7, #44]	@ 0x2c
				if (pendingCmd != NULL) {
 8001546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001548:	2b00      	cmp	r3, #0
 800154a:	d014      	beq.n	8001576 <rcvCommandThread+0xae>
					strcpy((char*) pendingCmd->commnddBuff,
 800154c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800154e:	f107 0218 	add.w	r2, r7, #24
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f006 fd35 	bl	8007fc4 <strcpy>
							(char*) rxCommandBuff);
					pendingCmd->commandSize = cursor - 1;
 800155a:	7dfb      	ldrb	r3, [r7, #23]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	3b01      	subs	r3, #1
 8001560:	b2da      	uxtb	r2, r3
 8001562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001564:	751a      	strb	r2, [r3, #20]
					osMailPut(pendingCommandsQueue, pendingCmd);
 8001566:	4b09      	ldr	r3, [pc, #36]	@ (800158c <rcvCommandThread+0xc4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800156c:	4618      	mov	r0, r3
 800156e:	f004 f8eb 	bl	8005748 <osMailPut>
					osThreadYield();
 8001572:	f003 fea7 	bl	80052c4 <osThreadYield>
				}
				cursor = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	75fb      	strb	r3, [r7, #23]
 800157a:	e7b6      	b.n	80014ea <rcvCommandThread+0x22>
=======
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	@ 0x28
 80014d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b27      	ldr	r3, [pc, #156]	@ (8001584 <MX_GPIO_Init+0xb8>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a26      	ldr	r2, [pc, #152]	@ (8001584 <MX_GPIO_Init+0xb8>)
 80014ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b24      	ldr	r3, [pc, #144]	@ (8001584 <MX_GPIO_Init+0xb8>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b20      	ldr	r3, [pc, #128]	@ (8001584 <MX_GPIO_Init+0xb8>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a1f      	ldr	r2, [pc, #124]	@ (8001584 <MX_GPIO_Init+0xb8>)
 8001508:	f043 0308 	orr.w	r3, r3, #8
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b1d      	ldr	r3, [pc, #116]	@ (8001584 <MX_GPIO_Init+0xb8>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <MX_GPIO_Init+0xb8>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a18      	ldr	r2, [pc, #96]	@ (8001584 <MX_GPIO_Init+0xb8>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b16      	ldr	r3, [pc, #88]	@ (8001584 <MX_GPIO_Init+0xb8>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <MX_GPIO_Init+0xb8>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	4a11      	ldr	r2, [pc, #68]	@ (8001584 <MX_GPIO_Init+0xb8>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	6313      	str	r3, [r2, #48]	@ 0x30
 8001546:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <MX_GPIO_Init+0xb8>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_IDLE_Pin|ORANGE_LED_SYSTEM_Pin|RED_LED_CANRX_Pin|BLUE_LED_CANTX_Pin, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001558:	480b      	ldr	r0, [pc, #44]	@ (8001588 <MX_GPIO_Init+0xbc>)
 800155a:	f001 feff 	bl	800335c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN_LED_IDLE_Pin ORANGE_LED_SYSTEM_Pin RED_LED_CANRX_Pin BLUE_LED_CANTX_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_IDLE_Pin|ORANGE_LED_SYSTEM_Pin|RED_LED_CANRX_Pin|BLUE_LED_CANTX_Pin;
 800155e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	4804      	ldr	r0, [pc, #16]	@ (8001588 <MX_GPIO_Init+0xbc>)
 8001578:	f001 fc58 	bl	8002e2c <HAL_GPIO_Init>

}
 800157c:	bf00      	nop
 800157e:	3728      	adds	r7, #40	@ 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40023800 	.word	0x40023800
 8001588:	40020c00 	.word	0x40020c00

0800158c <rcvCommandThread>:

/* USER CODE BEGIN 4 */
void rcvCommandThread(void const *argument) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b08c      	sub	sp, #48	@ 0x30
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	uint8_t rxCommandBuff[SIZE_RX] = { 0 };
 8001594:	2300      	movs	r3, #0
 8001596:	61bb      	str	r3, [r7, #24]
 8001598:	f107 031c 	add.w	r3, r7, #28
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
	volatile uint8_t cursor = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	75fb      	strb	r3, [r7, #23]
	uint8_t rxValue[1] = { 0 };
 80015aa:	2300      	movs	r3, #0
 80015ac:	753b      	strb	r3, [r7, #20]
	osEvent evt;
	while (true) {
		evt = osSignalWait(osAnySignal, 1);//osWaitForever
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	2201      	movs	r2, #1
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 ff72 	bl	80054a0 <osSignalWait>
		if (evt.status == osEventSignal) {
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d13e      	bne.n	8001640 <rcvCommandThread+0xb4>
			rxValue[0] = rxUARTBuff[0];
 80015c2:	4b21      	ldr	r3, [pc, #132]	@ (8001648 <rcvCommandThread+0xbc>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	753b      	strb	r3, [r7, #20]
			HAL_UART_Receive_IT(&huart1, rxUARTBuff, 1);
 80015c8:	2201      	movs	r2, #1
 80015ca:	491f      	ldr	r1, [pc, #124]	@ (8001648 <rcvCommandThread+0xbc>)
 80015cc:	481f      	ldr	r0, [pc, #124]	@ (800164c <rcvCommandThread+0xc0>)
 80015ce:	f002 fedd 	bl	800438c <HAL_UART_Receive_IT>
			rxCommandBuff[cursor] = rxValue[0];
 80015d2:	7dfb      	ldrb	r3, [r7, #23]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	7d3a      	ldrb	r2, [r7, #20]
 80015d8:	3330      	adds	r3, #48	@ 0x30
 80015da:	443b      	add	r3, r7
 80015dc:	f803 2c18 	strb.w	r2, [r3, #-24]
			cursor++;
 80015e0:	7dfb      	ldrb	r3, [r7, #23]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	3301      	adds	r3, #1
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	75fb      	strb	r3, [r7, #23]
			if (cursor >= SIZE_RX) {
 80015ea:	7dfb      	ldrb	r3, [r7, #23]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b13      	cmp	r3, #19
 80015f0:	d901      	bls.n	80015f6 <rcvCommandThread+0x6a>
				cursor = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	75fb      	strb	r3, [r7, #23]
			}
			if (rxValue[0] == 0x00) {
 80015f6:	7d3b      	ldrb	r3, [r7, #20]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1d8      	bne.n	80015ae <rcvCommandThread+0x22>
				SnniferCommand *pendingCmd;
				pendingCmd = osMailCAlloc(pendingCommandsQueue, 1); // osWaitForever
 80015fc:	4b14      	ldr	r3, [pc, #80]	@ (8001650 <rcvCommandThread+0xc4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2101      	movs	r1, #1
 8001602:	4618      	mov	r0, r3
 8001604:	f004 f905 	bl	8005812 <osMailCAlloc>
 8001608:	62f8      	str	r0, [r7, #44]	@ 0x2c
				if (pendingCmd != NULL) {
 800160a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800160c:	2b00      	cmp	r3, #0
 800160e:	d014      	beq.n	800163a <rcvCommandThread+0xae>
					strcpy((char*) pendingCmd->commnddBuff,
 8001610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001612:	f107 0218 	add.w	r2, r7, #24
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f006 fd5b 	bl	80080d4 <strcpy>
							(char*) rxCommandBuff);
					pendingCmd->commandSize = cursor - 1;
 800161e:	7dfb      	ldrb	r3, [r7, #23]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	3b01      	subs	r3, #1
 8001624:	b2da      	uxtb	r2, r3
 8001626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001628:	751a      	strb	r2, [r3, #20]
					osMailPut(pendingCommandsQueue, pendingCmd);
 800162a:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <rcvCommandThread+0xc4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001630:	4618      	mov	r0, r3
 8001632:	f004 f911 	bl	8005858 <osMailPut>
					osThreadYield();
 8001636:	f003 fecd 	bl	80053d4 <osThreadYield>
				}
				cursor = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	75fb      	strb	r3, [r7, #23]
 800163e:	e7b6      	b.n	80015ae <rcvCommandThread+0x22>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			}

		}
		else{
			osThreadYield();
<<<<<<< HEAD
 800157c:	f003 fea2 	bl	80052c4 <osThreadYield>
		evt = osSignalWait(osAnySignal, 1);//osWaitForever
 8001580:	e7b3      	b.n	80014ea <rcvCommandThread+0x22>
 8001582:	bf00      	nop
 8001584:	2000035c 	.word	0x2000035c
 8001588:	200002f8 	.word	0x200002f8
 800158c:	20000350 	.word	0x20000350

08001590 <executeCommandThread>:
=======
 8001640:	f003 fec8 	bl	80053d4 <osThreadYield>
		evt = osSignalWait(osAnySignal, 1);//osWaitForever
 8001644:	e7b3      	b.n	80015ae <rcvCommandThread+0x22>
 8001646:	bf00      	nop
 8001648:	20000360 	.word	0x20000360
 800164c:	200002f8 	.word	0x200002f8
 8001650:	20000354 	.word	0x20000354

08001654 <executeCommandThread>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
	}
}

void executeCommandThread(void const *argument) {
<<<<<<< HEAD
 8001590:	b580      	push	{r7, lr}
 8001592:	b090      	sub	sp, #64	@ 0x40
 8001594:	af02      	add	r7, sp, #8
 8001596:	6078      	str	r0, [r7, #4]
	SnniferCommand *dequedComand;
	uint8_t decodedCommand[20] = { 0 };
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
 800159c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
	osEvent evt;
	while (true) {
		evt = osMailGet(pendingCommandsQueue, 1);//osWaitForever
 80015aa:	4b30      	ldr	r3, [pc, #192]	@ (800166c <executeCommandThread+0xdc>)
 80015ac:	6819      	ldr	r1, [r3, #0]
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	2201      	movs	r2, #1
 80015b4:	4618      	mov	r0, r3
 80015b6:	f004 f905 	bl	80057c4 <osMailGet>
		if (evt.status == osEventMail) {
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	2b20      	cmp	r3, #32
 80015be:	d152      	bne.n	8001666 <executeCommandThread+0xd6>
			dequedComand = evt.value.p;
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	637b      	str	r3, [r7, #52]	@ 0x34
			cobs_decode_result resutlt = cobs_decode(decodedCommand, 20,dequedComand->commnddBuff, dequedComand->commandSize);
 80015c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015c8:	7d1b      	ldrb	r3, [r3, #20]
 80015ca:	f107 000c 	add.w	r0, r7, #12
 80015ce:	f107 0120 	add.w	r1, r7, #32
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	4613      	mov	r3, r2
 80015d6:	2214      	movs	r2, #20
 80015d8:	f7ff f86a 	bl	80006b0 <cobs_decode>
			if (resutlt.status == COBS_DECODE_OK) {
 80015dc:	7c3b      	ldrb	r3, [r7, #16]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d12f      	bne.n	8001642 <executeCommandThread+0xb2>
				if (decodedCommand[0] == 'M') {
 80015e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015e6:	2b4d      	cmp	r3, #77	@ 0x4d
 80015e8:	d105      	bne.n	80015f6 <executeCommandThread+0x66>
					// Send a datagram to the CAN Bus
					processMessageComand((char*) decodedCommand);
 80015ea:	f107 0320 	add.w	r3, r7, #32
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fa00 	bl	80009f4 <processMessageComand>
 80015f4:	e027      	b.n	8001646 <executeCommandThread+0xb6>
				}
				else if (decodedCommand[0] == 'S') {
 80015f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015fa:	2b53      	cmp	r3, #83	@ 0x53
 80015fc:	d105      	bne.n	800160a <executeCommandThread+0x7a>
					// Change bit rate
					processBitRateCommand((char*) decodedCommand);
 80015fe:	f107 0320 	add.w	r3, r7, #32
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fb0c 	bl	8000c20 <processBitRateCommand>
 8001608:	e01d      	b.n	8001646 <executeCommandThread+0xb6>
				}
				else if (decodedCommand[0] == 'N') {
 800160a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800160e:	2b4e      	cmp	r3, #78	@ 0x4e
 8001610:	d105      	bne.n	800161e <executeCommandThread+0x8e>
					// Change Mode CAN bus Mode
					processLoopBackModeCommand((char*) decodedCommand);
 8001612:	f107 0320 	add.w	r3, r7, #32
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fb8e 	bl	8000d38 <processLoopBackModeCommand>
 800161c:	e013      	b.n	8001646 <executeCommandThread+0xb6>
				}	// Reboot Snifer
				else if (decodedCommand[0] == 'R') {
 800161e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001622:	2b52      	cmp	r3, #82	@ 0x52
 8001624:	d102      	bne.n	800162c <executeCommandThread+0x9c>
					processRebootCommand();
 8001626:	f7ff fbf3 	bl	8000e10 <processRebootCommand>
 800162a:	e00c      	b.n	8001646 <executeCommandThread+0xb6>
				}
				else{
					HAL_GPIO_TogglePin(RED_LED_CANRX_GPIO_Port,RED_LED_CANRX_Pin);
 800162c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001630:	480f      	ldr	r0, [pc, #60]	@ (8001670 <executeCommandThread+0xe0>)
 8001632:	f001 fe24 	bl	800327e <HAL_GPIO_TogglePin>
					processMessageComand((char*) decodedCommand);
 8001636:	f107 0320 	add.w	r3, r7, #32
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff f9da 	bl	80009f4 <processMessageComand>
 8001640:	e001      	b.n	8001646 <executeCommandThread+0xb6>
=======
 8001654:	b580      	push	{r7, lr}
 8001656:	b090      	sub	sp, #64	@ 0x40
 8001658:	af02      	add	r7, sp, #8
 800165a:	6078      	str	r0, [r7, #4]
	SnniferCommand *dequedComand;
	uint8_t decodedCommand[20] = { 0 };
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
 8001660:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
	osEvent evt;
	while (true) {
		evt = osMailGet(pendingCommandsQueue, 1);//osWaitForever
 800166e:	4b2e      	ldr	r3, [pc, #184]	@ (8001728 <executeCommandThread+0xd4>)
 8001670:	6819      	ldr	r1, [r3, #0]
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	2201      	movs	r2, #1
 8001678:	4618      	mov	r0, r3
 800167a:	f004 f92b 	bl	80058d4 <osMailGet>
		if (evt.status == osEventMail) {
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2b20      	cmp	r3, #32
 8001682:	d14d      	bne.n	8001720 <executeCommandThread+0xcc>
			dequedComand = evt.value.p;
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	637b      	str	r3, [r7, #52]	@ 0x34
			cobs_decode_result resutlt = cobs_decode(decodedCommand, 20,dequedComand->commnddBuff, dequedComand->commandSize);
 8001688:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800168a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800168c:	7d1b      	ldrb	r3, [r3, #20]
 800168e:	f107 000c 	add.w	r0, r7, #12
 8001692:	f107 0120 	add.w	r1, r7, #32
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	4613      	mov	r3, r2
 800169a:	2214      	movs	r2, #20
 800169c:	f7ff f808 	bl	80006b0 <cobs_decode>
			if (resutlt.status == COBS_DECODE_OK) {
 80016a0:	7c3b      	ldrb	r3, [r7, #16]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d12c      	bne.n	8001700 <executeCommandThread+0xac>
				if (decodedCommand[0] == 'A') {
 80016a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016aa:	2b41      	cmp	r3, #65	@ 0x41
 80016ac:	d104      	bne.n	80016b8 <executeCommandThread+0x64>
					// Change activity status
					processActivitySniferComand((char*) decodedCommand);
 80016ae:	f107 0320 	add.w	r3, r7, #32
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fbb2 	bl	8000e1c <processActivitySniferComand>
				}
				if (decodedCommand[0] == 'M') {
 80016b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016bc:	2b4d      	cmp	r3, #77	@ 0x4d
 80016be:	d105      	bne.n	80016cc <executeCommandThread+0x78>
					// Send a datagram to the CAN Bus
					processMessageComand((char*) decodedCommand);
 80016c0:	f107 0320 	add.w	r3, r7, #32
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff f995 	bl	80009f4 <processMessageComand>
 80016ca:	e019      	b.n	8001700 <executeCommandThread+0xac>
				} else if (decodedCommand[0] == 'S') {
 80016cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016d0:	2b53      	cmp	r3, #83	@ 0x53
 80016d2:	d105      	bne.n	80016e0 <executeCommandThread+0x8c>
					// Change bit rate
					processBitRateCommand((char*) decodedCommand);
 80016d4:	f107 0320 	add.w	r3, r7, #32
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fa9b 	bl	8000c14 <processBitRateCommand>
 80016de:	e00f      	b.n	8001700 <executeCommandThread+0xac>
				} else if (decodedCommand[0] == 'N') {
 80016e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016e4:	2b4e      	cmp	r3, #78	@ 0x4e
 80016e6:	d105      	bne.n	80016f4 <executeCommandThread+0xa0>
					// Change Mode CAN bus Mode
					processLoopBackModeCommand((char*) decodedCommand);
 80016e8:	f107 0320 	add.w	r3, r7, #32
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fb23 	bl	8000d38 <processLoopBackModeCommand>
 80016f2:	e005      	b.n	8001700 <executeCommandThread+0xac>
				}	// Reboot Snifer
				else if (decodedCommand[0] == 'R') {
 80016f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016f8:	2b52      	cmp	r3, #82	@ 0x52
 80016fa:	d101      	bne.n	8001700 <executeCommandThread+0xac>
					processRebootCommand();
 80016fc:	f7ff fbc6 	bl	8000e8c <processRebootCommand>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				}
			}
			else{
				bootLEDIndicator();
 8001642:	f7ff f915 	bl	8000870 <bootLEDIndicator>
			}
			memset(decodedCommand, 0, sizeof(decodedCommand));
<<<<<<< HEAD
 8001646:	f107 0320 	add.w	r3, r7, #32
 800164a:	2214      	movs	r2, #20
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f006 fc84 	bl	8007f5c <memset>
			osMailFree(pendingCommandsQueue, dequedComand);
 8001654:	4b05      	ldr	r3, [pc, #20]	@ (800166c <executeCommandThread+0xdc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800165a:	4618      	mov	r0, r3
 800165c:	f004 f926 	bl	80058ac <osMailFree>
			osThreadYield();
 8001660:	f003 fe30 	bl	80052c4 <osThreadYield>
 8001664:	e7a1      	b.n	80015aa <executeCommandThread+0x1a>
		}
		else{
			osThreadYield();
 8001666:	f003 fe2d 	bl	80052c4 <osThreadYield>
		evt = osMailGet(pendingCommandsQueue, 1);//osWaitForever
 800166a:	e79e      	b.n	80015aa <executeCommandThread+0x1a>
 800166c:	20000350 	.word	0x20000350
 8001670:	40020c00 	.word	0x40020c00

08001674 <recieivedDatagramsThread>:
=======
 8001700:	f107 0320 	add.w	r3, r7, #32
 8001704:	2214      	movs	r2, #20
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f006 fcaf 	bl	800806c <memset>
			osMailFree(pendingCommandsQueue, dequedComand);
 800170e:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <executeCommandThread+0xd4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001714:	4618      	mov	r0, r3
 8001716:	f004 f951 	bl	80059bc <osMailFree>
			osThreadYield();
 800171a:	f003 fe5b 	bl	80053d4 <osThreadYield>
 800171e:	e7a6      	b.n	800166e <executeCommandThread+0x1a>
		}
		else{
			osThreadYield();
 8001720:	f003 fe58 	bl	80053d4 <osThreadYield>
		evt = osMailGet(pendingCommandsQueue, 1);//osWaitForever
 8001724:	e7a3      	b.n	800166e <executeCommandThread+0x1a>
 8001726:	bf00      	nop
 8001728:	20000354 	.word	0x20000354

0800172c <recieivedDatagramsThread>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
	}
}


void recieivedDatagramsThread(void const *argument) {
<<<<<<< HEAD
 8001674:	b5b0      	push	{r4, r5, r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
=======
 800172c:	b5b0      	push	{r4, r5, r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	//CAN_RxHeaderTypeDef rxMessageHeader;
	//uint8_t rxDataReceived[8];
	osEvent evt;
	while (true) {
		evt = osSignalWait(osAnySignal, 1);//osWaitForever
<<<<<<< HEAD
 800167c:	f107 0308 	add.w	r3, r7, #8
 8001680:	2201      	movs	r2, #1
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f003 fe83 	bl	8005390 <osSignalWait>
		if (evt.status == osEventSignal) {
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	2b08      	cmp	r3, #8
 800168e:	d124      	bne.n	80016da <recieivedDatagramsThread+0x66>
			CANMessage *msgToSend = osMailCAlloc(canDatagramsQueue, noWait);
 8001690:	4b13      	ldr	r3, [pc, #76]	@ (80016e0 <recieivedDatagramsThread+0x6c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f004 f833 	bl	8005702 <osMailCAlloc>
 800169c:	6178      	str	r0, [r7, #20]
			if (msgToSend != NULL) {
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d017      	beq.n	80016d4 <recieivedDatagramsThread+0x60>
				 msgToSend->header = rxMessageHeader;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	4a0f      	ldr	r2, [pc, #60]	@ (80016e4 <recieivedDatagramsThread+0x70>)
 80016a8:	f103 0408 	add.w	r4, r3, #8
 80016ac:	4615      	mov	r5, r2
 80016ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				 memcpy(msgToSend->data, rxDataReceived, sizeof(rxDataReceived));
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	490a      	ldr	r1, [pc, #40]	@ (80016e8 <recieivedDatagramsThread+0x74>)
 80016be:	461a      	mov	r2, r3
 80016c0:	460b      	mov	r3, r1
 80016c2:	cb03      	ldmia	r3!, {r0, r1}
 80016c4:	6010      	str	r0, [r2, #0]
 80016c6:	6051      	str	r1, [r2, #4]
				 osMailPut(canDatagramsQueue, msgToSend);
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <recieivedDatagramsThread+0x6c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6979      	ldr	r1, [r7, #20]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 f83a 	bl	8005748 <osMailPut>
			}
			osThreadYield();
 80016d4:	f003 fdf6 	bl	80052c4 <osThreadYield>
 80016d8:	e7d0      	b.n	800167c <recieivedDatagramsThread+0x8>
		}
		else{
			osThreadYield();
 80016da:	f003 fdf3 	bl	80052c4 <osThreadYield>
		evt = osSignalWait(osAnySignal, 1);//osWaitForever
 80016de:	e7cd      	b.n	800167c <recieivedDatagramsThread+0x8>
 80016e0:	20000358 	.word	0x20000358
 80016e4:	20000360 	.word	0x20000360
 80016e8:	2000037c 	.word	0x2000037c

080016ec <fordwardDatagramsThread>:
=======
 8001734:	f107 0308 	add.w	r3, r7, #8
 8001738:	2201      	movs	r2, #1
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f003 feaf 	bl	80054a0 <osSignalWait>
		if (evt.status == osEventSignal) {
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	2b08      	cmp	r3, #8
 8001746:	d122      	bne.n	800178e <recieivedDatagramsThread+0x62>
			CANMessage *msgToSend = osMailCAlloc(canDatagramsQueue, noWait);
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <recieivedDatagramsThread+0x68>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f004 f85f 	bl	8005812 <osMailCAlloc>
 8001754:	6178      	str	r0, [r7, #20]
			if (msgToSend != NULL) {
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d015      	beq.n	8001788 <recieivedDatagramsThread+0x5c>
				 msgToSend->header = rxMessageHeader;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	4a0e      	ldr	r2, [pc, #56]	@ (8001798 <recieivedDatagramsThread+0x6c>)
 8001760:	f103 0408 	add.w	r4, r3, #8
 8001764:	4615      	mov	r5, r2
 8001766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800176a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800176e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				 strcpy((char*) msgToSend->data, (char*) rxDataReceived);
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	4909      	ldr	r1, [pc, #36]	@ (800179c <recieivedDatagramsThread+0x70>)
 8001776:	4618      	mov	r0, r3
 8001778:	f006 fcac 	bl	80080d4 <strcpy>
				 osMailPut(canDatagramsQueue, msgToSend);
 800177c:	4b05      	ldr	r3, [pc, #20]	@ (8001794 <recieivedDatagramsThread+0x68>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6979      	ldr	r1, [r7, #20]
 8001782:	4618      	mov	r0, r3
 8001784:	f004 f868 	bl	8005858 <osMailPut>
			}
			osThreadYield();
 8001788:	f003 fe24 	bl	80053d4 <osThreadYield>
 800178c:	e7d2      	b.n	8001734 <recieivedDatagramsThread+0x8>
		}
		else{
			osThreadYield();
 800178e:	f003 fe21 	bl	80053d4 <osThreadYield>
		evt = osSignalWait(osAnySignal, 1);//osWaitForever
 8001792:	e7cf      	b.n	8001734 <recieivedDatagramsThread+0x8>
 8001794:	2000035c 	.word	0x2000035c
 8001798:	20000364 	.word	0x20000364
 800179c:	20000380 	.word	0x20000380

080017a0 <fordwardDatagramsThread>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}

	}
}

void fordwardDatagramsThread(void const *argument) {
<<<<<<< HEAD
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	b09d      	sub	sp, #116	@ 0x74
 80016f0:	af06      	add	r7, sp, #24
 80016f2:	6078      	str	r0, [r7, #4]
	uint8_t serializedDatagram[24] = { 0 };
 80016f4:	2300      	movs	r3, #0
 80016f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016f8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
	uint8_t lenSerialized;
	uint8_t encodedDatagram[24] = { 0 };
 8001708:	2300      	movs	r3, #0
 800170a:	623b      	str	r3, [r7, #32]
 800170c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
=======
 80017a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a2:	b09d      	sub	sp, #116	@ 0x74
 80017a4:	af06      	add	r7, sp, #24
 80017a6:	6078      	str	r0, [r7, #4]
	uint8_t serializedDatagram[24] = { 0 };
 80017a8:	2300      	movs	r3, #0
 80017aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017ac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
	uint8_t lenSerialized;
	uint8_t encodedDatagram[24] = { 0 };
 80017bc:	2300      	movs	r3, #0
 80017be:	623b      	str	r3, [r7, #32]
 80017c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	osEvent evt;
	CANMessage *dequeuedMsg;
	while (true) {
		evt = osMailGet(canDatagramsQueue, 1);	//osWaitForever
<<<<<<< HEAD
 800171c:	4b2a      	ldr	r3, [pc, #168]	@ (80017c8 <fordwardDatagramsThread+0xdc>)
 800171e:	6819      	ldr	r1, [r3, #0]
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2201      	movs	r2, #1
 8001726:	4618      	mov	r0, r3
 8001728:	f004 f84c 	bl	80057c4 <osMailGet>
		if (evt.status == osEventMail) {
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2b20      	cmp	r3, #32
 8001730:	d147      	bne.n	80017c2 <fordwardDatagramsThread+0xd6>
			dequeuedMsg = evt.value.p;
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	657b      	str	r3, [r7, #84]	@ 0x54
			lenSerialized = serializeDatagram(serializedDatagram,dequeuedMsg->header, dequeuedMsg->data);
 8001736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001738:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 800173a:	f107 0638 	add.w	r6, r7, #56	@ 0x38
 800173e:	9304      	str	r3, [sp, #16]
 8001740:	466d      	mov	r5, sp
 8001742:	f104 0314 	add.w	r3, r4, #20
 8001746:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001748:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800174c:	f104 0308 	add.w	r3, r4, #8
 8001750:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001752:	4630      	mov	r0, r6
 8001754:	f7ff fc64 	bl	8001020 <serializeDatagram>
 8001758:	4603      	mov	r3, r0
 800175a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			cobs_encode_result result = cobs_encode(encodedDatagram, 24,serializedDatagram, lenSerialized + 1);
 800175e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001762:	3301      	adds	r3, #1
 8001764:	461a      	mov	r2, r3
 8001766:	f107 000c 	add.w	r0, r7, #12
 800176a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800176e:	f107 0120 	add.w	r1, r7, #32
 8001772:	9200      	str	r2, [sp, #0]
 8001774:	2218      	movs	r2, #24
 8001776:	f7fe ff03 	bl	8000580 <cobs_encode>
			if (result.status == COBS_ENCODE_OK) {
 800177a:	7c3b      	ldrb	r3, [r7, #16]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d117      	bne.n	80017b0 <fordwardDatagramsThread+0xc4>
				// Append Zero byte to delimiter frame boundary
				encodedDatagram[result.out_len + 1] = 0x00;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3301      	adds	r3, #1
 8001784:	3358      	adds	r3, #88	@ 0x58
 8001786:	443b      	add	r3, r7
 8001788:	2200      	movs	r2, #0
 800178a:	f803 2c38 	strb.w	r2, [r3, #-56]
				HAL_UART_Transmit(&huart1, encodedDatagram, result.out_len + 1,50);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	b29b      	uxth	r3, r3
 8001792:	3301      	adds	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	f107 0120 	add.w	r1, r7, #32
 800179a:	2332      	movs	r3, #50	@ 0x32
 800179c:	480b      	ldr	r0, [pc, #44]	@ (80017cc <fordwardDatagramsThread+0xe0>)
 800179e:	f002 fcd4 	bl	800414a <HAL_UART_Transmit>
				// Toggle monitoring line to indicate a successful datagrams retransmission
				memset(encodedDatagram, 0, sizeof(encodedDatagram));
 80017a2:	f107 0320 	add.w	r3, r7, #32
 80017a6:	2218      	movs	r2, #24
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f006 fbd6 	bl	8007f5c <memset>
			}
			osMailFree(canDatagramsQueue, dequeuedMsg);
 80017b0:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <fordwardDatagramsThread+0xdc>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80017b6:	4618      	mov	r0, r3
 80017b8:	f004 f878 	bl	80058ac <osMailFree>
			osThreadYield();
 80017bc:	f003 fd82 	bl	80052c4 <osThreadYield>
 80017c0:	e7ac      	b.n	800171c <fordwardDatagramsThread+0x30>

		}else{
			osThreadYield();
 80017c2:	f003 fd7f 	bl	80052c4 <osThreadYield>
		evt = osMailGet(canDatagramsQueue, 1);	//osWaitForever
 80017c6:	e7a9      	b.n	800171c <fordwardDatagramsThread+0x30>
 80017c8:	20000358 	.word	0x20000358
 80017cc:	200002f8 	.word	0x200002f8

080017d0 <idleThread>:
=======
 80017d0:	4b2a      	ldr	r3, [pc, #168]	@ (800187c <fordwardDatagramsThread+0xdc>)
 80017d2:	6819      	ldr	r1, [r3, #0]
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	2201      	movs	r2, #1
 80017da:	4618      	mov	r0, r3
 80017dc:	f004 f87a 	bl	80058d4 <osMailGet>
		if (evt.status == osEventMail) {
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	2b20      	cmp	r3, #32
 80017e4:	d147      	bne.n	8001876 <fordwardDatagramsThread+0xd6>
			dequeuedMsg = evt.value.p;
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	657b      	str	r3, [r7, #84]	@ 0x54
			lenSerialized = serializeDatagram(serializedDatagram,dequeuedMsg->header, dequeuedMsg->data);
 80017ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ec:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 80017ee:	f107 0638 	add.w	r6, r7, #56	@ 0x38
 80017f2:	9304      	str	r3, [sp, #16]
 80017f4:	466d      	mov	r5, sp
 80017f6:	f104 0314 	add.w	r3, r4, #20
 80017fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017fc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001800:	f104 0308 	add.w	r3, r4, #8
 8001804:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001806:	4630      	mov	r0, r6
 8001808:	f7ff fc48 	bl	800109c <serializeDatagram>
 800180c:	4603      	mov	r3, r0
 800180e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			cobs_encode_result result = cobs_encode(encodedDatagram, 24,serializedDatagram, lenSerialized + 1);
 8001812:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001816:	3301      	adds	r3, #1
 8001818:	461a      	mov	r2, r3
 800181a:	f107 000c 	add.w	r0, r7, #12
 800181e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001822:	f107 0120 	add.w	r1, r7, #32
 8001826:	9200      	str	r2, [sp, #0]
 8001828:	2218      	movs	r2, #24
 800182a:	f7fe fea9 	bl	8000580 <cobs_encode>
			if (result.status == COBS_ENCODE_OK) {
 800182e:	7c3b      	ldrb	r3, [r7, #16]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d117      	bne.n	8001864 <fordwardDatagramsThread+0xc4>
				// Append Zero byte to delimiter frame boundary
				encodedDatagram[result.out_len + 1] = 0x00;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	3301      	adds	r3, #1
 8001838:	3358      	adds	r3, #88	@ 0x58
 800183a:	443b      	add	r3, r7
 800183c:	2200      	movs	r2, #0
 800183e:	f803 2c38 	strb.w	r2, [r3, #-56]
				HAL_UART_Transmit(&huart1, encodedDatagram, result.out_len + 1,50);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	b29b      	uxth	r3, r3
 8001846:	3301      	adds	r3, #1
 8001848:	b29a      	uxth	r2, r3
 800184a:	f107 0120 	add.w	r1, r7, #32
 800184e:	2332      	movs	r3, #50	@ 0x32
 8001850:	480b      	ldr	r0, [pc, #44]	@ (8001880 <fordwardDatagramsThread+0xe0>)
 8001852:	f002 fd02 	bl	800425a <HAL_UART_Transmit>
				// Toggle monitoring line to indicate a successful datagrams retransmission
				memset(encodedDatagram, 0, sizeof(encodedDatagram));
 8001856:	f107 0320 	add.w	r3, r7, #32
 800185a:	2218      	movs	r2, #24
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f006 fc04 	bl	800806c <memset>
			}
			osMailFree(canDatagramsQueue, dequeuedMsg);
 8001864:	4b05      	ldr	r3, [pc, #20]	@ (800187c <fordwardDatagramsThread+0xdc>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800186a:	4618      	mov	r0, r3
 800186c:	f004 f8a6 	bl	80059bc <osMailFree>
			osThreadYield();
 8001870:	f003 fdb0 	bl	80053d4 <osThreadYield>
 8001874:	e7ac      	b.n	80017d0 <fordwardDatagramsThread+0x30>

		}else{
			osThreadYield();
 8001876:	f003 fdad 	bl	80053d4 <osThreadYield>
		evt = osMailGet(canDatagramsQueue, 1);	//osWaitForever
 800187a:	e7a9      	b.n	80017d0 <fordwardDatagramsThread+0x30>
 800187c:	2000035c 	.word	0x2000035c
 8001880:	200002f8 	.word	0x200002f8

08001884 <idleThread>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
	}
}

void idleThread(void const *argument) {
<<<<<<< HEAD
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	while (true) {
		HAL_GPIO_TogglePin(GREEN_LED_IDLE_GPIO_Port,GREEN_LED_IDLE_Pin);
 80017d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017dc:	4803      	ldr	r0, [pc, #12]	@ (80017ec <idleThread+0x1c>)
 80017de:	f001 fd4e 	bl	800327e <HAL_GPIO_TogglePin>
		osDelay(100);
 80017e2:	2064      	movs	r0, #100	@ 0x64
 80017e4:	f003 fd80 	bl	80052e8 <osDelay>
		HAL_GPIO_TogglePin(GREEN_LED_IDLE_GPIO_Port,GREEN_LED_IDLE_Pin);
 80017e8:	bf00      	nop
 80017ea:	e7f5      	b.n	80017d8 <idleThread+0x8>
 80017ec:	40020c00 	.word	0x40020c00

080017f0 <HAL_TIM_PeriodElapsedCallback>:
=======
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	while (true) {
		HAL_GPIO_TogglePin(GREEN_LED_IDLE_GPIO_Port,GREEN_LED_IDLE_Pin);
 800188c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001890:	4803      	ldr	r0, [pc, #12]	@ (80018a0 <idleThread+0x1c>)
 8001892:	f001 fd7c 	bl	800338e <HAL_GPIO_TogglePin>
		osDelay(100);
 8001896:	2064      	movs	r0, #100	@ 0x64
 8001898:	f003 fdae 	bl	80053f8 <osDelay>
		HAL_GPIO_TogglePin(GREEN_LED_IDLE_GPIO_Port,GREEN_LED_IDLE_Pin);
 800189c:	bf00      	nop
 800189e:	e7f5      	b.n	800188c <idleThread+0x8>
 80018a0:	40020c00 	.word	0x40020c00

080018a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80018ac:	2001      	movs	r0, #1
 80018ae:	f003 fda3 	bl	80053f8 <osDelay>
 80018b2:	e7fb      	b.n	80018ac <StartDefaultTask+0x8>

080018b4 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
=======
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
<<<<<<< HEAD
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a04      	ldr	r2, [pc, #16]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d101      	bne.n	8001806 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001802:	f000 fa43 	bl	8001c8c <HAL_IncTick>
=======
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a04      	ldr	r2, [pc, #16]	@ (80018d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018c6:	f000 fa43 	bl	8001d50 <HAL_IncTick>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
<<<<<<< HEAD
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40001000 	.word	0x40001000

08001814 <Error_Handler>:
=======
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40001000 	.word	0x40001000

080018d8 <Error_Handler>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001818:	b672      	cpsid	i
}
 800181a:	bf00      	nop
=======
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018dc:	b672      	cpsid	i
}
 80018de:	bf00      	nop
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
<<<<<<< HEAD
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <Error_Handler+0x8>

08001820 <HAL_MspInit>:
=======
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <Error_Handler+0x8>

080018e4 <HAL_MspInit>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
=======
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <HAL_MspInit+0x54>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182e:	4a11      	ldr	r2, [pc, #68]	@ (8001874 <HAL_MspInit+0x54>)
 8001830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001834:	6453      	str	r3, [r2, #68]	@ 0x44
 8001836:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <HAL_MspInit+0x54>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	603b      	str	r3, [r7, #0]
 8001846:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <HAL_MspInit+0x54>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	4a0a      	ldr	r2, [pc, #40]	@ (8001874 <HAL_MspInit+0x54>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001850:	6413      	str	r3, [r2, #64]	@ 0x40
 8001852:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <HAL_MspInit+0x54>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	683b      	ldr	r3, [r7, #0]
=======
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <HAL_MspInit+0x54>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f2:	4a11      	ldr	r2, [pc, #68]	@ (8001938 <HAL_MspInit+0x54>)
 80018f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <HAL_MspInit+0x54>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	603b      	str	r3, [r7, #0]
 800190a:	4b0b      	ldr	r3, [pc, #44]	@ (8001938 <HAL_MspInit+0x54>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	4a0a      	ldr	r2, [pc, #40]	@ (8001938 <HAL_MspInit+0x54>)
 8001910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001914:	6413      	str	r3, [r2, #64]	@ 0x40
 8001916:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <HAL_MspInit+0x54>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	683b      	ldr	r3, [r7, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< HEAD
 800185e:	2200      	movs	r2, #0
 8001860:	210f      	movs	r1, #15
 8001862:	f06f 0001 	mvn.w	r0, #1
 8001866:	f001 f9ff 	bl	8002c68 <HAL_NVIC_SetPriority>
=======
 8001922:	2200      	movs	r2, #0
 8001924:	210f      	movs	r1, #15
 8001926:	f06f 0001 	mvn.w	r0, #1
 800192a:	f001 fa25 	bl	8002d78 <HAL_NVIC_SetPriority>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800

08001878 <HAL_CAN_MspInit>:
=======
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800

0800193c <HAL_CAN_MspInit>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
<<<<<<< HEAD
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	@ 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a1d      	ldr	r2, [pc, #116]	@ (800190c <HAL_CAN_MspInit+0x94>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d134      	bne.n	8001904 <HAL_CAN_MspInit+0x8c>
=======
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	@ 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a1d      	ldr	r2, [pc, #116]	@ (80019d0 <HAL_CAN_MspInit+0x94>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d134      	bne.n	80019c8 <HAL_CAN_MspInit+0x8c>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
<<<<<<< HEAD
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b1c      	ldr	r3, [pc, #112]	@ (8001910 <HAL_CAN_MspInit+0x98>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001910 <HAL_CAN_MspInit+0x98>)
 80018a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018aa:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <HAL_CAN_MspInit+0x98>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <HAL_CAN_MspInit+0x98>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	4a14      	ldr	r2, [pc, #80]	@ (8001910 <HAL_CAN_MspInit+0x98>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c6:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <HAL_CAN_MspInit+0x98>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
=======
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b1c      	ldr	r3, [pc, #112]	@ (80019d4 <HAL_CAN_MspInit+0x98>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001966:	4a1b      	ldr	r2, [pc, #108]	@ (80019d4 <HAL_CAN_MspInit+0x98>)
 8001968:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800196c:	6413      	str	r3, [r2, #64]	@ 0x40
 800196e:	4b19      	ldr	r3, [pc, #100]	@ (80019d4 <HAL_CAN_MspInit+0x98>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b15      	ldr	r3, [pc, #84]	@ (80019d4 <HAL_CAN_MspInit+0x98>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	4a14      	ldr	r2, [pc, #80]	@ (80019d4 <HAL_CAN_MspInit+0x98>)
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	6313      	str	r3, [r2, #48]	@ 0x30
 800198a:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <HAL_CAN_MspInit+0x98>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
<<<<<<< HEAD
 80018d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e0:	2303      	movs	r3, #3
 80018e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80018e4:	2309      	movs	r3, #9
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	4619      	mov	r1, r3
 80018ee:	4809      	ldr	r0, [pc, #36]	@ (8001914 <HAL_CAN_MspInit+0x9c>)
 80018f0:	f001 fa14 	bl	8002d1c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2105      	movs	r1, #5
 80018f8:	2014      	movs	r0, #20
 80018fa:	f001 f9b5 	bl	8002c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80018fe:	2014      	movs	r0, #20
 8001900:	f001 f9ce 	bl	8002ca0 <HAL_NVIC_EnableIRQ>
=======
 8001996:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800199a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80019a8:	2309      	movs	r3, #9
 80019aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4619      	mov	r1, r3
 80019b2:	4809      	ldr	r0, [pc, #36]	@ (80019d8 <HAL_CAN_MspInit+0x9c>)
 80019b4:	f001 fa3a 	bl	8002e2c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80019b8:	2200      	movs	r2, #0
 80019ba:	2105      	movs	r1, #5
 80019bc:	2014      	movs	r0, #20
 80019be:	f001 f9db 	bl	8002d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80019c2:	2014      	movs	r0, #20
 80019c4:	f001 f9f4 	bl	8002db0 <HAL_NVIC_EnableIRQ>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001904:	bf00      	nop
 8001906:	3728      	adds	r7, #40	@ 0x28
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40006400 	.word	0x40006400
 8001910:	40023800 	.word	0x40023800
 8001914:	40020400 	.word	0x40020400

08001918 <HAL_CAN_MspDeInit>:
=======
 80019c8:	bf00      	nop
 80019ca:	3728      	adds	r7, #40	@ 0x28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40006400 	.word	0x40006400
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020400 	.word	0x40020400

080019dc <HAL_CAN_MspDeInit>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
<<<<<<< HEAD
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <HAL_CAN_MspDeInit+0x38>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d10d      	bne.n	8001946 <HAL_CAN_MspDeInit+0x2e>
=======
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001a14 <HAL_CAN_MspDeInit+0x38>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10d      	bne.n	8001a0a <HAL_CAN_MspDeInit+0x2e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
<<<<<<< HEAD
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <HAL_CAN_MspDeInit+0x3c>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	4a09      	ldr	r2, [pc, #36]	@ (8001954 <HAL_CAN_MspDeInit+0x3c>)
 8001930:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8001934:	6413      	str	r3, [r2, #64]	@ 0x40
=======
 80019ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001a18 <HAL_CAN_MspDeInit+0x3c>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	4a09      	ldr	r2, [pc, #36]	@ (8001a18 <HAL_CAN_MspDeInit+0x3c>)
 80019f4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80019f8:	6413      	str	r3, [r2, #64]	@ 0x40
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
<<<<<<< HEAD
 8001936:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800193a:	4807      	ldr	r0, [pc, #28]	@ (8001958 <HAL_CAN_MspDeInit+0x40>)
 800193c:	f001 fb8a 	bl	8003054 <HAL_GPIO_DeInit>

    /* CAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8001940:	2014      	movs	r0, #20
 8001942:	f001 f9bb 	bl	8002cbc <HAL_NVIC_DisableIRQ>
=======
 80019fa:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80019fe:	4807      	ldr	r0, [pc, #28]	@ (8001a1c <HAL_CAN_MspDeInit+0x40>)
 8001a00:	f001 fbb0 	bl	8003164 <HAL_GPIO_DeInit>

    /* CAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8001a04:	2014      	movs	r0, #20
 8001a06:	f001 f9e1 	bl	8002dcc <HAL_NVIC_DisableIRQ>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
<<<<<<< HEAD
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40006400 	.word	0x40006400
 8001954:	40023800 	.word	0x40023800
 8001958:	40020400 	.word	0x40020400

0800195c <HAL_UART_MspInit>:
=======
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40006400 	.word	0x40006400
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020400 	.word	0x40020400

08001a20 <HAL_UART_MspInit>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	@ 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a2c      	ldr	r2, [pc, #176]	@ (8001a2c <HAL_UART_MspInit+0xd0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d152      	bne.n	8001a24 <HAL_UART_MspInit+0xc8>
=======
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	@ 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a2c      	ldr	r2, [pc, #176]	@ (8001af0 <HAL_UART_MspInit+0xd0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d152      	bne.n	8001ae8 <HAL_UART_MspInit+0xc8>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	4b2b      	ldr	r3, [pc, #172]	@ (8001a30 <HAL_UART_MspInit+0xd4>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	4a2a      	ldr	r2, [pc, #168]	@ (8001a30 <HAL_UART_MspInit+0xd4>)
 8001988:	f043 0310 	orr.w	r3, r3, #16
 800198c:	6453      	str	r3, [r2, #68]	@ 0x44
 800198e:	4b28      	ldr	r3, [pc, #160]	@ (8001a30 <HAL_UART_MspInit+0xd4>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b24      	ldr	r3, [pc, #144]	@ (8001a30 <HAL_UART_MspInit+0xd4>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	4a23      	ldr	r2, [pc, #140]	@ (8001a30 <HAL_UART_MspInit+0xd4>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019aa:	4b21      	ldr	r3, [pc, #132]	@ (8001a30 <HAL_UART_MspInit+0xd4>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001a30 <HAL_UART_MspInit+0xd4>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	4a1c      	ldr	r2, [pc, #112]	@ (8001a30 <HAL_UART_MspInit+0xd4>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a30 <HAL_UART_MspInit+0xd4>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
=======
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b2b      	ldr	r3, [pc, #172]	@ (8001af4 <HAL_UART_MspInit+0xd4>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8001af4 <HAL_UART_MspInit+0xd4>)
 8001a4c:	f043 0310 	orr.w	r3, r3, #16
 8001a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a52:	4b28      	ldr	r3, [pc, #160]	@ (8001af4 <HAL_UART_MspInit+0xd4>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b24      	ldr	r3, [pc, #144]	@ (8001af4 <HAL_UART_MspInit+0xd4>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	4a23      	ldr	r2, [pc, #140]	@ (8001af4 <HAL_UART_MspInit+0xd4>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6e:	4b21      	ldr	r3, [pc, #132]	@ (8001af4 <HAL_UART_MspInit+0xd4>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <HAL_UART_MspInit+0xd4>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	4a1c      	ldr	r2, [pc, #112]	@ (8001af4 <HAL_UART_MspInit+0xd4>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <HAL_UART_MspInit+0xd4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
<<<<<<< HEAD
 80019d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019e4:	2307      	movs	r3, #7
 80019e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	4619      	mov	r1, r3
 80019ee:	4811      	ldr	r0, [pc, #68]	@ (8001a34 <HAL_UART_MspInit+0xd8>)
 80019f0:	f001 f994 	bl	8002d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019f4:	2340      	movs	r3, #64	@ 0x40
 80019f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a00:	2303      	movs	r3, #3
 8001a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a04:	2307      	movs	r3, #7
 8001a06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	480a      	ldr	r0, [pc, #40]	@ (8001a38 <HAL_UART_MspInit+0xdc>)
 8001a10:	f001 f984 	bl	8002d1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2105      	movs	r1, #5
 8001a18:	2025      	movs	r0, #37	@ 0x25
 8001a1a:	f001 f925 	bl	8002c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a1e:	2025      	movs	r0, #37	@ 0x25
 8001a20:	f001 f93e 	bl	8002ca0 <HAL_NVIC_EnableIRQ>
=======
 8001a96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aa8:	2307      	movs	r3, #7
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4811      	ldr	r0, [pc, #68]	@ (8001af8 <HAL_UART_MspInit+0xd8>)
 8001ab4:	f001 f9ba 	bl	8002e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ab8:	2340      	movs	r3, #64	@ 0x40
 8001aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ac8:	2307      	movs	r3, #7
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	480a      	ldr	r0, [pc, #40]	@ (8001afc <HAL_UART_MspInit+0xdc>)
 8001ad4:	f001 f9aa 	bl	8002e2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2105      	movs	r1, #5
 8001adc:	2025      	movs	r0, #37	@ 0x25
 8001ade:	f001 f94b 	bl	8002d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ae2:	2025      	movs	r0, #37	@ 0x25
 8001ae4:	f001 f964 	bl	8002db0 <HAL_NVIC_EnableIRQ>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001a24:	bf00      	nop
 8001a26:	3728      	adds	r7, #40	@ 0x28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40011000 	.word	0x40011000
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020000 	.word	0x40020000
 8001a38:	40020400 	.word	0x40020400

08001a3c <HAL_InitTick>:
=======
 8001ae8:	bf00      	nop
 8001aea:	3728      	adds	r7, #40	@ 0x28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40011000 	.word	0x40011000
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020000 	.word	0x40020000
 8001afc:	40020400 	.word	0x40020400

08001b00 <HAL_InitTick>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08c      	sub	sp, #48	@ 0x30
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	2036      	movs	r0, #54	@ 0x36
 8001a52:	f001 f909 	bl	8002c68 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a56:	2036      	movs	r0, #54	@ 0x36
 8001a58:	f001 f922 	bl	8002ca0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae0 <HAL_InitTick+0xa4>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae0 <HAL_InitTick+0xa4>)
 8001a66:	f043 0310 	orr.w	r3, r3, #16
 8001a6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae0 <HAL_InitTick+0xa4>)
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a70:	f003 0310 	and.w	r3, r3, #16
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a78:	f107 0210 	add.w	r2, r7, #16
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4611      	mov	r1, r2
 8001a82:	4618      	mov	r0, r3
 8001a84:	f002 f8a4 	bl	8003bd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001a88:	f002 f87a 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a94:	4a13      	ldr	r2, [pc, #76]	@ (8001ae4 <HAL_InitTick+0xa8>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	0c9b      	lsrs	r3, r3, #18
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <HAL_InitTick+0xac>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	@ (8001aec <HAL_InitTick+0xb0>)
 8001aa4:	601a      	str	r2, [r3, #0]
=======
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08c      	sub	sp, #48	@ 0x30
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001b10:	2200      	movs	r2, #0
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	2036      	movs	r0, #54	@ 0x36
 8001b16:	f001 f92f 	bl	8002d78 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b1a:	2036      	movs	r0, #54	@ 0x36
 8001b1c:	f001 f948 	bl	8002db0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba4 <HAL_InitTick+0xa4>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b28:	4a1e      	ldr	r2, [pc, #120]	@ (8001ba4 <HAL_InitTick+0xa4>)
 8001b2a:	f043 0310 	orr.w	r3, r3, #16
 8001b2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b30:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba4 <HAL_InitTick+0xa4>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b3c:	f107 0210 	add.w	r2, r7, #16
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4611      	mov	r1, r2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f002 f8ca 	bl	8003ce0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b4c:	f002 f8a0 	bl	8003c90 <HAL_RCC_GetPCLK1Freq>
 8001b50:	4603      	mov	r3, r0
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b58:	4a13      	ldr	r2, [pc, #76]	@ (8001ba8 <HAL_InitTick+0xa8>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	0c9b      	lsrs	r3, r3, #18
 8001b60:	3b01      	subs	r3, #1
 8001b62:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b64:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <HAL_InitTick+0xac>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	@ (8001bb0 <HAL_InitTick+0xb0>)
 8001b68:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
<<<<<<< HEAD
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <HAL_InitTick+0xac>)
 8001aa8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001aac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001aae:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae8 <HAL_InitTick+0xac>)
 8001ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <HAL_InitTick+0xac>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <HAL_InitTick+0xac>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001ac0:	4809      	ldr	r0, [pc, #36]	@ (8001ae8 <HAL_InitTick+0xac>)
 8001ac2:	f002 f8b7 	bl	8003c34 <HAL_TIM_Base_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d104      	bne.n	8001ad6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001acc:	4806      	ldr	r0, [pc, #24]	@ (8001ae8 <HAL_InitTick+0xac>)
 8001ace:	f002 f8e6 	bl	8003c9e <HAL_TIM_Base_Start_IT>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	e000      	b.n	8001ad8 <HAL_InitTick+0x9c>
=======
 8001b6a:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <HAL_InitTick+0xac>)
 8001b6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b70:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b72:	4a0e      	ldr	r2, [pc, #56]	@ (8001bac <HAL_InitTick+0xac>)
 8001b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b76:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	@ (8001bac <HAL_InitTick+0xac>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <HAL_InitTick+0xac>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b84:	4809      	ldr	r0, [pc, #36]	@ (8001bac <HAL_InitTick+0xac>)
 8001b86:	f002 f8dd 	bl	8003d44 <HAL_TIM_Base_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d104      	bne.n	8001b9a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001b90:	4806      	ldr	r0, [pc, #24]	@ (8001bac <HAL_InitTick+0xac>)
 8001b92:	f002 f90c 	bl	8003dae <HAL_TIM_Base_Start_IT>
 8001b96:	4603      	mov	r3, r0
 8001b98:	e000      	b.n	8001b9c <HAL_InitTick+0x9c>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }

  /* Return function status */
  return HAL_ERROR;
<<<<<<< HEAD
 8001ad6:	2301      	movs	r3, #1
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3730      	adds	r7, #48	@ 0x30
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	431bde83 	.word	0x431bde83
 8001ae8:	20000384 	.word	0x20000384
 8001aec:	40001000 	.word	0x40001000

08001af0 <NMI_Handler>:
=======
 8001b9a:	2301      	movs	r3, #1
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3730      	adds	r7, #48	@ 0x30
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	431bde83 	.word	0x431bde83
 8001bac:	2000038c 	.word	0x2000038c
 8001bb0:	40001000 	.word	0x40001000

08001bb4 <NMI_Handler>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
=======
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< HEAD
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <NMI_Handler+0x4>

08001af8 <HardFault_Handler>:
=======
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <NMI_Handler+0x4>

08001bbc <HardFault_Handler>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
=======
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:
=======
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <HardFault_Handler+0x4>

08001bc4 <MemManage_Handler>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
=======
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <MemManage_Handler+0x4>

08001b08 <BusFault_Handler>:
=======
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <MemManage_Handler+0x4>

08001bcc <BusFault_Handler>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
=======
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <BusFault_Handler+0x4>

08001b10 <UsageFault_Handler>:
=======
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <BusFault_Handler+0x4>

08001bd4 <UsageFault_Handler>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
=======
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <UsageFault_Handler+0x4>

08001b18 <DebugMon_Handler>:
=======
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <UsageFault_Handler+0x4>

08001bdc <DebugMon_Handler>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
=======
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <CAN1_RX0_IRQHandler>:
=======
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <CAN1_RX0_IRQHandler>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
<<<<<<< HEAD
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
=======
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
<<<<<<< HEAD
 8001b2c:	4802      	ldr	r0, [pc, #8]	@ (8001b38 <CAN1_RX0_IRQHandler+0x10>)
 8001b2e:	f000 fd8f 	bl	8002650 <HAL_CAN_IRQHandler>
=======
 8001bf0:	4802      	ldr	r0, [pc, #8]	@ (8001bfc <CAN1_RX0_IRQHandler+0x10>)
 8001bf2:	f000 fdb6 	bl	8002762 <HAL_CAN_IRQHandler>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
<<<<<<< HEAD
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200002d0 	.word	0x200002d0

08001b3c <USART1_IRQHandler>:
=======
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200002d0 	.word	0x200002d0

08001c00 <USART1_IRQHandler>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
<<<<<<< HEAD
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
=======
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
<<<<<<< HEAD
 8001b40:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <USART1_IRQHandler+0x10>)
 8001b42:	f002 fbf1 	bl	8004328 <HAL_UART_IRQHandler>
=======
 8001c04:	4802      	ldr	r0, [pc, #8]	@ (8001c10 <USART1_IRQHandler+0x10>)
 8001c06:	f002 fc17 	bl	8004438 <HAL_UART_IRQHandler>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
<<<<<<< HEAD
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200002f8 	.word	0x200002f8

08001b50 <TIM6_DAC_IRQHandler>:
=======
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200002f8 	.word	0x200002f8

08001c14 <TIM6_DAC_IRQHandler>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
<<<<<<< HEAD
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
=======
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
<<<<<<< HEAD
 8001b54:	4802      	ldr	r0, [pc, #8]	@ (8001b60 <TIM6_DAC_IRQHandler+0x10>)
 8001b56:	f002 f8c6 	bl	8003ce6 <HAL_TIM_IRQHandler>
=======
 8001c18:	4802      	ldr	r0, [pc, #8]	@ (8001c24 <TIM6_DAC_IRQHandler+0x10>)
 8001c1a:	f002 f8ec 	bl	8003df6 <HAL_TIM_IRQHandler>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
<<<<<<< HEAD
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000384 	.word	0x20000384

08001b64 <_sbrk>:
=======
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2000038c 	.word	0x2000038c

08001c28 <_sbrk>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
=======
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 8001b6c:	4a14      	ldr	r2, [pc, #80]	@ (8001bc0 <_sbrk+0x5c>)
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <_sbrk+0x60>)
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	613b      	str	r3, [r7, #16]
=======
 8001c30:	4a14      	ldr	r2, [pc, #80]	@ (8001c84 <_sbrk+0x5c>)
 8001c32:	4b15      	ldr	r3, [pc, #84]	@ (8001c88 <_sbrk+0x60>)
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	613b      	str	r3, [r7, #16]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 8001b78:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d102      	bne.n	8001b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b80:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <_sbrk+0x64>)
 8001b82:	4a12      	ldr	r2, [pc, #72]	@ (8001bcc <_sbrk+0x68>)
 8001b84:	601a      	str	r2, [r3, #0]
=======
 8001c3c:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c44:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <_sbrk+0x64>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	@ (8001c90 <_sbrk+0x68>)
 8001c48:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 8001b86:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d207      	bcs.n	8001ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b94:	f006 f9ea 	bl	8007f6c <__errno>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba2:	e009      	b.n	8001bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <_sbrk+0x64>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001baa:	4b07      	ldr	r3, [pc, #28]	@ (8001bc8 <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	4a05      	ldr	r2, [pc, #20]	@ (8001bc8 <_sbrk+0x64>)
 8001bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20020000 	.word	0x20020000
 8001bc4:	00000400 	.word	0x00000400
 8001bc8:	200003c4 	.word	0x200003c4
 8001bcc:	20004260 	.word	0x20004260

08001bd0 <SystemInit>:
=======
 8001c4a:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d207      	bcs.n	8001c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c58:	f006 fa10 	bl	800807c <__errno>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	220c      	movs	r2, #12
 8001c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
 8001c66:	e009      	b.n	8001c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c68:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	4a05      	ldr	r2, [pc, #20]	@ (8001c8c <_sbrk+0x64>)
 8001c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20020000 	.word	0x20020000
 8001c88:	00000400 	.word	0x00000400
 8001c8c:	200003cc 	.word	0x200003cc
 8001c90:	20004268 	.word	0x20004268

08001c94 <SystemInit>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <SystemInit+0x20>)
 8001bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bda:	4a05      	ldr	r2, [pc, #20]	@ (8001bf0 <SystemInit+0x20>)
 8001bdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001be0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
=======
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c98:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <SystemInit+0x20>)
 8001c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c9e:	4a05      	ldr	r2, [pc, #20]	@ (8001cb4 <SystemInit+0x20>)
 8001ca0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ca4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <Reset_Handler>:
=======
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <Reset_Handler>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
<<<<<<< HEAD
 8001bf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001bf8:	f7ff ffea 	bl	8001bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bfc:	480c      	ldr	r0, [pc, #48]	@ (8001c30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bfe:	490d      	ldr	r1, [pc, #52]	@ (8001c34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c00:	4a0d      	ldr	r2, [pc, #52]	@ (8001c38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c04:	e002      	b.n	8001c0c <LoopCopyDataInit>

08001c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0a:	3304      	adds	r3, #4

08001c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c10:	d3f9      	bcc.n	8001c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c12:	4a0a      	ldr	r2, [pc, #40]	@ (8001c3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c14:	4c0a      	ldr	r4, [pc, #40]	@ (8001c40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c18:	e001      	b.n	8001c1e <LoopFillZerobss>

08001c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c1c:	3204      	adds	r2, #4

08001c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c20:	d3fb      	bcc.n	8001c1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c22:	f006 f9a9 	bl	8007f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c26:	f7ff fa77 	bl	8001118 <main>
  bx  lr    
 8001c2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c34:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001c38:	08008b00 	.word	0x08008b00
  ldr r2, =_sbss
 8001c3c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001c40:	20004260 	.word	0x20004260

08001c44 <ADC_IRQHandler>:
=======
 8001cb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cf0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001cbc:	f7ff ffea 	bl	8001c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cc0:	480c      	ldr	r0, [pc, #48]	@ (8001cf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cc2:	490d      	ldr	r1, [pc, #52]	@ (8001cf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc8:	e002      	b.n	8001cd0 <LoopCopyDataInit>

08001cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cce:	3304      	adds	r3, #4

08001cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd4:	d3f9      	bcc.n	8001cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001d04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cdc:	e001      	b.n	8001ce2 <LoopFillZerobss>

08001cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce0:	3204      	adds	r2, #4

08001ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce4:	d3fb      	bcc.n	8001cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ce6:	f006 f9cf 	bl	8008088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cea:	f7ff fa59 	bl	80011a0 <main>
  bx  lr    
 8001cee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001cfc:	08008c40 	.word	0x08008c40
  ldr r2, =_sbss
 8001d00:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001d04:	20004268 	.word	0x20004268

08001d08 <ADC_IRQHandler>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8001c44:	e7fe      	b.n	8001c44 <ADC_IRQHandler>
	...

08001c48 <HAL_Init>:
=======
 8001d08:	e7fe      	b.n	8001d08 <ADC_IRQHandler>
	...

08001d0c <HAL_Init>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c88 <HAL_Init+0x40>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0d      	ldr	r2, [pc, #52]	@ (8001c88 <HAL_Init+0x40>)
 8001c52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c56:	6013      	str	r3, [r2, #0]
=======
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d10:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0d      	ldr	r2, [pc, #52]	@ (8001d4c <HAL_Init+0x40>)
 8001d16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d1a:	6013      	str	r3, [r2, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 8001c58:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <HAL_Init+0x40>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c88 <HAL_Init+0x40>)
 8001c5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c62:	6013      	str	r3, [r2, #0]
=======
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	@ (8001d4c <HAL_Init+0x40>)
 8001d22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d26:	6013      	str	r3, [r2, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8001c64:	4b08      	ldr	r3, [pc, #32]	@ (8001c88 <HAL_Init+0x40>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a07      	ldr	r2, [pc, #28]	@ (8001c88 <HAL_Init+0x40>)
 8001c6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c6e:	6013      	str	r3, [r2, #0]
=======
 8001d28:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a07      	ldr	r2, [pc, #28]	@ (8001d4c <HAL_Init+0x40>)
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d32:	6013      	str	r3, [r2, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8001c70:	2003      	movs	r0, #3
 8001c72:	f000 ffee 	bl	8002c52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f7ff fee0 	bl	8001a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c7c:	f7ff fdd0 	bl	8001820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023c00 	.word	0x40023c00

08001c8c <HAL_IncTick>:
=======
 8001d34:	2003      	movs	r0, #3
 8001d36:	f001 f814 	bl	8002d62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f7ff fee0 	bl	8001b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d40:	f7ff fdd0 	bl	80018e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00

08001d50 <HAL_IncTick>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c90:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_IncTick+0x20>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_IncTick+0x24>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a04      	ldr	r2, [pc, #16]	@ (8001cb0 <HAL_IncTick+0x24>)
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	200003c8 	.word	0x200003c8

08001cb4 <HAL_GetTick>:
=======
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d54:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <HAL_IncTick+0x20>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <HAL_IncTick+0x24>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	4a04      	ldr	r2, [pc, #16]	@ (8001d74 <HAL_IncTick+0x24>)
 8001d62:	6013      	str	r3, [r2, #0]
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000008 	.word	0x20000008
 8001d74:	200003d0 	.word	0x200003d0

08001d78 <HAL_GetTick>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	@ (8001cc8 <HAL_GetTick+0x14>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	200003c8 	.word	0x200003c8

08001ccc <HAL_Delay>:
=======
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	@ (8001d8c <HAL_GetTick+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	200003d0 	.word	0x200003d0

08001d90 <HAL_Delay>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd4:	f7ff ffee 	bl	8001cb4 <HAL_GetTick>
 8001cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce4:	d005      	beq.n	8001cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <HAL_Delay+0x44>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cf2:	bf00      	nop
 8001cf4:	f7ff ffde 	bl	8001cb4 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d8f7      	bhi.n	8001cf4 <HAL_Delay+0x28>
  {
  }
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000008 	.word	0x20000008

08001d14 <HAL_CAN_Init>:
=======
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d98:	f7ff ffee 	bl	8001d78 <HAL_GetTick>
 8001d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da8:	d005      	beq.n	8001db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001daa:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd4 <HAL_Delay+0x44>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4413      	add	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001db6:	bf00      	nop
 8001db8:	f7ff ffde 	bl	8001d78 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d8f7      	bhi.n	8001db8 <HAL_Delay+0x28>
  {
  }
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000008 	.word	0x20000008

08001dd8 <HAL_CAN_Init>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
=======
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
<<<<<<< HEAD
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e0ed      	b.n	8001f02 <HAL_CAN_Init+0x1ee>
=======
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e0ed      	b.n	8001fc6 <HAL_CAN_Init+0x1ee>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
<<<<<<< HEAD
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d102      	bne.n	8001d38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff fda0 	bl	8001878 <HAL_CAN_MspInit>
=======
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d102      	bne.n	8001dfc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff fda0 	bl	800193c <HAL_CAN_MspInit>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
<<<<<<< HEAD
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0202 	bic.w	r2, r2, #2
 8001d46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d48:	f7ff ffb4 	bl	8001cb4 <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d4e:	e012      	b.n	8001d76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d50:	f7ff ffb0 	bl	8001cb4 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b0a      	cmp	r3, #10
 8001d5c:	d90b      	bls.n	8001d76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d62:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2205      	movs	r2, #5
 8001d6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0c5      	b.n	8001f02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1e5      	bne.n	8001d50 <HAL_CAN_Init+0x3c>
=======
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0202 	bic.w	r2, r2, #2
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e0c:	f7ff ffb4 	bl	8001d78 <HAL_GetTick>
 8001e10:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e12:	e012      	b.n	8001e3a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e14:	f7ff ffb0 	bl	8001d78 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b0a      	cmp	r3, #10
 8001e20:	d90b      	bls.n	8001e3a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2205      	movs	r2, #5
 8001e32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e0c5      	b.n	8001fc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1e5      	bne.n	8001e14 <HAL_CAN_Init+0x3c>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
<<<<<<< HEAD
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d94:	f7ff ff8e 	bl	8001cb4 <HAL_GetTick>
 8001d98:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d9a:	e012      	b.n	8001dc2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d9c:	f7ff ff8a 	bl	8001cb4 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b0a      	cmp	r3, #10
 8001da8:	d90b      	bls.n	8001dc2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2205      	movs	r2, #5
 8001dba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e09f      	b.n	8001f02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0e5      	beq.n	8001d9c <HAL_CAN_Init+0x88>
=======
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e58:	f7ff ff8e 	bl	8001d78 <HAL_GetTick>
 8001e5c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e5e:	e012      	b.n	8001e86 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e60:	f7ff ff8a 	bl	8001d78 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b0a      	cmp	r3, #10
 8001e6c:	d90b      	bls.n	8001e86 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e72:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2205      	movs	r2, #5
 8001e7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e09f      	b.n	8001fc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0e5      	beq.n	8001e60 <HAL_CAN_Init+0x88>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
<<<<<<< HEAD
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	7e1b      	ldrb	r3, [r3, #24]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d108      	bne.n	8001dea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e007      	b.n	8001dfa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001df8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	7e5b      	ldrb	r3, [r3, #25]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d108      	bne.n	8001e14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	e007      	b.n	8001e24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	7e9b      	ldrb	r3, [r3, #26]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d108      	bne.n	8001e3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0220 	orr.w	r2, r2, #32
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	e007      	b.n	8001e4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0220 	bic.w	r2, r2, #32
 8001e4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	7edb      	ldrb	r3, [r3, #27]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d108      	bne.n	8001e68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0210 	bic.w	r2, r2, #16
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	e007      	b.n	8001e78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0210 	orr.w	r2, r2, #16
 8001e76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7f1b      	ldrb	r3, [r3, #28]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d108      	bne.n	8001e92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0208 	orr.w	r2, r2, #8
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e007      	b.n	8001ea2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0208 	bic.w	r2, r2, #8
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7f5b      	ldrb	r3, [r3, #29]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d108      	bne.n	8001ebc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0204 	orr.w	r2, r2, #4
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	e007      	b.n	8001ecc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0204 	bic.w	r2, r2, #4
 8001eca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	ea42 0103 	orr.w	r1, r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	1e5a      	subs	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	61da      	str	r2, [r3, #28]
=======
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	7e1b      	ldrb	r3, [r3, #24]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d108      	bne.n	8001eae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	e007      	b.n	8001ebe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ebc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7e5b      	ldrb	r3, [r3, #25]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d108      	bne.n	8001ed8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e007      	b.n	8001ee8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ee6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7e9b      	ldrb	r3, [r3, #26]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d108      	bne.n	8001f02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0220 	orr.w	r2, r2, #32
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	e007      	b.n	8001f12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0220 	bic.w	r2, r2, #32
 8001f10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	7edb      	ldrb	r3, [r3, #27]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d108      	bne.n	8001f2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0210 	bic.w	r2, r2, #16
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	e007      	b.n	8001f3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0210 	orr.w	r2, r2, #16
 8001f3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	7f1b      	ldrb	r3, [r3, #28]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d108      	bne.n	8001f56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0208 	orr.w	r2, r2, #8
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	e007      	b.n	8001f66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0208 	bic.w	r2, r2, #8
 8001f64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	7f5b      	ldrb	r3, [r3, #29]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d108      	bne.n	8001f80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f042 0204 	orr.w	r2, r2, #4
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	e007      	b.n	8001f90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0204 	bic.w	r2, r2, #4
 8001f8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	ea42 0103 	orr.w	r1, r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	1e5a      	subs	r2, r3, #1
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	61da      	str	r2, [r3, #28]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
<<<<<<< HEAD
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_CAN_DeInit>:
=======
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_CAN_DeInit>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e015      	b.n	8001f48 <HAL_CAN_DeInit+0x3e>
=======
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e015      	b.n	800200c <HAL_CAN_DeInit+0x3e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
<<<<<<< HEAD
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f93b 	bl	8002198 <HAL_CAN_Stop>
=======
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f93b 	bl	800225c <HAL_CAN_Stop>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
<<<<<<< HEAD
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff fcf8 	bl	8001918 <HAL_CAN_MspDeInit>
=======
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff fcf8 	bl	80019dc <HAL_CAN_MspDeInit>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
<<<<<<< HEAD
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f36:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_CAN_ConfigFilter>:
=======
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ffa:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_CAN_ConfigFilter>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
<<<<<<< HEAD
 8001f50:	b480      	push	{r7}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f66:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f68:	7cfb      	ldrb	r3, [r7, #19]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d003      	beq.n	8001f76 <HAL_CAN_ConfigFilter+0x26>
 8001f6e:	7cfb      	ldrb	r3, [r7, #19]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	f040 80be 	bne.w	80020f2 <HAL_CAN_ConfigFilter+0x1a2>
=======
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 3020 	ldrb.w	r3, [r3, #32]
 800202a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800202c:	7cfb      	ldrb	r3, [r7, #19]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d003      	beq.n	800203a <HAL_CAN_ConfigFilter+0x26>
 8002032:	7cfb      	ldrb	r3, [r7, #19]
 8002034:	2b02      	cmp	r3, #2
 8002036:	f040 80be 	bne.w	80021b6 <HAL_CAN_ConfigFilter+0x1a2>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
<<<<<<< HEAD
 8001f76:	4b65      	ldr	r3, [pc, #404]	@ (800210c <HAL_CAN_ConfigFilter+0x1bc>)
 8001f78:	617b      	str	r3, [r7, #20]
=======
 800203a:	4b65      	ldr	r3, [pc, #404]	@ (80021d0 <HAL_CAN_ConfigFilter+0x1bc>)
 800203c:	617b      	str	r3, [r7, #20]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
<<<<<<< HEAD
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f80:	f043 0201 	orr.w	r2, r3, #1
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
=======
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002044:	f043 0201 	orr.w	r2, r3, #1
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
<<<<<<< HEAD
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f90:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
=======
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002054:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002068:	021b      	lsls	r3, r3, #8
 800206a:	431a      	orrs	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
<<<<<<< HEAD
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f003 031f 	and.w	r3, r3, #31
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	401a      	ands	r2, r3
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d123      	bne.n	8002020 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
=======
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	2201      	movs	r2, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	43db      	mvns	r3, r3
 800208c:	401a      	ands	r2, r3
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d123      	bne.n	80020e4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	401a      	ands	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
<<<<<<< HEAD
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ffa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	3248      	adds	r2, #72	@ 0x48
 8002000:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
=======
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3248      	adds	r2, #72	@ 0x48
 80020c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
<<<<<<< HEAD
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002014:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002016:	6979      	ldr	r1, [r7, #20]
 8002018:	3348      	adds	r3, #72	@ 0x48
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	440b      	add	r3, r1
 800201e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d122      	bne.n	800206e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	431a      	orrs	r2, r3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
=======
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020da:	6979      	ldr	r1, [r7, #20]
 80020dc:	3348      	adds	r3, #72	@ 0x48
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	440b      	add	r3, r1
 80020e2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d122      	bne.n	8002132 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
<<<<<<< HEAD
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002048:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	3248      	adds	r2, #72	@ 0x48
 800204e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
=======
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800210c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	3248      	adds	r2, #72	@ 0x48
 8002112:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
<<<<<<< HEAD
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002062:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002064:	6979      	ldr	r1, [r7, #20]
 8002066:	3348      	adds	r3, #72	@ 0x48
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	440b      	add	r3, r1
 800206c:	605a      	str	r2, [r3, #4]
=======
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002126:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002128:	6979      	ldr	r1, [r7, #20]
 800212a:	3348      	adds	r3, #72	@ 0x48
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	440b      	add	r3, r1
 8002130:	605a      	str	r2, [r3, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
<<<<<<< HEAD
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d109      	bne.n	800208a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	43db      	mvns	r3, r3
 8002080:	401a      	ands	r2, r3
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002088:	e007      	b.n	800209a <HAL_CAN_ConfigFilter+0x14a>
=======
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d109      	bne.n	800214e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	43db      	mvns	r3, r3
 8002144:	401a      	ands	r2, r3
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800214c:	e007      	b.n	800215e <HAL_CAN_ConfigFilter+0x14a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
<<<<<<< HEAD
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	431a      	orrs	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
=======
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	431a      	orrs	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
<<<<<<< HEAD
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	401a      	ands	r2, r3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80020b4:	e007      	b.n	80020c6 <HAL_CAN_ConfigFilter+0x176>
=======
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d109      	bne.n	800217a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	43db      	mvns	r3, r3
 8002170:	401a      	ands	r2, r3
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002178:	e007      	b.n	800218a <HAL_CAN_ConfigFilter+0x176>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
<<<<<<< HEAD
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	431a      	orrs	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
=======
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	431a      	orrs	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
<<<<<<< HEAD
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d107      	bne.n	80020de <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
=======
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	431a      	orrs	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
<<<<<<< HEAD
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020e4:	f023 0201 	bic.w	r2, r3, #1
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e006      	b.n	8002100 <HAL_CAN_ConfigFilter+0x1b0>
=======
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80021a8:	f023 0201 	bic.w	r2, r3, #1
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	e006      	b.n	80021c4 <HAL_CAN_ConfigFilter+0x1b0>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
  }
}
 8002100:	4618      	mov	r0, r3
 8002102:	371c      	adds	r7, #28
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	40006400 	.word	0x40006400

08002110 <HAL_CAN_Start>:
=======
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
  }
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	371c      	adds	r7, #28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	40006400 	.word	0x40006400

080021d4 <HAL_CAN_Start>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b01      	cmp	r3, #1
 8002122:	d12e      	bne.n	8002182 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0201 	bic.w	r2, r2, #1
 800213a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800213c:	f7ff fdba 	bl	8001cb4 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002142:	e012      	b.n	800216a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002144:	f7ff fdb6 	bl	8001cb4 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b0a      	cmp	r3, #10
 8002150:	d90b      	bls.n	800216a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002156:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2205      	movs	r2, #5
 8002162:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e012      	b.n	8002190 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1e5      	bne.n	8002144 <HAL_CAN_Start+0x34>
=======
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d12e      	bne.n	8002246 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0201 	bic.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002200:	f7ff fdba 	bl	8001d78 <HAL_GetTick>
 8002204:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002206:	e012      	b.n	800222e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002208:	f7ff fdb6 	bl	8001d78 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b0a      	cmp	r3, #10
 8002214:	d90b      	bls.n	800222e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2205      	movs	r2, #5
 8002226:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e012      	b.n	8002254 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1e5      	bne.n	8002208 <HAL_CAN_Start+0x34>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
<<<<<<< HEAD
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e006      	b.n	8002190 <HAL_CAN_Start+0x80>
=======
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	e006      	b.n	8002254 <HAL_CAN_Start+0x80>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
<<<<<<< HEAD
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002186:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
  }
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_CAN_Stop>:
=======
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
  }
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_CAN_Stop>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d133      	bne.n	8002214 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0201 	orr.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021bc:	f7ff fd7a 	bl	8001cb4 <HAL_GetTick>
 80021c0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021c2:	e012      	b.n	80021ea <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021c4:	f7ff fd76 	bl	8001cb4 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b0a      	cmp	r3, #10
 80021d0:	d90b      	bls.n	80021ea <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2205      	movs	r2, #5
 80021e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e01b      	b.n	8002222 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0e5      	beq.n	80021c4 <HAL_CAN_Stop+0x2c>
=======
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3020 	ldrb.w	r3, [r3, #32]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d133      	bne.n	80022d8 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0201 	orr.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002280:	f7ff fd7a 	bl	8001d78 <HAL_GetTick>
 8002284:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002286:	e012      	b.n	80022ae <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002288:	f7ff fd76 	bl	8001d78 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b0a      	cmp	r3, #10
 8002294:	d90b      	bls.n	80022ae <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2205      	movs	r2, #5
 80022a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e01b      	b.n	80022e6 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0e5      	beq.n	8002288 <HAL_CAN_Stop+0x2c>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
<<<<<<< HEAD
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0202 	bic.w	r2, r2, #2
 8002206:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	e006      	b.n	8002222 <HAL_CAN_Stop+0x8a>
=======
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0202 	bic.w	r2, r2, #2
 80022ca:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	e006      	b.n	80022e6 <HAL_CAN_Stop+0x8a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
<<<<<<< HEAD
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002218:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
  }
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_CAN_AddTxMessage>:
=======
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022dc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
  }
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_CAN_AddTxMessage>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
<<<<<<< HEAD
 800222a:	b480      	push	{r7}
 800222c:	b089      	sub	sp, #36	@ 0x24
 800222e:	af00      	add	r7, sp, #0
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
 8002236:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800223e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	61bb      	str	r3, [r7, #24]
=======
 80022ee:	b480      	push	{r7}
 80022f0:	b089      	sub	sp, #36	@ 0x24
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	60f8      	str	r0, [r7, #12]
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002302:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	61bb      	str	r3, [r7, #24]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
<<<<<<< HEAD
 8002248:	7ffb      	ldrb	r3, [r7, #31]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d003      	beq.n	8002256 <HAL_CAN_AddTxMessage+0x2c>
 800224e:	7ffb      	ldrb	r3, [r7, #31]
 8002250:	2b02      	cmp	r3, #2
 8002252:	f040 80b8 	bne.w	80023c6 <HAL_CAN_AddTxMessage+0x19c>
=======
 800230c:	7ffb      	ldrb	r3, [r7, #31]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d003      	beq.n	800231a <HAL_CAN_AddTxMessage+0x2c>
 8002312:	7ffb      	ldrb	r3, [r7, #31]
 8002314:	2b02      	cmp	r3, #2
 8002316:	f040 80b8 	bne.w	800248a <HAL_CAN_AddTxMessage+0x19c>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
<<<<<<< HEAD
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10a      	bne.n	8002276 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002266:	2b00      	cmp	r3, #0
 8002268:	d105      	bne.n	8002276 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80a0 	beq.w	80023b6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	0e1b      	lsrs	r3, r3, #24
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d907      	bls.n	8002296 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e09e      	b.n	80023d4 <HAL_CAN_AddTxMessage+0x1aa>
=======
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10a      	bne.n	800233a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800232a:	2b00      	cmp	r3, #0
 800232c:	d105      	bne.n	800233a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80a0 	beq.w	800247a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	0e1b      	lsrs	r3, r3, #24
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d907      	bls.n	800235a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e09e      	b.n	8002498 <HAL_CAN_AddTxMessage+0x1aa>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
<<<<<<< HEAD
 8002296:	2201      	movs	r2, #1
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	409a      	lsls	r2, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10d      	bne.n	80022c4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022b2:	68f9      	ldr	r1, [r7, #12]
 80022b4:	6809      	ldr	r1, [r1, #0]
 80022b6:	431a      	orrs	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	3318      	adds	r3, #24
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	440b      	add	r3, r1
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	e00f      	b.n	80022e4 <HAL_CAN_AddTxMessage+0xba>
=======
 800235a:	2201      	movs	r2, #1
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	409a      	lsls	r2, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10d      	bne.n	8002388 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002376:	68f9      	ldr	r1, [r7, #12]
 8002378:	6809      	ldr	r1, [r1, #0]
 800237a:	431a      	orrs	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	3318      	adds	r3, #24
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	440b      	add	r3, r1
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	e00f      	b.n	80023a8 <HAL_CAN_AddTxMessage+0xba>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
<<<<<<< HEAD
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022ce:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022d4:	68f9      	ldr	r1, [r7, #12]
 80022d6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80022d8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	3318      	adds	r3, #24
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	440b      	add	r3, r1
 80022e2:	601a      	str	r2, [r3, #0]
=======
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002392:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002398:	68f9      	ldr	r1, [r7, #12]
 800239a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800239c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	3318      	adds	r3, #24
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	440b      	add	r3, r1
 80023a6:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
<<<<<<< HEAD
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6819      	ldr	r1, [r3, #0]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	3318      	adds	r3, #24
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	440b      	add	r3, r1
 80022f4:	3304      	adds	r3, #4
 80022f6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	7d1b      	ldrb	r3, [r3, #20]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d111      	bne.n	8002324 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	3318      	adds	r3, #24
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	4413      	add	r3, r2
 800230c:	3304      	adds	r3, #4
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	6811      	ldr	r1, [r2, #0]
 8002314:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	3318      	adds	r3, #24
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	440b      	add	r3, r1
 8002320:	3304      	adds	r3, #4
 8002322:	601a      	str	r2, [r3, #0]
=======
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6819      	ldr	r1, [r3, #0]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	691a      	ldr	r2, [r3, #16]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	3318      	adds	r3, #24
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	440b      	add	r3, r1
 80023b8:	3304      	adds	r3, #4
 80023ba:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	7d1b      	ldrb	r3, [r3, #20]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d111      	bne.n	80023e8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	3318      	adds	r3, #24
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	4413      	add	r3, r2
 80023d0:	3304      	adds	r3, #4
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	6811      	ldr	r1, [r2, #0]
 80023d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	3318      	adds	r3, #24
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	440b      	add	r3, r1
 80023e4:	3304      	adds	r3, #4
 80023e6:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
<<<<<<< HEAD
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3307      	adds	r3, #7
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	061a      	lsls	r2, r3, #24
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3306      	adds	r3, #6
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	041b      	lsls	r3, r3, #16
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3305      	adds	r3, #5
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	021b      	lsls	r3, r3, #8
 800233e:	4313      	orrs	r3, r2
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	3204      	adds	r2, #4
 8002344:	7812      	ldrb	r2, [r2, #0]
 8002346:	4610      	mov	r0, r2
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	6811      	ldr	r1, [r2, #0]
 800234c:	ea43 0200 	orr.w	r2, r3, r0
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	440b      	add	r3, r1
 8002356:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800235a:	601a      	str	r2, [r3, #0]
=======
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3307      	adds	r3, #7
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	061a      	lsls	r2, r3, #24
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3306      	adds	r3, #6
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	041b      	lsls	r3, r3, #16
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3305      	adds	r3, #5
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	021b      	lsls	r3, r3, #8
 8002402:	4313      	orrs	r3, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	3204      	adds	r2, #4
 8002408:	7812      	ldrb	r2, [r2, #0]
 800240a:	4610      	mov	r0, r2
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	6811      	ldr	r1, [r2, #0]
 8002410:	ea43 0200 	orr.w	r2, r3, r0
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	440b      	add	r3, r1
 800241a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800241e:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
<<<<<<< HEAD
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3303      	adds	r3, #3
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	061a      	lsls	r2, r3, #24
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3302      	adds	r3, #2
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	041b      	lsls	r3, r3, #16
 800236c:	431a      	orrs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3301      	adds	r3, #1
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	4313      	orrs	r3, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	7812      	ldrb	r2, [r2, #0]
 800237c:	4610      	mov	r0, r2
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	6811      	ldr	r1, [r2, #0]
 8002382:	ea43 0200 	orr.w	r2, r3, r0
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	440b      	add	r3, r1
 800238c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002390:	601a      	str	r2, [r3, #0]
=======
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3303      	adds	r3, #3
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	061a      	lsls	r2, r3, #24
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3302      	adds	r3, #2
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	041b      	lsls	r3, r3, #16
 8002430:	431a      	orrs	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3301      	adds	r3, #1
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	4313      	orrs	r3, r2
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	7812      	ldrb	r2, [r2, #0]
 8002440:	4610      	mov	r0, r2
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	6811      	ldr	r1, [r2, #0]
 8002446:	ea43 0200 	orr.w	r2, r3, r0
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	440b      	add	r3, r1
 8002450:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002454:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
<<<<<<< HEAD
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	3318      	adds	r3, #24
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	4413      	add	r3, r2
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	6811      	ldr	r1, [r2, #0]
 80023a4:	f043 0201 	orr.w	r2, r3, #1
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	3318      	adds	r3, #24
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	440b      	add	r3, r1
 80023b0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	e00e      	b.n	80023d4 <HAL_CAN_AddTxMessage+0x1aa>
=======
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	3318      	adds	r3, #24
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	4413      	add	r3, r2
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	6811      	ldr	r1, [r2, #0]
 8002468:	f043 0201 	orr.w	r2, r3, #1
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	3318      	adds	r3, #24
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	440b      	add	r3, r1
 8002474:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	e00e      	b.n	8002498 <HAL_CAN_AddTxMessage+0x1aa>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
<<<<<<< HEAD
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e006      	b.n	80023d4 <HAL_CAN_AddTxMessage+0x1aa>
=======
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e006      	b.n	8002498 <HAL_CAN_AddTxMessage+0x1aa>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
  }
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3724      	adds	r7, #36	@ 0x24
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_CAN_GetRxMessage>:
=======
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
  }
}
 8002498:	4618      	mov	r0, r3
 800249a:	3724      	adds	r7, #36	@ 0x24
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_CAN_GetRxMessage>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
<<<<<<< HEAD
 80023e0:	b480      	push	{r7}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023f4:	75fb      	strb	r3, [r7, #23]
=======
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024b8:	75fb      	strb	r3, [r7, #23]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
<<<<<<< HEAD
 80023f6:	7dfb      	ldrb	r3, [r7, #23]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d003      	beq.n	8002404 <HAL_CAN_GetRxMessage+0x24>
 80023fc:	7dfb      	ldrb	r3, [r7, #23]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	f040 80f3 	bne.w	80025ea <HAL_CAN_GetRxMessage+0x20a>
=======
 80024ba:	7dfb      	ldrb	r3, [r7, #23]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d003      	beq.n	80024c8 <HAL_CAN_GetRxMessage+0x24>
 80024c0:	7dfb      	ldrb	r3, [r7, #23]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	f040 80f3 	bne.w	80026ae <HAL_CAN_GetRxMessage+0x20a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
<<<<<<< HEAD
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10e      	bne.n	8002428 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d116      	bne.n	8002446 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0e7      	b.n	80025f8 <HAL_CAN_GetRxMessage+0x218>
=======
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10e      	bne.n	80024ec <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d116      	bne.n	800250a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0e7      	b.n	80026bc <HAL_CAN_GetRxMessage+0x218>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
<<<<<<< HEAD
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d107      	bne.n	8002446 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e0d8      	b.n	80025f8 <HAL_CAN_GetRxMessage+0x218>
=======
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d107      	bne.n	800250a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0d8      	b.n	80026bc <HAL_CAN_GetRxMessage+0x218>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
<<<<<<< HEAD
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	331b      	adds	r3, #27
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	4413      	add	r3, r2
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0204 	and.w	r2, r3, #4
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10c      	bne.n	800247e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	331b      	adds	r3, #27
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	4413      	add	r3, r2
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	0d5b      	lsrs	r3, r3, #21
 8002474:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e00b      	b.n	8002496 <HAL_CAN_GetRxMessage+0xb6>
=======
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	331b      	adds	r3, #27
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	4413      	add	r3, r2
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0204 	and.w	r2, r3, #4
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10c      	bne.n	8002542 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	331b      	adds	r3, #27
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	4413      	add	r3, r2
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	0d5b      	lsrs	r3, r3, #21
 8002538:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e00b      	b.n	800255a <HAL_CAN_GetRxMessage+0xb6>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
<<<<<<< HEAD
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	331b      	adds	r3, #27
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	4413      	add	r3, r2
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	08db      	lsrs	r3, r3, #3
 800248e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	331b      	adds	r3, #27
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	4413      	add	r3, r2
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0202 	and.w	r2, r3, #2
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	331b      	adds	r3, #27
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	4413      	add	r3, r2
 80024b8:	3304      	adds	r3, #4
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 020f 	and.w	r2, r3, #15
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	331b      	adds	r3, #27
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	4413      	add	r3, r2
 80024d0:	3304      	adds	r3, #4
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	331b      	adds	r3, #27
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	4413      	add	r3, r2
 80024e8:	3304      	adds	r3, #4
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	0c1b      	lsrs	r3, r3, #16
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	b2da      	uxtb	r2, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	4413      	add	r3, r2
 8002514:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	0a1a      	lsrs	r2, r3, #8
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	3301      	adds	r3, #1
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	4413      	add	r3, r2
 800252e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	0c1a      	lsrs	r2, r3, #16
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	3302      	adds	r3, #2
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	4413      	add	r3, r2
 8002548:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	0e1a      	lsrs	r2, r3, #24
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	3303      	adds	r3, #3
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	4413      	add	r3, r2
 8002562:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	3304      	adds	r3, #4
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	4413      	add	r3, r2
 800257a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	0a1a      	lsrs	r2, r3, #8
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	3305      	adds	r3, #5
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	4413      	add	r3, r2
 8002594:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	0c1a      	lsrs	r2, r3, #16
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	3306      	adds	r3, #6
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0e1a      	lsrs	r2, r3, #24
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	3307      	adds	r3, #7
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d108      	bne.n	80025d6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0220 	orr.w	r2, r2, #32
 80025d2:	60da      	str	r2, [r3, #12]
 80025d4:	e007      	b.n	80025e6 <HAL_CAN_GetRxMessage+0x206>
=======
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	331b      	adds	r3, #27
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	4413      	add	r3, r2
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	08db      	lsrs	r3, r3, #3
 8002552:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	331b      	adds	r3, #27
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	4413      	add	r3, r2
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0202 	and.w	r2, r3, #2
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	331b      	adds	r3, #27
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	4413      	add	r3, r2
 800257c:	3304      	adds	r3, #4
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 020f 	and.w	r2, r3, #15
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	331b      	adds	r3, #27
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	4413      	add	r3, r2
 8002594:	3304      	adds	r3, #4
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	b2da      	uxtb	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	331b      	adds	r3, #27
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	4413      	add	r3, r2
 80025ac:	3304      	adds	r3, #4
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	0a1a      	lsrs	r2, r3, #8
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	3301      	adds	r3, #1
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	0c1a      	lsrs	r2, r3, #16
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	3302      	adds	r3, #2
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	4413      	add	r3, r2
 800260c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	0e1a      	lsrs	r2, r3, #24
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	3303      	adds	r3, #3
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	4413      	add	r3, r2
 8002626:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	3304      	adds	r3, #4
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	4413      	add	r3, r2
 800263e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	0a1a      	lsrs	r2, r3, #8
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	3305      	adds	r3, #5
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	4413      	add	r3, r2
 8002658:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	0c1a      	lsrs	r2, r3, #16
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	3306      	adds	r3, #6
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	4413      	add	r3, r2
 8002672:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0e1a      	lsrs	r2, r3, #24
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	3307      	adds	r3, #7
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d108      	bne.n	800269a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0220 	orr.w	r2, r2, #32
 8002696:	60da      	str	r2, [r3, #12]
 8002698:	e007      	b.n	80026aa <HAL_CAN_GetRxMessage+0x206>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
<<<<<<< HEAD
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0220 	orr.w	r2, r2, #32
 80025e4:	611a      	str	r2, [r3, #16]
=======
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0220 	orr.w	r2, r2, #32
 80026a8:	611a      	str	r2, [r3, #16]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }

    /* Return function status */
    return HAL_OK;
<<<<<<< HEAD
 80025e6:	2300      	movs	r3, #0
 80025e8:	e006      	b.n	80025f8 <HAL_CAN_GetRxMessage+0x218>
=======
 80026aa:	2300      	movs	r3, #0
 80026ac:	e006      	b.n	80026bc <HAL_CAN_GetRxMessage+0x218>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
  }
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	371c      	adds	r7, #28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <HAL_CAN_ActivateNotification>:
=======
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
  }
}
 80026bc:	4618      	mov	r0, r3
 80026be:	371c      	adds	r7, #28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_CAN_ActivateNotification>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
<<<<<<< HEAD
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002614:	73fb      	strb	r3, [r7, #15]
=======
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d8:	73fb      	strb	r3, [r7, #15]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
<<<<<<< HEAD
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d002      	beq.n	8002622 <HAL_CAN_ActivateNotification+0x1e>
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d109      	bne.n	8002636 <HAL_CAN_ActivateNotification+0x32>
=======
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d002      	beq.n	80026e6 <HAL_CAN_ActivateNotification+0x1e>
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d109      	bne.n	80026fa <HAL_CAN_ActivateNotification+0x32>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
<<<<<<< HEAD
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6959      	ldr	r1, [r3, #20]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	e006      	b.n	8002644 <HAL_CAN_ActivateNotification+0x40>
=======
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6959      	ldr	r1, [r3, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	e006      	b.n	8002708 <HAL_CAN_ActivateNotification+0x40>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
  }
}
 8002644:	4618      	mov	r0, r3
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_CAN_IRQHandler>:
=======
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
  }
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002724:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d002      	beq.n	8002732 <HAL_CAN_DeactivateNotification+0x1e>
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d10a      	bne.n	8002748 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6959      	ldr	r1, [r3, #20]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	43da      	mvns	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	400a      	ands	r2, r1
 8002742:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	e006      	b.n	8002756 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
  }
}
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <HAL_CAN_IRQHandler>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	@ 0x28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002658:	2300      	movs	r3, #0
 800265a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d07c      	beq.n	8002790 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d023      	beq.n	80026e8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2201      	movs	r2, #1
 80026a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_CAN_IRQHandler+0x6a>
=======
 8002762:	b580      	push	{r7, lr}
 8002764:	b08a      	sub	sp, #40	@ 0x28
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800276a:	2300      	movs	r3, #0
 800276c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d07c      	beq.n	80028a2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d023      	beq.n	80027fa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2201      	movs	r2, #1
 80027b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_CAN_IRQHandler+0x6a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
<<<<<<< HEAD
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f983 	bl	80029be <HAL_CAN_TxMailbox0CompleteCallback>
 80026b8:	e016      	b.n	80026e8 <HAL_CAN_IRQHandler+0x98>
=======
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f983 	bl	8002ad0 <HAL_CAN_TxMailbox0CompleteCallback>
 80027ca:	e016      	b.n	80027fa <HAL_CAN_IRQHandler+0x98>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
<<<<<<< HEAD
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d004      	beq.n	80026ce <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80026c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80026cc:	e00c      	b.n	80026e8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d004      	beq.n	80026e2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026de:	627b      	str	r3, [r7, #36]	@ 0x24
 80026e0:	e002      	b.n	80026e8 <HAL_CAN_IRQHandler+0x98>
=======
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d004      	beq.n	80027e0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80027de:	e00c      	b.n	80027fa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d004      	beq.n	80027f4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80027f2:	e002      	b.n	80027fa <HAL_CAN_IRQHandler+0x98>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
<<<<<<< HEAD
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f989 	bl	80029fa <HAL_CAN_TxMailbox0AbortCallback>
=======
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f989 	bl	8002b0c <HAL_CAN_TxMailbox0AbortCallback>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
<<<<<<< HEAD
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d024      	beq.n	800273c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_CAN_IRQHandler+0xbe>
=======
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d024      	beq.n	800284e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800280c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_CAN_IRQHandler+0xbe>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
<<<<<<< HEAD
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f963 	bl	80029d2 <HAL_CAN_TxMailbox1CompleteCallback>
 800270c:	e016      	b.n	800273c <HAL_CAN_IRQHandler+0xec>
=======
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f963 	bl	8002ae4 <HAL_CAN_TxMailbox1CompleteCallback>
 800281e:	e016      	b.n	800284e <HAL_CAN_IRQHandler+0xec>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
<<<<<<< HEAD
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d004      	beq.n	8002722 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800271e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002720:	e00c      	b.n	800273c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002728:	2b00      	cmp	r3, #0
 800272a:	d004      	beq.n	8002736 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002732:	627b      	str	r3, [r7, #36]	@ 0x24
 8002734:	e002      	b.n	800273c <HAL_CAN_IRQHandler+0xec>
=======
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002826:	2b00      	cmp	r3, #0
 8002828:	d004      	beq.n	8002834 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800282a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002830:	627b      	str	r3, [r7, #36]	@ 0x24
 8002832:	e00c      	b.n	800284e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800283a:	2b00      	cmp	r3, #0
 800283c:	d004      	beq.n	8002848 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002844:	627b      	str	r3, [r7, #36]	@ 0x24
 8002846:	e002      	b.n	800284e <HAL_CAN_IRQHandler+0xec>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
<<<<<<< HEAD
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f969 	bl	8002a0e <HAL_CAN_TxMailbox1AbortCallback>
=======
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f969 	bl	8002b20 <HAL_CAN_TxMailbox1AbortCallback>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
<<<<<<< HEAD
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d024      	beq.n	8002790 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800274e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_CAN_IRQHandler+0x112>
=======
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d024      	beq.n	80028a2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002860:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_CAN_IRQHandler+0x112>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
<<<<<<< HEAD
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f943 	bl	80029e6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002760:	e016      	b.n	8002790 <HAL_CAN_IRQHandler+0x140>
=======
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f943 	bl	8002af8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002872:	e016      	b.n	80028a2 <HAL_CAN_IRQHandler+0x140>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
<<<<<<< HEAD
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d004      	beq.n	8002776 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800276c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24
 8002774:	e00c      	b.n	8002790 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d004      	beq.n	800278a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002782:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002786:	627b      	str	r3, [r7, #36]	@ 0x24
 8002788:	e002      	b.n	8002790 <HAL_CAN_IRQHandler+0x140>
=======
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d004      	beq.n	8002888 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002880:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002884:	627b      	str	r3, [r7, #36]	@ 0x24
 8002886:	e00c      	b.n	80028a2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d004      	beq.n	800289c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24
 800289a:	e002      	b.n	80028a2 <HAL_CAN_IRQHandler+0x140>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
<<<<<<< HEAD
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f949 	bl	8002a22 <HAL_CAN_TxMailbox2AbortCallback>
=======
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f949 	bl	8002b34 <HAL_CAN_TxMailbox2AbortCallback>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
<<<<<<< HEAD
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00c      	beq.n	80027b4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d007      	beq.n	80027b4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80027a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027aa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2210      	movs	r2, #16
 80027b2:	60da      	str	r2, [r3, #12]
=======
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00c      	beq.n	80028c6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d007      	beq.n	80028c6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028bc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2210      	movs	r2, #16
 80028c4:	60da      	str	r2, [r3, #12]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
<<<<<<< HEAD
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00b      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d006      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2208      	movs	r2, #8
 80027ce:	60da      	str	r2, [r3, #12]
=======
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00b      	beq.n	80028e8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d006      	beq.n	80028e8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2208      	movs	r2, #8
 80028e0:	60da      	str	r2, [r3, #12]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
<<<<<<< HEAD
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f930 	bl	8002a36 <HAL_CAN_RxFifo0FullCallback>
=======
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f930 	bl	8002b48 <HAL_CAN_RxFifo0FullCallback>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
<<<<<<< HEAD
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d009      	beq.n	80027f4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <HAL_CAN_IRQHandler+0x1a4>
=======
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <HAL_CAN_IRQHandler+0x1a4>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
<<<<<<< HEAD
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe fc6c 	bl	80010cc <HAL_CAN_RxFifo0MsgPendingCallback>
=======
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7fe fc21 	bl	8001148 <HAL_CAN_RxFifo0MsgPendingCallback>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
<<<<<<< HEAD
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00c      	beq.n	8002818 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	2b00      	cmp	r3, #0
 8002806:	d007      	beq.n	8002818 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800280e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2210      	movs	r2, #16
 8002816:	611a      	str	r2, [r3, #16]
=======
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00c      	beq.n	800292a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f003 0310 	and.w	r3, r3, #16
 8002916:	2b00      	cmp	r3, #0
 8002918:	d007      	beq.n	800292a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2210      	movs	r2, #16
 8002928:	611a      	str	r2, [r3, #16]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
<<<<<<< HEAD
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00b      	beq.n	800283a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d006      	beq.n	800283a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2208      	movs	r2, #8
 8002832:	611a      	str	r2, [r3, #16]
=======
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	f003 0320 	and.w	r3, r3, #32
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00b      	beq.n	800294c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b00      	cmp	r3, #0
 800293c:	d006      	beq.n	800294c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2208      	movs	r2, #8
 8002944:	611a      	str	r2, [r3, #16]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
<<<<<<< HEAD
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f912 	bl	8002a5e <HAL_CAN_RxFifo1FullCallback>
=======
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f912 	bl	8002b70 <HAL_CAN_RxFifo1FullCallback>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
<<<<<<< HEAD
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b00      	cmp	r3, #0
 8002842:	d009      	beq.n	8002858 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <HAL_CAN_IRQHandler+0x208>
=======
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	f003 0310 	and.w	r3, r3, #16
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d002      	beq.n	800296a <HAL_CAN_IRQHandler+0x208>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
<<<<<<< HEAD
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f8f9 	bl	8002a4a <HAL_CAN_RxFifo1MsgPendingCallback>
=======
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f8f9 	bl	8002b5c <HAL_CAN_RxFifo1MsgPendingCallback>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
<<<<<<< HEAD
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00b      	beq.n	800287a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b00      	cmp	r3, #0
 800286a:	d006      	beq.n	800287a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2210      	movs	r2, #16
 8002872:	605a      	str	r2, [r3, #4]
=======
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00b      	beq.n	800298c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	2b00      	cmp	r3, #0
 800297c:	d006      	beq.n	800298c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2210      	movs	r2, #16
 8002984:	605a      	str	r2, [r3, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
<<<<<<< HEAD
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f8fc 	bl	8002a72 <HAL_CAN_SleepCallback>
=======
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f8fc 	bl	8002b84 <HAL_CAN_SleepCallback>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
<<<<<<< HEAD
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00b      	beq.n	800289c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d006      	beq.n	800289c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2208      	movs	r2, #8
 8002894:	605a      	str	r2, [r3, #4]
=======
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d006      	beq.n	80029ae <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2208      	movs	r2, #8
 80029a6:	605a      	str	r2, [r3, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
<<<<<<< HEAD
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f8f5 	bl	8002a86 <HAL_CAN_WakeUpFromRxMsgCallback>
=======
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f8f5 	bl	8002b98 <HAL_CAN_WakeUpFromRxMsgCallback>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
<<<<<<< HEAD
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d07b      	beq.n	800299e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d072      	beq.n	8002996 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d008      	beq.n	80028cc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80028c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d07b      	beq.n	8002ab0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d072      	beq.n	8002aa8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
<<<<<<< HEAD
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80028e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e2:	f043 0302 	orr.w	r3, r3, #2
 80028e6:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
<<<<<<< HEAD
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d008      	beq.n	8002904 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80028fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fe:	f043 0304 	orr.w	r3, r3, #4
 8002902:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	f043 0304 	orr.w	r3, r3, #4
 8002a14:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
<<<<<<< HEAD
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800290a:	2b00      	cmp	r3, #0
 800290c:	d043      	beq.n	8002996 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002914:	2b00      	cmp	r3, #0
 8002916:	d03e      	beq.n	8002996 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800291e:	2b60      	cmp	r3, #96	@ 0x60
 8002920:	d02b      	beq.n	800297a <HAL_CAN_IRQHandler+0x32a>
 8002922:	2b60      	cmp	r3, #96	@ 0x60
 8002924:	d82e      	bhi.n	8002984 <HAL_CAN_IRQHandler+0x334>
 8002926:	2b50      	cmp	r3, #80	@ 0x50
 8002928:	d022      	beq.n	8002970 <HAL_CAN_IRQHandler+0x320>
 800292a:	2b50      	cmp	r3, #80	@ 0x50
 800292c:	d82a      	bhi.n	8002984 <HAL_CAN_IRQHandler+0x334>
 800292e:	2b40      	cmp	r3, #64	@ 0x40
 8002930:	d019      	beq.n	8002966 <HAL_CAN_IRQHandler+0x316>
 8002932:	2b40      	cmp	r3, #64	@ 0x40
 8002934:	d826      	bhi.n	8002984 <HAL_CAN_IRQHandler+0x334>
 8002936:	2b30      	cmp	r3, #48	@ 0x30
 8002938:	d010      	beq.n	800295c <HAL_CAN_IRQHandler+0x30c>
 800293a:	2b30      	cmp	r3, #48	@ 0x30
 800293c:	d822      	bhi.n	8002984 <HAL_CAN_IRQHandler+0x334>
 800293e:	2b10      	cmp	r3, #16
 8002940:	d002      	beq.n	8002948 <HAL_CAN_IRQHandler+0x2f8>
 8002942:	2b20      	cmp	r3, #32
 8002944:	d005      	beq.n	8002952 <HAL_CAN_IRQHandler+0x302>
=======
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d043      	beq.n	8002aa8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d03e      	beq.n	8002aa8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a30:	2b60      	cmp	r3, #96	@ 0x60
 8002a32:	d02b      	beq.n	8002a8c <HAL_CAN_IRQHandler+0x32a>
 8002a34:	2b60      	cmp	r3, #96	@ 0x60
 8002a36:	d82e      	bhi.n	8002a96 <HAL_CAN_IRQHandler+0x334>
 8002a38:	2b50      	cmp	r3, #80	@ 0x50
 8002a3a:	d022      	beq.n	8002a82 <HAL_CAN_IRQHandler+0x320>
 8002a3c:	2b50      	cmp	r3, #80	@ 0x50
 8002a3e:	d82a      	bhi.n	8002a96 <HAL_CAN_IRQHandler+0x334>
 8002a40:	2b40      	cmp	r3, #64	@ 0x40
 8002a42:	d019      	beq.n	8002a78 <HAL_CAN_IRQHandler+0x316>
 8002a44:	2b40      	cmp	r3, #64	@ 0x40
 8002a46:	d826      	bhi.n	8002a96 <HAL_CAN_IRQHandler+0x334>
 8002a48:	2b30      	cmp	r3, #48	@ 0x30
 8002a4a:	d010      	beq.n	8002a6e <HAL_CAN_IRQHandler+0x30c>
 8002a4c:	2b30      	cmp	r3, #48	@ 0x30
 8002a4e:	d822      	bhi.n	8002a96 <HAL_CAN_IRQHandler+0x334>
 8002a50:	2b10      	cmp	r3, #16
 8002a52:	d002      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x2f8>
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d005      	beq.n	8002a64 <HAL_CAN_IRQHandler+0x302>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
<<<<<<< HEAD
 8002946:	e01d      	b.n	8002984 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294a:	f043 0308 	orr.w	r3, r3, #8
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002950:	e019      	b.n	8002986 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	f043 0310 	orr.w	r3, r3, #16
 8002958:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800295a:	e014      	b.n	8002986 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800295c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295e:	f043 0320 	orr.w	r3, r3, #32
 8002962:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002964:	e00f      	b.n	8002986 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800296c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800296e:	e00a      	b.n	8002986 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002976:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002978:	e005      	b.n	8002986 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002980:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002982:	e000      	b.n	8002986 <HAL_CAN_IRQHandler+0x336>
            break;
 8002984:	bf00      	nop
=======
 8002a58:	e01d      	b.n	8002a96 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	f043 0308 	orr.w	r3, r3, #8
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a62:	e019      	b.n	8002a98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	f043 0310 	orr.w	r3, r3, #16
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a6c:	e014      	b.n	8002a98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	f043 0320 	orr.w	r3, r3, #32
 8002a74:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a76:	e00f      	b.n	8002a98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a7e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a80:	e00a      	b.n	8002a98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a88:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a8a:	e005      	b.n	8002a98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a92:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a94:	e000      	b.n	8002a98 <HAL_CAN_IRQHandler+0x336>
            break;
 8002a96:	bf00      	nop
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
<<<<<<< HEAD
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699a      	ldr	r2, [r3, #24]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002994:	619a      	str	r2, [r3, #24]
=======
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002aa6:	619a      	str	r2, [r3, #24]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
<<<<<<< HEAD
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2204      	movs	r2, #4
 800299c:	605a      	str	r2, [r3, #4]
=======
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2204      	movs	r2, #4
 8002aae:	605a      	str	r2, [r3, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
<<<<<<< HEAD
 800299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d008      	beq.n	8002ac8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
<<<<<<< HEAD
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f872 	bl	8002a9a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80029b6:	bf00      	nop
 80029b8:	3728      	adds	r7, #40	@ 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_CAN_TxMailbox0CompleteCallback>:
=======
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f872 	bl	8002bac <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002ac8:	bf00      	nop
 8002aca:	3728      	adds	r7, #40	@ 0x28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_CAN_TxMailbox0CompleteCallback>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
=======
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_CAN_TxMailbox1CompleteCallback>:
=======
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_CAN_TxMailbox1CompleteCallback>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
=======
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_CAN_TxMailbox2CompleteCallback>:
=======
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_CAN_TxMailbox2CompleteCallback>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
=======
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <HAL_CAN_TxMailbox0AbortCallback>:
=======
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_CAN_TxMailbox0AbortCallback>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
=======
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <HAL_CAN_TxMailbox1AbortCallback>:
=======
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_CAN_TxMailbox1AbortCallback>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
=======
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <HAL_CAN_TxMailbox2AbortCallback>:
=======
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_CAN_TxMailbox2AbortCallback>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
=======
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_CAN_RxFifo0FullCallback>:
=======
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_CAN_RxFifo0FullCallback>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
=======
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
<<<<<<< HEAD
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <HAL_CAN_RxFifo1MsgPendingCallback>:
=======
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_CAN_RxFifo1MsgPendingCallback>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
=======
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <HAL_CAN_RxFifo1FullCallback>:
=======
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_CAN_RxFifo1FullCallback>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
=======
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
<<<<<<< HEAD
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_CAN_SleepCallback>:
=======
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_CAN_SleepCallback>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
=======
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_CAN_WakeUpFromRxMsgCallback>:
=======
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_CAN_WakeUpFromRxMsgCallback>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
=======
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_CAN_ErrorCallback>:
=======
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_CAN_ErrorCallback>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
=======
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <__NVIC_SetPriorityGrouping>:
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8002af4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002acc:	4013      	ands	r3, r2
 8002ace:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ad8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ae2:	4a04      	ldr	r2, [pc, #16]	@ (8002af4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	60d3      	str	r3, [r2, #12]
}
 8002ae8:	bf00      	nop
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <__NVIC_GetPriorityGrouping>:
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002afc:	4b04      	ldr	r3, [pc, #16]	@ (8002b10 <__NVIC_GetPriorityGrouping+0x18>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	0a1b      	lsrs	r3, r3, #8
 8002b02:	f003 0307 	and.w	r3, r3, #7
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <__NVIC_EnableIRQ>:
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	db0b      	blt.n	8002b3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	f003 021f 	and.w	r2, r3, #31
 8002b2c:	4907      	ldr	r1, [pc, #28]	@ (8002b4c <__NVIC_EnableIRQ+0x38>)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	2001      	movs	r0, #1
 8002b36:	fa00 f202 	lsl.w	r2, r0, r2
 8002b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	e000e100 	.word	0xe000e100

08002b50 <__NVIC_DisableIRQ>:
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	db12      	blt.n	8002b88 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	f003 021f 	and.w	r2, r3, #31
 8002b68:	490a      	ldr	r1, [pc, #40]	@ (8002b94 <__NVIC_DisableIRQ+0x44>)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	2001      	movs	r0, #1
 8002b72:	fa00 f202 	lsl.w	r2, r0, r2
 8002b76:	3320      	adds	r3, #32
 8002b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b7c:	f3bf 8f4f 	dsb	sy
}
 8002b80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b82:	f3bf 8f6f 	isb	sy
}
 8002b86:	bf00      	nop
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	e000e100 	.word	0xe000e100

08002b98 <__NVIC_SetPriority>:
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	6039      	str	r1, [r7, #0]
 8002ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	db0a      	blt.n	8002bc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	490c      	ldr	r1, [pc, #48]	@ (8002be4 <__NVIC_SetPriority+0x4c>)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	0112      	lsls	r2, r2, #4
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	440b      	add	r3, r1
 8002bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002bc0:	e00a      	b.n	8002bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4908      	ldr	r1, [pc, #32]	@ (8002be8 <__NVIC_SetPriority+0x50>)
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	3b04      	subs	r3, #4
 8002bd0:	0112      	lsls	r2, r2, #4
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	761a      	strb	r2, [r3, #24]
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	e000e100 	.word	0xe000e100
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <NVIC_EncodePriority>:
{
 8002bec:	b480      	push	{r7}
 8002bee:	b089      	sub	sp, #36	@ 0x24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f1c3 0307 	rsb	r3, r3, #7
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	bf28      	it	cs
 8002c0a:	2304      	movcs	r3, #4
 8002c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3304      	adds	r3, #4
 8002c12:	2b06      	cmp	r3, #6
 8002c14:	d902      	bls.n	8002c1c <NVIC_EncodePriority+0x30>
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3b03      	subs	r3, #3
 8002c1a:	e000      	b.n	8002c1e <NVIC_EncodePriority+0x32>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c20:	f04f 32ff 	mov.w	r2, #4294967295
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	401a      	ands	r2, r3
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c34:	f04f 31ff 	mov.w	r1, #4294967295
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3e:	43d9      	mvns	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c44:	4313      	orrs	r3, r2
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3724      	adds	r7, #36	@ 0x24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <HAL_NVIC_SetPriorityGrouping>:
=======
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <__NVIC_SetPriorityGrouping>:
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c04 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bf2:	4a04      	ldr	r2, [pc, #16]	@ (8002c04 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	60d3      	str	r3, [r2, #12]
}
 8002bf8:	bf00      	nop
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <__NVIC_GetPriorityGrouping>:
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c0c:	4b04      	ldr	r3, [pc, #16]	@ (8002c20 <__NVIC_GetPriorityGrouping+0x18>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	0a1b      	lsrs	r3, r3, #8
 8002c12:	f003 0307 	and.w	r3, r3, #7
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <__NVIC_EnableIRQ>:
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	db0b      	blt.n	8002c4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	f003 021f 	and.w	r2, r3, #31
 8002c3c:	4907      	ldr	r1, [pc, #28]	@ (8002c5c <__NVIC_EnableIRQ+0x38>)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	2001      	movs	r0, #1
 8002c46:	fa00 f202 	lsl.w	r2, r0, r2
 8002c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	e000e100 	.word	0xe000e100

08002c60 <__NVIC_DisableIRQ>:
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	db12      	blt.n	8002c98 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	f003 021f 	and.w	r2, r3, #31
 8002c78:	490a      	ldr	r1, [pc, #40]	@ (8002ca4 <__NVIC_DisableIRQ+0x44>)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	2001      	movs	r0, #1
 8002c82:	fa00 f202 	lsl.w	r2, r0, r2
 8002c86:	3320      	adds	r3, #32
 8002c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c8c:	f3bf 8f4f 	dsb	sy
}
 8002c90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c92:	f3bf 8f6f 	isb	sy
}
 8002c96:	bf00      	nop
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000e100 	.word	0xe000e100

08002ca8 <__NVIC_SetPriority>:
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	6039      	str	r1, [r7, #0]
 8002cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	db0a      	blt.n	8002cd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	490c      	ldr	r1, [pc, #48]	@ (8002cf4 <__NVIC_SetPriority+0x4c>)
 8002cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc6:	0112      	lsls	r2, r2, #4
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	440b      	add	r3, r1
 8002ccc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002cd0:	e00a      	b.n	8002ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	4908      	ldr	r1, [pc, #32]	@ (8002cf8 <__NVIC_SetPriority+0x50>)
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	3b04      	subs	r3, #4
 8002ce0:	0112      	lsls	r2, r2, #4
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	761a      	strb	r2, [r3, #24]
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	e000e100 	.word	0xe000e100
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <NVIC_EncodePriority>:
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b089      	sub	sp, #36	@ 0x24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f1c3 0307 	rsb	r3, r3, #7
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	bf28      	it	cs
 8002d1a:	2304      	movcs	r3, #4
 8002d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3304      	adds	r3, #4
 8002d22:	2b06      	cmp	r3, #6
 8002d24:	d902      	bls.n	8002d2c <NVIC_EncodePriority+0x30>
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	3b03      	subs	r3, #3
 8002d2a:	e000      	b.n	8002d2e <NVIC_EncodePriority+0x32>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d30:	f04f 32ff 	mov.w	r2, #4294967295
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43da      	mvns	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	401a      	ands	r2, r3
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d44:	f04f 31ff 	mov.w	r1, #4294967295
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4e:	43d9      	mvns	r1, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d54:	4313      	orrs	r3, r2
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3724      	adds	r7, #36	@ 0x24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
=======
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff ff28 	bl	8002ab0 <__NVIC_SetPriorityGrouping>
}
 8002c60:	bf00      	nop
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_NVIC_SetPriority>:
=======
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff ff28 	bl	8002bc0 <__NVIC_SetPriorityGrouping>
}
 8002d70:	bf00      	nop
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_NVIC_SetPriority>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
=======
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8002c7a:	f7ff ff3d 	bl	8002af8 <__NVIC_GetPriorityGrouping>
 8002c7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	68b9      	ldr	r1, [r7, #8]
 8002c84:	6978      	ldr	r0, [r7, #20]
 8002c86:	f7ff ffb1 	bl	8002bec <NVIC_EncodePriority>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c90:	4611      	mov	r1, r2
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff ff80 	bl	8002b98 <__NVIC_SetPriority>
}
 8002c98:	bf00      	nop
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_NVIC_EnableIRQ>:
=======
 8002d8a:	f7ff ff3d 	bl	8002c08 <__NVIC_GetPriorityGrouping>
 8002d8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68b9      	ldr	r1, [r7, #8]
 8002d94:	6978      	ldr	r0, [r7, #20]
 8002d96:	f7ff ffb1 	bl	8002cfc <NVIC_EncodePriority>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da0:	4611      	mov	r1, r2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff ff80 	bl	8002ca8 <__NVIC_SetPriority>
}
 8002da8:	bf00      	nop
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_NVIC_EnableIRQ>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ff30 	bl	8002b14 <__NVIC_EnableIRQ>
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff ff40 	bl	8002b50 <__NVIC_DisableIRQ>
=======
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff ff30 	bl	8002c24 <__NVIC_EnableIRQ>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08002cd8 <HAL_DMA_Abort_IT>:
=======
08002dcc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ff40 	bl	8002c60 <__NVIC_DisableIRQ>
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_DMA_Abort_IT>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d004      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2280      	movs	r2, #128	@ 0x80
 8002cf0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e00c      	b.n	8002d10 <HAL_DMA_Abort_IT+0x38>
=======
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d004      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2280      	movs	r2, #128	@ 0x80
 8002e00:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e00c      	b.n	8002e20 <HAL_DMA_Abort_IT+0x38>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< HEAD
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2205      	movs	r2, #5
 8002cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0201 	bic.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_GPIO_Init>:
=======
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2205      	movs	r2, #5
 8002e0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0201 	bic.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_GPIO_Init>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	@ 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61bb      	str	r3, [r7, #24]
=======
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	@ 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
 8002d36:	e16b      	b.n	8003010 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d38:	2201      	movs	r2, #1
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	f040 815a 	bne.w	800300a <HAL_GPIO_Init+0x2ee>
=======
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
 8002e46:	e16b      	b.n	8003120 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e48:	2201      	movs	r2, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	f040 815a 	bne.w	800311a <HAL_GPIO_Init+0x2ee>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
<<<<<<< HEAD
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d00b      	beq.n	8002d76 <HAL_GPIO_Init+0x5a>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d007      	beq.n	8002d76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d6a:	2b11      	cmp	r3, #17
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b12      	cmp	r3, #18
 8002d74:	d130      	bne.n	8002dd8 <HAL_GPIO_Init+0xbc>
=======
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d00b      	beq.n	8002e86 <HAL_GPIO_Init+0x5a>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d007      	beq.n	8002e86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e7a:	2b11      	cmp	r3, #17
 8002e7c:	d003      	beq.n	8002e86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b12      	cmp	r3, #18
 8002e84:	d130      	bne.n	8002ee8 <HAL_GPIO_Init+0xbc>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	2203      	movs	r2, #3
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dac:	2201      	movs	r2, #1
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 0201 	and.w	r2, r3, #1
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	605a      	str	r2, [r3, #4]
=======
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	2203      	movs	r2, #3
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43db      	mvns	r3, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 0201 	and.w	r2, r3, #1
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	605a      	str	r2, [r3, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	2203      	movs	r2, #3
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d003      	beq.n	8002e18 <HAL_GPIO_Init+0xfc>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b12      	cmp	r3, #18
 8002e16:	d123      	bne.n	8002e60 <HAL_GPIO_Init+0x144>
=======
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d003      	beq.n	8002f28 <HAL_GPIO_Init+0xfc>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b12      	cmp	r3, #18
 8002f26:	d123      	bne.n	8002f70 <HAL_GPIO_Init+0x144>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	08da      	lsrs	r2, r3, #3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3208      	adds	r2, #8
 8002e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	220f      	movs	r2, #15
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	08da      	lsrs	r2, r3, #3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3208      	adds	r2, #8
 8002e5a:	69b9      	ldr	r1, [r7, #24]
 8002e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	08da      	lsrs	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3208      	adds	r2, #8
 8002f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	220f      	movs	r2, #15
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	08da      	lsrs	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3208      	adds	r2, #8
 8002f6a:	69b9      	ldr	r1, [r7, #24]
 8002f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 0203 	and.w	r2, r3, #3
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	601a      	str	r2, [r3, #0]
=======
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0203 	and.w	r2, r3, #3
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80b4 	beq.w	800300a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	4b60      	ldr	r3, [pc, #384]	@ (8003028 <HAL_GPIO_Init+0x30c>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eaa:	4a5f      	ldr	r2, [pc, #380]	@ (8003028 <HAL_GPIO_Init+0x30c>)
 8002eac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8003028 <HAL_GPIO_Init+0x30c>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ebe:	4a5b      	ldr	r2, [pc, #364]	@ (800302c <HAL_GPIO_Init+0x310>)
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	089b      	lsrs	r3, r3, #2
 8002ec4:	3302      	adds	r3, #2
 8002ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	220f      	movs	r2, #15
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a52      	ldr	r2, [pc, #328]	@ (8003030 <HAL_GPIO_Init+0x314>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d02b      	beq.n	8002f42 <HAL_GPIO_Init+0x226>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a51      	ldr	r2, [pc, #324]	@ (8003034 <HAL_GPIO_Init+0x318>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d025      	beq.n	8002f3e <HAL_GPIO_Init+0x222>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a50      	ldr	r2, [pc, #320]	@ (8003038 <HAL_GPIO_Init+0x31c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d01f      	beq.n	8002f3a <HAL_GPIO_Init+0x21e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4f      	ldr	r2, [pc, #316]	@ (800303c <HAL_GPIO_Init+0x320>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d019      	beq.n	8002f36 <HAL_GPIO_Init+0x21a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4e      	ldr	r2, [pc, #312]	@ (8003040 <HAL_GPIO_Init+0x324>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d013      	beq.n	8002f32 <HAL_GPIO_Init+0x216>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a4d      	ldr	r2, [pc, #308]	@ (8003044 <HAL_GPIO_Init+0x328>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00d      	beq.n	8002f2e <HAL_GPIO_Init+0x212>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4c      	ldr	r2, [pc, #304]	@ (8003048 <HAL_GPIO_Init+0x32c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d007      	beq.n	8002f2a <HAL_GPIO_Init+0x20e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a4b      	ldr	r2, [pc, #300]	@ (800304c <HAL_GPIO_Init+0x330>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d101      	bne.n	8002f26 <HAL_GPIO_Init+0x20a>
 8002f22:	2307      	movs	r3, #7
 8002f24:	e00e      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f26:	2308      	movs	r3, #8
 8002f28:	e00c      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f2a:	2306      	movs	r3, #6
 8002f2c:	e00a      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f2e:	2305      	movs	r3, #5
 8002f30:	e008      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f32:	2304      	movs	r3, #4
 8002f34:	e006      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f36:	2303      	movs	r3, #3
 8002f38:	e004      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e002      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_GPIO_Init+0x228>
 8002f42:	2300      	movs	r3, #0
 8002f44:	69fa      	ldr	r2, [r7, #28]
 8002f46:	f002 0203 	and.w	r2, r2, #3
 8002f4a:	0092      	lsls	r2, r2, #2
 8002f4c:	4093      	lsls	r3, r2
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f54:	4935      	ldr	r1, [pc, #212]	@ (800302c <HAL_GPIO_Init+0x310>)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	089b      	lsrs	r3, r3, #2
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f62:	4b3b      	ldr	r3, [pc, #236]	@ (8003050 <HAL_GPIO_Init+0x334>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f86:	4a32      	ldr	r2, [pc, #200]	@ (8003050 <HAL_GPIO_Init+0x334>)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f8c:	4b30      	ldr	r3, [pc, #192]	@ (8003050 <HAL_GPIO_Init+0x334>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fb0:	4a27      	ldr	r2, [pc, #156]	@ (8003050 <HAL_GPIO_Init+0x334>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fb6:	4b26      	ldr	r3, [pc, #152]	@ (8003050 <HAL_GPIO_Init+0x334>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fda:	4a1d      	ldr	r2, [pc, #116]	@ (8003050 <HAL_GPIO_Init+0x334>)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8003050 <HAL_GPIO_Init+0x334>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003004:	4a12      	ldr	r2, [pc, #72]	@ (8003050 <HAL_GPIO_Init+0x334>)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3301      	adds	r3, #1
 800300e:	61fb      	str	r3, [r7, #28]
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	2b0f      	cmp	r3, #15
 8003014:	f67f ae90 	bls.w	8002d38 <HAL_GPIO_Init+0x1c>
=======
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80b4 	beq.w	800311a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	4b60      	ldr	r3, [pc, #384]	@ (8003138 <HAL_GPIO_Init+0x30c>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fba:	4a5f      	ldr	r2, [pc, #380]	@ (8003138 <HAL_GPIO_Init+0x30c>)
 8002fbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fc2:	4b5d      	ldr	r3, [pc, #372]	@ (8003138 <HAL_GPIO_Init+0x30c>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fce:	4a5b      	ldr	r2, [pc, #364]	@ (800313c <HAL_GPIO_Init+0x310>)
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	220f      	movs	r2, #15
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a52      	ldr	r2, [pc, #328]	@ (8003140 <HAL_GPIO_Init+0x314>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d02b      	beq.n	8003052 <HAL_GPIO_Init+0x226>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a51      	ldr	r2, [pc, #324]	@ (8003144 <HAL_GPIO_Init+0x318>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d025      	beq.n	800304e <HAL_GPIO_Init+0x222>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a50      	ldr	r2, [pc, #320]	@ (8003148 <HAL_GPIO_Init+0x31c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d01f      	beq.n	800304a <HAL_GPIO_Init+0x21e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a4f      	ldr	r2, [pc, #316]	@ (800314c <HAL_GPIO_Init+0x320>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d019      	beq.n	8003046 <HAL_GPIO_Init+0x21a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a4e      	ldr	r2, [pc, #312]	@ (8003150 <HAL_GPIO_Init+0x324>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d013      	beq.n	8003042 <HAL_GPIO_Init+0x216>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a4d      	ldr	r2, [pc, #308]	@ (8003154 <HAL_GPIO_Init+0x328>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00d      	beq.n	800303e <HAL_GPIO_Init+0x212>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a4c      	ldr	r2, [pc, #304]	@ (8003158 <HAL_GPIO_Init+0x32c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d007      	beq.n	800303a <HAL_GPIO_Init+0x20e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a4b      	ldr	r2, [pc, #300]	@ (800315c <HAL_GPIO_Init+0x330>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d101      	bne.n	8003036 <HAL_GPIO_Init+0x20a>
 8003032:	2307      	movs	r3, #7
 8003034:	e00e      	b.n	8003054 <HAL_GPIO_Init+0x228>
 8003036:	2308      	movs	r3, #8
 8003038:	e00c      	b.n	8003054 <HAL_GPIO_Init+0x228>
 800303a:	2306      	movs	r3, #6
 800303c:	e00a      	b.n	8003054 <HAL_GPIO_Init+0x228>
 800303e:	2305      	movs	r3, #5
 8003040:	e008      	b.n	8003054 <HAL_GPIO_Init+0x228>
 8003042:	2304      	movs	r3, #4
 8003044:	e006      	b.n	8003054 <HAL_GPIO_Init+0x228>
 8003046:	2303      	movs	r3, #3
 8003048:	e004      	b.n	8003054 <HAL_GPIO_Init+0x228>
 800304a:	2302      	movs	r3, #2
 800304c:	e002      	b.n	8003054 <HAL_GPIO_Init+0x228>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_GPIO_Init+0x228>
 8003052:	2300      	movs	r3, #0
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	f002 0203 	and.w	r2, r2, #3
 800305a:	0092      	lsls	r2, r2, #2
 800305c:	4093      	lsls	r3, r2
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003064:	4935      	ldr	r1, [pc, #212]	@ (800313c <HAL_GPIO_Init+0x310>)
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	089b      	lsrs	r3, r3, #2
 800306a:	3302      	adds	r3, #2
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003072:	4b3b      	ldr	r3, [pc, #236]	@ (8003160 <HAL_GPIO_Init+0x334>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003096:	4a32      	ldr	r2, [pc, #200]	@ (8003160 <HAL_GPIO_Init+0x334>)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800309c:	4b30      	ldr	r3, [pc, #192]	@ (8003160 <HAL_GPIO_Init+0x334>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030c0:	4a27      	ldr	r2, [pc, #156]	@ (8003160 <HAL_GPIO_Init+0x334>)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030c6:	4b26      	ldr	r3, [pc, #152]	@ (8003160 <HAL_GPIO_Init+0x334>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003160 <HAL_GPIO_Init+0x334>)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003160 <HAL_GPIO_Init+0x334>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003114:	4a12      	ldr	r2, [pc, #72]	@ (8003160 <HAL_GPIO_Init+0x334>)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3301      	adds	r3, #1
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b0f      	cmp	r3, #15
 8003124:	f67f ae90 	bls.w	8002e48 <HAL_GPIO_Init+0x1c>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
    }
  }
}
<<<<<<< HEAD
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	3724      	adds	r7, #36	@ 0x24
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800
 800302c:	40013800 	.word	0x40013800
 8003030:	40020000 	.word	0x40020000
 8003034:	40020400 	.word	0x40020400
 8003038:	40020800 	.word	0x40020800
 800303c:	40020c00 	.word	0x40020c00
 8003040:	40021000 	.word	0x40021000
 8003044:	40021400 	.word	0x40021400
 8003048:	40021800 	.word	0x40021800
 800304c:	40021c00 	.word	0x40021c00
 8003050:	40013c00 	.word	0x40013c00

08003054 <HAL_GPIO_DeInit>:
=======
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	3724      	adds	r7, #36	@ 0x24
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	40013800 	.word	0x40013800
 8003140:	40020000 	.word	0x40020000
 8003144:	40020400 	.word	0x40020400
 8003148:	40020800 	.word	0x40020800
 800314c:	40020c00 	.word	0x40020c00
 8003150:	40021000 	.word	0x40021000
 8003154:	40021400 	.word	0x40021400
 8003158:	40021800 	.word	0x40021800
 800315c:	40021c00 	.word	0x40021c00
 8003160:	40013c00 	.word	0x40013c00

08003164 <HAL_GPIO_DeInit>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
<<<<<<< HEAD
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800305e:	2300      	movs	r3, #0
 8003060:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003066:	2300      	movs	r3, #0
 8003068:	60bb      	str	r3, [r7, #8]
=======
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003176:	2300      	movs	r3, #0
 8003178:	60bb      	str	r3, [r7, #8]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	e0cd      	b.n	800320c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003070:	2201      	movs	r2, #1
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4013      	ands	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	429a      	cmp	r2, r3
 8003088:	f040 80bd 	bne.w	8003206 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800308c:	4a65      	ldr	r2, [pc, #404]	@ (8003224 <HAL_GPIO_DeInit+0x1d0>)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	3302      	adds	r3, #2
 8003094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003098:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	220f      	movs	r2, #15
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	4013      	ands	r3, r2
 80030ac:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a5d      	ldr	r2, [pc, #372]	@ (8003228 <HAL_GPIO_DeInit+0x1d4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d02b      	beq.n	800310e <HAL_GPIO_DeInit+0xba>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a5c      	ldr	r2, [pc, #368]	@ (800322c <HAL_GPIO_DeInit+0x1d8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d025      	beq.n	800310a <HAL_GPIO_DeInit+0xb6>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a5b      	ldr	r2, [pc, #364]	@ (8003230 <HAL_GPIO_DeInit+0x1dc>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d01f      	beq.n	8003106 <HAL_GPIO_DeInit+0xb2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a5a      	ldr	r2, [pc, #360]	@ (8003234 <HAL_GPIO_DeInit+0x1e0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d019      	beq.n	8003102 <HAL_GPIO_DeInit+0xae>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a59      	ldr	r2, [pc, #356]	@ (8003238 <HAL_GPIO_DeInit+0x1e4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d013      	beq.n	80030fe <HAL_GPIO_DeInit+0xaa>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a58      	ldr	r2, [pc, #352]	@ (800323c <HAL_GPIO_DeInit+0x1e8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00d      	beq.n	80030fa <HAL_GPIO_DeInit+0xa6>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a57      	ldr	r2, [pc, #348]	@ (8003240 <HAL_GPIO_DeInit+0x1ec>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d007      	beq.n	80030f6 <HAL_GPIO_DeInit+0xa2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a56      	ldr	r2, [pc, #344]	@ (8003244 <HAL_GPIO_DeInit+0x1f0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d101      	bne.n	80030f2 <HAL_GPIO_DeInit+0x9e>
 80030ee:	2307      	movs	r3, #7
 80030f0:	e00e      	b.n	8003110 <HAL_GPIO_DeInit+0xbc>
 80030f2:	2308      	movs	r3, #8
 80030f4:	e00c      	b.n	8003110 <HAL_GPIO_DeInit+0xbc>
 80030f6:	2306      	movs	r3, #6
 80030f8:	e00a      	b.n	8003110 <HAL_GPIO_DeInit+0xbc>
 80030fa:	2305      	movs	r3, #5
 80030fc:	e008      	b.n	8003110 <HAL_GPIO_DeInit+0xbc>
 80030fe:	2304      	movs	r3, #4
 8003100:	e006      	b.n	8003110 <HAL_GPIO_DeInit+0xbc>
 8003102:	2303      	movs	r3, #3
 8003104:	e004      	b.n	8003110 <HAL_GPIO_DeInit+0xbc>
 8003106:	2302      	movs	r3, #2
 8003108:	e002      	b.n	8003110 <HAL_GPIO_DeInit+0xbc>
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <HAL_GPIO_DeInit+0xbc>
 800310e:	2300      	movs	r3, #0
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	f002 0203 	and.w	r2, r2, #3
 8003116:	0092      	lsls	r2, r2, #2
 8003118:	4093      	lsls	r3, r2
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	429a      	cmp	r2, r3
 800311e:	d132      	bne.n	8003186 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003120:	4b49      	ldr	r3, [pc, #292]	@ (8003248 <HAL_GPIO_DeInit+0x1f4>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	43db      	mvns	r3, r3
 8003128:	4947      	ldr	r1, [pc, #284]	@ (8003248 <HAL_GPIO_DeInit+0x1f4>)
 800312a:	4013      	ands	r3, r2
 800312c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800312e:	4b46      	ldr	r3, [pc, #280]	@ (8003248 <HAL_GPIO_DeInit+0x1f4>)
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	43db      	mvns	r3, r3
 8003136:	4944      	ldr	r1, [pc, #272]	@ (8003248 <HAL_GPIO_DeInit+0x1f4>)
 8003138:	4013      	ands	r3, r2
 800313a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800313c:	4b42      	ldr	r3, [pc, #264]	@ (8003248 <HAL_GPIO_DeInit+0x1f4>)
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	43db      	mvns	r3, r3
 8003144:	4940      	ldr	r1, [pc, #256]	@ (8003248 <HAL_GPIO_DeInit+0x1f4>)
 8003146:	4013      	ands	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800314a:	4b3f      	ldr	r3, [pc, #252]	@ (8003248 <HAL_GPIO_DeInit+0x1f4>)
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	43db      	mvns	r3, r3
 8003152:	493d      	ldr	r1, [pc, #244]	@ (8003248 <HAL_GPIO_DeInit+0x1f4>)
 8003154:	4013      	ands	r3, r2
 8003156:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	220f      	movs	r2, #15
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003168:	4a2e      	ldr	r2, [pc, #184]	@ (8003224 <HAL_GPIO_DeInit+0x1d0>)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	089b      	lsrs	r3, r3, #2
 800316e:	3302      	adds	r3, #2
 8003170:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	43da      	mvns	r2, r3
 8003178:	482a      	ldr	r0, [pc, #168]	@ (8003224 <HAL_GPIO_DeInit+0x1d0>)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	089b      	lsrs	r3, r3, #2
 800317e:	400a      	ands	r2, r1
 8003180:	3302      	adds	r3, #2
 8003182:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
=======
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	e0cd      	b.n	800331c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003180:	2201      	movs	r2, #1
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4013      	ands	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	429a      	cmp	r2, r3
 8003198:	f040 80bd 	bne.w	8003316 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800319c:	4a65      	ldr	r2, [pc, #404]	@ (8003334 <HAL_GPIO_DeInit+0x1d0>)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	089b      	lsrs	r3, r3, #2
 80031a2:	3302      	adds	r3, #2
 80031a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	220f      	movs	r2, #15
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	4013      	ands	r3, r2
 80031bc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a5d      	ldr	r2, [pc, #372]	@ (8003338 <HAL_GPIO_DeInit+0x1d4>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d02b      	beq.n	800321e <HAL_GPIO_DeInit+0xba>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a5c      	ldr	r2, [pc, #368]	@ (800333c <HAL_GPIO_DeInit+0x1d8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d025      	beq.n	800321a <HAL_GPIO_DeInit+0xb6>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a5b      	ldr	r2, [pc, #364]	@ (8003340 <HAL_GPIO_DeInit+0x1dc>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d01f      	beq.n	8003216 <HAL_GPIO_DeInit+0xb2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a5a      	ldr	r2, [pc, #360]	@ (8003344 <HAL_GPIO_DeInit+0x1e0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d019      	beq.n	8003212 <HAL_GPIO_DeInit+0xae>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a59      	ldr	r2, [pc, #356]	@ (8003348 <HAL_GPIO_DeInit+0x1e4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d013      	beq.n	800320e <HAL_GPIO_DeInit+0xaa>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a58      	ldr	r2, [pc, #352]	@ (800334c <HAL_GPIO_DeInit+0x1e8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d00d      	beq.n	800320a <HAL_GPIO_DeInit+0xa6>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a57      	ldr	r2, [pc, #348]	@ (8003350 <HAL_GPIO_DeInit+0x1ec>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d007      	beq.n	8003206 <HAL_GPIO_DeInit+0xa2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a56      	ldr	r2, [pc, #344]	@ (8003354 <HAL_GPIO_DeInit+0x1f0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d101      	bne.n	8003202 <HAL_GPIO_DeInit+0x9e>
 80031fe:	2307      	movs	r3, #7
 8003200:	e00e      	b.n	8003220 <HAL_GPIO_DeInit+0xbc>
 8003202:	2308      	movs	r3, #8
 8003204:	e00c      	b.n	8003220 <HAL_GPIO_DeInit+0xbc>
 8003206:	2306      	movs	r3, #6
 8003208:	e00a      	b.n	8003220 <HAL_GPIO_DeInit+0xbc>
 800320a:	2305      	movs	r3, #5
 800320c:	e008      	b.n	8003220 <HAL_GPIO_DeInit+0xbc>
 800320e:	2304      	movs	r3, #4
 8003210:	e006      	b.n	8003220 <HAL_GPIO_DeInit+0xbc>
 8003212:	2303      	movs	r3, #3
 8003214:	e004      	b.n	8003220 <HAL_GPIO_DeInit+0xbc>
 8003216:	2302      	movs	r3, #2
 8003218:	e002      	b.n	8003220 <HAL_GPIO_DeInit+0xbc>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <HAL_GPIO_DeInit+0xbc>
 800321e:	2300      	movs	r3, #0
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	f002 0203 	and.w	r2, r2, #3
 8003226:	0092      	lsls	r2, r2, #2
 8003228:	4093      	lsls	r3, r2
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	429a      	cmp	r2, r3
 800322e:	d132      	bne.n	8003296 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003230:	4b49      	ldr	r3, [pc, #292]	@ (8003358 <HAL_GPIO_DeInit+0x1f4>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	43db      	mvns	r3, r3
 8003238:	4947      	ldr	r1, [pc, #284]	@ (8003358 <HAL_GPIO_DeInit+0x1f4>)
 800323a:	4013      	ands	r3, r2
 800323c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800323e:	4b46      	ldr	r3, [pc, #280]	@ (8003358 <HAL_GPIO_DeInit+0x1f4>)
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	43db      	mvns	r3, r3
 8003246:	4944      	ldr	r1, [pc, #272]	@ (8003358 <HAL_GPIO_DeInit+0x1f4>)
 8003248:	4013      	ands	r3, r2
 800324a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800324c:	4b42      	ldr	r3, [pc, #264]	@ (8003358 <HAL_GPIO_DeInit+0x1f4>)
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	43db      	mvns	r3, r3
 8003254:	4940      	ldr	r1, [pc, #256]	@ (8003358 <HAL_GPIO_DeInit+0x1f4>)
 8003256:	4013      	ands	r3, r2
 8003258:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800325a:	4b3f      	ldr	r3, [pc, #252]	@ (8003358 <HAL_GPIO_DeInit+0x1f4>)
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	43db      	mvns	r3, r3
 8003262:	493d      	ldr	r1, [pc, #244]	@ (8003358 <HAL_GPIO_DeInit+0x1f4>)
 8003264:	4013      	ands	r3, r2
 8003266:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	220f      	movs	r2, #15
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003278:	4a2e      	ldr	r2, [pc, #184]	@ (8003334 <HAL_GPIO_DeInit+0x1d0>)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	089b      	lsrs	r3, r3, #2
 800327e:	3302      	adds	r3, #2
 8003280:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	43da      	mvns	r2, r3
 8003288:	482a      	ldr	r0, [pc, #168]	@ (8003334 <HAL_GPIO_DeInit+0x1d0>)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	089b      	lsrs	r3, r3, #2
 800328e:	400a      	ands	r2, r1
 8003290:	3302      	adds	r3, #2
 8003292:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
<<<<<<< HEAD
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	2103      	movs	r1, #3
 8003190:	fa01 f303 	lsl.w	r3, r1, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	401a      	ands	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	08da      	lsrs	r2, r3, #3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3208      	adds	r2, #8
 80031a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	220f      	movs	r2, #15
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	08d2      	lsrs	r2, r2, #3
 80031bc:	4019      	ands	r1, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3208      	adds	r2, #8
 80031c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	2103      	movs	r1, #3
 80031d0:	fa01 f303 	lsl.w	r3, r1, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	401a      	ands	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	2101      	movs	r1, #1
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	fa01 f303 	lsl.w	r3, r1, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	401a      	ands	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	2103      	movs	r1, #3
 80031fa:	fa01 f303 	lsl.w	r3, r1, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	401a      	ands	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	3301      	adds	r3, #1
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	2b0f      	cmp	r3, #15
 8003210:	f67f af2e 	bls.w	8003070 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003214:	bf00      	nop
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40013800 	.word	0x40013800
 8003228:	40020000 	.word	0x40020000
 800322c:	40020400 	.word	0x40020400
 8003230:	40020800 	.word	0x40020800
 8003234:	40020c00 	.word	0x40020c00
 8003238:	40021000 	.word	0x40021000
 800323c:	40021400 	.word	0x40021400
 8003240:	40021800 	.word	0x40021800
 8003244:	40021c00 	.word	0x40021c00
 8003248:	40013c00 	.word	0x40013c00

0800324c <HAL_GPIO_WritePin>:
=======
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	2103      	movs	r1, #3
 80032a0:	fa01 f303 	lsl.w	r3, r1, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	401a      	ands	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	08da      	lsrs	r2, r3, #3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3208      	adds	r2, #8
 80032b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	220f      	movs	r2, #15
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	08d2      	lsrs	r2, r2, #3
 80032cc:	4019      	ands	r1, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3208      	adds	r2, #8
 80032d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	2103      	movs	r1, #3
 80032e0:	fa01 f303 	lsl.w	r3, r1, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	401a      	ands	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	2101      	movs	r1, #1
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	fa01 f303 	lsl.w	r3, r1, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	401a      	ands	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	2103      	movs	r1, #3
 800330a:	fa01 f303 	lsl.w	r3, r1, r3
 800330e:	43db      	mvns	r3, r3
 8003310:	401a      	ands	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	3301      	adds	r3, #1
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2b0f      	cmp	r3, #15
 8003320:	f67f af2e 	bls.w	8003180 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003324:	bf00      	nop
 8003326:	bf00      	nop
 8003328:	371c      	adds	r7, #28
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40013800 	.word	0x40013800
 8003338:	40020000 	.word	0x40020000
 800333c:	40020400 	.word	0x40020400
 8003340:	40020800 	.word	0x40020800
 8003344:	40020c00 	.word	0x40020c00
 8003348:	40021000 	.word	0x40021000
 800334c:	40021400 	.word	0x40021400
 8003350:	40021800 	.word	0x40021800
 8003354:	40021c00 	.word	0x40021c00
 8003358:	40013c00 	.word	0x40013c00

0800335c <HAL_GPIO_WritePin>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	807b      	strh	r3, [r7, #2]
 8003258:	4613      	mov	r3, r2
 800325a:	707b      	strb	r3, [r7, #1]
=======
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	807b      	strh	r3, [r7, #2]
 8003368:	4613      	mov	r3, r2
 800336a:	707b      	strb	r3, [r7, #1]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 800325c:	787b      	ldrb	r3, [r7, #1]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003262:	887a      	ldrh	r2, [r7, #2]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	619a      	str	r2, [r3, #24]
=======
 800336c:	787b      	ldrb	r3, [r7, #1]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003372:	887a      	ldrh	r2, [r7, #2]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	619a      	str	r2, [r3, #24]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 8003268:	e003      	b.n	8003272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800326a:	887b      	ldrh	r3, [r7, #2]
 800326c:	041a      	lsls	r2, r3, #16
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	619a      	str	r2, [r3, #24]
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_GPIO_TogglePin>:
=======
 8003378:	e003      	b.n	8003382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800337a:	887b      	ldrh	r3, [r7, #2]
 800337c:	041a      	lsls	r2, r3, #16
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	619a      	str	r2, [r3, #24]
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <HAL_GPIO_TogglePin>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	460b      	mov	r3, r1
 8003288:	807b      	strh	r3, [r7, #2]
=======
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	460b      	mov	r3, r1
 8003398:	807b      	strh	r3, [r7, #2]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
<<<<<<< HEAD
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695a      	ldr	r2, [r3, #20]
 800328e:	887b      	ldrh	r3, [r7, #2]
 8003290:	401a      	ands	r2, r3
 8003292:	887b      	ldrh	r3, [r7, #2]
 8003294:	429a      	cmp	r2, r3
 8003296:	d104      	bne.n	80032a2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003298:	887b      	ldrh	r3, [r7, #2]
 800329a:	041a      	lsls	r2, r3, #16
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	619a      	str	r2, [r3, #24]
=======
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	887b      	ldrh	r3, [r7, #2]
 80033a0:	401a      	ands	r2, r3
 80033a2:	887b      	ldrh	r3, [r7, #2]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d104      	bne.n	80033b2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80033a8:	887b      	ldrh	r3, [r7, #2]
 80033aa:	041a      	lsls	r2, r3, #16
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	619a      	str	r2, [r3, #24]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
<<<<<<< HEAD
 80032a0:	e002      	b.n	80032a8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80032a2:	887a      	ldrh	r2, [r7, #2]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	619a      	str	r2, [r3, #24]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_RCC_OscConfig>:
=======
 80033b0:	e002      	b.n	80033b8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80033b2:	887a      	ldrh	r2, [r7, #2]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	619a      	str	r2, [r3, #24]
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_RCC_OscConfig>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
=======
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e25e      	b.n	8003784 <HAL_RCC_OscConfig+0x4d0>
=======
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e25e      	b.n	8003894 <HAL_RCC_OscConfig+0x4d0>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d075      	beq.n	80033be <HAL_RCC_OscConfig+0x10a>
=======
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d075      	beq.n	80034ce <HAL_RCC_OscConfig+0x10a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< HEAD
 80032d2:	4b88      	ldr	r3, [pc, #544]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d00c      	beq.n	80032f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032de:	4b85      	ldr	r3, [pc, #532]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d112      	bne.n	8003310 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ea:	4b82      	ldr	r3, [pc, #520]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032f6:	d10b      	bne.n	8003310 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f8:	4b7e      	ldr	r3, [pc, #504]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d05b      	beq.n	80033bc <HAL_RCC_OscConfig+0x108>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d157      	bne.n	80033bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e239      	b.n	8003784 <HAL_RCC_OscConfig+0x4d0>
=======
 80033e2:	4b88      	ldr	r3, [pc, #544]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d00c      	beq.n	8003408 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ee:	4b85      	ldr	r3, [pc, #532]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d112      	bne.n	8003420 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033fa:	4b82      	ldr	r3, [pc, #520]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003402:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003406:	d10b      	bne.n	8003420 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003408:	4b7e      	ldr	r3, [pc, #504]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d05b      	beq.n	80034cc <HAL_RCC_OscConfig+0x108>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d157      	bne.n	80034cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e239      	b.n	8003894 <HAL_RCC_OscConfig+0x4d0>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003318:	d106      	bne.n	8003328 <HAL_RCC_OscConfig+0x74>
 800331a:	4b76      	ldr	r3, [pc, #472]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a75      	ldr	r2, [pc, #468]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	e01d      	b.n	8003364 <HAL_RCC_OscConfig+0xb0>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003330:	d10c      	bne.n	800334c <HAL_RCC_OscConfig+0x98>
 8003332:	4b70      	ldr	r3, [pc, #448]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a6f      	ldr	r2, [pc, #444]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003338:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	4b6d      	ldr	r3, [pc, #436]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a6c      	ldr	r2, [pc, #432]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	e00b      	b.n	8003364 <HAL_RCC_OscConfig+0xb0>
 800334c:	4b69      	ldr	r3, [pc, #420]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a68      	ldr	r2, [pc, #416]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003352:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	4b66      	ldr	r3, [pc, #408]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a65      	ldr	r2, [pc, #404]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 800335e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d013      	beq.n	8003394 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7fe fca2 	bl	8001cb4 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003374:	f7fe fc9e 	bl	8001cb4 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b64      	cmp	r3, #100	@ 0x64
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e1fe      	b.n	8003784 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003386:	4b5b      	ldr	r3, [pc, #364]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0xc0>
 8003392:	e014      	b.n	80033be <HAL_RCC_OscConfig+0x10a>
=======
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003428:	d106      	bne.n	8003438 <HAL_RCC_OscConfig+0x74>
 800342a:	4b76      	ldr	r3, [pc, #472]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a75      	ldr	r2, [pc, #468]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e01d      	b.n	8003474 <HAL_RCC_OscConfig+0xb0>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003440:	d10c      	bne.n	800345c <HAL_RCC_OscConfig+0x98>
 8003442:	4b70      	ldr	r3, [pc, #448]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a6f      	ldr	r2, [pc, #444]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	4b6d      	ldr	r3, [pc, #436]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a6c      	ldr	r2, [pc, #432]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	e00b      	b.n	8003474 <HAL_RCC_OscConfig+0xb0>
 800345c:	4b69      	ldr	r3, [pc, #420]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a68      	ldr	r2, [pc, #416]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	4b66      	ldr	r3, [pc, #408]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a65      	ldr	r2, [pc, #404]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 800346e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d013      	beq.n	80034a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fe fc7c 	bl	8001d78 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003484:	f7fe fc78 	bl	8001d78 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	@ 0x64
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e1fe      	b.n	8003894 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003496:	4b5b      	ldr	r3, [pc, #364]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0xc0>
 80034a2:	e014      	b.n	80034ce <HAL_RCC_OscConfig+0x10a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8003394:	f7fe fc8e 	bl	8001cb4 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800339c:	f7fe fc8a 	bl	8001cb4 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b64      	cmp	r3, #100	@ 0x64
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e1ea      	b.n	8003784 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ae:	4b51      	ldr	r3, [pc, #324]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0xe8>
 80033ba:	e000      	b.n	80033be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033bc:	bf00      	nop
=======
 80034a4:	f7fe fc68 	bl	8001d78 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034ac:	f7fe fc64 	bl	8001d78 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	@ 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e1ea      	b.n	8003894 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034be:	4b51      	ldr	r3, [pc, #324]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0xe8>
 80034ca:	e000      	b.n	80034ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034cc:	bf00      	nop
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d063      	beq.n	8003492 <HAL_RCC_OscConfig+0x1de>
=======
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d063      	beq.n	80035a2 <HAL_RCC_OscConfig+0x1de>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< HEAD
 80033ca:	4b4a      	ldr	r3, [pc, #296]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00b      	beq.n	80033ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033d6:	4b47      	ldr	r3, [pc, #284]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d11c      	bne.n	800341c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e2:	4b44      	ldr	r3, [pc, #272]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d116      	bne.n	800341c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ee:	4b41      	ldr	r3, [pc, #260]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d005      	beq.n	8003406 <HAL_RCC_OscConfig+0x152>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d001      	beq.n	8003406 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e1be      	b.n	8003784 <HAL_RCC_OscConfig+0x4d0>
=======
 80034da:	4b4a      	ldr	r3, [pc, #296]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034e6:	4b47      	ldr	r3, [pc, #284]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d11c      	bne.n	800352c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034f2:	4b44      	ldr	r3, [pc, #272]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d116      	bne.n	800352c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fe:	4b41      	ldr	r3, [pc, #260]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_RCC_OscConfig+0x152>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d001      	beq.n	8003516 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e1be      	b.n	8003894 <HAL_RCC_OscConfig+0x4d0>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8003406:	4b3b      	ldr	r3, [pc, #236]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4937      	ldr	r1, [pc, #220]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003416:	4313      	orrs	r3, r2
 8003418:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341a:	e03a      	b.n	8003492 <HAL_RCC_OscConfig+0x1de>
=======
 8003516:	4b3b      	ldr	r3, [pc, #236]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4937      	ldr	r1, [pc, #220]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003526:	4313      	orrs	r3, r2
 8003528:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352a:	e03a      	b.n	80035a2 <HAL_RCC_OscConfig+0x1de>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d020      	beq.n	8003466 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003424:	4b34      	ldr	r3, [pc, #208]	@ (80034f8 <HAL_RCC_OscConfig+0x244>)
 8003426:	2201      	movs	r2, #1
 8003428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342a:	f7fe fc43 	bl	8001cb4 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003432:	f7fe fc3f 	bl	8001cb4 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e19f      	b.n	8003784 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003444:	4b2b      	ldr	r3, [pc, #172]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0f0      	beq.n	8003432 <HAL_RCC_OscConfig+0x17e>
=======
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d020      	beq.n	8003576 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003534:	4b34      	ldr	r3, [pc, #208]	@ (8003608 <HAL_RCC_OscConfig+0x244>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353a:	f7fe fc1d 	bl	8001d78 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003542:	f7fe fc19 	bl	8001d78 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e19f      	b.n	8003894 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003554:	4b2b      	ldr	r3, [pc, #172]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x17e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8003450:	4b28      	ldr	r3, [pc, #160]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	4925      	ldr	r1, [pc, #148]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003460:	4313      	orrs	r3, r2
 8003462:	600b      	str	r3, [r1, #0]
 8003464:	e015      	b.n	8003492 <HAL_RCC_OscConfig+0x1de>
=======
 8003560:	4b28      	ldr	r3, [pc, #160]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4925      	ldr	r1, [pc, #148]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003570:	4313      	orrs	r3, r2
 8003572:	600b      	str	r3, [r1, #0]
 8003574:	e015      	b.n	80035a2 <HAL_RCC_OscConfig+0x1de>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8003466:	4b24      	ldr	r3, [pc, #144]	@ (80034f8 <HAL_RCC_OscConfig+0x244>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fe fc22 	bl	8001cb4 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003474:	f7fe fc1e 	bl	8001cb4 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e17e      	b.n	8003784 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003486:	4b1b      	ldr	r3, [pc, #108]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x1c0>
=======
 8003576:	4b24      	ldr	r3, [pc, #144]	@ (8003608 <HAL_RCC_OscConfig+0x244>)
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fe fbfc 	bl	8001d78 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003584:	f7fe fbf8 	bl	8001d78 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e17e      	b.n	8003894 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003596:	4b1b      	ldr	r3, [pc, #108]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d036      	beq.n	800350c <HAL_RCC_OscConfig+0x258>
=======
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d036      	beq.n	800361c <HAL_RCC_OscConfig+0x258>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< HEAD
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d016      	beq.n	80034d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034a6:	4b15      	ldr	r3, [pc, #84]	@ (80034fc <HAL_RCC_OscConfig+0x248>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ac:	f7fe fc02 	bl	8001cb4 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034b4:	f7fe fbfe 	bl	8001cb4 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e15e      	b.n	8003784 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c6:	4b0b      	ldr	r3, [pc, #44]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 80034c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x200>
 80034d2:	e01b      	b.n	800350c <HAL_RCC_OscConfig+0x258>
=======
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d016      	beq.n	80035e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035b6:	4b15      	ldr	r3, [pc, #84]	@ (800360c <HAL_RCC_OscConfig+0x248>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035bc:	f7fe fbdc 	bl	8001d78 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035c4:	f7fe fbd8 	bl	8001d78 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e15e      	b.n	8003894 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003604 <HAL_RCC_OscConfig+0x240>)
 80035d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x200>
 80035e2:	e01b      	b.n	800361c <HAL_RCC_OscConfig+0x258>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 80034d4:	4b09      	ldr	r3, [pc, #36]	@ (80034fc <HAL_RCC_OscConfig+0x248>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034da:	f7fe fbeb 	bl	8001cb4 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e0:	e00e      	b.n	8003500 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034e2:	f7fe fbe7 	bl	8001cb4 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d907      	bls.n	8003500 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e147      	b.n	8003784 <HAL_RCC_OscConfig+0x4d0>
 80034f4:	40023800 	.word	0x40023800
 80034f8:	42470000 	.word	0x42470000
 80034fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003500:	4b88      	ldr	r3, [pc, #544]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 8003502:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1ea      	bne.n	80034e2 <HAL_RCC_OscConfig+0x22e>
=======
 80035e4:	4b09      	ldr	r3, [pc, #36]	@ (800360c <HAL_RCC_OscConfig+0x248>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ea:	f7fe fbc5 	bl	8001d78 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f0:	e00e      	b.n	8003610 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f2:	f7fe fbc1 	bl	8001d78 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d907      	bls.n	8003610 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e147      	b.n	8003894 <HAL_RCC_OscConfig+0x4d0>
 8003604:	40023800 	.word	0x40023800
 8003608:	42470000 	.word	0x42470000
 800360c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003610:	4b88      	ldr	r3, [pc, #544]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1ea      	bne.n	80035f2 <HAL_RCC_OscConfig+0x22e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 8097 	beq.w	8003648 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800351a:	2300      	movs	r3, #0
 800351c:	75fb      	strb	r3, [r7, #23]
=======
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 8097 	beq.w	8003758 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800362a:	2300      	movs	r3, #0
 800362c:	75fb      	strb	r3, [r7, #23]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 800351e:	4b81      	ldr	r3, [pc, #516]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 8003520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10f      	bne.n	800354a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800352a:	2300      	movs	r3, #0
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	4b7d      	ldr	r3, [pc, #500]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	4a7c      	ldr	r2, [pc, #496]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 8003534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003538:	6413      	str	r3, [r2, #64]	@ 0x40
 800353a:	4b7a      	ldr	r3, [pc, #488]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003546:	2301      	movs	r3, #1
 8003548:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354a:	4b77      	ldr	r3, [pc, #476]	@ (8003728 <HAL_RCC_OscConfig+0x474>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	d118      	bne.n	8003588 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003556:	4b74      	ldr	r3, [pc, #464]	@ (8003728 <HAL_RCC_OscConfig+0x474>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a73      	ldr	r2, [pc, #460]	@ (8003728 <HAL_RCC_OscConfig+0x474>)
 800355c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003562:	f7fe fba7 	bl	8001cb4 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800356a:	f7fe fba3 	bl	8001cb4 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e103      	b.n	8003784 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357c:	4b6a      	ldr	r3, [pc, #424]	@ (8003728 <HAL_RCC_OscConfig+0x474>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0x2b6>
=======
 800362e:	4b81      	ldr	r3, [pc, #516]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10f      	bne.n	800365a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	4b7d      	ldr	r3, [pc, #500]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	4a7c      	ldr	r2, [pc, #496]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003648:	6413      	str	r3, [r2, #64]	@ 0x40
 800364a:	4b7a      	ldr	r3, [pc, #488]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003656:	2301      	movs	r3, #1
 8003658:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365a:	4b77      	ldr	r3, [pc, #476]	@ (8003838 <HAL_RCC_OscConfig+0x474>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d118      	bne.n	8003698 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003666:	4b74      	ldr	r3, [pc, #464]	@ (8003838 <HAL_RCC_OscConfig+0x474>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a73      	ldr	r2, [pc, #460]	@ (8003838 <HAL_RCC_OscConfig+0x474>)
 800366c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003672:	f7fe fb81 	bl	8001d78 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800367a:	f7fe fb7d 	bl	8001d78 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e103      	b.n	8003894 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368c:	4b6a      	ldr	r3, [pc, #424]	@ (8003838 <HAL_RCC_OscConfig+0x474>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x2b6>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d106      	bne.n	800359e <HAL_RCC_OscConfig+0x2ea>
 8003590:	4b64      	ldr	r3, [pc, #400]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 8003592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003594:	4a63      	ldr	r2, [pc, #396]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	6713      	str	r3, [r2, #112]	@ 0x70
 800359c:	e01c      	b.n	80035d8 <HAL_RCC_OscConfig+0x324>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b05      	cmp	r3, #5
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCC_OscConfig+0x30c>
 80035a6:	4b5f      	ldr	r3, [pc, #380]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035aa:	4a5e      	ldr	r2, [pc, #376]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 80035ac:	f043 0304 	orr.w	r3, r3, #4
 80035b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 80035b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b6:	4a5b      	ldr	r2, [pc, #364]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80035be:	e00b      	b.n	80035d8 <HAL_RCC_OscConfig+0x324>
 80035c0:	4b58      	ldr	r3, [pc, #352]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c4:	4a57      	ldr	r2, [pc, #348]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 80035c6:	f023 0301 	bic.w	r3, r3, #1
 80035ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80035cc:	4b55      	ldr	r3, [pc, #340]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 80035ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d0:	4a54      	ldr	r2, [pc, #336]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 80035d2:	f023 0304 	bic.w	r3, r3, #4
 80035d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d015      	beq.n	800360c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7fe fb68 	bl	8001cb4 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e6:	e00a      	b.n	80035fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035e8:	f7fe fb64 	bl	8001cb4 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e0c2      	b.n	8003784 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fe:	4b49      	ldr	r3, [pc, #292]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0ee      	beq.n	80035e8 <HAL_RCC_OscConfig+0x334>
 800360a:	e014      	b.n	8003636 <HAL_RCC_OscConfig+0x382>
=======
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d106      	bne.n	80036ae <HAL_RCC_OscConfig+0x2ea>
 80036a0:	4b64      	ldr	r3, [pc, #400]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a4:	4a63      	ldr	r2, [pc, #396]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80036ac:	e01c      	b.n	80036e8 <HAL_RCC_OscConfig+0x324>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x30c>
 80036b6:	4b5f      	ldr	r3, [pc, #380]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ba:	4a5e      	ldr	r2, [pc, #376]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036bc:	f043 0304 	orr.w	r3, r3, #4
 80036c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036c2:	4b5c      	ldr	r3, [pc, #368]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80036ce:	e00b      	b.n	80036e8 <HAL_RCC_OscConfig+0x324>
 80036d0:	4b58      	ldr	r3, [pc, #352]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d4:	4a57      	ldr	r2, [pc, #348]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036d6:	f023 0301 	bic.w	r3, r3, #1
 80036da:	6713      	str	r3, [r2, #112]	@ 0x70
 80036dc:	4b55      	ldr	r3, [pc, #340]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e0:	4a54      	ldr	r2, [pc, #336]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80036e2:	f023 0304 	bic.w	r3, r3, #4
 80036e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d015      	beq.n	800371c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f0:	f7fe fb42 	bl	8001d78 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f6:	e00a      	b.n	800370e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f8:	f7fe fb3e 	bl	8001d78 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003706:	4293      	cmp	r3, r2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e0c2      	b.n	8003894 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370e:	4b49      	ldr	r3, [pc, #292]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0ee      	beq.n	80036f8 <HAL_RCC_OscConfig+0x334>
 800371a:	e014      	b.n	8003746 <HAL_RCC_OscConfig+0x382>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 800360c:	f7fe fb52 	bl	8001cb4 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003612:	e00a      	b.n	800362a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003614:	f7fe fb4e 	bl	8001cb4 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003622:	4293      	cmp	r3, r2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e0ac      	b.n	8003784 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362a:	4b3e      	ldr	r3, [pc, #248]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1ee      	bne.n	8003614 <HAL_RCC_OscConfig+0x360>
=======
 800371c:	f7fe fb2c 	bl	8001d78 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003722:	e00a      	b.n	800373a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003724:	f7fe fb28 	bl	8001d78 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e0ac      	b.n	8003894 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800373a:	4b3e      	ldr	r3, [pc, #248]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1ee      	bne.n	8003724 <HAL_RCC_OscConfig+0x360>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8003636:	7dfb      	ldrb	r3, [r7, #23]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d105      	bne.n	8003648 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363c:	4b39      	ldr	r3, [pc, #228]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 800363e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003640:	4a38      	ldr	r2, [pc, #224]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 8003642:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003646:	6413      	str	r3, [r2, #64]	@ 0x40
=======
 8003746:	7dfb      	ldrb	r3, [r7, #23]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d105      	bne.n	8003758 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800374c:	4b39      	ldr	r3, [pc, #228]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	4a38      	ldr	r2, [pc, #224]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003752:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003756:	6413      	str	r3, [r2, #64]	@ 0x40
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 8098 	beq.w	8003782 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003652:	4b34      	ldr	r3, [pc, #208]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
 800365a:	2b08      	cmp	r3, #8
 800365c:	d05c      	beq.n	8003718 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d141      	bne.n	80036ea <HAL_RCC_OscConfig+0x436>
=======
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 8098 	beq.w	8003892 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003762:	4b34      	ldr	r3, [pc, #208]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 030c 	and.w	r3, r3, #12
 800376a:	2b08      	cmp	r3, #8
 800376c:	d05c      	beq.n	8003828 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d141      	bne.n	80037fa <HAL_RCC_OscConfig+0x436>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8003666:	4b31      	ldr	r3, [pc, #196]	@ (800372c <HAL_RCC_OscConfig+0x478>)
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366c:	f7fe fb22 	bl	8001cb4 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003674:	f7fe fb1e 	bl	8001cb4 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e07e      	b.n	8003784 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003686:	4b27      	ldr	r3, [pc, #156]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x3c0>
=======
 8003776:	4b31      	ldr	r3, [pc, #196]	@ (800383c <HAL_RCC_OscConfig+0x478>)
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377c:	f7fe fafc 	bl	8001d78 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003784:	f7fe faf8 	bl	8001d78 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e07e      	b.n	8003894 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003796:	4b27      	ldr	r3, [pc, #156]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f0      	bne.n	8003784 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69da      	ldr	r2, [r3, #28]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a0:	019b      	lsls	r3, r3, #6
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a8:	085b      	lsrs	r3, r3, #1
 80036aa:	3b01      	subs	r3, #1
 80036ac:	041b      	lsls	r3, r3, #16
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b4:	061b      	lsls	r3, r3, #24
 80036b6:	491b      	ldr	r1, [pc, #108]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	604b      	str	r3, [r1, #4]
=======
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69da      	ldr	r2, [r3, #28]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b0:	019b      	lsls	r3, r3, #6
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b8:	085b      	lsrs	r3, r3, #1
 80037ba:	3b01      	subs	r3, #1
 80037bc:	041b      	lsls	r3, r3, #16
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c4:	061b      	lsls	r3, r3, #24
 80037c6:	491b      	ldr	r1, [pc, #108]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	604b      	str	r3, [r1, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 80036bc:	4b1b      	ldr	r3, [pc, #108]	@ (800372c <HAL_RCC_OscConfig+0x478>)
 80036be:	2201      	movs	r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c2:	f7fe faf7 	bl	8001cb4 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ca:	f7fe faf3 	bl	8001cb4 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e053      	b.n	8003784 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036dc:	4b11      	ldr	r3, [pc, #68]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0f0      	beq.n	80036ca <HAL_RCC_OscConfig+0x416>
 80036e8:	e04b      	b.n	8003782 <HAL_RCC_OscConfig+0x4ce>
=======
 80037cc:	4b1b      	ldr	r3, [pc, #108]	@ (800383c <HAL_RCC_OscConfig+0x478>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d2:	f7fe fad1 	bl	8001d78 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037da:	f7fe facd 	bl	8001d78 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e053      	b.n	8003894 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ec:	4b11      	ldr	r3, [pc, #68]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCC_OscConfig+0x416>
 80037f8:	e04b      	b.n	8003892 <HAL_RCC_OscConfig+0x4ce>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80036ea:	4b10      	ldr	r3, [pc, #64]	@ (800372c <HAL_RCC_OscConfig+0x478>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7fe fae0 	bl	8001cb4 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fe fadc 	bl	8001cb4 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e03c      	b.n	8003784 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370a:	4b06      	ldr	r3, [pc, #24]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0x444>
 8003716:	e034      	b.n	8003782 <HAL_RCC_OscConfig+0x4ce>
=======
 80037fa:	4b10      	ldr	r3, [pc, #64]	@ (800383c <HAL_RCC_OscConfig+0x478>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7fe faba 	bl	8001d78 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003808:	f7fe fab6 	bl	8001d78 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e03c      	b.n	8003894 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381a:	4b06      	ldr	r3, [pc, #24]	@ (8003834 <HAL_RCC_OscConfig+0x470>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x444>
 8003826:	e034      	b.n	8003892 <HAL_RCC_OscConfig+0x4ce>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d107      	bne.n	8003730 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e02f      	b.n	8003784 <HAL_RCC_OscConfig+0x4d0>
 8003724:	40023800 	.word	0x40023800
 8003728:	40007000 	.word	0x40007000
 800372c:	42470060 	.word	0x42470060
=======
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d107      	bne.n	8003840 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e02f      	b.n	8003894 <HAL_RCC_OscConfig+0x4d0>
 8003834:	40023800 	.word	0x40023800
 8003838:	40007000 	.word	0x40007000
 800383c:	42470060 	.word	0x42470060
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 8003730:	4b16      	ldr	r3, [pc, #88]	@ (800378c <HAL_RCC_OscConfig+0x4d8>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	429a      	cmp	r2, r3
 8003742:	d11c      	bne.n	800377e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374e:	429a      	cmp	r2, r3
 8003750:	d115      	bne.n	800377e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003758:	4013      	ands	r3, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800375e:	4293      	cmp	r3, r2
 8003760:	d10d      	bne.n	800377e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800376c:	429a      	cmp	r2, r3
 800376e:	d106      	bne.n	800377e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800377a:	429a      	cmp	r2, r3
 800377c:	d001      	beq.n	8003782 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <HAL_RCC_OscConfig+0x4d0>
=======
 8003840:	4b16      	ldr	r3, [pc, #88]	@ (800389c <HAL_RCC_OscConfig+0x4d8>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	429a      	cmp	r2, r3
 8003852:	d11c      	bne.n	800388e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d115      	bne.n	800388e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003868:	4013      	ands	r3, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800386e:	4293      	cmp	r3, r2
 8003870:	d10d      	bne.n	800388e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800387c:	429a      	cmp	r2, r3
 800387e:	d106      	bne.n	800388e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d001      	beq.n	8003892 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <HAL_RCC_OscConfig+0x4d0>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40023800 	.word	0x40023800

08003790 <HAL_RCC_ClockConfig>:
=======
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40023800 	.word	0x40023800

080038a0 <HAL_RCC_ClockConfig>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
=======
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0cc      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
=======
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e0cc      	b.n	8003a4e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80037a4:	4b68      	ldr	r3, [pc, #416]	@ (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d90c      	bls.n	80037cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b2:	4b65      	ldr	r3, [pc, #404]	@ (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]
=======
 80038b4:	4b68      	ldr	r3, [pc, #416]	@ (8003a58 <HAL_RCC_ClockConfig+0x1b8>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d90c      	bls.n	80038dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c2:	4b65      	ldr	r3, [pc, #404]	@ (8003a58 <HAL_RCC_ClockConfig+0x1b8>)
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80037ba:	4b63      	ldr	r3, [pc, #396]	@ (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0b8      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
=======
 80038ca:	4b63      	ldr	r3, [pc, #396]	@ (8003a58 <HAL_RCC_ClockConfig+0x1b8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d001      	beq.n	80038dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0b8      	b.n	8003a4e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d020      	beq.n	800381a <HAL_RCC_ClockConfig+0x8a>
=======
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d020      	beq.n	800392a <HAL_RCC_ClockConfig+0x8a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e4:	4b59      	ldr	r3, [pc, #356]	@ (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	4a58      	ldr	r2, [pc, #352]	@ (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037fc:	4b53      	ldr	r3, [pc, #332]	@ (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	4a52      	ldr	r2, [pc, #328]	@ (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003806:	6093      	str	r3, [r2, #8]
=======
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038f4:	4b59      	ldr	r3, [pc, #356]	@ (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	4a58      	ldr	r2, [pc, #352]	@ (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800390c:	4b53      	ldr	r3, [pc, #332]	@ (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	4a52      	ldr	r2, [pc, #328]	@ (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003916:	6093      	str	r3, [r2, #8]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8003808:	4b50      	ldr	r3, [pc, #320]	@ (800394c <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	494d      	ldr	r1, [pc, #308]	@ (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]
=======
 8003918:	4b50      	ldr	r3, [pc, #320]	@ (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	494d      	ldr	r1, [pc, #308]	@ (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d044      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x120>
=======
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d044      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x120>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382e:	4b47      	ldr	r3, [pc, #284]	@ (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d119      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e07f      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
=======
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d107      	bne.n	800394e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393e:	4b47      	ldr	r3, [pc, #284]	@ (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d119      	bne.n	800397e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e07f      	b.n	8003a4e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d003      	beq.n	800384e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800384a:	2b03      	cmp	r3, #3
 800384c:	d107      	bne.n	800385e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384e:	4b3f      	ldr	r3, [pc, #252]	@ (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e06f      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
=======
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d003      	beq.n	800395e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800395a:	2b03      	cmp	r3, #3
 800395c:	d107      	bne.n	800396e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e06f      	b.n	8003a4e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 800385e:	4b3b      	ldr	r3, [pc, #236]	@ (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e067      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
=======
 800396e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e067      	b.n	8003a4e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 800386e:	4b37      	ldr	r3, [pc, #220]	@ (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f023 0203 	bic.w	r2, r3, #3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	4934      	ldr	r1, [pc, #208]	@ (800394c <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	4313      	orrs	r3, r2
 800387e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003880:	f7fe fa18 	bl	8001cb4 <HAL_GetTick>
 8003884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003886:	e00a      	b.n	800389e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003888:	f7fe fa14 	bl	8001cb4 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003896:	4293      	cmp	r3, r2
 8003898:	d901      	bls.n	800389e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e04f      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389e:	4b2b      	ldr	r3, [pc, #172]	@ (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 020c 	and.w	r2, r3, #12
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d1eb      	bne.n	8003888 <HAL_RCC_ClockConfig+0xf8>
=======
 800397e:	4b37      	ldr	r3, [pc, #220]	@ (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f023 0203 	bic.w	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4934      	ldr	r1, [pc, #208]	@ (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	4313      	orrs	r3, r2
 800398e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003990:	f7fe f9f2 	bl	8001d78 <HAL_GetTick>
 8003994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003996:	e00a      	b.n	80039ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003998:	f7fe f9ee 	bl	8001d78 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e04f      	b.n	8003a4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ae:	4b2b      	ldr	r3, [pc, #172]	@ (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 020c 	and.w	r2, r3, #12
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	429a      	cmp	r2, r3
 80039be:	d1eb      	bne.n	8003998 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80038b0:	4b25      	ldr	r3, [pc, #148]	@ (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d20c      	bcs.n	80038d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038be:	4b22      	ldr	r3, [pc, #136]	@ (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	701a      	strb	r2, [r3, #0]
=======
 80039c0:	4b25      	ldr	r3, [pc, #148]	@ (8003a58 <HAL_RCC_ClockConfig+0x1b8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d20c      	bcs.n	80039e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ce:	4b22      	ldr	r3, [pc, #136]	@ (8003a58 <HAL_RCC_ClockConfig+0x1b8>)
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80038c6:	4b20      	ldr	r3, [pc, #128]	@ (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e032      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
=======
 80039d6:	4b20      	ldr	r3, [pc, #128]	@ (8003a58 <HAL_RCC_ClockConfig+0x1b8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d001      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e032      	b.n	8003a4e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e4:	4b19      	ldr	r3, [pc, #100]	@ (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4916      	ldr	r1, [pc, #88]	@ (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	608b      	str	r3, [r1, #8]
=======
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f4:	4b19      	ldr	r3, [pc, #100]	@ (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4916      	ldr	r1, [pc, #88]	@ (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	608b      	str	r3, [r1, #8]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003902:	4b12      	ldr	r3, [pc, #72]	@ (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	490e      	ldr	r1, [pc, #56]	@ (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	4313      	orrs	r3, r2
 8003914:	608b      	str	r3, [r1, #8]
=======
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d009      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a12:	4b12      	ldr	r3, [pc, #72]	@ (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	490e      	ldr	r1, [pc, #56]	@ (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	608b      	str	r3, [r1, #8]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8003916:	f000 f821 	bl	800395c <HAL_RCC_GetSysClockFreq>
 800391a:	4602      	mov	r2, r0
 800391c:	4b0b      	ldr	r3, [pc, #44]	@ (800394c <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	490a      	ldr	r1, [pc, #40]	@ (8003950 <HAL_RCC_ClockConfig+0x1c0>)
 8003928:	5ccb      	ldrb	r3, [r1, r3]
 800392a:	fa22 f303 	lsr.w	r3, r2, r3
 800392e:	4a09      	ldr	r2, [pc, #36]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003932:	4b09      	ldr	r3, [pc, #36]	@ (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe f880 	bl	8001a3c <HAL_InitTick>

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40023c00 	.word	0x40023c00
 800394c:	40023800 	.word	0x40023800
 8003950:	080089a4 	.word	0x080089a4
 8003954:	20000000 	.word	0x20000000
 8003958:	20000004 	.word	0x20000004

0800395c <HAL_RCC_GetSysClockFreq>:
=======
 8003a26:	f000 f821 	bl	8003a6c <HAL_RCC_GetSysClockFreq>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	490a      	ldr	r1, [pc, #40]	@ (8003a60 <HAL_RCC_ClockConfig+0x1c0>)
 8003a38:	5ccb      	ldrb	r3, [r1, r3]
 8003a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a3e:	4a09      	ldr	r2, [pc, #36]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a42:	4b09      	ldr	r3, [pc, #36]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe f85a 	bl	8001b00 <HAL_InitTick>

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40023c00 	.word	0x40023c00
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	08008ae4 	.word	0x08008ae4
 8003a64:	20000000 	.word	0x20000000
 8003a68:	20000004 	.word	0x20000004

08003a6c <HAL_RCC_GetSysClockFreq>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 800395c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003960:	b094      	sub	sp, #80	@ 0x50
 8003962:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	647b      	str	r3, [r7, #68]	@ 0x44
 8003968:	2300      	movs	r3, #0
 800396a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800396c:	2300      	movs	r3, #0
 800396e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003974:	4b79      	ldr	r3, [pc, #484]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 030c 	and.w	r3, r3, #12
 800397c:	2b08      	cmp	r3, #8
 800397e:	d00d      	beq.n	800399c <HAL_RCC_GetSysClockFreq+0x40>
 8003980:	2b08      	cmp	r3, #8
 8003982:	f200 80e1 	bhi.w	8003b48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_RCC_GetSysClockFreq+0x34>
 800398a:	2b04      	cmp	r3, #4
 800398c:	d003      	beq.n	8003996 <HAL_RCC_GetSysClockFreq+0x3a>
 800398e:	e0db      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x1ec>
=======
 8003a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a70:	b094      	sub	sp, #80	@ 0x50
 8003a72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a78:	2300      	movs	r3, #0
 8003a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a84:	4b79      	ldr	r3, [pc, #484]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 030c 	and.w	r3, r3, #12
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d00d      	beq.n	8003aac <HAL_RCC_GetSysClockFreq+0x40>
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	f200 80e1 	bhi.w	8003c58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x34>
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d003      	beq.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a9e:	e0db      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0x1ec>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8003990:	4b73      	ldr	r3, [pc, #460]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x204>)
 8003992:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003994:	e0db      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 8003aa0:	4b73      	ldr	r3, [pc, #460]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0x204>)
 8003aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003aa4:	e0db      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8003996:	4b73      	ldr	r3, [pc, #460]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x208>)
 8003998:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800399a:	e0d8      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 8003aa6:	4b73      	ldr	r3, [pc, #460]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x208>)
 8003aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003aaa:	e0d8      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 800399c:	4b6f      	ldr	r3, [pc, #444]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0x200>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039a6:	4b6d      	ldr	r3, [pc, #436]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0x200>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d063      	beq.n	8003a7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b2:	4b6a      	ldr	r3, [pc, #424]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0x200>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	099b      	lsrs	r3, r3, #6
 80039b8:	2200      	movs	r2, #0
 80039ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80039be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80039c6:	2300      	movs	r3, #0
 80039c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80039ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80039ce:	4622      	mov	r2, r4
 80039d0:	462b      	mov	r3, r5
 80039d2:	f04f 0000 	mov.w	r0, #0
 80039d6:	f04f 0100 	mov.w	r1, #0
 80039da:	0159      	lsls	r1, r3, #5
 80039dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039e0:	0150      	lsls	r0, r2, #5
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4621      	mov	r1, r4
 80039e8:	1a51      	subs	r1, r2, r1
 80039ea:	6139      	str	r1, [r7, #16]
 80039ec:	4629      	mov	r1, r5
 80039ee:	eb63 0301 	sbc.w	r3, r3, r1
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	f04f 0300 	mov.w	r3, #0
 80039fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a00:	4659      	mov	r1, fp
 8003a02:	018b      	lsls	r3, r1, #6
 8003a04:	4651      	mov	r1, sl
 8003a06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a0a:	4651      	mov	r1, sl
 8003a0c:	018a      	lsls	r2, r1, #6
 8003a0e:	4651      	mov	r1, sl
 8003a10:	ebb2 0801 	subs.w	r8, r2, r1
 8003a14:	4659      	mov	r1, fp
 8003a16:	eb63 0901 	sbc.w	r9, r3, r1
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a2e:	4690      	mov	r8, r2
 8003a30:	4699      	mov	r9, r3
 8003a32:	4623      	mov	r3, r4
 8003a34:	eb18 0303 	adds.w	r3, r8, r3
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	462b      	mov	r3, r5
 8003a3c:	eb49 0303 	adc.w	r3, r9, r3
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a4e:	4629      	mov	r1, r5
 8003a50:	024b      	lsls	r3, r1, #9
 8003a52:	4621      	mov	r1, r4
 8003a54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a58:	4621      	mov	r1, r4
 8003a5a:	024a      	lsls	r2, r1, #9
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	4619      	mov	r1, r3
 8003a60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a62:	2200      	movs	r2, #0
 8003a64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a6c:	f7fc fc10 	bl	8000290 <__aeabi_uldivmod>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4613      	mov	r3, r2
 8003a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a78:	e058      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x1d0>
=======
 8003aac:	4b6f      	ldr	r3, [pc, #444]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ab4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ab6:	4b6d      	ldr	r3, [pc, #436]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d063      	beq.n	8003b8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac2:	4b6a      	ldr	r3, [pc, #424]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	099b      	lsrs	r3, r3, #6
 8003ac8:	2200      	movs	r2, #0
 8003aca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003acc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ada:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ade:	4622      	mov	r2, r4
 8003ae0:	462b      	mov	r3, r5
 8003ae2:	f04f 0000 	mov.w	r0, #0
 8003ae6:	f04f 0100 	mov.w	r1, #0
 8003aea:	0159      	lsls	r1, r3, #5
 8003aec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003af0:	0150      	lsls	r0, r2, #5
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4621      	mov	r1, r4
 8003af8:	1a51      	subs	r1, r2, r1
 8003afa:	6139      	str	r1, [r7, #16]
 8003afc:	4629      	mov	r1, r5
 8003afe:	eb63 0301 	sbc.w	r3, r3, r1
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b10:	4659      	mov	r1, fp
 8003b12:	018b      	lsls	r3, r1, #6
 8003b14:	4651      	mov	r1, sl
 8003b16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b1a:	4651      	mov	r1, sl
 8003b1c:	018a      	lsls	r2, r1, #6
 8003b1e:	4651      	mov	r1, sl
 8003b20:	ebb2 0801 	subs.w	r8, r2, r1
 8003b24:	4659      	mov	r1, fp
 8003b26:	eb63 0901 	sbc.w	r9, r3, r1
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b3e:	4690      	mov	r8, r2
 8003b40:	4699      	mov	r9, r3
 8003b42:	4623      	mov	r3, r4
 8003b44:	eb18 0303 	adds.w	r3, r8, r3
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	462b      	mov	r3, r5
 8003b4c:	eb49 0303 	adc.w	r3, r9, r3
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b5e:	4629      	mov	r1, r5
 8003b60:	024b      	lsls	r3, r1, #9
 8003b62:	4621      	mov	r1, r4
 8003b64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b68:	4621      	mov	r1, r4
 8003b6a:	024a      	lsls	r2, r1, #9
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	4619      	mov	r1, r3
 8003b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b72:	2200      	movs	r2, #0
 8003b74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b7c:	f7fc fb88 	bl	8000290 <__aeabi_uldivmod>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4613      	mov	r3, r2
 8003b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b88:	e058      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x1d0>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8003a7a:	4b38      	ldr	r3, [pc, #224]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	099b      	lsrs	r3, r3, #6
 8003a80:	2200      	movs	r2, #0
 8003a82:	4618      	mov	r0, r3
 8003a84:	4611      	mov	r1, r2
 8003a86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a8a:	623b      	str	r3, [r7, #32]
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a94:	4642      	mov	r2, r8
 8003a96:	464b      	mov	r3, r9
 8003a98:	f04f 0000 	mov.w	r0, #0
 8003a9c:	f04f 0100 	mov.w	r1, #0
 8003aa0:	0159      	lsls	r1, r3, #5
 8003aa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aa6:	0150      	lsls	r0, r2, #5
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4641      	mov	r1, r8
 8003aae:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ac4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ac8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003acc:	ebb2 040a 	subs.w	r4, r2, sl
 8003ad0:	eb63 050b 	sbc.w	r5, r3, fp
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	00eb      	lsls	r3, r5, #3
 8003ade:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ae2:	00e2      	lsls	r2, r4, #3
 8003ae4:	4614      	mov	r4, r2
 8003ae6:	461d      	mov	r5, r3
 8003ae8:	4643      	mov	r3, r8
 8003aea:	18e3      	adds	r3, r4, r3
 8003aec:	603b      	str	r3, [r7, #0]
 8003aee:	464b      	mov	r3, r9
 8003af0:	eb45 0303 	adc.w	r3, r5, r3
 8003af4:	607b      	str	r3, [r7, #4]
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b02:	4629      	mov	r1, r5
 8003b04:	028b      	lsls	r3, r1, #10
 8003b06:	4621      	mov	r1, r4
 8003b08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b0c:	4621      	mov	r1, r4
 8003b0e:	028a      	lsls	r2, r1, #10
 8003b10:	4610      	mov	r0, r2
 8003b12:	4619      	mov	r1, r3
 8003b14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b16:	2200      	movs	r2, #0
 8003b18:	61bb      	str	r3, [r7, #24]
 8003b1a:	61fa      	str	r2, [r7, #28]
 8003b1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b20:	f7fc fbb6 	bl	8000290 <__aeabi_uldivmod>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4613      	mov	r3, r2
 8003b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	0c1b      	lsrs	r3, r3, #16
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	3301      	adds	r3, #1
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003b3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b46:	e002      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 8003b8a:	4b38      	ldr	r3, [pc, #224]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	099b      	lsrs	r3, r3, #6
 8003b90:	2200      	movs	r2, #0
 8003b92:	4618      	mov	r0, r3
 8003b94:	4611      	mov	r1, r2
 8003b96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b9a:	623b      	str	r3, [r7, #32]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ba0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ba4:	4642      	mov	r2, r8
 8003ba6:	464b      	mov	r3, r9
 8003ba8:	f04f 0000 	mov.w	r0, #0
 8003bac:	f04f 0100 	mov.w	r1, #0
 8003bb0:	0159      	lsls	r1, r3, #5
 8003bb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bb6:	0150      	lsls	r0, r2, #5
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4641      	mov	r1, r8
 8003bbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bc2:	4649      	mov	r1, r9
 8003bc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bdc:	ebb2 040a 	subs.w	r4, r2, sl
 8003be0:	eb63 050b 	sbc.w	r5, r3, fp
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	00eb      	lsls	r3, r5, #3
 8003bee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bf2:	00e2      	lsls	r2, r4, #3
 8003bf4:	4614      	mov	r4, r2
 8003bf6:	461d      	mov	r5, r3
 8003bf8:	4643      	mov	r3, r8
 8003bfa:	18e3      	adds	r3, r4, r3
 8003bfc:	603b      	str	r3, [r7, #0]
 8003bfe:	464b      	mov	r3, r9
 8003c00:	eb45 0303 	adc.w	r3, r5, r3
 8003c04:	607b      	str	r3, [r7, #4]
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c12:	4629      	mov	r1, r5
 8003c14:	028b      	lsls	r3, r1, #10
 8003c16:	4621      	mov	r1, r4
 8003c18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	028a      	lsls	r2, r1, #10
 8003c20:	4610      	mov	r0, r2
 8003c22:	4619      	mov	r1, r3
 8003c24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c26:	2200      	movs	r2, #0
 8003c28:	61bb      	str	r3, [r7, #24]
 8003c2a:	61fa      	str	r2, [r7, #28]
 8003c2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c30:	f7fc fb2e 	bl	8000290 <__aeabi_uldivmod>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4613      	mov	r3, r2
 8003c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	0c1b      	lsrs	r3, r3, #16
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	3301      	adds	r3, #1
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003c4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c56:	e002      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8003b48:	4b05      	ldr	r3, [pc, #20]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3750      	adds	r7, #80	@ 0x50
 8003b54:	46bd      	mov	sp, r7
 8003b56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	00f42400 	.word	0x00f42400
 8003b64:	007a1200 	.word	0x007a1200

08003b68 <HAL_RCC_GetHCLKFreq>:
=======
 8003c58:	4b05      	ldr	r3, [pc, #20]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3750      	adds	r7, #80	@ 0x50
 8003c64:	46bd      	mov	sp, r7
 8003c66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	00f42400 	.word	0x00f42400
 8003c74:	007a1200 	.word	0x007a1200

08003c78 <HAL_RCC_GetHCLKFreq>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	@ (8003b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	20000000 	.word	0x20000000

08003b80 <HAL_RCC_GetPCLK1Freq>:
=======
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c7c:	4b03      	ldr	r3, [pc, #12]	@ (8003c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	20000000 	.word	0x20000000

08003c90 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b84:	f7ff fff0 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4b05      	ldr	r3, [pc, #20]	@ (8003ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	0a9b      	lsrs	r3, r3, #10
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4903      	ldr	r1, [pc, #12]	@ (8003ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b96:	5ccb      	ldrb	r3, [r1, r3]
 8003b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	080089b4 	.word	0x080089b4

08003ba8 <HAL_RCC_GetPCLK2Freq>:
=======
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c94:	f7ff fff0 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	4b05      	ldr	r3, [pc, #20]	@ (8003cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	0a9b      	lsrs	r3, r3, #10
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	4903      	ldr	r1, [pc, #12]	@ (8003cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ca6:	5ccb      	ldrb	r3, [r1, r3]
 8003ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	08008af4 	.word	0x08008af4

08003cb8 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bac:	f7ff ffdc 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	4b05      	ldr	r3, [pc, #20]	@ (8003bc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	0b5b      	lsrs	r3, r3, #13
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	4903      	ldr	r1, [pc, #12]	@ (8003bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bbe:	5ccb      	ldrb	r3, [r1, r3]
 8003bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	080089b4 	.word	0x080089b4

08003bd0 <HAL_RCC_GetClockConfig>:
=======
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cbc:	f7ff ffdc 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	4b05      	ldr	r3, [pc, #20]	@ (8003cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	0b5b      	lsrs	r3, r3, #13
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	4903      	ldr	r1, [pc, #12]	@ (8003cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cce:	5ccb      	ldrb	r3, [r1, r3]
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	08008af4 	.word	0x08008af4

08003ce0 <HAL_RCC_GetClockConfig>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
<<<<<<< HEAD
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	220f      	movs	r2, #15
 8003bde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003be0:	4b12      	ldr	r3, [pc, #72]	@ (8003c2c <HAL_RCC_GetClockConfig+0x5c>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 0203 	and.w	r2, r3, #3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bec:	4b0f      	ldr	r3, [pc, #60]	@ (8003c2c <HAL_RCC_GetClockConfig+0x5c>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8003c2c <HAL_RCC_GetClockConfig+0x5c>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c04:	4b09      	ldr	r3, [pc, #36]	@ (8003c2c <HAL_RCC_GetClockConfig+0x5c>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	08db      	lsrs	r3, r3, #3
 8003c0a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c12:	4b07      	ldr	r3, [pc, #28]	@ (8003c30 <HAL_RCC_GetClockConfig+0x60>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 020f 	and.w	r2, r3, #15
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	601a      	str	r2, [r3, #0]
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	40023c00 	.word	0x40023c00

08003c34 <HAL_TIM_Base_Init>:
=======
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	220f      	movs	r2, #15
 8003cee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cf0:	4b12      	ldr	r3, [pc, #72]	@ (8003d3c <HAL_RCC_GetClockConfig+0x5c>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 0203 	and.w	r2, r3, #3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8003d3c <HAL_RCC_GetClockConfig+0x5c>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d08:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <HAL_RCC_GetClockConfig+0x5c>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d14:	4b09      	ldr	r3, [pc, #36]	@ (8003d3c <HAL_RCC_GetClockConfig+0x5c>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	08db      	lsrs	r3, r3, #3
 8003d1a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d22:	4b07      	ldr	r3, [pc, #28]	@ (8003d40 <HAL_RCC_GetClockConfig+0x60>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 020f 	and.w	r2, r3, #15
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	601a      	str	r2, [r3, #0]
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	40023c00 	.word	0x40023c00

08003d44 <HAL_TIM_Base_Init>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e01d      	b.n	8003c82 <HAL_TIM_Base_Init+0x4e>
=======
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e01d      	b.n	8003d92 <HAL_TIM_Base_Init+0x4e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f815 	bl	8003c8a <HAL_TIM_Base_MspInit>
=======
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f815 	bl	8003d9a <HAL_TIM_Base_MspInit>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	4619      	mov	r1, r3
 8003c72:	4610      	mov	r0, r2
 8003c74:	f000 f968 	bl	8003f48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_TIM_Base_MspInit>:
=======
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	4619      	mov	r1, r3
 8003d82:	4610      	mov	r0, r2
 8003d84:	f000 f968 	bl	8004058 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_TIM_Base_MspInit>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
=======
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <HAL_TIM_Base_Start_IT>:
=======
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <HAL_TIM_Base_Start_IT>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003c9e:	b480      	push	{r7}
 8003ca0:	b085      	sub	sp, #20
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
=======
 8003dae:	b480      	push	{r7}
 8003db0:	b085      	sub	sp, #20
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
<<<<<<< HEAD
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0201 	orr.w	r2, r2, #1
 8003cb4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b06      	cmp	r3, #6
 8003cc6:	d007      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]
=======
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0201 	orr.w	r2, r2, #1
 8003dc4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b06      	cmp	r3, #6
 8003dd6:	d007      	beq.n	8003de8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_TIM_IRQHandler>:
=======
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <HAL_TIM_IRQHandler>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d122      	bne.n	8003d42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d11b      	bne.n	8003d42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f06f 0202 	mvn.w	r2, #2
 8003d12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_TIM_IRQHandler+0x4a>
=======
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b082      	sub	sp, #8
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d122      	bne.n	8003e52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d11b      	bne.n	8003e52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f06f 0202 	mvn.w	r2, #2
 8003e22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f8ee 	bl	8003f0a <HAL_TIM_IC_CaptureCallback>
 8003d2e:	e005      	b.n	8003d3c <HAL_TIM_IRQHandler+0x56>
=======
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f8ee 	bl	800401a <HAL_TIM_IC_CaptureCallback>
 8003e3e:	e005      	b.n	8003e4c <HAL_TIM_IRQHandler+0x56>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f8e0 	bl	8003ef6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f8f1 	bl	8003f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	771a      	strb	r2, [r3, #28]
=======
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f8e0 	bl	8004006 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f8f1 	bl	800402e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	771a      	strb	r2, [r3, #28]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d122      	bne.n	8003d96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d11b      	bne.n	8003d96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f06f 0204 	mvn.w	r2, #4
 8003d66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_TIM_IRQHandler+0x9e>
=======
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d122      	bne.n	8003ea6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f003 0304 	and.w	r3, r3, #4
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d11b      	bne.n	8003ea6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f06f 0204 	mvn.w	r2, #4
 8003e76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f8c4 	bl	8003f0a <HAL_TIM_IC_CaptureCallback>
 8003d82:	e005      	b.n	8003d90 <HAL_TIM_IRQHandler+0xaa>
=======
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f8c4 	bl	800401a <HAL_TIM_IC_CaptureCallback>
 8003e92:	e005      	b.n	8003ea0 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f8b6 	bl	8003ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f8c7 	bl	8003f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	771a      	strb	r2, [r3, #28]
=======
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f8b6 	bl	8004006 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f8c7 	bl	800402e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	771a      	strb	r2, [r3, #28]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d122      	bne.n	8003dea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d11b      	bne.n	8003dea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f06f 0208 	mvn.w	r2, #8
 8003dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2204      	movs	r2, #4
 8003dc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_TIM_IRQHandler+0xf2>
=======
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d122      	bne.n	8003efa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d11b      	bne.n	8003efa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f06f 0208 	mvn.w	r2, #8
 8003eca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2204      	movs	r2, #4
 8003ed0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f003 0303 	and.w	r3, r3, #3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f89a 	bl	8003f0a <HAL_TIM_IC_CaptureCallback>
 8003dd6:	e005      	b.n	8003de4 <HAL_TIM_IRQHandler+0xfe>
=======
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f89a 	bl	800401a <HAL_TIM_IC_CaptureCallback>
 8003ee6:	e005      	b.n	8003ef4 <HAL_TIM_IRQHandler+0xfe>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f88c 	bl	8003ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f89d 	bl	8003f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	771a      	strb	r2, [r3, #28]
=======
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f88c 	bl	8004006 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f89d 	bl	800402e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	771a      	strb	r2, [r3, #28]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b10      	cmp	r3, #16
 8003df6:	d122      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b10      	cmp	r3, #16
 8003e04:	d11b      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f06f 0210 	mvn.w	r2, #16
 8003e0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2208      	movs	r2, #8
 8003e14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_TIM_IRQHandler+0x146>
=======
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	2b10      	cmp	r3, #16
 8003f06:	d122      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0310 	and.w	r3, r3, #16
 8003f12:	2b10      	cmp	r3, #16
 8003f14:	d11b      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f06f 0210 	mvn.w	r2, #16
 8003f1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2208      	movs	r2, #8
 8003f24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_TIM_IRQHandler+0x146>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f870 	bl	8003f0a <HAL_TIM_IC_CaptureCallback>
 8003e2a:	e005      	b.n	8003e38 <HAL_TIM_IRQHandler+0x152>
=======
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f870 	bl	800401a <HAL_TIM_IC_CaptureCallback>
 8003f3a:	e005      	b.n	8003f48 <HAL_TIM_IRQHandler+0x152>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f862 	bl	8003ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f873 	bl	8003f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	771a      	strb	r2, [r3, #28]
=======
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f862 	bl	8004006 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f873 	bl	800402e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	771a      	strb	r2, [r3, #28]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d10e      	bne.n	8003e6a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d107      	bne.n	8003e6a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f06f 0201 	mvn.w	r2, #1
 8003e62:	611a      	str	r2, [r3, #16]
=======
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d10e      	bne.n	8003f7a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d107      	bne.n	8003f7a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f06f 0201 	mvn.w	r2, #1
 8003f72:	611a      	str	r2, [r3, #16]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7fd fcc3 	bl	80017f0 <HAL_TIM_PeriodElapsedCallback>
=======
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7fd fc9d 	bl	80018b4 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e74:	2b80      	cmp	r3, #128	@ 0x80
 8003e76:	d10e      	bne.n	8003e96 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e82:	2b80      	cmp	r3, #128	@ 0x80
 8003e84:	d107      	bne.n	8003e96 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e8e:	611a      	str	r2, [r3, #16]
=======
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f84:	2b80      	cmp	r3, #128	@ 0x80
 8003f86:	d10e      	bne.n	8003fa6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f92:	2b80      	cmp	r3, #128	@ 0x80
 8003f94:	d107      	bne.n	8003fa6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f9e:	611a      	str	r2, [r3, #16]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f903 	bl	800409c <HAL_TIMEx_BreakCallback>
=======
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f903 	bl	80041ac <HAL_TIMEx_BreakCallback>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea0:	2b40      	cmp	r3, #64	@ 0x40
 8003ea2:	d10e      	bne.n	8003ec2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eae:	2b40      	cmp	r3, #64	@ 0x40
 8003eb0:	d107      	bne.n	8003ec2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003eba:	611a      	str	r2, [r3, #16]
=======
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb0:	2b40      	cmp	r3, #64	@ 0x40
 8003fb2:	d10e      	bne.n	8003fd2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fbe:	2b40      	cmp	r3, #64	@ 0x40
 8003fc0:	d107      	bne.n	8003fd2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003fca:	611a      	str	r2, [r3, #16]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f838 	bl	8003f32 <HAL_TIM_TriggerCallback>
=======
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f838 	bl	8004042 <HAL_TIM_TriggerCallback>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	d10e      	bne.n	8003eee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d107      	bne.n	8003eee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f06f 0220 	mvn.w	r2, #32
 8003ee6:	611a      	str	r2, [r3, #16]
=======
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	f003 0320 	and.w	r3, r3, #32
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d10e      	bne.n	8003ffe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	d107      	bne.n	8003ffe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f06f 0220 	mvn.w	r2, #32
 8003ff6:	611a      	str	r2, [r3, #16]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f8cd 	bl	8004088 <HAL_TIMEx_CommutCallback>
=======
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f8cd 	bl	8004198 <HAL_TIMEx_CommutCallback>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8003ffe:	bf00      	nop
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
=======
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <HAL_TIM_IC_CaptureCallback>:
=======
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <HAL_TIM_IC_CaptureCallback>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
=======
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
=======
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <HAL_TIM_TriggerCallback>:
=======
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <HAL_TIM_TriggerCallback>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
=======
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
	...

08003f48 <TIM_Base_SetConfig>:
=======
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
	...

08004058 <TIM_Base_SetConfig>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a40      	ldr	r2, [pc, #256]	@ (800405c <TIM_Base_SetConfig+0x114>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d013      	beq.n	8003f88 <TIM_Base_SetConfig+0x40>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f66:	d00f      	beq.n	8003f88 <TIM_Base_SetConfig+0x40>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a3d      	ldr	r2, [pc, #244]	@ (8004060 <TIM_Base_SetConfig+0x118>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00b      	beq.n	8003f88 <TIM_Base_SetConfig+0x40>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a3c      	ldr	r2, [pc, #240]	@ (8004064 <TIM_Base_SetConfig+0x11c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d007      	beq.n	8003f88 <TIM_Base_SetConfig+0x40>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a3b      	ldr	r2, [pc, #236]	@ (8004068 <TIM_Base_SetConfig+0x120>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d003      	beq.n	8003f88 <TIM_Base_SetConfig+0x40>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a3a      	ldr	r2, [pc, #232]	@ (800406c <TIM_Base_SetConfig+0x124>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d108      	bne.n	8003f9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a2f      	ldr	r2, [pc, #188]	@ (800405c <TIM_Base_SetConfig+0x114>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d02b      	beq.n	8003ffa <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fa8:	d027      	beq.n	8003ffa <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a2c      	ldr	r2, [pc, #176]	@ (8004060 <TIM_Base_SetConfig+0x118>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d023      	beq.n	8003ffa <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a2b      	ldr	r2, [pc, #172]	@ (8004064 <TIM_Base_SetConfig+0x11c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01f      	beq.n	8003ffa <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a2a      	ldr	r2, [pc, #168]	@ (8004068 <TIM_Base_SetConfig+0x120>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d01b      	beq.n	8003ffa <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a29      	ldr	r2, [pc, #164]	@ (800406c <TIM_Base_SetConfig+0x124>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d017      	beq.n	8003ffa <TIM_Base_SetConfig+0xb2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a28      	ldr	r2, [pc, #160]	@ (8004070 <TIM_Base_SetConfig+0x128>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d013      	beq.n	8003ffa <TIM_Base_SetConfig+0xb2>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a27      	ldr	r2, [pc, #156]	@ (8004074 <TIM_Base_SetConfig+0x12c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00f      	beq.n	8003ffa <TIM_Base_SetConfig+0xb2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a26      	ldr	r2, [pc, #152]	@ (8004078 <TIM_Base_SetConfig+0x130>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00b      	beq.n	8003ffa <TIM_Base_SetConfig+0xb2>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a25      	ldr	r2, [pc, #148]	@ (800407c <TIM_Base_SetConfig+0x134>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d007      	beq.n	8003ffa <TIM_Base_SetConfig+0xb2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a24      	ldr	r2, [pc, #144]	@ (8004080 <TIM_Base_SetConfig+0x138>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d003      	beq.n	8003ffa <TIM_Base_SetConfig+0xb2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a23      	ldr	r2, [pc, #140]	@ (8004084 <TIM_Base_SetConfig+0x13c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d108      	bne.n	800400c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	4313      	orrs	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]
=======
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a40      	ldr	r2, [pc, #256]	@ (800416c <TIM_Base_SetConfig+0x114>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d013      	beq.n	8004098 <TIM_Base_SetConfig+0x40>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004076:	d00f      	beq.n	8004098 <TIM_Base_SetConfig+0x40>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a3d      	ldr	r2, [pc, #244]	@ (8004170 <TIM_Base_SetConfig+0x118>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00b      	beq.n	8004098 <TIM_Base_SetConfig+0x40>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a3c      	ldr	r2, [pc, #240]	@ (8004174 <TIM_Base_SetConfig+0x11c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d007      	beq.n	8004098 <TIM_Base_SetConfig+0x40>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a3b      	ldr	r2, [pc, #236]	@ (8004178 <TIM_Base_SetConfig+0x120>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_Base_SetConfig+0x40>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a3a      	ldr	r2, [pc, #232]	@ (800417c <TIM_Base_SetConfig+0x124>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d108      	bne.n	80040aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800409e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a2f      	ldr	r2, [pc, #188]	@ (800416c <TIM_Base_SetConfig+0x114>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d02b      	beq.n	800410a <TIM_Base_SetConfig+0xb2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b8:	d027      	beq.n	800410a <TIM_Base_SetConfig+0xb2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a2c      	ldr	r2, [pc, #176]	@ (8004170 <TIM_Base_SetConfig+0x118>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d023      	beq.n	800410a <TIM_Base_SetConfig+0xb2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004174 <TIM_Base_SetConfig+0x11c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d01f      	beq.n	800410a <TIM_Base_SetConfig+0xb2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004178 <TIM_Base_SetConfig+0x120>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d01b      	beq.n	800410a <TIM_Base_SetConfig+0xb2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a29      	ldr	r2, [pc, #164]	@ (800417c <TIM_Base_SetConfig+0x124>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d017      	beq.n	800410a <TIM_Base_SetConfig+0xb2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a28      	ldr	r2, [pc, #160]	@ (8004180 <TIM_Base_SetConfig+0x128>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d013      	beq.n	800410a <TIM_Base_SetConfig+0xb2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a27      	ldr	r2, [pc, #156]	@ (8004184 <TIM_Base_SetConfig+0x12c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00f      	beq.n	800410a <TIM_Base_SetConfig+0xb2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a26      	ldr	r2, [pc, #152]	@ (8004188 <TIM_Base_SetConfig+0x130>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00b      	beq.n	800410a <TIM_Base_SetConfig+0xb2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a25      	ldr	r2, [pc, #148]	@ (800418c <TIM_Base_SetConfig+0x134>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d007      	beq.n	800410a <TIM_Base_SetConfig+0xb2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a24      	ldr	r2, [pc, #144]	@ (8004190 <TIM_Base_SetConfig+0x138>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d003      	beq.n	800410a <TIM_Base_SetConfig+0xb2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a23      	ldr	r2, [pc, #140]	@ (8004194 <TIM_Base_SetConfig+0x13c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d108      	bne.n	800411c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a0a      	ldr	r2, [pc, #40]	@ (800405c <TIM_Base_SetConfig+0x114>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d003      	beq.n	8004040 <TIM_Base_SetConfig+0xf8>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a0c      	ldr	r2, [pc, #48]	@ (800406c <TIM_Base_SetConfig+0x124>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d103      	bne.n	8004048 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	691a      	ldr	r2, [r3, #16]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a0a      	ldr	r2, [pc, #40]	@ (800416c <TIM_Base_SetConfig+0x114>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d003      	beq.n	8004150 <TIM_Base_SetConfig+0xf8>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a0c      	ldr	r2, [pc, #48]	@ (800417c <TIM_Base_SetConfig+0x124>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d103      	bne.n	8004158 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	615a      	str	r2, [r3, #20]
}
 800404e:	bf00      	nop
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40010000 	.word	0x40010000
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800
 8004068:	40000c00 	.word	0x40000c00
 800406c:	40010400 	.word	0x40010400
 8004070:	40014000 	.word	0x40014000
 8004074:	40014400 	.word	0x40014400
 8004078:	40014800 	.word	0x40014800
 800407c:	40001800 	.word	0x40001800
 8004080:	40001c00 	.word	0x40001c00
 8004084:	40002000 	.word	0x40002000

08004088 <HAL_TIMEx_CommutCallback>:
=======
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	615a      	str	r2, [r3, #20]
}
 800415e:	bf00      	nop
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40010000 	.word	0x40010000
 8004170:	40000400 	.word	0x40000400
 8004174:	40000800 	.word	0x40000800
 8004178:	40000c00 	.word	0x40000c00
 800417c:	40010400 	.word	0x40010400
 8004180:	40014000 	.word	0x40014000
 8004184:	40014400 	.word	0x40014400
 8004188:	40014800 	.word	0x40014800
 800418c:	40001800 	.word	0x40001800
 8004190:	40001c00 	.word	0x40001c00
 8004194:	40002000 	.word	0x40002000

08004198 <HAL_TIMEx_CommutCallback>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
=======
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_TIMEx_BreakCallback>:
=======
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_TIMEx_BreakCallback>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
=======
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_UART_Init>:
=======
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_UART_Init>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e03f      	b.n	8004142 <HAL_UART_Init+0x92>
=======
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e03f      	b.n	8004252 <HAL_UART_Init+0x92>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
=======
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d106      	bne.n	80041ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fd fc40 	bl	800195c <HAL_UART_MspInit>
=======
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7fd fc1a 	bl	8001a20 <HAL_UART_MspInit>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2224      	movs	r2, #36	@ 0x24
 80040e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fb97 	bl	8004828 <UART_SetConfig>
=======
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2224      	movs	r2, #36	@ 0x24
 80041f0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004202:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 fb97 	bl	8004938 <UART_SetConfig>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004108:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695a      	ldr	r2, [r3, #20]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004118:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004128:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_UART_Transmit>:
=======
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004218:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695a      	ldr	r2, [r3, #20]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004228:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004238:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_UART_Transmit>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 800414a:	b580      	push	{r7, lr}
 800414c:	b088      	sub	sp, #32
 800414e:	af02      	add	r7, sp, #8
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	603b      	str	r3, [r7, #0]
 8004156:	4613      	mov	r3, r2
 8004158:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b20      	cmp	r3, #32
 8004168:	f040 8083 	bne.w	8004272 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_UART_Transmit+0x2e>
 8004172:	88fb      	ldrh	r3, [r7, #6]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e07b      	b.n	8004274 <HAL_UART_Transmit+0x12a>
=======
 800425a:	b580      	push	{r7, lr}
 800425c:	b088      	sub	sp, #32
 800425e:	af02      	add	r7, sp, #8
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	603b      	str	r3, [r7, #0]
 8004266:	4613      	mov	r3, r2
 8004268:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b20      	cmp	r3, #32
 8004278:	f040 8083 	bne.w	8004382 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <HAL_UART_Transmit+0x2e>
 8004282:	88fb      	ldrh	r3, [r7, #6]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e07b      	b.n	8004384 <HAL_UART_Transmit+0x12a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< HEAD
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_UART_Transmit+0x40>
 8004186:	2302      	movs	r3, #2
 8004188:	e074      	b.n	8004274 <HAL_UART_Transmit+0x12a>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2221      	movs	r2, #33	@ 0x21
 800419c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80041a0:	f7fd fd88 	bl	8001cb4 <HAL_GetTick>
 80041a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	88fa      	ldrh	r2, [r7, #6]
 80041aa:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	88fa      	ldrh	r2, [r7, #6]
 80041b0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 80041ba:	e042      	b.n	8004242 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041d2:	d122      	bne.n	800421a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2200      	movs	r2, #0
 80041dc:	2180      	movs	r1, #128	@ 0x80
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f9b6 	bl	8004550 <UART_WaitOnFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e042      	b.n	8004274 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004200:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d103      	bne.n	8004212 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	3302      	adds	r3, #2
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	e017      	b.n	8004242 <HAL_UART_Transmit+0xf8>
=======
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_UART_Transmit+0x40>
 8004296:	2302      	movs	r3, #2
 8004298:	e074      	b.n	8004384 <HAL_UART_Transmit+0x12a>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2221      	movs	r2, #33	@ 0x21
 80042ac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80042b0:	f7fd fd62 	bl	8001d78 <HAL_GetTick>
 80042b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	88fa      	ldrh	r2, [r7, #6]
 80042ba:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	88fa      	ldrh	r2, [r7, #6]
 80042c0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 80042ca:	e042      	b.n	8004352 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042e2:	d122      	bne.n	800432a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	2200      	movs	r2, #0
 80042ec:	2180      	movs	r1, #128	@ 0x80
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 f9b6 	bl	8004660 <UART_WaitOnFlagUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e042      	b.n	8004384 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004310:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d103      	bne.n	8004322 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	3302      	adds	r3, #2
 800431e:	60bb      	str	r3, [r7, #8]
 8004320:	e017      	b.n	8004352 <HAL_UART_Transmit+0xf8>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
        }
        else
        {
          pData += 1U;
<<<<<<< HEAD
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	3301      	adds	r3, #1
 8004216:	60bb      	str	r3, [r7, #8]
 8004218:	e013      	b.n	8004242 <HAL_UART_Transmit+0xf8>
=======
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	3301      	adds	r3, #1
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	e013      	b.n	8004352 <HAL_UART_Transmit+0xf8>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
<<<<<<< HEAD
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2200      	movs	r2, #0
 8004222:	2180      	movs	r1, #128	@ 0x80
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f993 	bl	8004550 <UART_WaitOnFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e01f      	b.n	8004274 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	60ba      	str	r2, [r7, #8]
 800423a:	781a      	ldrb	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1b7      	bne.n	80041bc <HAL_UART_Transmit+0x72>
=======
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2200      	movs	r2, #0
 8004332:	2180      	movs	r1, #128	@ 0x80
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 f993 	bl	8004660 <UART_WaitOnFlagUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e01f      	b.n	8004384 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	60ba      	str	r2, [r7, #8]
 800434a:	781a      	ldrb	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1b7      	bne.n	80042cc <HAL_UART_Transmit+0x72>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
<<<<<<< HEAD
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2200      	movs	r2, #0
 8004254:	2140      	movs	r1, #64	@ 0x40
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 f97a 	bl	8004550 <UART_WaitOnFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e006      	b.n	8004274 <HAL_UART_Transmit+0x12a>
=======
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2200      	movs	r2, #0
 8004364:	2140      	movs	r1, #64	@ 0x40
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f97a 	bl	8004660 <UART_WaitOnFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e006      	b.n	8004384 <HAL_UART_Transmit+0x12a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 800426e:	2300      	movs	r3, #0
 8004270:	e000      	b.n	8004274 <HAL_UART_Transmit+0x12a>
=======
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	e000      	b.n	8004384 <HAL_UART_Transmit+0x12a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8004272:	2302      	movs	r3, #2
  }
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_UART_Receive_IT>:
=======
 8004382:	2302      	movs	r3, #2
  }
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_UART_Receive_IT>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	4613      	mov	r3, r2
 8004288:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b20      	cmp	r3, #32
 8004294:	d140      	bne.n	8004318 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <HAL_UART_Receive_IT+0x26>
 800429c:	88fb      	ldrh	r3, [r7, #6]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e039      	b.n	800431a <HAL_UART_Receive_IT+0x9e>
=======
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	4613      	mov	r3, r2
 8004398:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	d140      	bne.n	8004428 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <HAL_UART_Receive_IT+0x26>
 80043ac:	88fb      	ldrh	r3, [r7, #6]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e039      	b.n	800442a <HAL_UART_Receive_IT+0x9e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< HEAD
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_UART_Receive_IT+0x38>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e032      	b.n	800431a <HAL_UART_Receive_IT+0x9e>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->pRxBuffPtr = pData;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	629a      	str	r2, [r3, #40]	@ 0x28
    huart->RxXferSize = Size;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	88fa      	ldrh	r2, [r7, #6]
 80042c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	88fa      	ldrh	r2, [r7, #6]
 80042cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2222      	movs	r2, #34	@ 0x22
 80042d8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042f2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695a      	ldr	r2, [r3, #20]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0201 	orr.w	r2, r2, #1
 8004302:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0220 	orr.w	r2, r2, #32
 8004312:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	e000      	b.n	800431a <HAL_UART_Receive_IT+0x9e>
=======
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <HAL_UART_Receive_IT+0x38>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e032      	b.n	800442a <HAL_UART_Receive_IT+0x9e>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->pRxBuffPtr = pData;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	629a      	str	r2, [r3, #40]	@ 0x28
    huart->RxXferSize = Size;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	88fa      	ldrh	r2, [r7, #6]
 80043d6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	88fa      	ldrh	r2, [r7, #6]
 80043dc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2222      	movs	r2, #34	@ 0x22
 80043e8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004402:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695a      	ldr	r2, [r3, #20]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0220 	orr.w	r2, r2, #32
 8004422:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	e000      	b.n	800442a <HAL_UART_Receive_IT+0x9e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8004318:	2302      	movs	r3, #2
  }
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
	...

08004328 <HAL_UART_IRQHandler>:
=======
 8004428:	2302      	movs	r3, #2
  }
}
 800442a:	4618      	mov	r0, r3
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
	...

08004438 <HAL_UART_IRQHandler>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004348:	2300      	movs	r3, #0
 800434a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10d      	bne.n	800437a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_UART_IRQHandler+0x52>
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f9d6 	bl	8004724 <UART_Receive_IT>
      return;
 8004378:	e0d0      	b.n	800451c <HAL_UART_IRQHandler+0x1f4>
=======
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004458:	2300      	movs	r3, #0
 800445a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800445c:	2300      	movs	r3, #0
 800445e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10d      	bne.n	800448a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b00      	cmp	r3, #0
 8004476:	d008      	beq.n	800448a <HAL_UART_IRQHandler+0x52>
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f9d6 	bl	8004834 <UART_Receive_IT>
      return;
 8004488:	e0d0      	b.n	800462c <HAL_UART_IRQHandler+0x1f4>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
<<<<<<< HEAD
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80b0 	beq.w	80044e2 <HAL_UART_IRQHandler+0x1ba>
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	d105      	bne.n	8004398 <HAL_UART_IRQHandler+0x70>
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 80a5 	beq.w	80044e2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <HAL_UART_IRQHandler+0x90>
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b0:	f043 0201 	orr.w	r2, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	63da      	str	r2, [r3, #60]	@ 0x3c
=======
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 80b0 	beq.w	80045f2 <HAL_UART_IRQHandler+0x1ba>
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d105      	bne.n	80044a8 <HAL_UART_IRQHandler+0x70>
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 80a5 	beq.w	80045f2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <HAL_UART_IRQHandler+0x90>
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c0:	f043 0201 	orr.w	r2, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	63da      	str	r2, [r3, #60]	@ 0x3c
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <HAL_UART_IRQHandler+0xb0>
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d0:	f043 0202 	orr.w	r2, r3, #2
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	63da      	str	r2, [r3, #60]	@ 0x3c
=======
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <HAL_UART_IRQHandler+0xb0>
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d005      	beq.n	80044e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e0:	f043 0202 	orr.w	r2, r3, #2
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	63da      	str	r2, [r3, #60]	@ 0x3c
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <HAL_UART_IRQHandler+0xd0>
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d005      	beq.n	80043f8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f0:	f043 0204 	orr.w	r2, r3, #4
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	63da      	str	r2, [r3, #60]	@ 0x3c
=======
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <HAL_UART_IRQHandler+0xd0>
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004500:	f043 0204 	orr.w	r2, r3, #4
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	63da      	str	r2, [r3, #60]	@ 0x3c
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
<<<<<<< HEAD
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00f      	beq.n	8004422 <HAL_UART_IRQHandler+0xfa>
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	f003 0320 	and.w	r3, r3, #32
 8004408:	2b00      	cmp	r3, #0
 800440a:	d104      	bne.n	8004416 <HAL_UART_IRQHandler+0xee>
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d005      	beq.n	8004422 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441a:	f043 0208 	orr.w	r2, r3, #8
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	63da      	str	r2, [r3, #60]	@ 0x3c
=======
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00f      	beq.n	8004532 <HAL_UART_IRQHandler+0xfa>
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d104      	bne.n	8004526 <HAL_UART_IRQHandler+0xee>
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d005      	beq.n	8004532 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452a:	f043 0208 	orr.w	r2, r3, #8
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	63da      	str	r2, [r3, #60]	@ 0x3c
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004426:	2b00      	cmp	r3, #0
 8004428:	d077      	beq.n	800451a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	2b00      	cmp	r3, #0
 8004432:	d007      	beq.n	8004444 <HAL_UART_IRQHandler+0x11c>
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f970 	bl	8004724 <UART_Receive_IT>
=======
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d077      	beq.n	800462a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d007      	beq.n	8004554 <HAL_UART_IRQHandler+0x11c>
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f970 	bl	8004834 <UART_Receive_IT>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800444e:	2b40      	cmp	r3, #64	@ 0x40
 8004450:	bf0c      	ite	eq
 8004452:	2301      	moveq	r3, #1
 8004454:	2300      	movne	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d102      	bne.n	800446c <HAL_UART_IRQHandler+0x144>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d031      	beq.n	80044d0 <HAL_UART_IRQHandler+0x1a8>
=======
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800455e:	2b40      	cmp	r3, #64	@ 0x40
 8004560:	bf0c      	ite	eq
 8004562:	2301      	moveq	r3, #1
 8004564:	2300      	movne	r3, #0
 8004566:	b2db      	uxtb	r3, r3
 8004568:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d102      	bne.n	800457c <HAL_UART_IRQHandler+0x144>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d031      	beq.n	80045e0 <HAL_UART_IRQHandler+0x1a8>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f8b9 	bl	80045e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447c:	2b40      	cmp	r3, #64	@ 0x40
 800447e:	d123      	bne.n	80044c8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695a      	ldr	r2, [r3, #20]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800448e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004494:	2b00      	cmp	r3, #0
 8004496:	d013      	beq.n	80044c0 <HAL_UART_IRQHandler+0x198>
=======
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f8b9 	bl	80046f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800458c:	2b40      	cmp	r3, #64	@ 0x40
 800458e:	d123      	bne.n	80045d8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695a      	ldr	r2, [r3, #20]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800459e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d013      	beq.n	80045d0 <HAL_UART_IRQHandler+0x198>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800449c:	4a21      	ldr	r2, [pc, #132]	@ (8004524 <HAL_UART_IRQHandler+0x1fc>)
 800449e:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fe fc17 	bl	8002cd8 <HAL_DMA_Abort_IT>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d016      	beq.n	80044de <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80044ba:	4610      	mov	r0, r2
 80044bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044be:	e00e      	b.n	80044de <HAL_UART_IRQHandler+0x1b6>
=======
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ac:	4a21      	ldr	r2, [pc, #132]	@ (8004634 <HAL_UART_IRQHandler+0x1fc>)
 80045ae:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fe fc17 	bl	8002de8 <HAL_DMA_Abort_IT>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d016      	beq.n	80045ee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80045ca:	4610      	mov	r0, r2
 80045cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ce:	e00e      	b.n	80045ee <HAL_UART_IRQHandler+0x1b6>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f83b 	bl	800453c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c6:	e00a      	b.n	80044de <HAL_UART_IRQHandler+0x1b6>
=======
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f83b 	bl	800464c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d6:	e00a      	b.n	80045ee <HAL_UART_IRQHandler+0x1b6>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f837 	bl	800453c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ce:	e006      	b.n	80044de <HAL_UART_IRQHandler+0x1b6>
=======
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f837 	bl	800464c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045de:	e006      	b.n	80045ee <HAL_UART_IRQHandler+0x1b6>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f833 	bl	800453c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
    return;
 80044dc:	e01d      	b.n	800451a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044de:	bf00      	nop
    return;
 80044e0:	e01b      	b.n	800451a <HAL_UART_IRQHandler+0x1f2>
=======
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f833 	bl	800464c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
    return;
 80045ec:	e01d      	b.n	800462a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ee:	bf00      	nop
    return;
 80045f0:	e01b      	b.n	800462a <HAL_UART_IRQHandler+0x1f2>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
<<<<<<< HEAD
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d008      	beq.n	80044fe <HAL_UART_IRQHandler+0x1d6>
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f8a6 	bl	8004648 <UART_Transmit_IT>
    return;
 80044fc:	e00e      	b.n	800451c <HAL_UART_IRQHandler+0x1f4>
=======
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <HAL_UART_IRQHandler+0x1d6>
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f8a6 	bl	8004758 <UART_Transmit_IT>
    return;
 800460c:	e00e      	b.n	800462c <HAL_UART_IRQHandler+0x1f4>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
<<<<<<< HEAD
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004504:	2b00      	cmp	r3, #0
 8004506:	d009      	beq.n	800451c <HAL_UART_IRQHandler+0x1f4>
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d004      	beq.n	800451c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f8ee 	bl	80046f4 <UART_EndTransmit_IT>
    return;
 8004518:	e000      	b.n	800451c <HAL_UART_IRQHandler+0x1f4>
    return;
 800451a:	bf00      	nop
  }
}
 800451c:	3720      	adds	r7, #32
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	08004621 	.word	0x08004621

08004528 <HAL_UART_TxCpltCallback>:
=======
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004614:	2b00      	cmp	r3, #0
 8004616:	d009      	beq.n	800462c <HAL_UART_IRQHandler+0x1f4>
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d004      	beq.n	800462c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f8ee 	bl	8004804 <UART_EndTransmit_IT>
    return;
 8004628:	e000      	b.n	800462c <HAL_UART_IRQHandler+0x1f4>
    return;
 800462a:	bf00      	nop
  }
}
 800462c:	3720      	adds	r7, #32
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	08004731 	.word	0x08004731

08004638 <HAL_UART_TxCpltCallback>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
=======
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_UART_ErrorCallback>:
=======
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_UART_ErrorCallback>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
=======
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <UART_WaitOnFlagUntilTimeout>:
=======
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	4613      	mov	r3, r2
 800455e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004560:	e02c      	b.n	80045bc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004568:	d028      	beq.n	80045bc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d007      	beq.n	8004580 <UART_WaitOnFlagUntilTimeout+0x30>
 8004570:	f7fd fba0 	bl	8001cb4 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	429a      	cmp	r2, r3
 800457e:	d21d      	bcs.n	80045bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800458e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695a      	ldr	r2, [r3, #20]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0201 	bic.w	r2, r2, #1
 800459e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e00f      	b.n	80045dc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	4013      	ands	r3, r2
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	bf0c      	ite	eq
 80045cc:	2301      	moveq	r3, #1
 80045ce:	2300      	movne	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	461a      	mov	r2, r3
 80045d4:	79fb      	ldrb	r3, [r7, #7]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d0c3      	beq.n	8004562 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	4613      	mov	r3, r2
 800466e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004670:	e02c      	b.n	80046cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004678:	d028      	beq.n	80046cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d007      	beq.n	8004690 <UART_WaitOnFlagUntilTimeout+0x30>
 8004680:	f7fd fb7a 	bl	8001d78 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	429a      	cmp	r2, r3
 800468e:	d21d      	bcs.n	80046cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800469e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695a      	ldr	r2, [r3, #20]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0201 	bic.w	r2, r2, #1
 80046ae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e00f      	b.n	80046ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	4013      	ands	r3, r2
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	429a      	cmp	r2, r3
 80046da:	bf0c      	ite	eq
 80046dc:	2301      	moveq	r3, #1
 80046de:	2300      	movne	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	461a      	mov	r2, r3
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d0c3      	beq.n	8004672 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <UART_EndRxTransfer>:
=======
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <UART_EndRxTransfer>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 80045fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695a      	ldr	r2, [r3, #20]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0201 	bic.w	r2, r2, #1
 800460a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <UART_DMAAbortOnError>:
=======
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 800470a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695a      	ldr	r2, [r3, #20]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0201 	bic.w	r2, r2, #1
 800471a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <UART_DMAAbortOnError>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	84da      	strh	r2, [r3, #38]	@ 0x26
=======
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	84da      	strh	r2, [r3, #38]	@ 0x26
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f7ff ff7e 	bl	800453c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004640:	bf00      	nop
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <UART_Transmit_IT>:
=======
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f7ff ff7e 	bl	800464c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004750:	bf00      	nop
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <UART_Transmit_IT>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
=======
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b21      	cmp	r3, #33	@ 0x21
 800465a:	d144      	bne.n	80046e6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004664:	d11a      	bne.n	800469c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	461a      	mov	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800467a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d105      	bne.n	8004690 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	1c9a      	adds	r2, r3, #2
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	621a      	str	r2, [r3, #32]
 800468e:	e00e      	b.n	80046ae <UART_Transmit_IT+0x66>
=======
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b21      	cmp	r3, #33	@ 0x21
 800476a:	d144      	bne.n	80047f6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004774:	d11a      	bne.n	80047ac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	881b      	ldrh	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800478a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d105      	bne.n	80047a0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	1c9a      	adds	r2, r3, #2
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	621a      	str	r2, [r3, #32]
 800479e:	e00e      	b.n	80047be <UART_Transmit_IT+0x66>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
      else
      {
        huart->pTxBuffPtr += 1U;
<<<<<<< HEAD
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	621a      	str	r2, [r3, #32]
 800469a:	e008      	b.n	80046ae <UART_Transmit_IT+0x66>
=======
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	621a      	str	r2, [r3, #32]
 80047aa:	e008      	b.n	80047be <UART_Transmit_IT+0x66>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
<<<<<<< HEAD
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	1c59      	adds	r1, r3, #1
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6211      	str	r1, [r2, #32]
 80046a6:	781a      	ldrb	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	4619      	mov	r1, r3
 80046bc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10f      	bne.n	80046e2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	e000      	b.n	80046e8 <UART_Transmit_IT+0xa0>
=======
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	1c59      	adds	r1, r3, #1
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6211      	str	r1, [r2, #32]
 80047b6:	781a      	ldrb	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	4619      	mov	r1, r3
 80047cc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10f      	bne.n	80047f2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	e000      	b.n	80047f8 <UART_Transmit_IT+0xa0>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80046e6:	2302      	movs	r3, #2
  }
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <UART_EndTransmit_IT>:
=======
 80047f6:	2302      	movs	r3, #2
  }
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <UART_EndTransmit_IT>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800470a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
=======
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800481a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff ff07 	bl	8004528 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <UART_Receive_IT>:
=======
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff ff07 	bl	8004638 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <UART_Receive_IT>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
=======
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b22      	cmp	r3, #34	@ 0x22
 8004736:	d171      	bne.n	800481c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004740:	d123      	bne.n	800478a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004746:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10e      	bne.n	800476e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	b29b      	uxth	r3, r3
 8004758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004766:	1c9a      	adds	r2, r3, #2
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	629a      	str	r2, [r3, #40]	@ 0x28
 800476c:	e029      	b.n	80047c2 <UART_Receive_IT+0x9e>
=======
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b22      	cmp	r3, #34	@ 0x22
 8004846:	d171      	bne.n	800492c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004850:	d123      	bne.n	800489a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004856:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10e      	bne.n	800487e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	b29b      	uxth	r3, r3
 8004868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004876:	1c9a      	adds	r2, r3, #2
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	629a      	str	r2, [r3, #40]	@ 0x28
 800487c:	e029      	b.n	80048d2 <UART_Receive_IT+0x9e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
<<<<<<< HEAD
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	b29b      	uxth	r3, r3
 8004776:	b2db      	uxtb	r3, r3
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	629a      	str	r2, [r3, #40]	@ 0x28
 8004788:	e01b      	b.n	80047c2 <UART_Receive_IT+0x9e>
=======
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	b29b      	uxth	r3, r3
 8004886:	b2db      	uxtb	r3, r3
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	629a      	str	r2, [r3, #40]	@ 0x28
 8004898:	e01b      	b.n	80048d2 <UART_Receive_IT+0x9e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
<<<<<<< HEAD
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10a      	bne.n	80047a8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6858      	ldr	r0, [r3, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479c:	1c59      	adds	r1, r3, #1
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6291      	str	r1, [r2, #40]	@ 0x28
 80047a2:	b2c2      	uxtb	r2, r0
 80047a4:	701a      	strb	r2, [r3, #0]
 80047a6:	e00c      	b.n	80047c2 <UART_Receive_IT+0x9e>
=======
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10a      	bne.n	80048b8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6858      	ldr	r0, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ac:	1c59      	adds	r1, r3, #1
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6291      	str	r1, [r2, #40]	@ 0x28
 80048b2:	b2c2      	uxtb	r2, r0
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	e00c      	b.n	80048d2 <UART_Receive_IT+0x9e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
<<<<<<< HEAD
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b4:	1c58      	adds	r0, r3, #1
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	6288      	str	r0, [r1, #40]	@ 0x28
 80047ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]
=======
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c4:	1c58      	adds	r0, r3, #1
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	6288      	str	r0, [r1, #40]	@ 0x28
 80048ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	701a      	strb	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
    }

    if (--huart->RxXferCount == 0U)
<<<<<<< HEAD
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	4619      	mov	r1, r3
 80047d0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d120      	bne.n	8004818 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0220 	bic.w	r2, r2, #32
 80047e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695a      	ldr	r2, [r3, #20]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0201 	bic.w	r2, r2, #1
 8004804:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
=======
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29b      	uxth	r3, r3
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	4619      	mov	r1, r3
 80048e0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d120      	bne.n	8004928 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0220 	bic.w	r2, r2, #32
 80048f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004904:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695a      	ldr	r2, [r3, #20]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0201 	bic.w	r2, r2, #1
 8004914:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fc fc44 	bl	800109c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	e002      	b.n	800481e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004818:	2300      	movs	r3, #0
 800481a:	e000      	b.n	800481e <UART_Receive_IT+0xfa>
=======
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fc fbfa 	bl	8001118 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	e002      	b.n	800492e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	e000      	b.n	800492e <UART_Receive_IT+0xfa>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 800481c:	2302      	movs	r3, #2
  }
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <UART_SetConfig>:
=======
 800492c:	2302      	movs	r3, #2
  }
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <UART_SetConfig>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800482c:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8004830:	af00      	add	r7, sp, #0
 8004832:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
=======
 8004938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800493c:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8004940:	af00      	add	r7, sp, #0
 8004942:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8004836:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004842:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004846:	68d9      	ldr	r1, [r3, #12]
 8004848:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	ea40 0301 	orr.w	r3, r0, r1
 8004852:	6113      	str	r3, [r2, #16]
=======
 8004946:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004952:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004956:	68d9      	ldr	r1, [r3, #12]
 8004958:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	ea40 0301 	orr.w	r3, r0, r1
 8004962:	6113      	str	r3, [r2, #16]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< HEAD
 8004854:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	431a      	orrs	r2, r3
 8004862:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	431a      	orrs	r2, r3
 800486a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 8004876:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004882:	f021 010c 	bic.w	r1, r1, #12
 8004886:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8004890:	430b      	orrs	r3, r1
 8004892:	60d3      	str	r3, [r2, #12]
=======
 8004964:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	431a      	orrs	r2, r3
 8004972:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	431a      	orrs	r2, r3
 800497a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 8004986:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004992:	f021 010c 	bic.w	r1, r1, #12
 8004996:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80049a0:	430b      	orrs	r3, r1
 80049a2:	60d3      	str	r3, [r2, #12]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 8004894:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80048a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80048a4:	6999      	ldr	r1, [r3, #24]
 80048a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	ea40 0301 	orr.w	r3, r0, r1
 80048b0:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048b2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048bc:	f040 824a 	bne.w	8004d54 <UART_SetConfig+0x52c>
=======
 80049a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80049b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80049b4:	6999      	ldr	r1, [r3, #24]
 80049b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	ea40 0301 	orr.w	r3, r0, r1
 80049c0:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049cc:	f040 824a 	bne.w	8004e64 <UART_SetConfig+0x52c>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< HEAD
 80048c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	4b96      	ldr	r3, [pc, #600]	@ (8004b20 <UART_SetConfig+0x2f8>)
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d006      	beq.n	80048da <UART_SetConfig+0xb2>
 80048cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4b94      	ldr	r3, [pc, #592]	@ (8004b24 <UART_SetConfig+0x2fc>)
 80048d4:	429a      	cmp	r2, r3
 80048d6:	f040 8129 	bne.w	8004b2c <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048da:	f7ff f965 	bl	8003ba8 <HAL_RCC_GetPCLK2Freq>
 80048de:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 80048ec:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 80048f0:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 80048f4:	4622      	mov	r2, r4
 80048f6:	462b      	mov	r3, r5
 80048f8:	1891      	adds	r1, r2, r2
 80048fa:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80048fe:	415b      	adcs	r3, r3
 8004900:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004904:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8004908:	4621      	mov	r1, r4
 800490a:	1851      	adds	r1, r2, r1
 800490c:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8004910:	4629      	mov	r1, r5
 8004912:	414b      	adcs	r3, r1
 8004914:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	f04f 0300 	mov.w	r3, #0
 8004920:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 8004924:	4649      	mov	r1, r9
 8004926:	00cb      	lsls	r3, r1, #3
 8004928:	4641      	mov	r1, r8
 800492a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800492e:	4641      	mov	r1, r8
 8004930:	00ca      	lsls	r2, r1, #3
 8004932:	4610      	mov	r0, r2
 8004934:	4619      	mov	r1, r3
 8004936:	4603      	mov	r3, r0
 8004938:	4622      	mov	r2, r4
 800493a:	189b      	adds	r3, r3, r2
 800493c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8004940:	462b      	mov	r3, r5
 8004942:	460a      	mov	r2, r1
 8004944:	eb42 0303 	adc.w	r3, r2, r3
 8004948:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 800494c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004958:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 800495c:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 8004960:	460b      	mov	r3, r1
 8004962:	18db      	adds	r3, r3, r3
 8004964:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004968:	4613      	mov	r3, r2
 800496a:	eb42 0303 	adc.w	r3, r2, r3
 800496e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004972:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8004976:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 800497a:	f7fb fc89 	bl	8000290 <__aeabi_uldivmod>
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	4b69      	ldr	r3, [pc, #420]	@ (8004b28 <UART_SetConfig+0x300>)
 8004984:	fba3 2302 	umull	r2, r3, r3, r2
 8004988:	095b      	lsrs	r3, r3, #5
 800498a:	011c      	lsls	r4, r3, #4
 800498c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004990:	2200      	movs	r2, #0
 8004992:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8004996:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800499a:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 800499e:	4642      	mov	r2, r8
 80049a0:	464b      	mov	r3, r9
 80049a2:	1891      	adds	r1, r2, r2
 80049a4:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80049a8:	415b      	adcs	r3, r3
 80049aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80049ae:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 80049b2:	4641      	mov	r1, r8
 80049b4:	1851      	adds	r1, r2, r1
 80049b6:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80049ba:	4649      	mov	r1, r9
 80049bc:	414b      	adcs	r3, r1
 80049be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 80049ce:	4659      	mov	r1, fp
 80049d0:	00cb      	lsls	r3, r1, #3
 80049d2:	4651      	mov	r1, sl
 80049d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049d8:	4651      	mov	r1, sl
 80049da:	00ca      	lsls	r2, r1, #3
 80049dc:	4610      	mov	r0, r2
 80049de:	4619      	mov	r1, r3
 80049e0:	4603      	mov	r3, r0
 80049e2:	4642      	mov	r2, r8
 80049e4:	189b      	adds	r3, r3, r2
 80049e6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80049ea:	464b      	mov	r3, r9
 80049ec:	460a      	mov	r2, r1
 80049ee:	eb42 0303 	adc.w	r3, r2, r3
 80049f2:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80049f6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8004a02:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8004a06:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	18db      	adds	r3, r3, r3
 8004a0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a12:	4613      	mov	r3, r2
 8004a14:	eb42 0303 	adc.w	r3, r2, r3
 8004a18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a1c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8004a20:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8004a24:	f7fb fc34 	bl	8000290 <__aeabi_uldivmod>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b28 <UART_SetConfig+0x300>)
 8004a30:	fba3 2301 	umull	r2, r3, r3, r1
 8004a34:	095b      	lsrs	r3, r3, #5
 8004a36:	2264      	movs	r2, #100	@ 0x64
 8004a38:	fb02 f303 	mul.w	r3, r2, r3
 8004a3c:	1acb      	subs	r3, r1, r3
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004a44:	4b38      	ldr	r3, [pc, #224]	@ (8004b28 <UART_SetConfig+0x300>)
 8004a46:	fba3 2302 	umull	r2, r3, r3, r2
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a52:	441c      	add	r4, r3
 8004a54:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004a5e:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8004a62:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8004a66:	4642      	mov	r2, r8
 8004a68:	464b      	mov	r3, r9
 8004a6a:	1891      	adds	r1, r2, r2
 8004a6c:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8004a70:	415b      	adcs	r3, r3
 8004a72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004a76:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8004a7a:	4641      	mov	r1, r8
 8004a7c:	1851      	adds	r1, r2, r1
 8004a7e:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8004a82:	4649      	mov	r1, r9
 8004a84:	414b      	adcs	r3, r1
 8004a86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 8004a96:	4659      	mov	r1, fp
 8004a98:	00cb      	lsls	r3, r1, #3
 8004a9a:	4651      	mov	r1, sl
 8004a9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aa0:	4651      	mov	r1, sl
 8004aa2:	00ca      	lsls	r2, r1, #3
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	4642      	mov	r2, r8
 8004aac:	189b      	adds	r3, r3, r2
 8004aae:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	460a      	mov	r2, r1
 8004ab6:	eb42 0303 	adc.w	r3, r2, r3
 8004aba:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004abe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8004aca:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8004ace:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	18db      	adds	r3, r3, r3
 8004ad6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ada:	4613      	mov	r3, r2
 8004adc:	eb42 0303 	adc.w	r3, r2, r3
 8004ae0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ae4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8004ae8:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8004aec:	f7fb fbd0 	bl	8000290 <__aeabi_uldivmod>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4b0c      	ldr	r3, [pc, #48]	@ (8004b28 <UART_SetConfig+0x300>)
 8004af6:	fba3 1302 	umull	r1, r3, r3, r2
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	2164      	movs	r1, #100	@ 0x64
 8004afe:	fb01 f303 	mul.w	r3, r1, r3
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	3332      	adds	r3, #50	@ 0x32
 8004b08:	4a07      	ldr	r2, [pc, #28]	@ (8004b28 <UART_SetConfig+0x300>)
 8004b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	f003 0207 	and.w	r2, r3, #7
 8004b14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4422      	add	r2, r4
 8004b1c:	609a      	str	r2, [r3, #8]
 8004b1e:	e34a      	b.n	80051b6 <UART_SetConfig+0x98e>
 8004b20:	40011000 	.word	0x40011000
 8004b24:	40011400 	.word	0x40011400
 8004b28:	51eb851f 	.word	0x51eb851f
=======
 80049d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4b96      	ldr	r3, [pc, #600]	@ (8004c30 <UART_SetConfig+0x2f8>)
 80049d8:	429a      	cmp	r2, r3
 80049da:	d006      	beq.n	80049ea <UART_SetConfig+0xb2>
 80049dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4b94      	ldr	r3, [pc, #592]	@ (8004c34 <UART_SetConfig+0x2fc>)
 80049e4:	429a      	cmp	r2, r3
 80049e6:	f040 8129 	bne.w	8004c3c <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049ea:	f7ff f965 	bl	8003cb8 <HAL_RCC_GetPCLK2Freq>
 80049ee:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80049f6:	2200      	movs	r2, #0
 80049f8:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 80049fc:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8004a00:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 8004a04:	4622      	mov	r2, r4
 8004a06:	462b      	mov	r3, r5
 8004a08:	1891      	adds	r1, r2, r2
 8004a0a:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8004a0e:	415b      	adcs	r3, r3
 8004a10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004a14:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8004a18:	4621      	mov	r1, r4
 8004a1a:	1851      	adds	r1, r2, r1
 8004a1c:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8004a20:	4629      	mov	r1, r5
 8004a22:	414b      	adcs	r3, r1
 8004a24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 8004a34:	4649      	mov	r1, r9
 8004a36:	00cb      	lsls	r3, r1, #3
 8004a38:	4641      	mov	r1, r8
 8004a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a3e:	4641      	mov	r1, r8
 8004a40:	00ca      	lsls	r2, r1, #3
 8004a42:	4610      	mov	r0, r2
 8004a44:	4619      	mov	r1, r3
 8004a46:	4603      	mov	r3, r0
 8004a48:	4622      	mov	r2, r4
 8004a4a:	189b      	adds	r3, r3, r2
 8004a4c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8004a50:	462b      	mov	r3, r5
 8004a52:	460a      	mov	r2, r1
 8004a54:	eb42 0303 	adc.w	r3, r2, r3
 8004a58:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8004a5c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004a68:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8004a6c:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 8004a70:	460b      	mov	r3, r1
 8004a72:	18db      	adds	r3, r3, r3
 8004a74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a78:	4613      	mov	r3, r2
 8004a7a:	eb42 0303 	adc.w	r3, r2, r3
 8004a7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a82:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8004a86:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8004a8a:	f7fb fc01 	bl	8000290 <__aeabi_uldivmod>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4b69      	ldr	r3, [pc, #420]	@ (8004c38 <UART_SetConfig+0x300>)
 8004a94:	fba3 2302 	umull	r2, r3, r3, r2
 8004a98:	095b      	lsrs	r3, r3, #5
 8004a9a:	011c      	lsls	r4, r3, #4
 8004a9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8004aa6:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8004aaa:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 8004aae:	4642      	mov	r2, r8
 8004ab0:	464b      	mov	r3, r9
 8004ab2:	1891      	adds	r1, r2, r2
 8004ab4:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8004ab8:	415b      	adcs	r3, r3
 8004aba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004abe:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8004ac2:	4641      	mov	r1, r8
 8004ac4:	1851      	adds	r1, r2, r1
 8004ac6:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8004aca:	4649      	mov	r1, r9
 8004acc:	414b      	adcs	r3, r1
 8004ace:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 8004ade:	4659      	mov	r1, fp
 8004ae0:	00cb      	lsls	r3, r1, #3
 8004ae2:	4651      	mov	r1, sl
 8004ae4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ae8:	4651      	mov	r1, sl
 8004aea:	00ca      	lsls	r2, r1, #3
 8004aec:	4610      	mov	r0, r2
 8004aee:	4619      	mov	r1, r3
 8004af0:	4603      	mov	r3, r0
 8004af2:	4642      	mov	r2, r8
 8004af4:	189b      	adds	r3, r3, r2
 8004af6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8004afa:	464b      	mov	r3, r9
 8004afc:	460a      	mov	r2, r1
 8004afe:	eb42 0303 	adc.w	r3, r2, r3
 8004b02:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8004b06:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8004b12:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8004b16:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	18db      	adds	r3, r3, r3
 8004b1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b22:	4613      	mov	r3, r2
 8004b24:	eb42 0303 	adc.w	r3, r2, r3
 8004b28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b2c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8004b30:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8004b34:	f7fb fbac 	bl	8000290 <__aeabi_uldivmod>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004c38 <UART_SetConfig+0x300>)
 8004b40:	fba3 2301 	umull	r2, r3, r3, r1
 8004b44:	095b      	lsrs	r3, r3, #5
 8004b46:	2264      	movs	r2, #100	@ 0x64
 8004b48:	fb02 f303 	mul.w	r3, r2, r3
 8004b4c:	1acb      	subs	r3, r1, r3
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b54:	4b38      	ldr	r3, [pc, #224]	@ (8004c38 <UART_SetConfig+0x300>)
 8004b56:	fba3 2302 	umull	r2, r3, r3, r2
 8004b5a:	095b      	lsrs	r3, r3, #5
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b62:	441c      	add	r4, r3
 8004b64:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004b6e:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8004b72:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8004b76:	4642      	mov	r2, r8
 8004b78:	464b      	mov	r3, r9
 8004b7a:	1891      	adds	r1, r2, r2
 8004b7c:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8004b80:	415b      	adcs	r3, r3
 8004b82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004b86:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8004b8a:	4641      	mov	r1, r8
 8004b8c:	1851      	adds	r1, r2, r1
 8004b8e:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8004b92:	4649      	mov	r1, r9
 8004b94:	414b      	adcs	r3, r1
 8004b96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	f04f 0300 	mov.w	r3, #0
 8004ba2:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 8004ba6:	4659      	mov	r1, fp
 8004ba8:	00cb      	lsls	r3, r1, #3
 8004baa:	4651      	mov	r1, sl
 8004bac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bb0:	4651      	mov	r1, sl
 8004bb2:	00ca      	lsls	r2, r1, #3
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4603      	mov	r3, r0
 8004bba:	4642      	mov	r2, r8
 8004bbc:	189b      	adds	r3, r3, r2
 8004bbe:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	460a      	mov	r2, r1
 8004bc6:	eb42 0303 	adc.w	r3, r2, r3
 8004bca:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004bce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8004bda:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8004bde:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 8004be2:	460b      	mov	r3, r1
 8004be4:	18db      	adds	r3, r3, r3
 8004be6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004bea:	4613      	mov	r3, r2
 8004bec:	eb42 0303 	adc.w	r3, r2, r3
 8004bf0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004bf4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8004bf8:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8004bfc:	f7fb fb48 	bl	8000290 <__aeabi_uldivmod>
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4b0c      	ldr	r3, [pc, #48]	@ (8004c38 <UART_SetConfig+0x300>)
 8004c06:	fba3 1302 	umull	r1, r3, r3, r2
 8004c0a:	095b      	lsrs	r3, r3, #5
 8004c0c:	2164      	movs	r1, #100	@ 0x64
 8004c0e:	fb01 f303 	mul.w	r3, r1, r3
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	00db      	lsls	r3, r3, #3
 8004c16:	3332      	adds	r3, #50	@ 0x32
 8004c18:	4a07      	ldr	r2, [pc, #28]	@ (8004c38 <UART_SetConfig+0x300>)
 8004c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	f003 0207 	and.w	r2, r3, #7
 8004c24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4422      	add	r2, r4
 8004c2c:	609a      	str	r2, [r3, #8]
 8004c2e:	e34a      	b.n	80052c6 <UART_SetConfig+0x98e>
 8004c30:	40011000 	.word	0x40011000
 8004c34:	40011400 	.word	0x40011400
 8004c38:	51eb851f 	.word	0x51eb851f
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8004b2c:	f7ff f828 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8004b30:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b34:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004b3e:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8004b42:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 8004b46:	4622      	mov	r2, r4
 8004b48:	462b      	mov	r3, r5
 8004b4a:	1891      	adds	r1, r2, r2
 8004b4c:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8004b50:	415b      	adcs	r3, r3
 8004b52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b56:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	eb12 0a01 	adds.w	sl, r2, r1
 8004b60:	4629      	mov	r1, r5
 8004b62:	eb43 0b01 	adc.w	fp, r3, r1
 8004b66:	f04f 0200 	mov.w	r2, #0
 8004b6a:	f04f 0300 	mov.w	r3, #0
 8004b6e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b72:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b7a:	4692      	mov	sl, r2
 8004b7c:	469b      	mov	fp, r3
 8004b7e:	4623      	mov	r3, r4
 8004b80:	eb1a 0303 	adds.w	r3, sl, r3
 8004b84:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004b88:	462b      	mov	r3, r5
 8004b8a:	eb4b 0303 	adc.w	r3, fp, r3
 8004b8e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004b92:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8004b9e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8004ba2:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	18db      	adds	r3, r3, r3
 8004baa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bae:	4613      	mov	r3, r2
 8004bb0:	eb42 0303 	adc.w	r3, r2, r3
 8004bb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004bb8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8004bbc:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8004bc0:	f7fb fb66 	bl	8000290 <__aeabi_uldivmod>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4b61      	ldr	r3, [pc, #388]	@ (8004d50 <UART_SetConfig+0x528>)
 8004bca:	fba3 2302 	umull	r2, r3, r3, r2
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	011c      	lsls	r4, r3, #4
 8004bd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8004bdc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8004be0:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 8004be4:	4642      	mov	r2, r8
 8004be6:	464b      	mov	r3, r9
 8004be8:	1891      	adds	r1, r2, r2
 8004bea:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004bec:	415b      	adcs	r3, r3
 8004bee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bf0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8004bf4:	4641      	mov	r1, r8
 8004bf6:	1851      	adds	r1, r2, r1
 8004bf8:	6739      	str	r1, [r7, #112]	@ 0x70
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	414b      	adcs	r3, r1
 8004bfe:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 8004c0c:	4659      	mov	r1, fp
 8004c0e:	00cb      	lsls	r3, r1, #3
 8004c10:	4651      	mov	r1, sl
 8004c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c16:	4651      	mov	r1, sl
 8004c18:	00ca      	lsls	r2, r1, #3
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4603      	mov	r3, r0
 8004c20:	4642      	mov	r2, r8
 8004c22:	189b      	adds	r3, r3, r2
 8004c24:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004c28:	464b      	mov	r3, r9
 8004c2a:	460a      	mov	r2, r1
 8004c2c:	eb42 0303 	adc.w	r3, r2, r3
 8004c30:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8004c34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004c40:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8004c44:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 8004c48:	460b      	mov	r3, r1
 8004c4a:	18db      	adds	r3, r3, r3
 8004c4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c4e:	4613      	mov	r3, r2
 8004c50:	eb42 0303 	adc.w	r3, r2, r3
 8004c54:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c56:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004c5a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004c5e:	f7fb fb17 	bl	8000290 <__aeabi_uldivmod>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4611      	mov	r1, r2
 8004c68:	4b39      	ldr	r3, [pc, #228]	@ (8004d50 <UART_SetConfig+0x528>)
 8004c6a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	2264      	movs	r2, #100	@ 0x64
 8004c72:	fb02 f303 	mul.w	r3, r2, r3
 8004c76:	1acb      	subs	r3, r1, r3
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004c7e:	4b34      	ldr	r3, [pc, #208]	@ (8004d50 <UART_SetConfig+0x528>)
 8004c80:	fba3 2302 	umull	r2, r3, r3, r2
 8004c84:	095b      	lsrs	r3, r3, #5
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c8c:	441c      	add	r4, r3
 8004c8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8004c98:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8004c9c:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 8004ca0:	4642      	mov	r2, r8
 8004ca2:	464b      	mov	r3, r9
 8004ca4:	1891      	adds	r1, r2, r2
 8004ca6:	6639      	str	r1, [r7, #96]	@ 0x60
 8004ca8:	415b      	adcs	r3, r3
 8004caa:	667b      	str	r3, [r7, #100]	@ 0x64
 8004cac:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8004cb0:	4641      	mov	r1, r8
 8004cb2:	1851      	adds	r1, r2, r1
 8004cb4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	414b      	adcs	r3, r1
 8004cba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8004cc8:	4659      	mov	r1, fp
 8004cca:	00cb      	lsls	r3, r1, #3
 8004ccc:	4651      	mov	r1, sl
 8004cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cd2:	4651      	mov	r1, sl
 8004cd4:	00ca      	lsls	r2, r1, #3
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4642      	mov	r2, r8
 8004cde:	189b      	adds	r3, r3, r2
 8004ce0:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	460a      	mov	r2, r1
 8004ce8:	eb42 0303 	adc.w	r3, r2, r3
 8004cec:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8004cf0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8004cfc:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8004d00:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8004d04:	460b      	mov	r3, r1
 8004d06:	18db      	adds	r3, r3, r3
 8004d08:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	eb42 0303 	adc.w	r3, r2, r3
 8004d10:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d12:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d16:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8004d1a:	f7fb fab9 	bl	8000290 <__aeabi_uldivmod>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4b0b      	ldr	r3, [pc, #44]	@ (8004d50 <UART_SetConfig+0x528>)
 8004d24:	fba3 1302 	umull	r1, r3, r3, r2
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	2164      	movs	r1, #100	@ 0x64
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	3332      	adds	r3, #50	@ 0x32
 8004d36:	4a06      	ldr	r2, [pc, #24]	@ (8004d50 <UART_SetConfig+0x528>)
 8004d38:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	f003 0207 	and.w	r2, r3, #7
 8004d42:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4422      	add	r2, r4
 8004d4a:	609a      	str	r2, [r3, #8]
=======
 8004c3c:	f7ff f828 	bl	8003c90 <HAL_RCC_GetPCLK1Freq>
 8004c40:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c44:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004c4e:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8004c52:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 8004c56:	4622      	mov	r2, r4
 8004c58:	462b      	mov	r3, r5
 8004c5a:	1891      	adds	r1, r2, r2
 8004c5c:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8004c60:	415b      	adcs	r3, r3
 8004c62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004c66:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	eb12 0a01 	adds.w	sl, r2, r1
 8004c70:	4629      	mov	r1, r5
 8004c72:	eb43 0b01 	adc.w	fp, r3, r1
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c82:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c8a:	4692      	mov	sl, r2
 8004c8c:	469b      	mov	fp, r3
 8004c8e:	4623      	mov	r3, r4
 8004c90:	eb1a 0303 	adds.w	r3, sl, r3
 8004c94:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004c98:	462b      	mov	r3, r5
 8004c9a:	eb4b 0303 	adc.w	r3, fp, r3
 8004c9e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004ca2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8004cae:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8004cb2:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	18db      	adds	r3, r3, r3
 8004cba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	eb42 0303 	adc.w	r3, r2, r3
 8004cc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004cc8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8004ccc:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8004cd0:	f7fb fade 	bl	8000290 <__aeabi_uldivmod>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4b61      	ldr	r3, [pc, #388]	@ (8004e60 <UART_SetConfig+0x528>)
 8004cda:	fba3 2302 	umull	r2, r3, r3, r2
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	011c      	lsls	r4, r3, #4
 8004ce2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8004cec:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8004cf0:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	1891      	adds	r1, r2, r2
 8004cfa:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004cfc:	415b      	adcs	r3, r3
 8004cfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004d00:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8004d04:	4641      	mov	r1, r8
 8004d06:	1851      	adds	r1, r2, r1
 8004d08:	6739      	str	r1, [r7, #112]	@ 0x70
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	414b      	adcs	r3, r1
 8004d0e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 8004d1c:	4659      	mov	r1, fp
 8004d1e:	00cb      	lsls	r3, r1, #3
 8004d20:	4651      	mov	r1, sl
 8004d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d26:	4651      	mov	r1, sl
 8004d28:	00ca      	lsls	r2, r1, #3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4603      	mov	r3, r0
 8004d30:	4642      	mov	r2, r8
 8004d32:	189b      	adds	r3, r3, r2
 8004d34:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004d38:	464b      	mov	r3, r9
 8004d3a:	460a      	mov	r2, r1
 8004d3c:	eb42 0303 	adc.w	r3, r2, r3
 8004d40:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8004d44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004d50:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8004d54:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 8004d58:	460b      	mov	r3, r1
 8004d5a:	18db      	adds	r3, r3, r3
 8004d5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d5e:	4613      	mov	r3, r2
 8004d60:	eb42 0303 	adc.w	r3, r2, r3
 8004d64:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d66:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004d6a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004d6e:	f7fb fa8f 	bl	8000290 <__aeabi_uldivmod>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4611      	mov	r1, r2
 8004d78:	4b39      	ldr	r3, [pc, #228]	@ (8004e60 <UART_SetConfig+0x528>)
 8004d7a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	2264      	movs	r2, #100	@ 0x64
 8004d82:	fb02 f303 	mul.w	r3, r2, r3
 8004d86:	1acb      	subs	r3, r1, r3
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d8e:	4b34      	ldr	r3, [pc, #208]	@ (8004e60 <UART_SetConfig+0x528>)
 8004d90:	fba3 2302 	umull	r2, r3, r3, r2
 8004d94:	095b      	lsrs	r3, r3, #5
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d9c:	441c      	add	r4, r3
 8004d9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004da2:	2200      	movs	r2, #0
 8004da4:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8004da8:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8004dac:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 8004db0:	4642      	mov	r2, r8
 8004db2:	464b      	mov	r3, r9
 8004db4:	1891      	adds	r1, r2, r2
 8004db6:	6639      	str	r1, [r7, #96]	@ 0x60
 8004db8:	415b      	adcs	r3, r3
 8004dba:	667b      	str	r3, [r7, #100]	@ 0x64
 8004dbc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8004dc0:	4641      	mov	r1, r8
 8004dc2:	1851      	adds	r1, r2, r1
 8004dc4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	414b      	adcs	r3, r1
 8004dca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8004dd8:	4659      	mov	r1, fp
 8004dda:	00cb      	lsls	r3, r1, #3
 8004ddc:	4651      	mov	r1, sl
 8004dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004de2:	4651      	mov	r1, sl
 8004de4:	00ca      	lsls	r2, r1, #3
 8004de6:	4610      	mov	r0, r2
 8004de8:	4619      	mov	r1, r3
 8004dea:	4603      	mov	r3, r0
 8004dec:	4642      	mov	r2, r8
 8004dee:	189b      	adds	r3, r3, r2
 8004df0:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8004df4:	464b      	mov	r3, r9
 8004df6:	460a      	mov	r2, r1
 8004df8:	eb42 0303 	adc.w	r3, r2, r3
 8004dfc:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8004e00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8004e0c:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8004e10:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8004e14:	460b      	mov	r3, r1
 8004e16:	18db      	adds	r3, r3, r3
 8004e18:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	eb42 0303 	adc.w	r3, r2, r3
 8004e20:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e22:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e26:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8004e2a:	f7fb fa31 	bl	8000290 <__aeabi_uldivmod>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4b0b      	ldr	r3, [pc, #44]	@ (8004e60 <UART_SetConfig+0x528>)
 8004e34:	fba3 1302 	umull	r1, r3, r3, r2
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	2164      	movs	r1, #100	@ 0x64
 8004e3c:	fb01 f303 	mul.w	r3, r1, r3
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	3332      	adds	r3, #50	@ 0x32
 8004e46:	4a06      	ldr	r2, [pc, #24]	@ (8004e60 <UART_SetConfig+0x528>)
 8004e48:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4c:	095b      	lsrs	r3, r3, #5
 8004e4e:	f003 0207 	and.w	r2, r3, #7
 8004e52:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4422      	add	r2, r4
 8004e5a:	609a      	str	r2, [r3, #8]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
<<<<<<< HEAD
 8004d4c:	e233      	b.n	80051b6 <UART_SetConfig+0x98e>
 8004d4e:	bf00      	nop
 8004d50:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4b8d      	ldr	r3, [pc, #564]	@ (8004f90 <UART_SetConfig+0x768>)
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d006      	beq.n	8004d6e <UART_SetConfig+0x546>
 8004d60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4b8b      	ldr	r3, [pc, #556]	@ (8004f94 <UART_SetConfig+0x76c>)
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	f040 8117 	bne.w	8004f9c <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d6e:	f7fe ff1b 	bl	8003ba8 <HAL_RCC_GetPCLK2Freq>
 8004d72:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d76:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8004d80:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8004d84:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8004d88:	4622      	mov	r2, r4
 8004d8a:	462b      	mov	r3, r5
 8004d8c:	1891      	adds	r1, r2, r2
 8004d8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d90:	415b      	adcs	r3, r3
 8004d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d98:	4621      	mov	r1, r4
 8004d9a:	eb12 0801 	adds.w	r8, r2, r1
 8004d9e:	4629      	mov	r1, r5
 8004da0:	eb43 0901 	adc.w	r9, r3, r1
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004db0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004db4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004db8:	4690      	mov	r8, r2
 8004dba:	4699      	mov	r9, r3
 8004dbc:	4623      	mov	r3, r4
 8004dbe:	eb18 0303 	adds.w	r3, r8, r3
 8004dc2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004dc6:	462b      	mov	r3, r5
 8004dc8:	eb49 0303 	adc.w	r3, r9, r3
 8004dcc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004dd0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004ddc:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8004dec:	4629      	mov	r1, r5
 8004dee:	008b      	lsls	r3, r1, #2
 8004df0:	4621      	mov	r1, r4
 8004df2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004df6:	4621      	mov	r1, r4
 8004df8:	008a      	lsls	r2, r1, #2
 8004dfa:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8004dfe:	f7fb fa47 	bl	8000290 <__aeabi_uldivmod>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	4b64      	ldr	r3, [pc, #400]	@ (8004f98 <UART_SetConfig+0x770>)
 8004e08:	fba3 2302 	umull	r2, r3, r3, r2
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	011c      	lsls	r4, r3, #4
 8004e10:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004e14:	2200      	movs	r2, #0
 8004e16:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8004e1a:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8004e1e:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 8004e22:	4642      	mov	r2, r8
 8004e24:	464b      	mov	r3, r9
 8004e26:	1891      	adds	r1, r2, r2
 8004e28:	6439      	str	r1, [r7, #64]	@ 0x40
 8004e2a:	415b      	adcs	r3, r3
 8004e2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e32:	4641      	mov	r1, r8
 8004e34:	1851      	adds	r1, r2, r1
 8004e36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e38:	4649      	mov	r1, r9
 8004e3a:	414b      	adcs	r3, r1
 8004e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 8004e4a:	4659      	mov	r1, fp
 8004e4c:	00cb      	lsls	r3, r1, #3
 8004e4e:	4651      	mov	r1, sl
 8004e50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e54:	4651      	mov	r1, sl
 8004e56:	00ca      	lsls	r2, r1, #3
 8004e58:	4610      	mov	r0, r2
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	4642      	mov	r2, r8
 8004e60:	189b      	adds	r3, r3, r2
 8004e62:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8004e66:	464b      	mov	r3, r9
 8004e68:	460a      	mov	r2, r1
 8004e6a:	eb42 0303 	adc.w	r3, r2, r3
 8004e6e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8004e72:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004e7e:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	f04f 0300 	mov.w	r3, #0
 8004e8a:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8004e8e:	4649      	mov	r1, r9
 8004e90:	008b      	lsls	r3, r1, #2
 8004e92:	4641      	mov	r1, r8
 8004e94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e98:	4641      	mov	r1, r8
 8004e9a:	008a      	lsls	r2, r1, #2
 8004e9c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8004ea0:	f7fb f9f6 	bl	8000290 <__aeabi_uldivmod>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8004f98 <UART_SetConfig+0x770>)
 8004eac:	fba3 2301 	umull	r2, r3, r3, r1
 8004eb0:	095b      	lsrs	r3, r3, #5
 8004eb2:	2264      	movs	r2, #100	@ 0x64
 8004eb4:	fb02 f303 	mul.w	r3, r2, r3
 8004eb8:	1acb      	subs	r3, r1, r3
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	3332      	adds	r3, #50	@ 0x32
 8004ebe:	4a36      	ldr	r2, [pc, #216]	@ (8004f98 <UART_SetConfig+0x770>)
 8004ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004eca:	441c      	add	r4, r3
 8004ecc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8004ed6:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8004eda:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 8004ede:	4642      	mov	r2, r8
 8004ee0:	464b      	mov	r3, r9
 8004ee2:	1891      	adds	r1, r2, r2
 8004ee4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ee6:	415b      	adcs	r3, r3
 8004ee8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004eee:	4641      	mov	r1, r8
 8004ef0:	1851      	adds	r1, r2, r1
 8004ef2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004ef4:	4649      	mov	r1, r9
 8004ef6:	414b      	adcs	r3, r1
 8004ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004efa:	f04f 0200 	mov.w	r2, #0
 8004efe:	f04f 0300 	mov.w	r3, #0
 8004f02:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8004f06:	4659      	mov	r1, fp
 8004f08:	00cb      	lsls	r3, r1, #3
 8004f0a:	4651      	mov	r1, sl
 8004f0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f10:	4651      	mov	r1, sl
 8004f12:	00ca      	lsls	r2, r1, #3
 8004f14:	4610      	mov	r0, r2
 8004f16:	4619      	mov	r1, r3
 8004f18:	4603      	mov	r3, r0
 8004f1a:	4642      	mov	r2, r8
 8004f1c:	189b      	adds	r3, r3, r2
 8004f1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004f22:	464b      	mov	r3, r9
 8004f24:	460a      	mov	r2, r1
 8004f26:	eb42 0303 	adc.w	r3, r2, r3
 8004f2a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004f2e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004f3a:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	008b      	lsls	r3, r1, #2
 8004f4e:	4641      	mov	r1, r8
 8004f50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f54:	4641      	mov	r1, r8
 8004f56:	008a      	lsls	r2, r1, #2
 8004f58:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8004f5c:	f7fb f998 	bl	8000290 <__aeabi_uldivmod>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4b0c      	ldr	r3, [pc, #48]	@ (8004f98 <UART_SetConfig+0x770>)
 8004f66:	fba3 1302 	umull	r1, r3, r3, r2
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	2164      	movs	r1, #100	@ 0x64
 8004f6e:	fb01 f303 	mul.w	r3, r1, r3
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	3332      	adds	r3, #50	@ 0x32
 8004f78:	4a07      	ldr	r2, [pc, #28]	@ (8004f98 <UART_SetConfig+0x770>)
 8004f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	f003 020f 	and.w	r2, r3, #15
 8004f84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4422      	add	r2, r4
 8004f8c:	609a      	str	r2, [r3, #8]
 8004f8e:	e112      	b.n	80051b6 <UART_SetConfig+0x98e>
 8004f90:	40011000 	.word	0x40011000
 8004f94:	40011400 	.word	0x40011400
 8004f98:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f9c:	f7fe fdf0 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8004fa0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fa4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004fae:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8004fb2:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 8004fb6:	4642      	mov	r2, r8
 8004fb8:	464b      	mov	r3, r9
 8004fba:	1891      	adds	r1, r2, r2
 8004fbc:	6239      	str	r1, [r7, #32]
 8004fbe:	415b      	adcs	r3, r3
 8004fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fc6:	4641      	mov	r1, r8
 8004fc8:	1854      	adds	r4, r2, r1
 8004fca:	4649      	mov	r1, r9
 8004fcc:	eb43 0501 	adc.w	r5, r3, r1
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	00eb      	lsls	r3, r5, #3
 8004fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fde:	00e2      	lsls	r2, r4, #3
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	461d      	mov	r5, r3
 8004fe4:	4643      	mov	r3, r8
 8004fe6:	18e3      	adds	r3, r4, r3
 8004fe8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8004fec:	464b      	mov	r3, r9
 8004fee:	eb45 0303 	adc.w	r3, r5, r3
 8004ff2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8004ff6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005002:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8005012:	4629      	mov	r1, r5
 8005014:	008b      	lsls	r3, r1, #2
 8005016:	4621      	mov	r1, r4
 8005018:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800501c:	4621      	mov	r1, r4
 800501e:	008a      	lsls	r2, r1, #2
 8005020:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8005024:	f7fb f934 	bl	8000290 <__aeabi_uldivmod>
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	4b65      	ldr	r3, [pc, #404]	@ (80051c4 <UART_SetConfig+0x99c>)
 800502e:	fba3 2302 	umull	r2, r3, r3, r2
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	011c      	lsls	r4, r3, #4
 8005036:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800503a:	2200      	movs	r2, #0
 800503c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005040:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8005044:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8005048:	4642      	mov	r2, r8
 800504a:	464b      	mov	r3, r9
 800504c:	1891      	adds	r1, r2, r2
 800504e:	61b9      	str	r1, [r7, #24]
 8005050:	415b      	adcs	r3, r3
 8005052:	61fb      	str	r3, [r7, #28]
 8005054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005058:	4641      	mov	r1, r8
 800505a:	1851      	adds	r1, r2, r1
 800505c:	6139      	str	r1, [r7, #16]
 800505e:	4649      	mov	r1, r9
 8005060:	414b      	adcs	r3, r1
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005070:	4659      	mov	r1, fp
 8005072:	00cb      	lsls	r3, r1, #3
 8005074:	4651      	mov	r1, sl
 8005076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800507a:	4651      	mov	r1, sl
 800507c:	00ca      	lsls	r2, r1, #3
 800507e:	4610      	mov	r0, r2
 8005080:	4619      	mov	r1, r3
 8005082:	4603      	mov	r3, r0
 8005084:	4642      	mov	r2, r8
 8005086:	189b      	adds	r3, r3, r2
 8005088:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800508c:	464b      	mov	r3, r9
 800508e:	460a      	mov	r2, r1
 8005090:	eb42 0303 	adc.w	r3, r2, r3
 8005094:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005098:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80050a4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 80050b4:	4649      	mov	r1, r9
 80050b6:	008b      	lsls	r3, r1, #2
 80050b8:	4641      	mov	r1, r8
 80050ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050be:	4641      	mov	r1, r8
 80050c0:	008a      	lsls	r2, r1, #2
 80050c2:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 80050c6:	f7fb f8e3 	bl	8000290 <__aeabi_uldivmod>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4611      	mov	r1, r2
 80050d0:	4b3c      	ldr	r3, [pc, #240]	@ (80051c4 <UART_SetConfig+0x99c>)
 80050d2:	fba3 2301 	umull	r2, r3, r3, r1
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	2264      	movs	r2, #100	@ 0x64
 80050da:	fb02 f303 	mul.w	r3, r2, r3
 80050de:	1acb      	subs	r3, r1, r3
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	3332      	adds	r3, #50	@ 0x32
 80050e4:	4a37      	ldr	r2, [pc, #220]	@ (80051c4 <UART_SetConfig+0x99c>)
 80050e6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ea:	095b      	lsrs	r3, r3, #5
 80050ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050f0:	441c      	add	r4, r3
 80050f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050fc:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005100:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8005104:	4642      	mov	r2, r8
 8005106:	464b      	mov	r3, r9
 8005108:	1891      	adds	r1, r2, r2
 800510a:	60b9      	str	r1, [r7, #8]
 800510c:	415b      	adcs	r3, r3
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005114:	4641      	mov	r1, r8
 8005116:	1851      	adds	r1, r2, r1
 8005118:	6039      	str	r1, [r7, #0]
 800511a:	4649      	mov	r1, r9
 800511c:	414b      	adcs	r3, r1
 800511e:	607b      	str	r3, [r7, #4]
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800512c:	4659      	mov	r1, fp
 800512e:	00cb      	lsls	r3, r1, #3
 8005130:	4651      	mov	r1, sl
 8005132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005136:	4651      	mov	r1, sl
 8005138:	00ca      	lsls	r2, r1, #3
 800513a:	4610      	mov	r0, r2
 800513c:	4619      	mov	r1, r3
 800513e:	4603      	mov	r3, r0
 8005140:	4642      	mov	r2, r8
 8005142:	189b      	adds	r3, r3, r2
 8005144:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005148:	464b      	mov	r3, r9
 800514a:	460a      	mov	r2, r1
 800514c:	eb42 0303 	adc.w	r3, r2, r3
 8005150:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005154:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005160:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005164:	f04f 0200 	mov.w	r2, #0
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8005170:	4649      	mov	r1, r9
 8005172:	008b      	lsls	r3, r1, #2
 8005174:	4641      	mov	r1, r8
 8005176:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800517a:	4641      	mov	r1, r8
 800517c:	008a      	lsls	r2, r1, #2
 800517e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005182:	f7fb f885 	bl	8000290 <__aeabi_uldivmod>
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4b0e      	ldr	r3, [pc, #56]	@ (80051c4 <UART_SetConfig+0x99c>)
 800518c:	fba3 1302 	umull	r1, r3, r3, r2
 8005190:	095b      	lsrs	r3, r3, #5
 8005192:	2164      	movs	r1, #100	@ 0x64
 8005194:	fb01 f303 	mul.w	r3, r1, r3
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	3332      	adds	r3, #50	@ 0x32
 800519e:	4a09      	ldr	r2, [pc, #36]	@ (80051c4 <UART_SetConfig+0x99c>)
 80051a0:	fba2 2303 	umull	r2, r3, r2, r3
 80051a4:	095b      	lsrs	r3, r3, #5
 80051a6:	f003 020f 	and.w	r2, r3, #15
 80051aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4422      	add	r2, r4
 80051b2:	609a      	str	r2, [r3, #8]
}
 80051b4:	e7ff      	b.n	80051b6 <UART_SetConfig+0x98e>
 80051b6:	bf00      	nop
 80051b8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80051bc:	46bd      	mov	sp, r7
 80051be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051c2:	bf00      	nop
 80051c4:	51eb851f 	.word	0x51eb851f

080051c8 <makeFreeRtosPriority>:
=======
 8004e5c:	e233      	b.n	80052c6 <UART_SetConfig+0x98e>
 8004e5e:	bf00      	nop
 8004e60:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4b8d      	ldr	r3, [pc, #564]	@ (80050a0 <UART_SetConfig+0x768>)
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d006      	beq.n	8004e7e <UART_SetConfig+0x546>
 8004e70:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	4b8b      	ldr	r3, [pc, #556]	@ (80050a4 <UART_SetConfig+0x76c>)
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	f040 8117 	bne.w	80050ac <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e7e:	f7fe ff1b 	bl	8003cb8 <HAL_RCC_GetPCLK2Freq>
 8004e82:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e86:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8004e90:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8004e94:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8004e98:	4622      	mov	r2, r4
 8004e9a:	462b      	mov	r3, r5
 8004e9c:	1891      	adds	r1, r2, r2
 8004e9e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ea0:	415b      	adcs	r3, r3
 8004ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ea4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ea8:	4621      	mov	r1, r4
 8004eaa:	eb12 0801 	adds.w	r8, r2, r1
 8004eae:	4629      	mov	r1, r5
 8004eb0:	eb43 0901 	adc.w	r9, r3, r1
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ec0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ec4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ec8:	4690      	mov	r8, r2
 8004eca:	4699      	mov	r9, r3
 8004ecc:	4623      	mov	r3, r4
 8004ece:	eb18 0303 	adds.w	r3, r8, r3
 8004ed2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004ed6:	462b      	mov	r3, r5
 8004ed8:	eb49 0303 	adc.w	r3, r9, r3
 8004edc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004ee0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004eec:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8004efc:	4629      	mov	r1, r5
 8004efe:	008b      	lsls	r3, r1, #2
 8004f00:	4621      	mov	r1, r4
 8004f02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f06:	4621      	mov	r1, r4
 8004f08:	008a      	lsls	r2, r1, #2
 8004f0a:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8004f0e:	f7fb f9bf 	bl	8000290 <__aeabi_uldivmod>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4b64      	ldr	r3, [pc, #400]	@ (80050a8 <UART_SetConfig+0x770>)
 8004f18:	fba3 2302 	umull	r2, r3, r3, r2
 8004f1c:	095b      	lsrs	r3, r3, #5
 8004f1e:	011c      	lsls	r4, r3, #4
 8004f20:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004f24:	2200      	movs	r2, #0
 8004f26:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8004f2a:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8004f2e:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 8004f32:	4642      	mov	r2, r8
 8004f34:	464b      	mov	r3, r9
 8004f36:	1891      	adds	r1, r2, r2
 8004f38:	6439      	str	r1, [r7, #64]	@ 0x40
 8004f3a:	415b      	adcs	r3, r3
 8004f3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f42:	4641      	mov	r1, r8
 8004f44:	1851      	adds	r1, r2, r1
 8004f46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f48:	4649      	mov	r1, r9
 8004f4a:	414b      	adcs	r3, r1
 8004f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f4e:	f04f 0200 	mov.w	r2, #0
 8004f52:	f04f 0300 	mov.w	r3, #0
 8004f56:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 8004f5a:	4659      	mov	r1, fp
 8004f5c:	00cb      	lsls	r3, r1, #3
 8004f5e:	4651      	mov	r1, sl
 8004f60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f64:	4651      	mov	r1, sl
 8004f66:	00ca      	lsls	r2, r1, #3
 8004f68:	4610      	mov	r0, r2
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	4642      	mov	r2, r8
 8004f70:	189b      	adds	r3, r3, r2
 8004f72:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8004f76:	464b      	mov	r3, r9
 8004f78:	460a      	mov	r2, r1
 8004f7a:	eb42 0303 	adc.w	r3, r2, r3
 8004f7e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8004f82:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004f8e:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8004f9e:	4649      	mov	r1, r9
 8004fa0:	008b      	lsls	r3, r1, #2
 8004fa2:	4641      	mov	r1, r8
 8004fa4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fa8:	4641      	mov	r1, r8
 8004faa:	008a      	lsls	r2, r1, #2
 8004fac:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8004fb0:	f7fb f96e 	bl	8000290 <__aeabi_uldivmod>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4611      	mov	r1, r2
 8004fba:	4b3b      	ldr	r3, [pc, #236]	@ (80050a8 <UART_SetConfig+0x770>)
 8004fbc:	fba3 2301 	umull	r2, r3, r3, r1
 8004fc0:	095b      	lsrs	r3, r3, #5
 8004fc2:	2264      	movs	r2, #100	@ 0x64
 8004fc4:	fb02 f303 	mul.w	r3, r2, r3
 8004fc8:	1acb      	subs	r3, r1, r3
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	3332      	adds	r3, #50	@ 0x32
 8004fce:	4a36      	ldr	r2, [pc, #216]	@ (80050a8 <UART_SetConfig+0x770>)
 8004fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fda:	441c      	add	r4, r3
 8004fdc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8004fe6:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8004fea:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 8004fee:	4642      	mov	r2, r8
 8004ff0:	464b      	mov	r3, r9
 8004ff2:	1891      	adds	r1, r2, r2
 8004ff4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ff6:	415b      	adcs	r3, r3
 8004ff8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ffa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004ffe:	4641      	mov	r1, r8
 8005000:	1851      	adds	r1, r2, r1
 8005002:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005004:	4649      	mov	r1, r9
 8005006:	414b      	adcs	r3, r1
 8005008:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8005016:	4659      	mov	r1, fp
 8005018:	00cb      	lsls	r3, r1, #3
 800501a:	4651      	mov	r1, sl
 800501c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005020:	4651      	mov	r1, sl
 8005022:	00ca      	lsls	r2, r1, #3
 8005024:	4610      	mov	r0, r2
 8005026:	4619      	mov	r1, r3
 8005028:	4603      	mov	r3, r0
 800502a:	4642      	mov	r2, r8
 800502c:	189b      	adds	r3, r3, r2
 800502e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005032:	464b      	mov	r3, r9
 8005034:	460a      	mov	r2, r1
 8005036:	eb42 0303 	adc.w	r3, r2, r3
 800503a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800503e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800504a:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 800504e:	f04f 0200 	mov.w	r2, #0
 8005052:	f04f 0300 	mov.w	r3, #0
 8005056:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 800505a:	4649      	mov	r1, r9
 800505c:	008b      	lsls	r3, r1, #2
 800505e:	4641      	mov	r1, r8
 8005060:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005064:	4641      	mov	r1, r8
 8005066:	008a      	lsls	r2, r1, #2
 8005068:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 800506c:	f7fb f910 	bl	8000290 <__aeabi_uldivmod>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4b0c      	ldr	r3, [pc, #48]	@ (80050a8 <UART_SetConfig+0x770>)
 8005076:	fba3 1302 	umull	r1, r3, r3, r2
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	2164      	movs	r1, #100	@ 0x64
 800507e:	fb01 f303 	mul.w	r3, r1, r3
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	3332      	adds	r3, #50	@ 0x32
 8005088:	4a07      	ldr	r2, [pc, #28]	@ (80050a8 <UART_SetConfig+0x770>)
 800508a:	fba2 2303 	umull	r2, r3, r2, r3
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	f003 020f 	and.w	r2, r3, #15
 8005094:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4422      	add	r2, r4
 800509c:	609a      	str	r2, [r3, #8]
 800509e:	e112      	b.n	80052c6 <UART_SetConfig+0x98e>
 80050a0:	40011000 	.word	0x40011000
 80050a4:	40011400 	.word	0x40011400
 80050a8:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80050ac:	f7fe fdf0 	bl	8003c90 <HAL_RCC_GetPCLK1Freq>
 80050b0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80050b8:	2200      	movs	r2, #0
 80050ba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80050be:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80050c2:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 80050c6:	4642      	mov	r2, r8
 80050c8:	464b      	mov	r3, r9
 80050ca:	1891      	adds	r1, r2, r2
 80050cc:	6239      	str	r1, [r7, #32]
 80050ce:	415b      	adcs	r3, r3
 80050d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050d6:	4641      	mov	r1, r8
 80050d8:	1854      	adds	r4, r2, r1
 80050da:	4649      	mov	r1, r9
 80050dc:	eb43 0501 	adc.w	r5, r3, r1
 80050e0:	f04f 0200 	mov.w	r2, #0
 80050e4:	f04f 0300 	mov.w	r3, #0
 80050e8:	00eb      	lsls	r3, r5, #3
 80050ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050ee:	00e2      	lsls	r2, r4, #3
 80050f0:	4614      	mov	r4, r2
 80050f2:	461d      	mov	r5, r3
 80050f4:	4643      	mov	r3, r8
 80050f6:	18e3      	adds	r3, r4, r3
 80050f8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80050fc:	464b      	mov	r3, r9
 80050fe:	eb45 0303 	adc.w	r3, r5, r3
 8005102:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005106:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005112:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8005122:	4629      	mov	r1, r5
 8005124:	008b      	lsls	r3, r1, #2
 8005126:	4621      	mov	r1, r4
 8005128:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800512c:	4621      	mov	r1, r4
 800512e:	008a      	lsls	r2, r1, #2
 8005130:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8005134:	f7fb f8ac 	bl	8000290 <__aeabi_uldivmod>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	4b65      	ldr	r3, [pc, #404]	@ (80052d4 <UART_SetConfig+0x99c>)
 800513e:	fba3 2302 	umull	r2, r3, r3, r2
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	011c      	lsls	r4, r3, #4
 8005146:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800514a:	2200      	movs	r2, #0
 800514c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005150:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8005154:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8005158:	4642      	mov	r2, r8
 800515a:	464b      	mov	r3, r9
 800515c:	1891      	adds	r1, r2, r2
 800515e:	61b9      	str	r1, [r7, #24]
 8005160:	415b      	adcs	r3, r3
 8005162:	61fb      	str	r3, [r7, #28]
 8005164:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005168:	4641      	mov	r1, r8
 800516a:	1851      	adds	r1, r2, r1
 800516c:	6139      	str	r1, [r7, #16]
 800516e:	4649      	mov	r1, r9
 8005170:	414b      	adcs	r3, r1
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005180:	4659      	mov	r1, fp
 8005182:	00cb      	lsls	r3, r1, #3
 8005184:	4651      	mov	r1, sl
 8005186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800518a:	4651      	mov	r1, sl
 800518c:	00ca      	lsls	r2, r1, #3
 800518e:	4610      	mov	r0, r2
 8005190:	4619      	mov	r1, r3
 8005192:	4603      	mov	r3, r0
 8005194:	4642      	mov	r2, r8
 8005196:	189b      	adds	r3, r3, r2
 8005198:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800519c:	464b      	mov	r3, r9
 800519e:	460a      	mov	r2, r1
 80051a0:	eb42 0303 	adc.w	r3, r2, r3
 80051a4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80051a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80051b4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 80051c4:	4649      	mov	r1, r9
 80051c6:	008b      	lsls	r3, r1, #2
 80051c8:	4641      	mov	r1, r8
 80051ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051ce:	4641      	mov	r1, r8
 80051d0:	008a      	lsls	r2, r1, #2
 80051d2:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 80051d6:	f7fb f85b 	bl	8000290 <__aeabi_uldivmod>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	4611      	mov	r1, r2
 80051e0:	4b3c      	ldr	r3, [pc, #240]	@ (80052d4 <UART_SetConfig+0x99c>)
 80051e2:	fba3 2301 	umull	r2, r3, r3, r1
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	2264      	movs	r2, #100	@ 0x64
 80051ea:	fb02 f303 	mul.w	r3, r2, r3
 80051ee:	1acb      	subs	r3, r1, r3
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	3332      	adds	r3, #50	@ 0x32
 80051f4:	4a37      	ldr	r2, [pc, #220]	@ (80052d4 <UART_SetConfig+0x99c>)
 80051f6:	fba2 2303 	umull	r2, r3, r2, r3
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005200:	441c      	add	r4, r3
 8005202:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005206:	2200      	movs	r2, #0
 8005208:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800520c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005210:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8005214:	4642      	mov	r2, r8
 8005216:	464b      	mov	r3, r9
 8005218:	1891      	adds	r1, r2, r2
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	415b      	adcs	r3, r3
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005224:	4641      	mov	r1, r8
 8005226:	1851      	adds	r1, r2, r1
 8005228:	6039      	str	r1, [r7, #0]
 800522a:	4649      	mov	r1, r9
 800522c:	414b      	adcs	r3, r1
 800522e:	607b      	str	r3, [r7, #4]
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800523c:	4659      	mov	r1, fp
 800523e:	00cb      	lsls	r3, r1, #3
 8005240:	4651      	mov	r1, sl
 8005242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005246:	4651      	mov	r1, sl
 8005248:	00ca      	lsls	r2, r1, #3
 800524a:	4610      	mov	r0, r2
 800524c:	4619      	mov	r1, r3
 800524e:	4603      	mov	r3, r0
 8005250:	4642      	mov	r2, r8
 8005252:	189b      	adds	r3, r3, r2
 8005254:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005258:	464b      	mov	r3, r9
 800525a:	460a      	mov	r2, r1
 800525c:	eb42 0303 	adc.w	r3, r2, r3
 8005260:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005264:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005270:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8005280:	4649      	mov	r1, r9
 8005282:	008b      	lsls	r3, r1, #2
 8005284:	4641      	mov	r1, r8
 8005286:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800528a:	4641      	mov	r1, r8
 800528c:	008a      	lsls	r2, r1, #2
 800528e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005292:	f7fa fffd 	bl	8000290 <__aeabi_uldivmod>
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	4b0e      	ldr	r3, [pc, #56]	@ (80052d4 <UART_SetConfig+0x99c>)
 800529c:	fba3 1302 	umull	r1, r3, r3, r2
 80052a0:	095b      	lsrs	r3, r3, #5
 80052a2:	2164      	movs	r1, #100	@ 0x64
 80052a4:	fb01 f303 	mul.w	r3, r1, r3
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	3332      	adds	r3, #50	@ 0x32
 80052ae:	4a09      	ldr	r2, [pc, #36]	@ (80052d4 <UART_SetConfig+0x99c>)
 80052b0:	fba2 2303 	umull	r2, r3, r2, r3
 80052b4:	095b      	lsrs	r3, r3, #5
 80052b6:	f003 020f 	and.w	r2, r3, #15
 80052ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4422      	add	r2, r4
 80052c2:	609a      	str	r2, [r3, #8]
}
 80052c4:	e7ff      	b.n	80052c6 <UART_SetConfig+0x98e>
 80052c6:	bf00      	nop
 80052c8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80052cc:	46bd      	mov	sp, r7
 80052ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052d2:	bf00      	nop
 80052d4:	51eb851f 	.word	0x51eb851f

080052d8 <makeFreeRtosPriority>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
<<<<<<< HEAD
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80051d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051da:	2b84      	cmp	r3, #132	@ 0x84
 80051dc:	d005      	beq.n	80051ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80051de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4413      	add	r3, r2
 80051e6:	3303      	adds	r3, #3
 80051e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80051ea:	68fb      	ldr	r3, [r7, #12]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <inHandlerMode>:
=======
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	4603      	mov	r3, r0
 80052e0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80052e2:	2300      	movs	r3, #0
 80052e4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80052e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ea:	2b84      	cmp	r3, #132	@ 0x84
 80052ec:	d005      	beq.n	80052fa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80052ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4413      	add	r3, r2
 80052f6:	3303      	adds	r3, #3
 80052f8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80052fa:	68fb      	ldr	r3, [r7, #12]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <inHandlerMode>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
<<<<<<< HEAD
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051fe:	f3ef 8305 	mrs	r3, IPSR
 8005202:	607b      	str	r3, [r7, #4]
  return(result);
 8005204:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005206:	2b00      	cmp	r3, #0
 8005208:	bf14      	ite	ne
 800520a:	2301      	movne	r3, #1
 800520c:	2300      	moveq	r3, #0
 800520e:	b2db      	uxtb	r3, r3
}
 8005210:	4618      	mov	r0, r3
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <osKernelStart>:
=======
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800530e:	f3ef 8305 	mrs	r3, IPSR
 8005312:	607b      	str	r3, [r7, #4]
  return(result);
 8005314:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005316:	2b00      	cmp	r3, #0
 8005318:	bf14      	ite	ne
 800531a:	2301      	movne	r3, #1
 800531c:	2300      	moveq	r3, #0
 800531e:	b2db      	uxtb	r3, r3
}
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <osKernelStart>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
<<<<<<< HEAD
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005220:	f001 fab8 	bl	8006794 <vTaskStartScheduler>
  
  return osOK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	bd80      	pop	{r7, pc}

0800522a <osThreadCreate>:
=======
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005330:	f001 fab8 	bl	80068a4 <vTaskStartScheduler>
  
  return osOK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	bd80      	pop	{r7, pc}

0800533a <osThreadCreate>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
<<<<<<< HEAD
 800522a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800522c:	b089      	sub	sp, #36	@ 0x24
 800522e:	af04      	add	r7, sp, #16
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	6039      	str	r1, [r7, #0]
=======
 800533a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800533c:	b089      	sub	sp, #36	@ 0x24
 800533e:	af04      	add	r7, sp, #16
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	6039      	str	r1, [r7, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
<<<<<<< HEAD
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d020      	beq.n	800527e <osThreadCreate+0x54>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d01c      	beq.n	800527e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685c      	ldr	r4, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691e      	ldr	r6, [r3, #16]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005256:	4618      	mov	r0, r3
 8005258:	f7ff ffb6 	bl	80051c8 <makeFreeRtosPriority>
 800525c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005266:	9202      	str	r2, [sp, #8]
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	9100      	str	r1, [sp, #0]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	4632      	mov	r2, r6
 8005270:	4629      	mov	r1, r5
 8005272:	4620      	mov	r0, r4
 8005274:	f001 f8c0 	bl	80063f8 <xTaskCreateStatic>
 8005278:	4603      	mov	r3, r0
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	e01c      	b.n	80052b8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685c      	ldr	r4, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800528a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff ff98 	bl	80051c8 <makeFreeRtosPriority>
 8005298:	4602      	mov	r2, r0
 800529a:	f107 030c 	add.w	r3, r7, #12
 800529e:	9301      	str	r3, [sp, #4]
 80052a0:	9200      	str	r2, [sp, #0]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	4632      	mov	r2, r6
 80052a6:	4629      	mov	r1, r5
 80052a8:	4620      	mov	r0, r4
 80052aa:	f001 f905 	bl	80064b8 <xTaskCreate>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d001      	beq.n	80052b8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80052b4:	2300      	movs	r3, #0
 80052b6:	e000      	b.n	80052ba <osThreadCreate+0x90>
=======
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d020      	beq.n	800538e <osThreadCreate+0x54>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d01c      	beq.n	800538e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685c      	ldr	r4, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691e      	ldr	r6, [r3, #16]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff ffb6 	bl	80052d8 <makeFreeRtosPriority>
 800536c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005376:	9202      	str	r2, [sp, #8]
 8005378:	9301      	str	r3, [sp, #4]
 800537a:	9100      	str	r1, [sp, #0]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	4632      	mov	r2, r6
 8005380:	4629      	mov	r1, r5
 8005382:	4620      	mov	r0, r4
 8005384:	f001 f8c0 	bl	8006508 <xTaskCreateStatic>
 8005388:	4603      	mov	r3, r0
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	e01c      	b.n	80053c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685c      	ldr	r4, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800539a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff ff98 	bl	80052d8 <makeFreeRtosPriority>
 80053a8:	4602      	mov	r2, r0
 80053aa:	f107 030c 	add.w	r3, r7, #12
 80053ae:	9301      	str	r3, [sp, #4]
 80053b0:	9200      	str	r2, [sp, #0]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	4632      	mov	r2, r6
 80053b6:	4629      	mov	r1, r5
 80053b8:	4620      	mov	r0, r4
 80053ba:	f001 f905 	bl	80065c8 <xTaskCreate>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d001      	beq.n	80053c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	e000      	b.n	80053ca <osThreadCreate+0x90>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
<<<<<<< HEAD
 80052b8:	68fb      	ldr	r3, [r7, #12]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080052c4 <osThreadYield>:
=======
 80053c8:	68fb      	ldr	r3, [r7, #12]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080053d4 <osThreadYield>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
<<<<<<< HEAD
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
  taskYIELD();
 80052c8:	4b06      	ldr	r3, [pc, #24]	@ (80052e4 <osThreadYield+0x20>)
 80052ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	f3bf 8f6f 	isb	sy
  
  return osOK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	e000ed04 	.word	0xe000ed04

080052e8 <osDelay>:
=======
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  taskYIELD();
 80053d8:	4b06      	ldr	r3, [pc, #24]	@ (80053f4 <osThreadYield+0x20>)
 80053da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	f3bf 8f6f 	isb	sy
  
  return osOK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	e000ed04 	.word	0xe000ed04

080053f8 <osDelay>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
<<<<<<< HEAD
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <osDelay+0x16>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	e000      	b.n	8005300 <osDelay+0x18>
 80052fe:	2301      	movs	r3, #1
 8005300:	4618      	mov	r0, r3
 8005302:	f001 fa11 	bl	8006728 <vTaskDelay>
  
  return osOK;
 8005306:	2300      	movs	r3, #0
=======
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <osDelay+0x16>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	e000      	b.n	8005410 <osDelay+0x18>
 800540e:	2301      	movs	r3, #1
 8005410:	4618      	mov	r0, r3
 8005412:	f001 fa11 	bl	8006838 <vTaskDelay>
  
  return osOK;
 8005416:	2300      	movs	r3, #0
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
<<<<<<< HEAD
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <osSignalSet>:
=======
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <osSignalSet>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
<<<<<<< HEAD
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af02      	add	r7, sp, #8
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800531a:	2300      	movs	r3, #0
 800531c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800531e:	2300      	movs	r3, #0
 8005320:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8005322:	f7ff ff69 	bl	80051f8 <inHandlerMode>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01c      	beq.n	8005366 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800532c:	6839      	ldr	r1, [r7, #0]
 800532e:	f107 0208 	add.w	r2, r7, #8
 8005332:	f107 030c 	add.w	r3, r7, #12
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	4613      	mov	r3, r2
 800533a:	2201      	movs	r2, #1
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f001 ffeb 	bl	8007318 <xTaskGenericNotifyFromISR>
 8005342:	4603      	mov	r3, r0
 8005344:	2b01      	cmp	r3, #1
 8005346:	d002      	beq.n	800534e <osSignalSet+0x3e>
      return 0x80000000;
 8005348:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800534c:	e019      	b.n	8005382 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d015      	beq.n	8005380 <osSignalSet+0x70>
 8005354:	4b0d      	ldr	r3, [pc, #52]	@ (800538c <osSignalSet+0x7c>)
 8005356:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	e00c      	b.n	8005380 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8005366:	6839      	ldr	r1, [r7, #0]
 8005368:	f107 0308 	add.w	r3, r7, #8
 800536c:	2201      	movs	r2, #1
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f001 ff1a 	bl	80071a8 <xTaskGenericNotify>
 8005374:	4603      	mov	r3, r0
 8005376:	2b01      	cmp	r3, #1
 8005378:	d002      	beq.n	8005380 <osSignalSet+0x70>
    return 0x80000000;
 800537a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800537e:	e000      	b.n	8005382 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8005380:	68bb      	ldr	r3, [r7, #8]
=======
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af02      	add	r7, sp, #8
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8005432:	f7ff ff69 	bl	8005308 <inHandlerMode>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01c      	beq.n	8005476 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800543c:	6839      	ldr	r1, [r7, #0]
 800543e:	f107 0208 	add.w	r2, r7, #8
 8005442:	f107 030c 	add.w	r3, r7, #12
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	4613      	mov	r3, r2
 800544a:	2201      	movs	r2, #1
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f001 ffeb 	bl	8007428 <xTaskGenericNotifyFromISR>
 8005452:	4603      	mov	r3, r0
 8005454:	2b01      	cmp	r3, #1
 8005456:	d002      	beq.n	800545e <osSignalSet+0x3e>
      return 0x80000000;
 8005458:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800545c:	e019      	b.n	8005492 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d015      	beq.n	8005490 <osSignalSet+0x70>
 8005464:	4b0d      	ldr	r3, [pc, #52]	@ (800549c <osSignalSet+0x7c>)
 8005466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	e00c      	b.n	8005490 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8005476:	6839      	ldr	r1, [r7, #0]
 8005478:	f107 0308 	add.w	r3, r7, #8
 800547c:	2201      	movs	r2, #1
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f001 ff1a 	bl	80072b8 <xTaskGenericNotify>
 8005484:	4603      	mov	r3, r0
 8005486:	2b01      	cmp	r3, #1
 8005488:	d002      	beq.n	8005490 <osSignalSet+0x70>
    return 0x80000000;
 800548a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800548e:	e000      	b.n	8005492 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8005490:	68bb      	ldr	r3, [r7, #8]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
<<<<<<< HEAD
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	e000ed04 	.word	0xe000ed04

08005390 <osSignalWait>:
=======
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	e000ed04 	.word	0xe000ed04

080054a0 <osSignalWait>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
<<<<<<< HEAD
 8005390:	b590      	push	{r4, r7, lr}
 8005392:	b089      	sub	sp, #36	@ 0x24
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
=======
 80054a0:	b590      	push	{r4, r7, lr}
 80054a2:	b089      	sub	sp, #36	@ 0x24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
<<<<<<< HEAD
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053aa:	d103      	bne.n	80053b4 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80053ac:	f04f 33ff 	mov.w	r3, #4294967295
 80053b0:	61fb      	str	r3, [r7, #28]
 80053b2:	e009      	b.n	80053c8 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d006      	beq.n	80053c8 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <osSignalWait+0x38>
      ticks = 1;
 80053c4:	2301      	movs	r3, #1
 80053c6:	61fb      	str	r3, [r7, #28]
=======
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80054b0:	2300      	movs	r3, #0
 80054b2:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ba:	d103      	bne.n	80054c4 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80054bc:	f04f 33ff 	mov.w	r3, #4294967295
 80054c0:	61fb      	str	r3, [r7, #28]
 80054c2:	e009      	b.n	80054d8 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d006      	beq.n	80054d8 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <osSignalWait+0x38>
      ticks = 1;
 80054d4:	2301      	movs	r3, #1
 80054d6:	61fb      	str	r3, [r7, #28]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
  }  
  
  if (inHandlerMode())
<<<<<<< HEAD
 80053c8:	f7ff ff16 	bl	80051f8 <inHandlerMode>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80053d2:	2382      	movs	r3, #130	@ 0x82
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	e01b      	b.n	8005410 <osSignalWait+0x80>
=======
 80054d8:	f7ff ff16 	bl	8005308 <inHandlerMode>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d002      	beq.n	80054e8 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80054e2:	2382      	movs	r3, #130	@ 0x82
 80054e4:	613b      	str	r3, [r7, #16]
 80054e6:	e01b      	b.n	8005520 <osSignalWait+0x80>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
<<<<<<< HEAD
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	f107 0310 	add.w	r3, r7, #16
 80053de:	1d1a      	adds	r2, r3, #4
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	2000      	movs	r0, #0
 80053e4:	f001 fe86 	bl	80070f4 <xTaskNotifyWait>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d008      	beq.n	8005400 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d102      	bne.n	80053fa <osSignalWait+0x6a>
 80053f4:	2300      	movs	r3, #0
 80053f6:	613b      	str	r3, [r7, #16]
 80053f8:	e00a      	b.n	8005410 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80053fa:	2340      	movs	r3, #64	@ 0x40
 80053fc:	613b      	str	r3, [r7, #16]
 80053fe:	e007      	b.n	8005410 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2b00      	cmp	r3, #0
 8005404:	da02      	bge.n	800540c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8005406:	2386      	movs	r3, #134	@ 0x86
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	e001      	b.n	8005410 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800540c:	2308      	movs	r3, #8
 800540e:	613b      	str	r3, [r7, #16]
=======
 80054e8:	68b9      	ldr	r1, [r7, #8]
 80054ea:	f107 0310 	add.w	r3, r7, #16
 80054ee:	1d1a      	adds	r2, r3, #4
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	2000      	movs	r0, #0
 80054f4:	f001 fe86 	bl	8007204 <xTaskNotifyWait>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d008      	beq.n	8005510 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d102      	bne.n	800550a <osSignalWait+0x6a>
 8005504:	2300      	movs	r3, #0
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	e00a      	b.n	8005520 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800550a:	2340      	movs	r3, #64	@ 0x40
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	e007      	b.n	8005520 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	2b00      	cmp	r3, #0
 8005514:	da02      	bge.n	800551c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8005516:	2386      	movs	r3, #134	@ 0x86
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	e001      	b.n	8005520 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800551c:	2308      	movs	r3, #8
 800551e:	613b      	str	r3, [r7, #16]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
<<<<<<< HEAD
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	461c      	mov	r4, r3
 8005414:	f107 0310 	add.w	r3, r7, #16
 8005418:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800541c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	3724      	adds	r7, #36	@ 0x24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd90      	pop	{r4, r7, pc}

08005428 <osPoolCreate>:
=======
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	461c      	mov	r4, r3
 8005524:	f107 0310 	add.w	r3, r7, #16
 8005528:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800552c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	3724      	adds	r7, #36	@ 0x24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd90      	pop	{r4, r7, pc}

08005538 <osPoolCreate>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
<<<<<<< HEAD
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	3303      	adds	r3, #3
 8005436:	f023 0303 	bic.w	r3, r3, #3
 800543a:	60fb      	str	r3, [r7, #12]
=======
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	3303      	adds	r3, #3
 8005546:	f023 0303 	bic.w	r3, r3, #3
 800554a:	60fb      	str	r3, [r7, #12]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
<<<<<<< HEAD
 800543c:	2014      	movs	r0, #20
 800543e:	f002 fb05 	bl	8007a4c <pvPortMalloc>
 8005442:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d046      	beq.n	80054d8 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2200      	movs	r2, #0
 800545c:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f002 faf2 	bl	8007a4c <pvPortMalloc>
 8005468:	4602      	mov	r2, r0
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d02b      	beq.n	80054ce <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	fb02 f303 	mul.w	r3, r2, r3
 8005480:	4618      	mov	r0, r3
 8005482:	f002 fae3 	bl	8007a4c <pvPortMalloc>
 8005486:	4602      	mov	r2, r0
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d011      	beq.n	80054b8 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8005494:	2300      	movs	r3, #0
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	e008      	b.n	80054ac <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	4413      	add	r3, r2
 80054a2:	2200      	movs	r2, #0
 80054a4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	3301      	adds	r3, #1
 80054aa:	613b      	str	r3, [r7, #16]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d3f1      	bcc.n	800549a <osPoolCreate+0x72>
 80054b6:	e00f      	b.n	80054d8 <osPoolCreate+0xb0>
=======
 800554c:	2014      	movs	r0, #20
 800554e:	f002 fb05 	bl	8007b5c <pvPortMalloc>
 8005552:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d046      	beq.n	80055e8 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2200      	movs	r2, #0
 800556c:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f002 faf2 	bl	8007b5c <pvPortMalloc>
 8005578:	4602      	mov	r2, r0
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d02b      	beq.n	80055de <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	fb02 f303 	mul.w	r3, r2, r3
 8005590:	4618      	mov	r0, r3
 8005592:	f002 fae3 	bl	8007b5c <pvPortMalloc>
 8005596:	4602      	mov	r2, r0
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d011      	beq.n	80055c8 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80055a4:	2300      	movs	r3, #0
 80055a6:	613b      	str	r3, [r7, #16]
 80055a8:	e008      	b.n	80055bc <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	4413      	add	r3, r2
 80055b2:	2200      	movs	r2, #0
 80055b4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	3301      	adds	r3, #1
 80055ba:	613b      	str	r3, [r7, #16]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d3f1      	bcc.n	80055aa <osPoolCreate+0x72>
 80055c6:	e00f      	b.n	80055e8 <osPoolCreate+0xb0>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
        }
      }
      else {
        vPortFree(thePool->markers);
<<<<<<< HEAD
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	4618      	mov	r0, r3
 80054be:	f002 fb8d 	bl	8007bdc <vPortFree>
        vPortFree(thePool);
 80054c2:	6978      	ldr	r0, [r7, #20]
 80054c4:	f002 fb8a 	bl	8007bdc <vPortFree>
        thePool = NULL;
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	e004      	b.n	80054d8 <osPoolCreate+0xb0>
=======
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f002 fb8d 	bl	8007cec <vPortFree>
        vPortFree(thePool);
 80055d2:	6978      	ldr	r0, [r7, #20]
 80055d4:	f002 fb8a 	bl	8007cec <vPortFree>
        thePool = NULL;
 80055d8:	2300      	movs	r3, #0
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	e004      	b.n	80055e8 <osPoolCreate+0xb0>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
      }
    }
    else {
      vPortFree(thePool);
<<<<<<< HEAD
 80054ce:	6978      	ldr	r0, [r7, #20]
 80054d0:	f002 fb84 	bl	8007bdc <vPortFree>
      thePool = NULL;
 80054d4:	2300      	movs	r3, #0
 80054d6:	617b      	str	r3, [r7, #20]
=======
 80055de:	6978      	ldr	r0, [r7, #20]
 80055e0:	f002 fb84 	bl	8007cec <vPortFree>
      thePool = NULL;
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
  }

  return thePool;
<<<<<<< HEAD
 80054d8:	697b      	ldr	r3, [r7, #20]
=======
 80055e8:	697b      	ldr	r3, [r7, #20]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
 
#else
  return NULL;
#endif
}
<<<<<<< HEAD
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <osPoolAlloc>:
=======
 80055ea:	4618      	mov	r0, r3
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <osPoolAlloc>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
<<<<<<< HEAD
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b08a      	sub	sp, #40	@ 0x28
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 80054ea:	2300      	movs	r3, #0
 80054ec:	627b      	str	r3, [r7, #36]	@ 0x24
  void *p = NULL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	623b      	str	r3, [r7, #32]
=======
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b08a      	sub	sp, #40	@ 0x28
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 80055fa:	2300      	movs	r3, #0
 80055fc:	627b      	str	r3, [r7, #36]	@ 0x24
  void *p = NULL;
 80055fe:	2300      	movs	r3, #0
 8005600:	623b      	str	r3, [r7, #32]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
<<<<<<< HEAD
 80054f2:	f7ff fe81 	bl	80051f8 <inHandlerMode>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00e      	beq.n	800551a <osPoolAlloc+0x38>
=======
 8005602:	f7ff fe81 	bl	8005308 <inHandlerMode>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00e      	beq.n	800562a <osPoolAlloc+0x38>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 80054fc:	f3ef 8211 	mrs	r2, BASEPRI
 8005500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	617a      	str	r2, [r7, #20]
 8005512:	613b      	str	r3, [r7, #16]
=======
 800560c:	f3ef 8211 	mrs	r2, BASEPRI
 8005610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	617a      	str	r2, [r7, #20]
 8005622:	613b      	str	r3, [r7, #16]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
<<<<<<< HEAD
 8005514:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8005516:	627b      	str	r3, [r7, #36]	@ 0x24
 8005518:	e001      	b.n	800551e <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800551a:	f002 f975 	bl	8007808 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800551e:	2300      	movs	r3, #0
 8005520:	61fb      	str	r3, [r7, #28]
 8005522:	e029      	b.n	8005578 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691a      	ldr	r2, [r3, #16]
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	4413      	add	r3, r2
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6892      	ldr	r2, [r2, #8]
 8005530:	fbb3 f1f2 	udiv	r1, r3, r2
 8005534:	fb01 f202 	mul.w	r2, r1, r2
 8005538:	1a9b      	subs	r3, r3, r2
 800553a:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	4413      	add	r3, r2
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d113      	bne.n	8005572 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	4413      	add	r3, r2
 8005552:	2201      	movs	r2, #1
 8005554:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4619      	mov	r1, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	fb02 f303 	mul.w	r3, r2, r3
 8005566:	440b      	add	r3, r1
 8005568:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	611a      	str	r2, [r3, #16]
      break;
 8005570:	e007      	b.n	8005582 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	3301      	adds	r3, #1
 8005576:	61fb      	str	r3, [r7, #28]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	69fa      	ldr	r2, [r7, #28]
 800557e:	429a      	cmp	r2, r3
 8005580:	d3d0      	bcc.n	8005524 <osPoolAlloc+0x42>
=======
 8005624:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8005626:	627b      	str	r3, [r7, #36]	@ 0x24
 8005628:	e001      	b.n	800562e <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800562a:	f002 f975 	bl	8007918 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800562e:	2300      	movs	r3, #0
 8005630:	61fb      	str	r3, [r7, #28]
 8005632:	e029      	b.n	8005688 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691a      	ldr	r2, [r3, #16]
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	4413      	add	r3, r2
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6892      	ldr	r2, [r2, #8]
 8005640:	fbb3 f1f2 	udiv	r1, r3, r2
 8005644:	fb01 f202 	mul.w	r2, r1, r2
 8005648:	1a9b      	subs	r3, r3, r2
 800564a:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	4413      	add	r3, r2
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d113      	bne.n	8005682 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	4413      	add	r3, r2
 8005662:	2201      	movs	r2, #1
 8005664:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4619      	mov	r1, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	fb02 f303 	mul.w	r3, r2, r3
 8005676:	440b      	add	r3, r1
 8005678:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	611a      	str	r2, [r3, #16]
      break;
 8005680:	e007      	b.n	8005692 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	3301      	adds	r3, #1
 8005686:	61fb      	str	r3, [r7, #28]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	69fa      	ldr	r2, [r7, #28]
 800568e:	429a      	cmp	r2, r3
 8005690:	d3d0      	bcc.n	8005634 <osPoolAlloc+0x42>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
  }
  
  if (inHandlerMode()) {
<<<<<<< HEAD
 8005582:	f7ff fe39 	bl	80051f8 <inHandlerMode>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d005      	beq.n	8005598 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800558c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558e:	60fb      	str	r3, [r7, #12]
=======
 8005692:	f7ff fe39 	bl	8005308 <inHandlerMode>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d005      	beq.n	80056a8 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800569c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569e:	60fb      	str	r3, [r7, #12]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< HEAD
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f383 8811 	msr	BASEPRI, r3
=======
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f383 8811 	msr	BASEPRI, r3
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
<<<<<<< HEAD
 8005596:	e001      	b.n	800559c <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8005598:	f002 f968 	bl	800786c <vPortExitCritical>
  }
  
  return p;
 800559c:	6a3b      	ldr	r3, [r7, #32]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3728      	adds	r7, #40	@ 0x28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <osPoolFree>:
=======
 80056a6:	e001      	b.n	80056ac <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80056a8:	f002 f968 	bl	800797c <vPortExitCritical>
  }
  
  return p;
 80056ac:	6a3b      	ldr	r3, [r7, #32]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3728      	adds	r7, #40	@ 0x28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <osPoolFree>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
<<<<<<< HEAD
 80055a6:	b480      	push	{r7}
 80055a8:	b085      	sub	sp, #20
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
 80055ae:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <osPoolFree+0x14>
    return osErrorParameter;
 80055b6:	2380      	movs	r3, #128	@ 0x80
 80055b8:	e030      	b.n	800561c <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <osPoolFree+0x1e>
    return osErrorParameter;
 80055c0:	2380      	movs	r3, #128	@ 0x80
 80055c2:	e02b      	b.n	800561c <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d201      	bcs.n	80055d2 <osPoolFree+0x2c>
    return osErrorParameter;
 80055ce:	2380      	movs	r3, #128	@ 0x80
 80055d0:	e024      	b.n	800561c <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6812      	ldr	r2, [r2, #0]
 80055d8:	1a9b      	subs	r3, r3, r2
 80055da:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80055e6:	fb01 f202 	mul.w	r2, r1, r2
 80055ea:	1a9b      	subs	r3, r3, r2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <osPoolFree+0x4e>
    return osErrorParameter;
 80055f0:	2380      	movs	r3, #128	@ 0x80
 80055f2:	e013      	b.n	800561c <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fe:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	429a      	cmp	r2, r3
 8005608:	d301      	bcc.n	800560e <osPoolFree+0x68>
    return osErrorParameter;
 800560a:	2380      	movs	r3, #128	@ 0x80
 800560c:	e006      	b.n	800561c <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4413      	add	r3, r2
 8005616:	2200      	movs	r2, #0
 8005618:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <osMailCreate>:
=======
 80056b6:	b480      	push	{r7}
 80056b8:	b085      	sub	sp, #20
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <osPoolFree+0x14>
    return osErrorParameter;
 80056c6:	2380      	movs	r3, #128	@ 0x80
 80056c8:	e030      	b.n	800572c <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <osPoolFree+0x1e>
    return osErrorParameter;
 80056d0:	2380      	movs	r3, #128	@ 0x80
 80056d2:	e02b      	b.n	800572c <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d201      	bcs.n	80056e2 <osPoolFree+0x2c>
    return osErrorParameter;
 80056de:	2380      	movs	r3, #128	@ 0x80
 80056e0:	e024      	b.n	800572c <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6812      	ldr	r2, [r2, #0]
 80056e8:	1a9b      	subs	r3, r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68da      	ldr	r2, [r3, #12]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80056f6:	fb01 f202 	mul.w	r2, r1, r2
 80056fa:	1a9b      	subs	r3, r3, r2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <osPoolFree+0x4e>
    return osErrorParameter;
 8005700:	2380      	movs	r3, #128	@ 0x80
 8005702:	e013      	b.n	800572c <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	fbb2 f3f3 	udiv	r3, r2, r3
 800570e:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	429a      	cmp	r2, r3
 8005718:	d301      	bcc.n	800571e <osPoolFree+0x68>
    return osErrorParameter;
 800571a:	2380      	movs	r3, #128	@ 0x80
 800571c:	e006      	b.n	800572c <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4413      	add	r3, r2
 8005726:	2200      	movs	r2, #0
 8005728:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <osMailCreate>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
<<<<<<< HEAD
 8005628:	b590      	push	{r4, r7, lr}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
=======
 8005738:	b590      	push	{r4, r7, lr}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
<<<<<<< HEAD
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	2300      	movs	r3, #0
 8005640:	617b      	str	r3, [r7, #20]
=======
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
<<<<<<< HEAD
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689c      	ldr	r4, [r3, #8]
 8005646:	200c      	movs	r0, #12
 8005648:	f002 fa00 	bl	8007a4c <pvPortMalloc>
 800564c:	4603      	mov	r3, r0
 800564e:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <osMailCreate+0x36>
    return NULL;
 800565a:	2300      	movs	r3, #0
 800565c:	e038      	b.n	80056d0 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	681c      	ldr	r4, [r3, #0]
 8005672:	2200      	movs	r2, #0
 8005674:	2104      	movs	r1, #4
 8005676:	f000 fa4d 	bl	8005b14 <xQueueGenericCreate>
 800567a:	4603      	mov	r3, r0
 800567c:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d107      	bne.n	800569a <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4618      	mov	r0, r3
 8005692:	f002 faa3 	bl	8007bdc <vPortFree>
    return NULL;
 8005696:	2300      	movs	r3, #0
 8005698:	e01a      	b.n	80056d0 <osMailCreate+0xa8>
=======
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689c      	ldr	r4, [r3, #8]
 8005756:	200c      	movs	r0, #12
 8005758:	f002 fa00 	bl	8007b5c <pvPortMalloc>
 800575c:	4603      	mov	r3, r0
 800575e:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <osMailCreate+0x36>
    return NULL;
 800576a:	2300      	movs	r3, #0
 800576c:	e038      	b.n	80057e0 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6818      	ldr	r0, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	681c      	ldr	r4, [r3, #0]
 8005782:	2200      	movs	r2, #0
 8005784:	2104      	movs	r1, #4
 8005786:	f000 fa4d 	bl	8005c24 <xQueueGenericCreate>
 800578a:	4603      	mov	r3, r0
 800578c:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d107      	bne.n	80057aa <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f002 faa3 	bl	8007cec <vPortFree>
    return NULL;
 80057a6:	2300      	movs	r3, #0
 80057a8:	e01a      	b.n	80057e0 <osMailCreate+0xa8>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
<<<<<<< HEAD
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	681c      	ldr	r4, [r3, #0]
 80056a0:	f107 030c 	add.w	r3, r7, #12
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff febf 	bl	8005428 <osPoolCreate>
 80056aa:	4603      	mov	r3, r0
 80056ac:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d107      	bne.n	80056ca <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f002 fa8b 	bl	8007bdc <vPortFree>
    return NULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	e002      	b.n	80056d0 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	681b      	ldr	r3, [r3, #0]
=======
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	681c      	ldr	r4, [r3, #0]
 80057b0:	f107 030c 	add.w	r3, r7, #12
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff febf 	bl	8005538 <osPoolCreate>
 80057ba:	4603      	mov	r3, r0
 80057bc:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d107      	bne.n	80057da <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f002 fa8b 	bl	8007cec <vPortFree>
    return NULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	e002      	b.n	80057e0 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	681b      	ldr	r3, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
#else
  return NULL;
#endif
}
<<<<<<< HEAD
 80056d0:	4618      	mov	r0, r3
 80056d2:	371c      	adds	r7, #28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd90      	pop	{r4, r7, pc}

080056d8 <osMailAlloc>:
=======
 80057e0:	4618      	mov	r0, r3
 80057e2:	371c      	adds	r7, #28
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd90      	pop	{r4, r7, pc}

080057e8 <osMailAlloc>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
<<<<<<< HEAD
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
=======
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
<<<<<<< HEAD
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <osMailAlloc+0x14>
    return NULL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	e006      	b.n	80056fa <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff fef6 	bl	80054e2 <osPoolAlloc>
 80056f6:	60f8      	str	r0, [r7, #12]
  
  return p;
 80056f8:	68fb      	ldr	r3, [r7, #12]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <osMailCAlloc>:
=======
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <osMailAlloc+0x14>
    return NULL;
 80057f8:	2300      	movs	r3, #0
 80057fa:	e006      	b.n	800580a <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	4618      	mov	r0, r3
 8005802:	f7ff fef6 	bl	80055f2 <osPoolAlloc>
 8005806:	60f8      	str	r0, [r7, #12]
  
  return p;
 8005808:	68fb      	ldr	r3, [r7, #12]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <osMailCAlloc>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailCAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailCAlloc (osMailQId queue_id, uint32_t millisec)
{
<<<<<<< HEAD
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	6039      	str	r1, [r7, #0]
  uint32_t i;
  void *p = osMailAlloc(queue_id, millisec);
 800570c:	6839      	ldr	r1, [r7, #0]
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7ff ffe2 	bl	80056d8 <osMailAlloc>
 8005714:	60b8      	str	r0, [r7, #8]
  
  if (p) {
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d010      	beq.n	800573e <osMailCAlloc+0x3c>
    for (i = 0; i < queue_id->queue_def->item_sz; i++) {
 800571c:	2300      	movs	r3, #0
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	e007      	b.n	8005732 <osMailCAlloc+0x30>
      ((uint8_t *)p)[i] = 0;
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4413      	add	r3, r2
 8005728:	2200      	movs	r2, #0
 800572a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < queue_id->queue_def->item_sz; i++) {
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3301      	adds	r3, #1
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	429a      	cmp	r2, r3
 800573c:	d3f1      	bcc.n	8005722 <osMailCAlloc+0x20>
=======
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	6039      	str	r1, [r7, #0]
  uint32_t i;
  void *p = osMailAlloc(queue_id, millisec);
 800581c:	6839      	ldr	r1, [r7, #0]
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7ff ffe2 	bl	80057e8 <osMailAlloc>
 8005824:	60b8      	str	r0, [r7, #8]
  
  if (p) {
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d010      	beq.n	800584e <osMailCAlloc+0x3c>
    for (i = 0; i < queue_id->queue_def->item_sz; i++) {
 800582c:	2300      	movs	r3, #0
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	e007      	b.n	8005842 <osMailCAlloc+0x30>
      ((uint8_t *)p)[i] = 0;
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4413      	add	r3, r2
 8005838:	2200      	movs	r2, #0
 800583a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < queue_id->queue_def->item_sz; i++) {
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	3301      	adds	r3, #1
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	429a      	cmp	r2, r3
 800584c:	d3f1      	bcc.n	8005832 <osMailCAlloc+0x20>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
  }
  
  return p;
<<<<<<< HEAD
 800573e:	68bb      	ldr	r3, [r7, #8]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <osMailPut>:
=======
 800584e:	68bb      	ldr	r3, [r7, #8]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <osMailPut>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
<<<<<<< HEAD
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
=======
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
<<<<<<< HEAD
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <osMailPut+0x14>
    return osErrorParameter;
 8005758:	2380      	movs	r3, #128	@ 0x80
 800575a:	e02c      	b.n	80057b6 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8005760:	f7ff fd4a 	bl	80051f8 <inHandlerMode>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d018      	beq.n	800579c <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6858      	ldr	r0, [r3, #4]
 800576e:	f107 020c 	add.w	r2, r7, #12
 8005772:	4639      	mov	r1, r7
 8005774:	2300      	movs	r3, #0
 8005776:	f000 fb2f 	bl	8005dd8 <xQueueGenericSendFromISR>
 800577a:	4603      	mov	r3, r0
 800577c:	2b01      	cmp	r3, #1
 800577e:	d001      	beq.n	8005784 <osMailPut+0x3c>
      return osErrorOS;
 8005780:	23ff      	movs	r3, #255	@ 0xff
 8005782:	e018      	b.n	80057b6 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d014      	beq.n	80057b4 <osMailPut+0x6c>
 800578a:	4b0d      	ldr	r3, [pc, #52]	@ (80057c0 <osMailPut+0x78>)
 800578c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	e00b      	b.n	80057b4 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6858      	ldr	r0, [r3, #4]
 80057a0:	4639      	mov	r1, r7
 80057a2:	2300      	movs	r3, #0
 80057a4:	2200      	movs	r2, #0
 80057a6:	f000 fa15 	bl	8005bd4 <xQueueGenericSend>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d001      	beq.n	80057b4 <osMailPut+0x6c>
      return osErrorOS;
 80057b0:	23ff      	movs	r3, #255	@ 0xff
 80057b2:	e000      	b.n	80057b6 <osMailPut+0x6e>
=======
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <osMailPut+0x14>
    return osErrorParameter;
 8005868:	2380      	movs	r3, #128	@ 0x80
 800586a:	e02c      	b.n	80058c6 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8005870:	f7ff fd4a 	bl	8005308 <inHandlerMode>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d018      	beq.n	80058ac <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6858      	ldr	r0, [r3, #4]
 800587e:	f107 020c 	add.w	r2, r7, #12
 8005882:	4639      	mov	r1, r7
 8005884:	2300      	movs	r3, #0
 8005886:	f000 fb2f 	bl	8005ee8 <xQueueGenericSendFromISR>
 800588a:	4603      	mov	r3, r0
 800588c:	2b01      	cmp	r3, #1
 800588e:	d001      	beq.n	8005894 <osMailPut+0x3c>
      return osErrorOS;
 8005890:	23ff      	movs	r3, #255	@ 0xff
 8005892:	e018      	b.n	80058c6 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d014      	beq.n	80058c4 <osMailPut+0x6c>
 800589a:	4b0d      	ldr	r3, [pc, #52]	@ (80058d0 <osMailPut+0x78>)
 800589c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	e00b      	b.n	80058c4 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6858      	ldr	r0, [r3, #4]
 80058b0:	4639      	mov	r1, r7
 80058b2:	2300      	movs	r3, #0
 80058b4:	2200      	movs	r2, #0
 80058b6:	f000 fa15 	bl	8005ce4 <xQueueGenericSend>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d001      	beq.n	80058c4 <osMailPut+0x6c>
      return osErrorOS;
 80058c0:	23ff      	movs	r3, #255	@ 0xff
 80058c2:	e000      	b.n	80058c6 <osMailPut+0x6e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
  }
  
  return osOK;
<<<<<<< HEAD
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	e000ed04 	.word	0xe000ed04

080057c4 <osMailGet>:
=======
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	e000ed04 	.word	0xe000ed04

080058d4 <osMailGet>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
<<<<<<< HEAD
 80057c4:	b590      	push	{r4, r7, lr}
 80057c6:	b08b      	sub	sp, #44	@ 0x2c
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
=======
 80058d4:	b590      	push	{r4, r7, lr}
 80058d6:	b08b      	sub	sp, #44	@ 0x2c
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
<<<<<<< HEAD
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10a      	bne.n	80057f0 <osMailGet+0x2c>
    event.status = osErrorParameter;
 80057da:	2380      	movs	r3, #128	@ 0x80
 80057dc:	617b      	str	r3, [r7, #20]
    return event;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	461c      	mov	r4, r3
 80057e2:	f107 0314 	add.w	r3, r7, #20
 80057e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80057ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80057ee:	e056      	b.n	800589e <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80057f0:	2300      	movs	r3, #0
 80057f2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80057f4:	2300      	movs	r3, #0
 80057f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fe:	d103      	bne.n	8005808 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8005800:	f04f 33ff 	mov.w	r3, #4294967295
 8005804:	627b      	str	r3, [r7, #36]	@ 0x24
 8005806:	e009      	b.n	800581c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d006      	beq.n	800581c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <osMailGet+0x58>
      ticks = 1;
 8005818:	2301      	movs	r3, #1
 800581a:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10a      	bne.n	8005900 <osMailGet+0x2c>
    event.status = osErrorParameter;
 80058ea:	2380      	movs	r3, #128	@ 0x80
 80058ec:	617b      	str	r3, [r7, #20]
    return event;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	461c      	mov	r4, r3
 80058f2:	f107 0314 	add.w	r3, r7, #20
 80058f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80058fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80058fe:	e056      	b.n	80059ae <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005900:	2300      	movs	r3, #0
 8005902:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590e:	d103      	bne.n	8005918 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8005910:	f04f 33ff 	mov.w	r3, #4294967295
 8005914:	627b      	str	r3, [r7, #36]	@ 0x24
 8005916:	e009      	b.n	800592c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d006      	beq.n	800592c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8005922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <osMailGet+0x58>
      ticks = 1;
 8005928:	2301      	movs	r3, #1
 800592a:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
  }
  
  if (inHandlerMode()) {
<<<<<<< HEAD
 800581c:	f7ff fcec 	bl	80051f8 <inHandlerMode>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d01d      	beq.n	8005862 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	6858      	ldr	r0, [r3, #4]
 800582a:	f107 0220 	add.w	r2, r7, #32
 800582e:	f107 0314 	add.w	r3, r7, #20
 8005832:	3304      	adds	r3, #4
 8005834:	4619      	mov	r1, r3
 8005836:	f000 fc4d 	bl	80060d4 <xQueueReceiveFromISR>
 800583a:	4603      	mov	r3, r0
 800583c:	2b01      	cmp	r3, #1
 800583e:	d102      	bne.n	8005846 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8005840:	2320      	movs	r3, #32
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	e001      	b.n	800584a <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8005846:	2300      	movs	r3, #0
 8005848:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01e      	beq.n	800588e <osMailGet+0xca>
 8005850:	4b15      	ldr	r3, [pc, #84]	@ (80058a8 <osMailGet+0xe4>)
 8005852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	e015      	b.n	800588e <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	6858      	ldr	r0, [r3, #4]
 8005866:	f107 0314 	add.w	r3, r7, #20
 800586a:	3304      	adds	r3, #4
 800586c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800586e:	4619      	mov	r1, r3
 8005870:	f000 fb4e 	bl	8005f10 <xQueueReceive>
 8005874:	4603      	mov	r3, r0
 8005876:	2b01      	cmp	r3, #1
 8005878:	d102      	bne.n	8005880 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800587a:	2320      	movs	r3, #32
 800587c:	617b      	str	r3, [r7, #20]
 800587e:	e006      	b.n	800588e <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <osMailGet+0xc6>
 8005886:	2300      	movs	r3, #0
 8005888:	e000      	b.n	800588c <osMailGet+0xc8>
 800588a:	2340      	movs	r3, #64	@ 0x40
 800588c:	617b      	str	r3, [r7, #20]
=======
 800592c:	f7ff fcec 	bl	8005308 <inHandlerMode>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d01d      	beq.n	8005972 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	6858      	ldr	r0, [r3, #4]
 800593a:	f107 0220 	add.w	r2, r7, #32
 800593e:	f107 0314 	add.w	r3, r7, #20
 8005942:	3304      	adds	r3, #4
 8005944:	4619      	mov	r1, r3
 8005946:	f000 fc4d 	bl	80061e4 <xQueueReceiveFromISR>
 800594a:	4603      	mov	r3, r0
 800594c:	2b01      	cmp	r3, #1
 800594e:	d102      	bne.n	8005956 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8005950:	2320      	movs	r3, #32
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	e001      	b.n	800595a <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01e      	beq.n	800599e <osMailGet+0xca>
 8005960:	4b15      	ldr	r3, [pc, #84]	@ (80059b8 <osMailGet+0xe4>)
 8005962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	e015      	b.n	800599e <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	6858      	ldr	r0, [r3, #4]
 8005976:	f107 0314 	add.w	r3, r7, #20
 800597a:	3304      	adds	r3, #4
 800597c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800597e:	4619      	mov	r1, r3
 8005980:	f000 fb4e 	bl	8006020 <xQueueReceive>
 8005984:	4603      	mov	r3, r0
 8005986:	2b01      	cmp	r3, #1
 8005988:	d102      	bne.n	8005990 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800598a:	2320      	movs	r3, #32
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	e006      	b.n	800599e <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <osMailGet+0xc6>
 8005996:	2300      	movs	r3, #0
 8005998:	e000      	b.n	800599c <osMailGet+0xc8>
 800599a:	2340      	movs	r3, #64	@ 0x40
 800599c:	617b      	str	r3, [r7, #20]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
    }
  }
  
  return event;
<<<<<<< HEAD
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	461c      	mov	r4, r3
 8005892:	f107 0314 	add.w	r3, r7, #20
 8005896:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800589a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	372c      	adds	r7, #44	@ 0x2c
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd90      	pop	{r4, r7, pc}
 80058a6:	bf00      	nop
 80058a8:	e000ed04 	.word	0xe000ed04

080058ac <osMailFree>:
=======
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	461c      	mov	r4, r3
 80059a2:	f107 0314 	add.w	r3, r7, #20
 80059a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80059aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	372c      	adds	r7, #44	@ 0x2c
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd90      	pop	{r4, r7, pc}
 80059b6:	bf00      	nop
 80059b8:	e000ed04 	.word	0xe000ed04

080059bc <osMailFree>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
<<<<<<< HEAD
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <osMailFree+0x14>
    return osErrorParameter;
 80058bc:	2380      	movs	r3, #128	@ 0x80
 80058be:	e006      	b.n	80058ce <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	6839      	ldr	r1, [r7, #0]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff fe6d 	bl	80055a6 <osPoolFree>
 80058cc:	4603      	mov	r3, r0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <vListInitialise>:
=======
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <osMailFree+0x14>
    return osErrorParameter;
 80059cc:	2380      	movs	r3, #128	@ 0x80
 80059ce:	e006      	b.n	80059de <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	6839      	ldr	r1, [r7, #0]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7ff fe6d 	bl	80056b6 <osPoolFree>
 80059dc:	4603      	mov	r3, r0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <vListInitialise>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
<<<<<<< HEAD
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
=======
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f103 0208 	add.w	r2, r3, #8
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	605a      	str	r2, [r3, #4]
=======
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f103 0208 	add.w	r2, r3, #8
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	605a      	str	r2, [r3, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< HEAD
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f04f 32ff 	mov.w	r2, #4294967295
 80058ee:	609a      	str	r2, [r3, #8]
=======
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f04f 32ff 	mov.w	r2, #4294967295
 80059fe:	609a      	str	r2, [r3, #8]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f103 0208 	add.w	r2, r3, #8
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f103 0208 	add.w	r2, r3, #8
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	601a      	str	r2, [r3, #0]
=======
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f103 0208 	add.w	r2, r3, #8
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f103 0208 	add.w	r2, r3, #8
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< HEAD
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <vListInitialiseItem>:
=======
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <vListInitialiseItem>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
<<<<<<< HEAD
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	611a      	str	r2, [r3, #16]
=======
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	611a      	str	r2, [r3, #16]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< HEAD
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <vListInsertEnd>:
=======
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <vListInsertEnd>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	60fb      	str	r3, [r7, #12]
=======
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	60fb      	str	r3, [r7, #12]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< HEAD
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	609a      	str	r2, [r3, #8]
=======
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	609a      	str	r2, [r3, #8]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< HEAD
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	601a      	str	r2, [r3, #0]
}
 800596c:	bf00      	nop
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <vListInsert>:
=======
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	601a      	str	r2, [r3, #0]
}
 8005a7c:	bf00      	nop
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <vListInsert>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60bb      	str	r3, [r7, #8]
=======
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60bb      	str	r3, [r7, #8]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< HEAD
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598e:	d103      	bne.n	8005998 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	60fb      	str	r3, [r7, #12]
 8005996:	e00c      	b.n	80059b2 <vListInsert+0x3a>
=======
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9e:	d103      	bne.n	8005aa8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	60fb      	str	r3, [r7, #12]
 8005aa6:	e00c      	b.n	8005ac2 <vListInsert+0x3a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
<<<<<<< HEAD
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3308      	adds	r3, #8
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	e002      	b.n	80059a6 <vListInsert+0x2e>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d2f6      	bcs.n	80059a0 <vListInsert+0x28>
=======
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3308      	adds	r3, #8
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	e002      	b.n	8005ab6 <vListInsert+0x2e>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d2f6      	bcs.n	8005ab0 <vListInsert+0x28>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< HEAD
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	605a      	str	r2, [r3, #4]
=======
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	605a      	str	r2, [r3, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
<<<<<<< HEAD
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	601a      	str	r2, [r3, #0]
}
 80059de:	bf00      	nop
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <uxListRemove>:
=======
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	601a      	str	r2, [r3, #0]
}
 8005aee:	bf00      	nop
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <uxListRemove>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
<<<<<<< HEAD
 80059ea:	b480      	push	{r7}
 80059ec:	b085      	sub	sp, #20
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6892      	ldr	r2, [r2, #8]
 8005a00:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6852      	ldr	r2, [r2, #4]
 8005a0a:	605a      	str	r2, [r3, #4]
=======
 8005afa:	b480      	push	{r7}
 8005afc:	b085      	sub	sp, #20
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6892      	ldr	r2, [r2, #8]
 8005b10:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	6852      	ldr	r2, [r2, #4]
 8005b1a:	605a      	str	r2, [r3, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< HEAD
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d103      	bne.n	8005a1e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	689a      	ldr	r2, [r3, #8]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	605a      	str	r2, [r3, #4]
=======
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d103      	bne.n	8005b2e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	605a      	str	r2, [r3, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
<<<<<<< HEAD
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	1e5a      	subs	r2, r3, #1
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
	...

08005a40 <xQueueGenericReset>:
=======
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	1e5a      	subs	r2, r3, #1
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
	...

08005b50 <xQueueGenericReset>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
<<<<<<< HEAD
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10b      	bne.n	8005a6c <xQueueGenericReset+0x2c>
	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	60bb      	str	r3, [r7, #8]
}
 8005a66:	bf00      	nop
 8005a68:	bf00      	nop
 8005a6a:	e7fd      	b.n	8005a68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a6c:	f001 fecc 	bl	8007808 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a78:	68f9      	ldr	r1, [r7, #12]
 8005a7a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005a7c:	fb01 f303 	mul.w	r3, r1, r3
 8005a80:	441a      	add	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	68f9      	ldr	r1, [r7, #12]
 8005aa0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005aa2:	fb01 f303 	mul.w	r3, r1, r3
 8005aa6:	441a      	add	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	22ff      	movs	r2, #255	@ 0xff
 8005ab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	22ff      	movs	r2, #255	@ 0xff
 8005ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d114      	bne.n	8005aec <xQueueGenericReset+0xac>
=======
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10b      	bne.n	8005b7c <xQueueGenericReset+0x2c>
	__asm volatile
 8005b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b68:	f383 8811 	msr	BASEPRI, r3
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	60bb      	str	r3, [r7, #8]
}
 8005b76:	bf00      	nop
 8005b78:	bf00      	nop
 8005b7a:	e7fd      	b.n	8005b78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b7c:	f001 fecc 	bl	8007918 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b88:	68f9      	ldr	r1, [r7, #12]
 8005b8a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b8c:	fb01 f303 	mul.w	r3, r1, r3
 8005b90:	441a      	add	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bac:	3b01      	subs	r3, #1
 8005bae:	68f9      	ldr	r1, [r7, #12]
 8005bb0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005bb2:	fb01 f303 	mul.w	r3, r1, r3
 8005bb6:	441a      	add	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	22ff      	movs	r2, #255	@ 0xff
 8005bc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	22ff      	movs	r2, #255	@ 0xff
 8005bc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d114      	bne.n	8005bfc <xQueueGenericReset+0xac>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d01a      	beq.n	8005b00 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	3310      	adds	r3, #16
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f001 f8aa 	bl	8006c28 <xTaskRemoveFromEventList>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d012      	beq.n	8005b00 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ada:	4b0d      	ldr	r3, [pc, #52]	@ (8005b10 <xQueueGenericReset+0xd0>)
 8005adc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	e009      	b.n	8005b00 <xQueueGenericReset+0xc0>
=======
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d01a      	beq.n	8005c10 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	3310      	adds	r3, #16
 8005bde:	4618      	mov	r0, r3
 8005be0:	f001 f8aa 	bl	8006d38 <xTaskRemoveFromEventList>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d012      	beq.n	8005c10 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005bea:	4b0d      	ldr	r3, [pc, #52]	@ (8005c20 <xQueueGenericReset+0xd0>)
 8005bec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	e009      	b.n	8005c10 <xQueueGenericReset+0xc0>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
<<<<<<< HEAD
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	3310      	adds	r3, #16
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7ff fef0 	bl	80058d6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	3324      	adds	r3, #36	@ 0x24
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff feeb 	bl	80058d6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b00:	f001 feb4 	bl	800786c <vPortExitCritical>
=======
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	3310      	adds	r3, #16
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff fef0 	bl	80059e6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	3324      	adds	r3, #36	@ 0x24
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7ff feeb 	bl	80059e6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c10:	f001 feb4 	bl	800797c <vPortExitCritical>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
<<<<<<< HEAD
 8005b04:	2301      	movs	r3, #1
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	e000ed04 	.word	0xe000ed04

08005b14 <xQueueGenericCreate>:
=======
 8005c14:	2301      	movs	r3, #1
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	e000ed04 	.word	0xe000ed04

08005c24 <xQueueGenericCreate>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08a      	sub	sp, #40	@ 0x28
 8005b18:	af02      	add	r7, sp, #8
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	71fb      	strb	r3, [r7, #7]
=======
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b08a      	sub	sp, #40	@ 0x28
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	71fb      	strb	r3, [r7, #7]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
<<<<<<< HEAD
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10b      	bne.n	8005b40 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	613b      	str	r3, [r7, #16]
}
 8005b3a:	bf00      	nop
 8005b3c:	bf00      	nop
 8005b3e:	e7fd      	b.n	8005b3c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d102      	bne.n	8005b4c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005b46:	2300      	movs	r3, #0
 8005b48:	61fb      	str	r3, [r7, #28]
 8005b4a:	e004      	b.n	8005b56 <xQueueGenericCreate+0x42>
=======
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10b      	bne.n	8005c50 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	613b      	str	r3, [r7, #16]
}
 8005c4a:	bf00      	nop
 8005c4c:	bf00      	nop
 8005c4e:	e7fd      	b.n	8005c4c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d102      	bne.n	8005c5c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005c56:	2300      	movs	r3, #0
 8005c58:	61fb      	str	r3, [r7, #28]
 8005c5a:	e004      	b.n	8005c66 <xQueueGenericCreate+0x42>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	fb02 f303 	mul.w	r3, r2, r3
 8005b54:	61fb      	str	r3, [r7, #28]
=======
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	fb02 f303 	mul.w	r3, r2, r3
 8005c64:	61fb      	str	r3, [r7, #28]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
<<<<<<< HEAD
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	3348      	adds	r3, #72	@ 0x48
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f001 ff76 	bl	8007a4c <pvPortMalloc>
 8005b60:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d011      	beq.n	8005b8c <xQueueGenericCreate+0x78>
=======
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	3348      	adds	r3, #72	@ 0x48
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f001 ff76 	bl	8007b5c <pvPortMalloc>
 8005c70:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d011      	beq.n	8005c9c <xQueueGenericCreate+0x78>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
<<<<<<< HEAD
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	3348      	adds	r3, #72	@ 0x48
 8005b70:	617b      	str	r3, [r7, #20]
=======
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	3348      	adds	r3, #72	@ 0x48
 8005c80:	617b      	str	r3, [r7, #20]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
<<<<<<< HEAD
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
=======
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< HEAD
 8005b7a:	79fa      	ldrb	r2, [r7, #7]
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	4613      	mov	r3, r2
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	68b9      	ldr	r1, [r7, #8]
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f805 	bl	8005b96 <prvInitialiseNewQueue>
=======
 8005c8a:	79fa      	ldrb	r2, [r7, #7]
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	4613      	mov	r3, r2
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	68b9      	ldr	r1, [r7, #8]
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f000 f805 	bl	8005ca6 <prvInitialiseNewQueue>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< HEAD
 8005b8c:	69bb      	ldr	r3, [r7, #24]
	}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3720      	adds	r7, #32
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <prvInitialiseNewQueue>:
=======
 8005c9c:	69bb      	ldr	r3, [r7, #24]
	}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3720      	adds	r7, #32
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <prvInitialiseNewQueue>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
<<<<<<< HEAD
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b084      	sub	sp, #16
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	607a      	str	r2, [r7, #4]
 8005ba2:	70fb      	strb	r3, [r7, #3]
=======
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	607a      	str	r2, [r7, #4]
 8005cb2:	70fb      	strb	r3, [r7, #3]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d103      	bne.n	8005bb2 <prvInitialiseNewQueue+0x1c>
=======
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d103      	bne.n	8005cc2 <prvInitialiseNewQueue+0x1c>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
<<<<<<< HEAD
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	e002      	b.n	8005bb8 <prvInitialiseNewQueue+0x22>
=======
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	e002      	b.n	8005cc8 <prvInitialiseNewQueue+0x22>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
<<<<<<< HEAD
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	601a      	str	r2, [r3, #0]
=======
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
<<<<<<< HEAD
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	69b8      	ldr	r0, [r7, #24]
 8005bc8:	f7ff ff3a 	bl	8005a40 <xQueueGenericReset>
=======
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	69b8      	ldr	r0, [r7, #24]
 8005cd8:	f7ff ff3a 	bl	8005b50 <xQueueGenericReset>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
<<<<<<< HEAD
 8005bcc:	bf00      	nop
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <xQueueGenericSend>:
=======
 8005cdc:	bf00      	nop
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <xQueueGenericSend>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08e      	sub	sp, #56	@ 0x38
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005be2:	2300      	movs	r3, #0
 8005be4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10b      	bne.n	8005c08 <xQueueGenericSend+0x34>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c02:	bf00      	nop
 8005c04:	bf00      	nop
 8005c06:	e7fd      	b.n	8005c04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d103      	bne.n	8005c16 <xQueueGenericSend+0x42>
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <xQueueGenericSend+0x46>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e000      	b.n	8005c1c <xQueueGenericSend+0x48>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10b      	bne.n	8005c38 <xQueueGenericSend+0x64>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c32:	bf00      	nop
 8005c34:	bf00      	nop
 8005c36:	e7fd      	b.n	8005c34 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d103      	bne.n	8005c46 <xQueueGenericSend+0x72>
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d101      	bne.n	8005c4a <xQueueGenericSend+0x76>
 8005c46:	2301      	movs	r3, #1
 8005c48:	e000      	b.n	8005c4c <xQueueGenericSend+0x78>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10b      	bne.n	8005c68 <xQueueGenericSend+0x94>
	__asm volatile
 8005c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c54:	f383 8811 	msr	BASEPRI, r3
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	623b      	str	r3, [r7, #32]
}
 8005c62:	bf00      	nop
 8005c64:	bf00      	nop
 8005c66:	e7fd      	b.n	8005c64 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c68:	f001 f99e 	bl	8006fa8 <xTaskGetSchedulerState>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d102      	bne.n	8005c78 <xQueueGenericSend+0xa4>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <xQueueGenericSend+0xa8>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e000      	b.n	8005c7e <xQueueGenericSend+0xaa>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10b      	bne.n	8005c9a <xQueueGenericSend+0xc6>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	61fb      	str	r3, [r7, #28]
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop
 8005c98:	e7fd      	b.n	8005c96 <xQueueGenericSend+0xc2>
=======
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b08e      	sub	sp, #56	@ 0x38
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
 8005cf0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10b      	bne.n	8005d18 <xQueueGenericSend+0x34>
	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005d12:	bf00      	nop
 8005d14:	bf00      	nop
 8005d16:	e7fd      	b.n	8005d14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d103      	bne.n	8005d26 <xQueueGenericSend+0x42>
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <xQueueGenericSend+0x46>
 8005d26:	2301      	movs	r3, #1
 8005d28:	e000      	b.n	8005d2c <xQueueGenericSend+0x48>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10b      	bne.n	8005d48 <xQueueGenericSend+0x64>
	__asm volatile
 8005d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d42:	bf00      	nop
 8005d44:	bf00      	nop
 8005d46:	e7fd      	b.n	8005d44 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d103      	bne.n	8005d56 <xQueueGenericSend+0x72>
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <xQueueGenericSend+0x76>
 8005d56:	2301      	movs	r3, #1
 8005d58:	e000      	b.n	8005d5c <xQueueGenericSend+0x78>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10b      	bne.n	8005d78 <xQueueGenericSend+0x94>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	623b      	str	r3, [r7, #32]
}
 8005d72:	bf00      	nop
 8005d74:	bf00      	nop
 8005d76:	e7fd      	b.n	8005d74 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d78:	f001 f99e 	bl	80070b8 <xTaskGetSchedulerState>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d102      	bne.n	8005d88 <xQueueGenericSend+0xa4>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <xQueueGenericSend+0xa8>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e000      	b.n	8005d8e <xQueueGenericSend+0xaa>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10b      	bne.n	8005daa <xQueueGenericSend+0xc6>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	61fb      	str	r3, [r7, #28]
}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop
 8005da8:	e7fd      	b.n	8005da6 <xQueueGenericSend+0xc2>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 8005c9a:	f001 fdb5 	bl	8007808 <vPortEnterCritical>
=======
 8005daa:	f001 fdb5 	bl	8007918 <vPortEnterCritical>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
<<<<<<< HEAD
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d302      	bcc.n	8005cb0 <xQueueGenericSend+0xdc>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d129      	bne.n	8005d04 <xQueueGenericSend+0x130>
=======
 8005dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d302      	bcc.n	8005dc0 <xQueueGenericSend+0xdc>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d129      	bne.n	8005e14 <xQueueGenericSend+0x130>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	68b9      	ldr	r1, [r7, #8]
 8005cb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cb6:	f000 fa8f 	bl	80061d8 <prvCopyDataToQueue>
 8005cba:	62f8      	str	r0, [r7, #44]	@ 0x2c
=======
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	68b9      	ldr	r1, [r7, #8]
 8005dc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dc6:	f000 fa8f 	bl	80062e8 <prvCopyDataToQueue>
 8005dca:	62f8      	str	r0, [r7, #44]	@ 0x2c
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d010      	beq.n	8005ce6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc6:	3324      	adds	r3, #36	@ 0x24
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 ffad 	bl	8006c28 <xTaskRemoveFromEventList>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d013      	beq.n	8005cfc <xQueueGenericSend+0x128>
=======
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d010      	beq.n	8005df6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd6:	3324      	adds	r3, #36	@ 0x24
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 ffad 	bl	8006d38 <xTaskRemoveFromEventList>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d013      	beq.n	8005e0c <xQueueGenericSend+0x128>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 8005cd4:	4b3f      	ldr	r3, [pc, #252]	@ (8005dd4 <xQueueGenericSend+0x200>)
 8005cd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	e00a      	b.n	8005cfc <xQueueGenericSend+0x128>
=======
 8005de4:	4b3f      	ldr	r3, [pc, #252]	@ (8005ee4 <xQueueGenericSend+0x200>)
 8005de6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	e00a      	b.n	8005e0c <xQueueGenericSend+0x128>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
<<<<<<< HEAD
 8005ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d007      	beq.n	8005cfc <xQueueGenericSend+0x128>
=======
 8005df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d007      	beq.n	8005e0c <xQueueGenericSend+0x128>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 8005cec:	4b39      	ldr	r3, [pc, #228]	@ (8005dd4 <xQueueGenericSend+0x200>)
 8005cee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	f3bf 8f6f 	isb	sy
=======
 8005dfc:	4b39      	ldr	r3, [pc, #228]	@ (8005ee4 <xQueueGenericSend+0x200>)
 8005dfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	f3bf 8f6f 	isb	sy
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 8005cfc:	f001 fdb6 	bl	800786c <vPortExitCritical>
				return pdPASS;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e063      	b.n	8005dcc <xQueueGenericSend+0x1f8>
=======
 8005e0c:	f001 fdb6 	bl	800797c <vPortExitCritical>
				return pdPASS;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e063      	b.n	8005edc <xQueueGenericSend+0x1f8>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <xQueueGenericSend+0x13e>
=======
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d103      	bne.n	8005e22 <xQueueGenericSend+0x13e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 8005d0a:	f001 fdaf 	bl	800786c <vPortExitCritical>
=======
 8005e1a:	f001 fdaf 	bl	800797c <vPortExitCritical>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
<<<<<<< HEAD
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e05c      	b.n	8005dcc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d106      	bne.n	8005d26 <xQueueGenericSend+0x152>
=======
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e05c      	b.n	8005edc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d106      	bne.n	8005e36 <xQueueGenericSend+0x152>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 8005d18:	f107 0314 	add.w	r3, r7, #20
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 ffe7 	bl	8006cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d22:	2301      	movs	r3, #1
 8005d24:	637b      	str	r3, [r7, #52]	@ 0x34
=======
 8005e28:	f107 0314 	add.w	r3, r7, #20
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 ffe7 	bl	8006e00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e32:	2301      	movs	r3, #1
 8005e34:	637b      	str	r3, [r7, #52]	@ 0x34
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 8005d26:	f001 fda1 	bl	800786c <vPortExitCritical>
=======
 8005e36:	f001 fda1 	bl	800797c <vPortExitCritical>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 8005d2a:	f000 fd95 	bl	8006858 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d2e:	f001 fd6b 	bl	8007808 <vPortEnterCritical>
 8005d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d38:	b25b      	sxtb	r3, r3
 8005d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3e:	d103      	bne.n	8005d48 <xQueueGenericSend+0x174>
 8005d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d4e:	b25b      	sxtb	r3, r3
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d54:	d103      	bne.n	8005d5e <xQueueGenericSend+0x18a>
 8005d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d5e:	f001 fd85 	bl	800786c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d62:	1d3a      	adds	r2, r7, #4
 8005d64:	f107 0314 	add.w	r3, r7, #20
 8005d68:	4611      	mov	r1, r2
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 ffd6 	bl	8006d1c <xTaskCheckForTimeOut>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d124      	bne.n	8005dc0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d78:	f000 fb26 	bl	80063c8 <prvIsQueueFull>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d018      	beq.n	8005db4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d84:	3310      	adds	r3, #16
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	4611      	mov	r1, r2
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 ff26 	bl	8006bdc <vTaskPlaceOnEventList>
=======
 8005e3a:	f000 fd95 	bl	8006968 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e3e:	f001 fd6b 	bl	8007918 <vPortEnterCritical>
 8005e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e48:	b25b      	sxtb	r3, r3
 8005e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4e:	d103      	bne.n	8005e58 <xQueueGenericSend+0x174>
 8005e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e5e:	b25b      	sxtb	r3, r3
 8005e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e64:	d103      	bne.n	8005e6e <xQueueGenericSend+0x18a>
 8005e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e6e:	f001 fd85 	bl	800797c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e72:	1d3a      	adds	r2, r7, #4
 8005e74:	f107 0314 	add.w	r3, r7, #20
 8005e78:	4611      	mov	r1, r2
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 ffd6 	bl	8006e2c <xTaskCheckForTimeOut>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d124      	bne.n	8005ed0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e88:	f000 fb26 	bl	80064d8 <prvIsQueueFull>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d018      	beq.n	8005ec4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e94:	3310      	adds	r3, #16
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	4611      	mov	r1, r2
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 ff26 	bl	8006cec <vTaskPlaceOnEventList>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8005d90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d92:	f000 fab1 	bl	80062f8 <prvUnlockQueue>
=======
 8005ea0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ea2:	f000 fab1 	bl	8006408 <prvUnlockQueue>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< HEAD
 8005d96:	f000 fd6d 	bl	8006874 <xTaskResumeAll>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f47f af7c 	bne.w	8005c9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005da2:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd4 <xQueueGenericSend+0x200>)
 8005da4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	e772      	b.n	8005c9a <xQueueGenericSend+0xc6>
=======
 8005ea6:	f000 fd6d 	bl	8006984 <xTaskResumeAll>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f47f af7c 	bne.w	8005daa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee4 <xQueueGenericSend+0x200>)
 8005eb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eb8:	601a      	str	r2, [r3, #0]
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	e772      	b.n	8005daa <xQueueGenericSend+0xc6>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8005db4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005db6:	f000 fa9f 	bl	80062f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dba:	f000 fd5b 	bl	8006874 <xTaskResumeAll>
 8005dbe:	e76c      	b.n	8005c9a <xQueueGenericSend+0xc6>
=======
 8005ec4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ec6:	f000 fa9f 	bl	8006408 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005eca:	f000 fd5b 	bl	8006984 <xTaskResumeAll>
 8005ece:	e76c      	b.n	8005daa <xQueueGenericSend+0xc6>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8005dc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dc2:	f000 fa99 	bl	80062f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dc6:	f000 fd55 	bl	8006874 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005dca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3738      	adds	r7, #56	@ 0x38
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	e000ed04 	.word	0xe000ed04

08005dd8 <xQueueGenericSendFromISR>:
=======
 8005ed0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ed2:	f000 fa99 	bl	8006408 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ed6:	f000 fd55 	bl	8006984 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005eda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3738      	adds	r7, #56	@ 0x38
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	e000ed04 	.word	0xe000ed04

08005ee8 <xQueueGenericSendFromISR>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b08e      	sub	sp, #56	@ 0x38
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
 8005de4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10b      	bne.n	8005e08 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e02:	bf00      	nop
 8005e04:	bf00      	nop
 8005e06:	e7fd      	b.n	8005e04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d103      	bne.n	8005e16 <xQueueGenericSendFromISR+0x3e>
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <xQueueGenericSendFromISR+0x42>
 8005e16:	2301      	movs	r3, #1
 8005e18:	e000      	b.n	8005e1c <xQueueGenericSendFromISR+0x44>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10b      	bne.n	8005e38 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	623b      	str	r3, [r7, #32]
}
 8005e32:	bf00      	nop
 8005e34:	bf00      	nop
 8005e36:	e7fd      	b.n	8005e34 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d103      	bne.n	8005e46 <xQueueGenericSendFromISR+0x6e>
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d101      	bne.n	8005e4a <xQueueGenericSendFromISR+0x72>
 8005e46:	2301      	movs	r3, #1
 8005e48:	e000      	b.n	8005e4c <xQueueGenericSendFromISR+0x74>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10b      	bne.n	8005e68 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	61fb      	str	r3, [r7, #28]
}
 8005e62:	bf00      	nop
 8005e64:	bf00      	nop
 8005e66:	e7fd      	b.n	8005e64 <xQueueGenericSendFromISR+0x8c>
=======
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08e      	sub	sp, #56	@ 0x38
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10b      	bne.n	8005f18 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f12:	bf00      	nop
 8005f14:	bf00      	nop
 8005f16:	e7fd      	b.n	8005f14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d103      	bne.n	8005f26 <xQueueGenericSendFromISR+0x3e>
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <xQueueGenericSendFromISR+0x42>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e000      	b.n	8005f2c <xQueueGenericSendFromISR+0x44>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10b      	bne.n	8005f48 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	623b      	str	r3, [r7, #32]
}
 8005f42:	bf00      	nop
 8005f44:	bf00      	nop
 8005f46:	e7fd      	b.n	8005f44 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d103      	bne.n	8005f56 <xQueueGenericSendFromISR+0x6e>
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d101      	bne.n	8005f5a <xQueueGenericSendFromISR+0x72>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <xQueueGenericSendFromISR+0x74>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10b      	bne.n	8005f78 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	61fb      	str	r3, [r7, #28]
}
 8005f72:	bf00      	nop
 8005f74:	bf00      	nop
 8005f76:	e7fd      	b.n	8005f74 <xQueueGenericSendFromISR+0x8c>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 8005e68:	f001 fdae 	bl	80079c8 <vPortValidateInterruptPriority>
	__asm volatile
 8005e6c:	f3ef 8211 	mrs	r2, BASEPRI
 8005e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	61ba      	str	r2, [r7, #24]
 8005e82:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005e84:	69bb      	ldr	r3, [r7, #24]
=======
 8005f78:	f001 fdae 	bl	8007ad8 <vPortValidateInterruptPriority>
	__asm volatile
 8005f7c:	f3ef 8211 	mrs	r2, BASEPRI
 8005f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	61ba      	str	r2, [r7, #24]
 8005f92:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005f94:	69bb      	ldr	r3, [r7, #24]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
<<<<<<< HEAD
 8005e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d302      	bcc.n	8005e9a <xQueueGenericSendFromISR+0xc2>
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d12c      	bne.n	8005ef4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ea0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
=======
 8005f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d302      	bcc.n	8005faa <xQueueGenericSendFromISR+0xc2>
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d12c      	bne.n	8006004 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	68b9      	ldr	r1, [r7, #8]
 8005ea8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005eaa:	f000 f995 	bl	80061d8 <prvCopyDataToQueue>
=======
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	68b9      	ldr	r1, [r7, #8]
 8005fb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fba:	f000 f995 	bl	80062e8 <prvCopyDataToQueue>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
<<<<<<< HEAD
 8005eae:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb6:	d112      	bne.n	8005ede <xQueueGenericSendFromISR+0x106>
=======
 8005fbe:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc6:	d112      	bne.n	8005fee <xQueueGenericSendFromISR+0x106>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d016      	beq.n	8005eee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec2:	3324      	adds	r3, #36	@ 0x24
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 feaf 	bl	8006c28 <xTaskRemoveFromEventList>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00e      	beq.n	8005eee <xQueueGenericSendFromISR+0x116>
=======
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d016      	beq.n	8005ffe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd2:	3324      	adds	r3, #36	@ 0x24
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 feaf 	bl	8006d38 <xTaskRemoveFromEventList>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00e      	beq.n	8005ffe <xQueueGenericSendFromISR+0x116>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00b      	beq.n	8005eee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	e007      	b.n	8005eee <xQueueGenericSendFromISR+0x116>
=======
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00b      	beq.n	8005ffe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	e007      	b.n	8005ffe <xQueueGenericSendFromISR+0x116>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
<<<<<<< HEAD
 8005ede:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	b25a      	sxtb	r2, r3
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005ef2:	e001      	b.n	8005ef8 <xQueueGenericSendFromISR+0x120>
=======
 8005fee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	b25a      	sxtb	r2, r3
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005ffe:	2301      	movs	r3, #1
 8006000:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006002:	e001      	b.n	8006008 <xQueueGenericSendFromISR+0x120>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
<<<<<<< HEAD
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005efa:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f383 8811 	msr	BASEPRI, r3
}
 8005f02:	bf00      	nop
=======
 8006004:	2300      	movs	r3, #0
 8006006:	637b      	str	r3, [r7, #52]	@ 0x34
 8006008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f383 8811 	msr	BASEPRI, r3
}
 8006012:	bf00      	nop
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< HEAD
 8005f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3738      	adds	r7, #56	@ 0x38
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
	...

08005f10 <xQueueReceive>:
=======
 8006014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006016:	4618      	mov	r0, r3
 8006018:	3738      	adds	r7, #56	@ 0x38
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
	...

08006020 <xQueueReceive>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
<<<<<<< HEAD
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08c      	sub	sp, #48	@ 0x30
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10b      	bne.n	8005f42 <xQueueReceive+0x32>
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	623b      	str	r3, [r7, #32]
}
 8005f3c:	bf00      	nop
 8005f3e:	bf00      	nop
 8005f40:	e7fd      	b.n	8005f3e <xQueueReceive+0x2e>
=======
 8006020:	b580      	push	{r7, lr}
 8006022:	b08c      	sub	sp, #48	@ 0x30
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800602c:	2300      	movs	r3, #0
 800602e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10b      	bne.n	8006052 <xQueueReceive+0x32>
	__asm volatile
 800603a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	623b      	str	r3, [r7, #32]
}
 800604c:	bf00      	nop
 800604e:	bf00      	nop
 8006050:	e7fd      	b.n	800604e <xQueueReceive+0x2e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
<<<<<<< HEAD
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d103      	bne.n	8005f50 <xQueueReceive+0x40>
 8005f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <xQueueReceive+0x44>
 8005f50:	2301      	movs	r3, #1
 8005f52:	e000      	b.n	8005f56 <xQueueReceive+0x46>
 8005f54:	2300      	movs	r3, #0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10b      	bne.n	8005f72 <xQueueReceive+0x62>
	__asm volatile
 8005f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	61fb      	str	r3, [r7, #28]
}
 8005f6c:	bf00      	nop
 8005f6e:	bf00      	nop
 8005f70:	e7fd      	b.n	8005f6e <xQueueReceive+0x5e>
=======
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d103      	bne.n	8006060 <xQueueReceive+0x40>
 8006058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <xQueueReceive+0x44>
 8006060:	2301      	movs	r3, #1
 8006062:	e000      	b.n	8006066 <xQueueReceive+0x46>
 8006064:	2300      	movs	r3, #0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10b      	bne.n	8006082 <xQueueReceive+0x62>
	__asm volatile
 800606a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	61fb      	str	r3, [r7, #28]
}
 800607c:	bf00      	nop
 800607e:	bf00      	nop
 8006080:	e7fd      	b.n	800607e <xQueueReceive+0x5e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< HEAD
 8005f72:	f001 f819 	bl	8006fa8 <xTaskGetSchedulerState>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d102      	bne.n	8005f82 <xQueueReceive+0x72>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <xQueueReceive+0x76>
 8005f82:	2301      	movs	r3, #1
 8005f84:	e000      	b.n	8005f88 <xQueueReceive+0x78>
 8005f86:	2300      	movs	r3, #0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10b      	bne.n	8005fa4 <xQueueReceive+0x94>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	61bb      	str	r3, [r7, #24]
}
 8005f9e:	bf00      	nop
 8005fa0:	bf00      	nop
 8005fa2:	e7fd      	b.n	8005fa0 <xQueueReceive+0x90>
=======
 8006082:	f001 f819 	bl	80070b8 <xTaskGetSchedulerState>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d102      	bne.n	8006092 <xQueueReceive+0x72>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <xQueueReceive+0x76>
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <xQueueReceive+0x78>
 8006096:	2300      	movs	r3, #0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10b      	bne.n	80060b4 <xQueueReceive+0x94>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	61bb      	str	r3, [r7, #24]
}
 80060ae:	bf00      	nop
 80060b0:	bf00      	nop
 80060b2:	e7fd      	b.n	80060b0 <xQueueReceive+0x90>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 8005fa4:	f001 fc30 	bl	8007808 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fac:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 80060b4:	f001 fc30 	bl	8007918 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060bc:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8005fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d01f      	beq.n	8005ff4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fb8:	f000 f978 	bl	80062ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbe:	1e5a      	subs	r2, r3, #1
 8005fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc2:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 80060be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d01f      	beq.n	8006104 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060c4:	68b9      	ldr	r1, [r7, #8]
 80060c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060c8:	f000 f978 	bl	80063bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ce:	1e5a      	subs	r2, r3, #1
 80060d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d2:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 8005fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00f      	beq.n	8005fec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fce:	3310      	adds	r3, #16
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 fe29 	bl	8006c28 <xTaskRemoveFromEventList>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d007      	beq.n	8005fec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005fdc:	4b3c      	ldr	r3, [pc, #240]	@ (80060d0 <xQueueReceive+0x1c0>)
 8005fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	f3bf 8f6f 	isb	sy
=======
 80060d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00f      	beq.n	80060fc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060de:	3310      	adds	r3, #16
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 fe29 	bl	8006d38 <xTaskRemoveFromEventList>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d007      	beq.n	80060fc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80060ec:	4b3c      	ldr	r3, [pc, #240]	@ (80061e0 <xQueueReceive+0x1c0>)
 80060ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	f3bf 8f6f 	isb	sy
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 8005fec:	f001 fc3e 	bl	800786c <vPortExitCritical>
				return pdPASS;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e069      	b.n	80060c8 <xQueueReceive+0x1b8>
=======
 80060fc:	f001 fc3e 	bl	800797c <vPortExitCritical>
				return pdPASS;
 8006100:	2301      	movs	r3, #1
 8006102:	e069      	b.n	80061d8 <xQueueReceive+0x1b8>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d103      	bne.n	8006002 <xQueueReceive+0xf2>
=======
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d103      	bne.n	8006112 <xQueueReceive+0xf2>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 8005ffa:	f001 fc37 	bl	800786c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ffe:	2300      	movs	r3, #0
 8006000:	e062      	b.n	80060c8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006004:	2b00      	cmp	r3, #0
 8006006:	d106      	bne.n	8006016 <xQueueReceive+0x106>
=======
 800610a:	f001 fc37 	bl	800797c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800610e:	2300      	movs	r3, #0
 8006110:	e062      	b.n	80061d8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006114:	2b00      	cmp	r3, #0
 8006116:	d106      	bne.n	8006126 <xQueueReceive+0x106>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 8006008:	f107 0310 	add.w	r3, r7, #16
 800600c:	4618      	mov	r0, r3
 800600e:	f000 fe6f 	bl	8006cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006012:	2301      	movs	r3, #1
 8006014:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 8006118:	f107 0310 	add.w	r3, r7, #16
 800611c:	4618      	mov	r0, r3
 800611e:	f000 fe6f 	bl	8006e00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006122:	2301      	movs	r3, #1
 8006124:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 8006016:	f001 fc29 	bl	800786c <vPortExitCritical>
=======
 8006126:	f001 fc29 	bl	800797c <vPortExitCritical>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 800601a:	f000 fc1d 	bl	8006858 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800601e:	f001 fbf3 	bl	8007808 <vPortEnterCritical>
 8006022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006024:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006028:	b25b      	sxtb	r3, r3
 800602a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602e:	d103      	bne.n	8006038 <xQueueReceive+0x128>
 8006030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800603e:	b25b      	sxtb	r3, r3
 8006040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006044:	d103      	bne.n	800604e <xQueueReceive+0x13e>
 8006046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800604e:	f001 fc0d 	bl	800786c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006052:	1d3a      	adds	r2, r7, #4
 8006054:	f107 0310 	add.w	r3, r7, #16
 8006058:	4611      	mov	r1, r2
 800605a:	4618      	mov	r0, r3
 800605c:	f000 fe5e 	bl	8006d1c <xTaskCheckForTimeOut>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d123      	bne.n	80060ae <xQueueReceive+0x19e>
=======
 800612a:	f000 fc1d 	bl	8006968 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800612e:	f001 fbf3 	bl	8007918 <vPortEnterCritical>
 8006132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006134:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006138:	b25b      	sxtb	r3, r3
 800613a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613e:	d103      	bne.n	8006148 <xQueueReceive+0x128>
 8006140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800614a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800614e:	b25b      	sxtb	r3, r3
 8006150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006154:	d103      	bne.n	800615e <xQueueReceive+0x13e>
 8006156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800615e:	f001 fc0d 	bl	800797c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006162:	1d3a      	adds	r2, r7, #4
 8006164:	f107 0310 	add.w	r3, r7, #16
 8006168:	4611      	mov	r1, r2
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fe5e 	bl	8006e2c <xTaskCheckForTimeOut>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d123      	bne.n	80061be <xQueueReceive+0x19e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 8006066:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006068:	f000 f998 	bl	800639c <prvIsQueueEmpty>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d017      	beq.n	80060a2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006074:	3324      	adds	r3, #36	@ 0x24
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	4611      	mov	r1, r2
 800607a:	4618      	mov	r0, r3
 800607c:	f000 fdae 	bl	8006bdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006080:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006082:	f000 f939 	bl	80062f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006086:	f000 fbf5 	bl	8006874 <xTaskResumeAll>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d189      	bne.n	8005fa4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006090:	4b0f      	ldr	r3, [pc, #60]	@ (80060d0 <xQueueReceive+0x1c0>)
 8006092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	e780      	b.n	8005fa4 <xQueueReceive+0x94>
=======
 8006176:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006178:	f000 f998 	bl	80064ac <prvIsQueueEmpty>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d017      	beq.n	80061b2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006184:	3324      	adds	r3, #36	@ 0x24
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	4611      	mov	r1, r2
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fdae 	bl	8006cec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006190:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006192:	f000 f939 	bl	8006408 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006196:	f000 fbf5 	bl	8006984 <xTaskResumeAll>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d189      	bne.n	80060b4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80061a0:	4b0f      	ldr	r3, [pc, #60]	@ (80061e0 <xQueueReceive+0x1c0>)
 80061a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	e780      	b.n	80060b4 <xQueueReceive+0x94>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 80060a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060a4:	f000 f928 	bl	80062f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060a8:	f000 fbe4 	bl	8006874 <xTaskResumeAll>
 80060ac:	e77a      	b.n	8005fa4 <xQueueReceive+0x94>
=======
 80061b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061b4:	f000 f928 	bl	8006408 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061b8:	f000 fbe4 	bl	8006984 <xTaskResumeAll>
 80061bc:	e77a      	b.n	80060b4 <xQueueReceive+0x94>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 80060ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060b0:	f000 f922 	bl	80062f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060b4:	f000 fbde 	bl	8006874 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060ba:	f000 f96f 	bl	800639c <prvIsQueueEmpty>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f43f af6f 	beq.w	8005fa4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80060c6:	2300      	movs	r3, #0
=======
 80061be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061c0:	f000 f922 	bl	8006408 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061c4:	f000 fbde 	bl	8006984 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061ca:	f000 f96f 	bl	80064ac <prvIsQueueEmpty>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f43f af6f 	beq.w	80060b4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80061d6:	2300      	movs	r3, #0
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
<<<<<<< HEAD
 80060c8:	4618      	mov	r0, r3
 80060ca:	3730      	adds	r7, #48	@ 0x30
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	e000ed04 	.word	0xe000ed04

080060d4 <xQueueReceiveFromISR>:
=======
 80061d8:	4618      	mov	r0, r3
 80061da:	3730      	adds	r7, #48	@ 0x30
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	e000ed04 	.word	0xe000ed04

080061e4 <xQueueReceiveFromISR>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
<<<<<<< HEAD
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08e      	sub	sp, #56	@ 0x38
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80060e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10b      	bne.n	8006102 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	623b      	str	r3, [r7, #32]
}
 80060fc:	bf00      	nop
 80060fe:	bf00      	nop
 8006100:	e7fd      	b.n	80060fe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d103      	bne.n	8006110 <xQueueReceiveFromISR+0x3c>
 8006108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <xQueueReceiveFromISR+0x40>
 8006110:	2301      	movs	r3, #1
 8006112:	e000      	b.n	8006116 <xQueueReceiveFromISR+0x42>
 8006114:	2300      	movs	r3, #0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10b      	bne.n	8006132 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800611a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	61fb      	str	r3, [r7, #28]
}
 800612c:	bf00      	nop
 800612e:	bf00      	nop
 8006130:	e7fd      	b.n	800612e <xQueueReceiveFromISR+0x5a>
=======
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08e      	sub	sp, #56	@ 0x38
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80061f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10b      	bne.n	8006212 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	623b      	str	r3, [r7, #32]
}
 800620c:	bf00      	nop
 800620e:	bf00      	nop
 8006210:	e7fd      	b.n	800620e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d103      	bne.n	8006220 <xQueueReceiveFromISR+0x3c>
 8006218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <xQueueReceiveFromISR+0x40>
 8006220:	2301      	movs	r3, #1
 8006222:	e000      	b.n	8006226 <xQueueReceiveFromISR+0x42>
 8006224:	2300      	movs	r3, #0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10b      	bne.n	8006242 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	61fb      	str	r3, [r7, #28]
}
 800623c:	bf00      	nop
 800623e:	bf00      	nop
 8006240:	e7fd      	b.n	800623e <xQueueReceiveFromISR+0x5a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 8006132:	f001 fc49 	bl	80079c8 <vPortValidateInterruptPriority>
	__asm volatile
 8006136:	f3ef 8211 	mrs	r2, BASEPRI
 800613a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	61ba      	str	r2, [r7, #24]
 800614c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800614e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006150:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006156:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800615a:	2b00      	cmp	r3, #0
 800615c:	d02f      	beq.n	80061be <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800615e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006160:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006164:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
=======
 8006242:	f001 fc49 	bl	8007ad8 <vPortValidateInterruptPriority>
	__asm volatile
 8006246:	f3ef 8211 	mrs	r2, BASEPRI
 800624a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	61ba      	str	r2, [r7, #24]
 800625c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800625e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006260:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006266:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626a:	2b00      	cmp	r3, #0
 800626c:	d02f      	beq.n	80062ce <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800626e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006270:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006274:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
<<<<<<< HEAD
 8006168:	68b9      	ldr	r1, [r7, #8]
 800616a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800616c:	f000 f89e 	bl	80062ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006172:	1e5a      	subs	r2, r3, #1
 8006174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006176:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 8006278:	68b9      	ldr	r1, [r7, #8]
 800627a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800627c:	f000 f89e 	bl	80063bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006282:	1e5a      	subs	r2, r3, #1
 8006284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006286:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
<<<<<<< HEAD
 8006178:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800617c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006180:	d112      	bne.n	80061a8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d016      	beq.n	80061b8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800618a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618c:	3310      	adds	r3, #16
 800618e:	4618      	mov	r0, r3
 8006190:	f000 fd4a 	bl	8006c28 <xTaskRemoveFromEventList>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00e      	beq.n	80061b8 <xQueueReceiveFromISR+0xe4>
=======
 8006288:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800628c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006290:	d112      	bne.n	80062b8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d016      	beq.n	80062c8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	3310      	adds	r3, #16
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 fd4a 	bl	8006d38 <xTaskRemoveFromEventList>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00e      	beq.n	80062c8 <xQueueReceiveFromISR+0xe4>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00b      	beq.n	80061b8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	e007      	b.n	80061b8 <xQueueReceiveFromISR+0xe4>
=======
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00b      	beq.n	80062c8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	e007      	b.n	80062c8 <xQueueReceiveFromISR+0xe4>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
<<<<<<< HEAD
 80061a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061ac:	3301      	adds	r3, #1
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	b25a      	sxtb	r2, r3
 80061b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80061b8:	2301      	movs	r3, #1
 80061ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80061bc:	e001      	b.n	80061c2 <xQueueReceiveFromISR+0xee>
=======
 80062b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062bc:	3301      	adds	r3, #1
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	b25a      	sxtb	r2, r3
 80062c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80062c8:	2301      	movs	r3, #1
 80062ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80062cc:	e001      	b.n	80062d2 <xQueueReceiveFromISR+0xee>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< HEAD
 80061be:	2300      	movs	r3, #0
 80061c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80061c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f383 8811 	msr	BASEPRI, r3
}
 80061cc:	bf00      	nop
=======
 80062ce:	2300      	movs	r3, #0
 80062d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80062d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f383 8811 	msr	BASEPRI, r3
}
 80062dc:	bf00      	nop
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< HEAD
 80061ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3738      	adds	r7, #56	@ 0x38
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <prvCopyDataToQueue>:
=======
 80062de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3738      	adds	r7, #56	@ 0x38
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <prvCopyDataToQueue>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
<<<<<<< HEAD
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80061e4:	2300      	movs	r3, #0
 80061e6:	617b      	str	r3, [r7, #20]
=======
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80062f4:	2300      	movs	r3, #0
 80062f6:	617b      	str	r3, [r7, #20]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
<<<<<<< HEAD
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10d      	bne.n	8006212 <prvCopyDataToQueue+0x3a>
=======
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10d      	bne.n	8006322 <prvCopyDataToQueue+0x3a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d14d      	bne.n	800629a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	4618      	mov	r0, r3
 8006204:	f000 feee 	bl	8006fe4 <xTaskPriorityDisinherit>
 8006208:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	609a      	str	r2, [r3, #8]
 8006210:	e043      	b.n	800629a <prvCopyDataToQueue+0xc2>
=======
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d14d      	bne.n	80063aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	4618      	mov	r0, r3
 8006314:	f000 feee 	bl	80070f4 <xTaskPriorityDisinherit>
 8006318:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	609a      	str	r2, [r3, #8]
 8006320:	e043      	b.n	80063aa <prvCopyDataToQueue+0xc2>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
<<<<<<< HEAD
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d119      	bne.n	800624c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6858      	ldr	r0, [r3, #4]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006220:	461a      	mov	r2, r3
 8006222:	68b9      	ldr	r1, [r7, #8]
 8006224:	f001 fed6 	bl	8007fd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006230:	441a      	add	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	429a      	cmp	r2, r3
 8006240:	d32b      	bcc.n	800629a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	605a      	str	r2, [r3, #4]
 800624a:	e026      	b.n	800629a <prvCopyDataToQueue+0xc2>
=======
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d119      	bne.n	800635c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6858      	ldr	r0, [r3, #4]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006330:	461a      	mov	r2, r3
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	f001 fed6 	bl	80080e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006340:	441a      	add	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	429a      	cmp	r2, r3
 8006350:	d32b      	bcc.n	80063aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	605a      	str	r2, [r3, #4]
 800635a:	e026      	b.n	80063aa <prvCopyDataToQueue+0xc2>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
<<<<<<< HEAD
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	68d8      	ldr	r0, [r3, #12]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006254:	461a      	mov	r2, r3
 8006256:	68b9      	ldr	r1, [r7, #8]
 8006258:	f001 febc 	bl	8007fd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	68da      	ldr	r2, [r3, #12]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006264:	425b      	negs	r3, r3
 8006266:	441a      	add	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	68da      	ldr	r2, [r3, #12]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	429a      	cmp	r2, r3
 8006276:	d207      	bcs.n	8006288 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006280:	425b      	negs	r3, r3
 8006282:	441a      	add	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	60da      	str	r2, [r3, #12]
=======
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	68d8      	ldr	r0, [r3, #12]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006364:	461a      	mov	r2, r3
 8006366:	68b9      	ldr	r1, [r7, #8]
 8006368:	f001 febc 	bl	80080e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	68da      	ldr	r2, [r3, #12]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006374:	425b      	negs	r3, r3
 8006376:	441a      	add	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	68da      	ldr	r2, [r3, #12]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	429a      	cmp	r2, r3
 8006386:	d207      	bcs.n	8006398 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006390:	425b      	negs	r3, r3
 8006392:	441a      	add	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	60da      	str	r2, [r3, #12]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
<<<<<<< HEAD
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b02      	cmp	r3, #2
 800628c:	d105      	bne.n	800629a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <prvCopyDataToQueue+0xc2>
=======
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b02      	cmp	r3, #2
 800639c:	d105      	bne.n	80063aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <prvCopyDataToQueue+0xc2>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
<<<<<<< HEAD
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	3b01      	subs	r3, #1
 8006298:	613b      	str	r3, [r7, #16]
=======
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	3b01      	subs	r3, #1
 80063a8:	613b      	str	r3, [r7, #16]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< HEAD
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80062a2:	697b      	ldr	r3, [r7, #20]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <prvCopyDataFromQueue>:
=======
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80063b2:	697b      	ldr	r3, [r7, #20]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <prvCopyDataFromQueue>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
<<<<<<< HEAD
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d018      	beq.n	80062f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c6:	441a      	add	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d303      	bcc.n	80062e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	60da      	str	r2, [r3, #12]
=======
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d018      	beq.n	8006400 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d6:	441a      	add	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d303      	bcc.n	80063f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	60da      	str	r2, [r3, #12]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
<<<<<<< HEAD
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68d9      	ldr	r1, [r3, #12]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e8:	461a      	mov	r2, r3
 80062ea:	6838      	ldr	r0, [r7, #0]
 80062ec:	f001 fe72 	bl	8007fd4 <memcpy>
	}
}
 80062f0:	bf00      	nop
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <prvUnlockQueue>:
=======
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68d9      	ldr	r1, [r3, #12]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f8:	461a      	mov	r2, r3
 80063fa:	6838      	ldr	r0, [r7, #0]
 80063fc:	f001 fe72 	bl	80080e4 <memcpy>
	}
}
 8006400:	bf00      	nop
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <prvUnlockQueue>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
<<<<<<< HEAD
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
=======
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 8006300:	f001 fa82 	bl	8007808 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800630a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800630c:	e011      	b.n	8006332 <prvUnlockQueue+0x3a>
=======
 8006410:	f001 fa82 	bl	8007918 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800641a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800641c:	e011      	b.n	8006442 <prvUnlockQueue+0x3a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006312:	2b00      	cmp	r3, #0
 8006314:	d012      	beq.n	800633c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	3324      	adds	r3, #36	@ 0x24
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fc84 	bl	8006c28 <xTaskRemoveFromEventList>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <prvUnlockQueue+0x32>
=======
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006422:	2b00      	cmp	r3, #0
 8006424:	d012      	beq.n	800644c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	3324      	adds	r3, #36	@ 0x24
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fc84 	bl	8006d38 <xTaskRemoveFromEventList>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <prvUnlockQueue+0x32>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
<<<<<<< HEAD
 8006326:	f000 fd5d 	bl	8006de4 <vTaskMissedYield>
=======
 8006436:	f000 fd5d 	bl	8006ef4 <vTaskMissedYield>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
<<<<<<< HEAD
 800632a:	7bfb      	ldrb	r3, [r7, #15]
 800632c:	3b01      	subs	r3, #1
 800632e:	b2db      	uxtb	r3, r3
 8006330:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006336:	2b00      	cmp	r3, #0
 8006338:	dce9      	bgt.n	800630e <prvUnlockQueue+0x16>
 800633a:	e000      	b.n	800633e <prvUnlockQueue+0x46>
					break;
 800633c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	22ff      	movs	r2, #255	@ 0xff
 8006342:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006346:	f001 fa91 	bl	800786c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800634a:	f001 fa5d 	bl	8007808 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006354:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006356:	e011      	b.n	800637c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d012      	beq.n	8006386 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	3310      	adds	r3, #16
 8006364:	4618      	mov	r0, r3
 8006366:	f000 fc5f 	bl	8006c28 <xTaskRemoveFromEventList>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006370:	f000 fd38 	bl	8006de4 <vTaskMissedYield>
=======
 800643a:	7bfb      	ldrb	r3, [r7, #15]
 800643c:	3b01      	subs	r3, #1
 800643e:	b2db      	uxtb	r3, r3
 8006440:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006446:	2b00      	cmp	r3, #0
 8006448:	dce9      	bgt.n	800641e <prvUnlockQueue+0x16>
 800644a:	e000      	b.n	800644e <prvUnlockQueue+0x46>
					break;
 800644c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	22ff      	movs	r2, #255	@ 0xff
 8006452:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006456:	f001 fa91 	bl	800797c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800645a:	f001 fa5d 	bl	8007918 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006464:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006466:	e011      	b.n	800648c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d012      	beq.n	8006496 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3310      	adds	r3, #16
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fc5f 	bl	8006d38 <xTaskRemoveFromEventList>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006480:	f000 fd38 	bl	8006ef4 <vTaskMissedYield>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
<<<<<<< HEAD
 8006374:	7bbb      	ldrb	r3, [r7, #14]
 8006376:	3b01      	subs	r3, #1
 8006378:	b2db      	uxtb	r3, r3
 800637a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800637c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006380:	2b00      	cmp	r3, #0
 8006382:	dce9      	bgt.n	8006358 <prvUnlockQueue+0x60>
 8006384:	e000      	b.n	8006388 <prvUnlockQueue+0x90>
=======
 8006484:	7bbb      	ldrb	r3, [r7, #14]
 8006486:	3b01      	subs	r3, #1
 8006488:	b2db      	uxtb	r3, r3
 800648a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800648c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006490:	2b00      	cmp	r3, #0
 8006492:	dce9      	bgt.n	8006468 <prvUnlockQueue+0x60>
 8006494:	e000      	b.n	8006498 <prvUnlockQueue+0x90>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			}
			else
			{
				break;
<<<<<<< HEAD
 8006386:	bf00      	nop
=======
 8006496:	bf00      	nop
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
<<<<<<< HEAD
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	22ff      	movs	r2, #255	@ 0xff
 800638c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006390:	f001 fa6c 	bl	800786c <vPortExitCritical>
}
 8006394:	bf00      	nop
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <prvIsQueueEmpty>:
=======
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	22ff      	movs	r2, #255	@ 0xff
 800649c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80064a0:	f001 fa6c 	bl	800797c <vPortExitCritical>
}
 80064a4:	bf00      	nop
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <prvIsQueueEmpty>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063a4:	f001 fa30 	bl	8007808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d102      	bne.n	80063b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80063b0:	2301      	movs	r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	e001      	b.n	80063ba <prvIsQueueEmpty+0x1e>
=======
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064b4:	f001 fa30 	bl	8007918 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d102      	bne.n	80064c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80064c0:	2301      	movs	r3, #1
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	e001      	b.n	80064ca <prvIsQueueEmpty+0x1e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 80063b6:	2300      	movs	r3, #0
 80063b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063ba:	f001 fa57 	bl	800786c <vPortExitCritical>

	return xReturn;
 80063be:	68fb      	ldr	r3, [r7, #12]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <prvIsQueueFull>:
=======
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064ca:	f001 fa57 	bl	800797c <vPortExitCritical>

	return xReturn;
 80064ce:	68fb      	ldr	r3, [r7, #12]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <prvIsQueueFull>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063d0:	f001 fa1a 	bl	8007808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063dc:	429a      	cmp	r2, r3
 80063de:	d102      	bne.n	80063e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80063e0:	2301      	movs	r3, #1
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	e001      	b.n	80063ea <prvIsQueueFull+0x22>
=======
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064e0:	f001 fa1a 	bl	8007918 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d102      	bne.n	80064f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064f0:	2301      	movs	r3, #1
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	e001      	b.n	80064fa <prvIsQueueFull+0x22>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 80063e6:	2300      	movs	r3, #0
 80063e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063ea:	f001 fa3f 	bl	800786c <vPortExitCritical>

	return xReturn;
 80063ee:	68fb      	ldr	r3, [r7, #12]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <xTaskCreateStatic>:
=======
 80064f6:	2300      	movs	r3, #0
 80064f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064fa:	f001 fa3f 	bl	800797c <vPortExitCritical>

	return xReturn;
 80064fe:	68fb      	ldr	r3, [r7, #12]
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <xTaskCreateStatic>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
<<<<<<< HEAD
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08e      	sub	sp, #56	@ 0x38
 80063fc:	af04      	add	r7, sp, #16
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
=======
 8006508:	b580      	push	{r7, lr}
 800650a:	b08e      	sub	sp, #56	@ 0x38
 800650c:	af04      	add	r7, sp, #16
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	603b      	str	r3, [r7, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
<<<<<<< HEAD
 8006406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10b      	bne.n	8006424 <xTaskCreateStatic+0x2c>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	623b      	str	r3, [r7, #32]
}
 800641e:	bf00      	nop
 8006420:	bf00      	nop
 8006422:	e7fd      	b.n	8006420 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10b      	bne.n	8006442 <xTaskCreateStatic+0x4a>
	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	61fb      	str	r3, [r7, #28]
}
 800643c:	bf00      	nop
 800643e:	bf00      	nop
 8006440:	e7fd      	b.n	800643e <xTaskCreateStatic+0x46>
=======
 8006516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10b      	bne.n	8006534 <xTaskCreateStatic+0x2c>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	623b      	str	r3, [r7, #32]
}
 800652e:	bf00      	nop
 8006530:	bf00      	nop
 8006532:	e7fd      	b.n	8006530 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10b      	bne.n	8006552 <xTaskCreateStatic+0x4a>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	61fb      	str	r3, [r7, #28]
}
 800654c:	bf00      	nop
 800654e:	bf00      	nop
 8006550:	e7fd      	b.n	800654e <xTaskCreateStatic+0x46>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
<<<<<<< HEAD
 8006442:	2354      	movs	r3, #84	@ 0x54
 8006444:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	2b54      	cmp	r3, #84	@ 0x54
 800644a:	d00b      	beq.n	8006464 <xTaskCreateStatic+0x6c>
	__asm volatile
 800644c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	61bb      	str	r3, [r7, #24]
}
 800645e:	bf00      	nop
 8006460:	bf00      	nop
 8006462:	e7fd      	b.n	8006460 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006464:	693b      	ldr	r3, [r7, #16]
=======
 8006552:	2354      	movs	r3, #84	@ 0x54
 8006554:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	2b54      	cmp	r3, #84	@ 0x54
 800655a:	d00b      	beq.n	8006574 <xTaskCreateStatic+0x6c>
	__asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	61bb      	str	r3, [r7, #24]
}
 800656e:	bf00      	nop
 8006570:	bf00      	nop
 8006572:	e7fd      	b.n	8006570 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006574:	693b      	ldr	r3, [r7, #16]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
<<<<<<< HEAD
 8006466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006468:	2b00      	cmp	r3, #0
 800646a:	d01e      	beq.n	80064aa <xTaskCreateStatic+0xb2>
 800646c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800646e:	2b00      	cmp	r3, #0
 8006470:	d01b      	beq.n	80064aa <xTaskCreateStatic+0xb2>
=======
 8006576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01e      	beq.n	80065ba <xTaskCreateStatic+0xb2>
 800657c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800657e:	2b00      	cmp	r3, #0
 8006580:	d01b      	beq.n	80065ba <xTaskCreateStatic+0xb2>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 8006472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006474:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006478:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800647a:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8006582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006584:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006588:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800658a:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 800647c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647e:	2202      	movs	r2, #2
 8006480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
=======
 800658c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658e:	2202      	movs	r2, #2
 8006590:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
<<<<<<< HEAD
 8006484:	2300      	movs	r3, #0
 8006486:	9303      	str	r3, [sp, #12]
 8006488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648a:	9302      	str	r3, [sp, #8]
 800648c:	f107 0314 	add.w	r3, r7, #20
 8006490:	9301      	str	r3, [sp, #4]
 8006492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	68b9      	ldr	r1, [r7, #8]
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 f850 	bl	8006542 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80064a4:	f000 f8d6 	bl	8006654 <prvAddNewTaskToReadyList>
 80064a8:	e001      	b.n	80064ae <xTaskCreateStatic+0xb6>
=======
 8006594:	2300      	movs	r3, #0
 8006596:	9303      	str	r3, [sp, #12]
 8006598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659a:	9302      	str	r3, [sp, #8]
 800659c:	f107 0314 	add.w	r3, r7, #20
 80065a0:	9301      	str	r3, [sp, #4]
 80065a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	68b9      	ldr	r1, [r7, #8]
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 f850 	bl	8006652 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80065b4:	f000 f8d6 	bl	8006764 <prvAddNewTaskToReadyList>
 80065b8:	e001      	b.n	80065be <xTaskCreateStatic+0xb6>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
		else
		{
			xReturn = NULL;
<<<<<<< HEAD
 80064aa:	2300      	movs	r3, #0
 80064ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064ae:	697b      	ldr	r3, [r7, #20]
	}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3728      	adds	r7, #40	@ 0x28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <xTaskCreate>:
=======
 80065ba:	2300      	movs	r3, #0
 80065bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80065be:	697b      	ldr	r3, [r7, #20]
	}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3728      	adds	r7, #40	@ 0x28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <xTaskCreate>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
<<<<<<< HEAD
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08c      	sub	sp, #48	@ 0x30
 80064bc:	af04      	add	r7, sp, #16
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	603b      	str	r3, [r7, #0]
 80064c4:	4613      	mov	r3, r2
 80064c6:	80fb      	strh	r3, [r7, #6]
=======
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08c      	sub	sp, #48	@ 0x30
 80065cc:	af04      	add	r7, sp, #16
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	603b      	str	r3, [r7, #0]
 80065d4:	4613      	mov	r3, r2
 80065d6:	80fb      	strh	r3, [r7, #6]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
<<<<<<< HEAD
 80064c8:	88fb      	ldrh	r3, [r7, #6]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4618      	mov	r0, r3
 80064ce:	f001 fabd 	bl	8007a4c <pvPortMalloc>
 80064d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00e      	beq.n	80064f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80064da:	2054      	movs	r0, #84	@ 0x54
 80064dc:	f001 fab6 	bl	8007a4c <pvPortMalloc>
 80064e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d003      	beq.n	80064f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80064ee:	e005      	b.n	80064fc <xTaskCreate+0x44>
=======
 80065d8:	88fb      	ldrh	r3, [r7, #6]
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 fabd 	bl	8007b5c <pvPortMalloc>
 80065e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00e      	beq.n	8006608 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80065ea:	2054      	movs	r0, #84	@ 0x54
 80065ec:	f001 fab6 	bl	8007b5c <pvPortMalloc>
 80065f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d003      	beq.n	8006600 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80065fe:	e005      	b.n	800660c <xTaskCreate+0x44>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
<<<<<<< HEAD
 80064f0:	6978      	ldr	r0, [r7, #20]
 80064f2:	f001 fb73 	bl	8007bdc <vPortFree>
 80064f6:	e001      	b.n	80064fc <xTaskCreate+0x44>
=======
 8006600:	6978      	ldr	r0, [r7, #20]
 8006602:	f001 fb73 	bl	8007cec <vPortFree>
 8006606:	e001      	b.n	800660c <xTaskCreate+0x44>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				}
			}
			else
			{
				pxNewTCB = NULL;
<<<<<<< HEAD
 80064f8:	2300      	movs	r3, #0
 80064fa:	61fb      	str	r3, [r7, #28]
=======
 8006608:	2300      	movs	r3, #0
 800660a:	61fb      	str	r3, [r7, #28]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
<<<<<<< HEAD
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d017      	beq.n	8006532 <xTaskCreate+0x7a>
=======
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d017      	beq.n	8006642 <xTaskCreate+0x7a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
=======
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
<<<<<<< HEAD
 800650a:	88fa      	ldrh	r2, [r7, #6]
 800650c:	2300      	movs	r3, #0
 800650e:	9303      	str	r3, [sp, #12]
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	9302      	str	r3, [sp, #8]
 8006514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006516:	9301      	str	r3, [sp, #4]
 8006518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	68b9      	ldr	r1, [r7, #8]
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 f80e 	bl	8006542 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006526:	69f8      	ldr	r0, [r7, #28]
 8006528:	f000 f894 	bl	8006654 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800652c:	2301      	movs	r3, #1
 800652e:	61bb      	str	r3, [r7, #24]
 8006530:	e002      	b.n	8006538 <xTaskCreate+0x80>
=======
 800661a:	88fa      	ldrh	r2, [r7, #6]
 800661c:	2300      	movs	r3, #0
 800661e:	9303      	str	r3, [sp, #12]
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	9302      	str	r3, [sp, #8]
 8006624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006626:	9301      	str	r3, [sp, #4]
 8006628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	68b9      	ldr	r1, [r7, #8]
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 f80e 	bl	8006652 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006636:	69f8      	ldr	r0, [r7, #28]
 8006638:	f000 f894 	bl	8006764 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800663c:	2301      	movs	r3, #1
 800663e:	61bb      	str	r3, [r7, #24]
 8006640:	e002      	b.n	8006648 <xTaskCreate+0x80>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< HEAD
 8006532:	f04f 33ff 	mov.w	r3, #4294967295
 8006536:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006538:	69bb      	ldr	r3, [r7, #24]
	}
 800653a:	4618      	mov	r0, r3
 800653c:	3720      	adds	r7, #32
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <prvInitialiseNewTask>:
=======
 8006642:	f04f 33ff 	mov.w	r3, #4294967295
 8006646:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006648:	69bb      	ldr	r3, [r7, #24]
	}
 800664a:	4618      	mov	r0, r3
 800664c:	3720      	adds	r7, #32
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <prvInitialiseNewTask>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
<<<<<<< HEAD
 8006542:	b580      	push	{r7, lr}
 8006544:	b088      	sub	sp, #32
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	607a      	str	r2, [r7, #4]
 800654e:	603b      	str	r3, [r7, #0]
=======
 8006652:	b580      	push	{r7, lr}
 8006654:	b088      	sub	sp, #32
 8006656:	af00      	add	r7, sp, #0
 8006658:	60f8      	str	r0, [r7, #12]
 800665a:	60b9      	str	r1, [r7, #8]
 800665c:	607a      	str	r2, [r7, #4]
 800665e:	603b      	str	r3, [r7, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
<<<<<<< HEAD
 8006550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006552:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800655a:	3b01      	subs	r3, #1
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	f023 0307 	bic.w	r3, r3, #7
 8006568:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	f003 0307 	and.w	r3, r3, #7
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00b      	beq.n	800658c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	617b      	str	r3, [r7, #20]
}
 8006586:	bf00      	nop
 8006588:	bf00      	nop
 800658a:	e7fd      	b.n	8006588 <prvInitialiseNewTask+0x46>
=======
 8006660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006662:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800666a:	3b01      	subs	r3, #1
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	f023 0307 	bic.w	r3, r3, #7
 8006678:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	f003 0307 	and.w	r3, r3, #7
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00b      	beq.n	800669c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	617b      	str	r3, [r7, #20]
}
 8006696:	bf00      	nop
 8006698:	bf00      	nop
 800669a:	e7fd      	b.n	8006698 <prvInitialiseNewTask+0x46>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
<<<<<<< HEAD
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d01f      	beq.n	80065d2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006592:	2300      	movs	r3, #0
 8006594:	61fb      	str	r3, [r7, #28]
 8006596:	e012      	b.n	80065be <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	4413      	add	r3, r2
 800659e:	7819      	ldrb	r1, [r3, #0]
 80065a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	4413      	add	r3, r2
 80065a6:	3334      	adds	r3, #52	@ 0x34
 80065a8:	460a      	mov	r2, r1
 80065aa:	701a      	strb	r2, [r3, #0]
=======
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d01f      	beq.n	80066e2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066a2:	2300      	movs	r3, #0
 80066a4:	61fb      	str	r3, [r7, #28]
 80066a6:	e012      	b.n	80066ce <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	4413      	add	r3, r2
 80066ae:	7819      	ldrb	r1, [r3, #0]
 80066b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	4413      	add	r3, r2
 80066b6:	3334      	adds	r3, #52	@ 0x34
 80066b8:	460a      	mov	r2, r1
 80066ba:	701a      	strb	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
<<<<<<< HEAD
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	4413      	add	r3, r2
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d006      	beq.n	80065c6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	3301      	adds	r3, #1
 80065bc:	61fb      	str	r3, [r7, #28]
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	2b0f      	cmp	r3, #15
 80065c2:	d9e9      	bls.n	8006598 <prvInitialiseNewTask+0x56>
 80065c4:	e000      	b.n	80065c8 <prvInitialiseNewTask+0x86>
			{
				break;
 80065c6:	bf00      	nop
=======
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	4413      	add	r3, r2
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d006      	beq.n	80066d6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	3301      	adds	r3, #1
 80066cc:	61fb      	str	r3, [r7, #28]
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	2b0f      	cmp	r3, #15
 80066d2:	d9e9      	bls.n	80066a8 <prvInitialiseNewTask+0x56>
 80066d4:	e000      	b.n	80066d8 <prvInitialiseNewTask+0x86>
			{
				break;
 80066d6:	bf00      	nop
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< HEAD
 80065c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80065d0:	e003      	b.n	80065da <prvInitialiseNewTask+0x98>
=======
 80066d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066e0:	e003      	b.n	80066ea <prvInitialiseNewTask+0x98>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
<<<<<<< HEAD
 80065d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
=======
 80066e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
<<<<<<< HEAD
 80065da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065dc:	2b06      	cmp	r3, #6
 80065de:	d901      	bls.n	80065e4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80065e0:	2306      	movs	r3, #6
 80065e2:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 80066ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ec:	2b06      	cmp	r3, #6
 80066ee:	d901      	bls.n	80066f4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066f0:	2306      	movs	r3, #6
 80066f2:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
<<<<<<< HEAD
 80065e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80065ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065ee:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80065f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f2:	2200      	movs	r2, #0
 80065f4:	649a      	str	r2, [r3, #72]	@ 0x48
=======
 80066f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066f8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80066fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066fe:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006702:	2200      	movs	r2, #0
 8006704:	649a      	str	r2, [r3, #72]	@ 0x48
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
<<<<<<< HEAD
 80065f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f8:	3304      	adds	r3, #4
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7ff f98b 	bl	8005916 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006602:	3318      	adds	r3, #24
 8006604:	4618      	mov	r0, r3
 8006606:	f7ff f986 	bl	8005916 <vListInitialiseItem>
=======
 8006706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006708:	3304      	adds	r3, #4
 800670a:	4618      	mov	r0, r3
 800670c:	f7ff f98b 	bl	8005a26 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006712:	3318      	adds	r3, #24
 8006714:	4618      	mov	r0, r3
 8006716:	f7ff f986 	bl	8005a26 <vListInitialiseItem>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
<<<<<<< HEAD
 800660a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800660e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006612:	f1c3 0207 	rsb	r2, r3, #7
 8006616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006618:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800661a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800661e:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 800671a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800671e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006722:	f1c3 0207 	rsb	r2, r3, #7
 8006726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006728:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800672a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800672e:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
<<<<<<< HEAD
 8006620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006622:	2200      	movs	r2, #0
 8006624:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
=======
 8006730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006732:	2200      	movs	r2, #0
 8006734:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< HEAD
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	68f9      	ldr	r1, [r7, #12]
 8006632:	69b8      	ldr	r0, [r7, #24]
 8006634:	f000 ffb4 	bl	80075a0 <pxPortInitialiseStack>
 8006638:	4602      	mov	r2, r0
 800663a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663c:	601a      	str	r2, [r3, #0]
=======
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	68f9      	ldr	r1, [r7, #12]
 8006742:	69b8      	ldr	r0, [r7, #24]
 8006744:	f000 ffb4 	bl	80076b0 <pxPortInitialiseStack>
 8006748:	4602      	mov	r2, r0
 800674a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674c:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
<<<<<<< HEAD
 800663e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <prvInitialiseNewTask+0x108>
=======
 800674e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006750:	2b00      	cmp	r3, #0
 8006752:	d002      	beq.n	800675a <prvInitialiseNewTask+0x108>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< HEAD
 8006644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006648:	601a      	str	r2, [r3, #0]
=======
 8006754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006756:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006758:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 800664a:	bf00      	nop
 800664c:	3720      	adds	r7, #32
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
	...

08006654 <prvAddNewTaskToReadyList>:
=======
 800675a:	bf00      	nop
 800675c:	3720      	adds	r7, #32
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <prvAddNewTaskToReadyList>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< HEAD
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800665c:	f001 f8d4 	bl	8007808 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006660:	4b2a      	ldr	r3, [pc, #168]	@ (800670c <prvAddNewTaskToReadyList+0xb8>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3301      	adds	r3, #1
 8006666:	4a29      	ldr	r2, [pc, #164]	@ (800670c <prvAddNewTaskToReadyList+0xb8>)
 8006668:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800666a:	4b29      	ldr	r3, [pc, #164]	@ (8006710 <prvAddNewTaskToReadyList+0xbc>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d109      	bne.n	8006686 <prvAddNewTaskToReadyList+0x32>
=======
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800676c:	f001 f8d4 	bl	8007918 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006770:	4b2a      	ldr	r3, [pc, #168]	@ (800681c <prvAddNewTaskToReadyList+0xb8>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	3301      	adds	r3, #1
 8006776:	4a29      	ldr	r2, [pc, #164]	@ (800681c <prvAddNewTaskToReadyList+0xb8>)
 8006778:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800677a:	4b29      	ldr	r3, [pc, #164]	@ (8006820 <prvAddNewTaskToReadyList+0xbc>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d109      	bne.n	8006796 <prvAddNewTaskToReadyList+0x32>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< HEAD
 8006672:	4a27      	ldr	r2, [pc, #156]	@ (8006710 <prvAddNewTaskToReadyList+0xbc>)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006678:	4b24      	ldr	r3, [pc, #144]	@ (800670c <prvAddNewTaskToReadyList+0xb8>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d110      	bne.n	80066a2 <prvAddNewTaskToReadyList+0x4e>
=======
 8006782:	4a27      	ldr	r2, [pc, #156]	@ (8006820 <prvAddNewTaskToReadyList+0xbc>)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006788:	4b24      	ldr	r3, [pc, #144]	@ (800681c <prvAddNewTaskToReadyList+0xb8>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d110      	bne.n	80067b2 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
<<<<<<< HEAD
 8006680:	f000 fbd4 	bl	8006e2c <prvInitialiseTaskLists>
 8006684:	e00d      	b.n	80066a2 <prvAddNewTaskToReadyList+0x4e>
=======
 8006790:	f000 fbd4 	bl	8006f3c <prvInitialiseTaskLists>
 8006794:	e00d      	b.n	80067b2 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
<<<<<<< HEAD
 8006686:	4b23      	ldr	r3, [pc, #140]	@ (8006714 <prvAddNewTaskToReadyList+0xc0>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d109      	bne.n	80066a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800668e:	4b20      	ldr	r3, [pc, #128]	@ (8006710 <prvAddNewTaskToReadyList+0xbc>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006698:	429a      	cmp	r2, r3
 800669a:	d802      	bhi.n	80066a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800669c:	4a1c      	ldr	r2, [pc, #112]	@ (8006710 <prvAddNewTaskToReadyList+0xbc>)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6013      	str	r3, [r2, #0]
=======
 8006796:	4b23      	ldr	r3, [pc, #140]	@ (8006824 <prvAddNewTaskToReadyList+0xc0>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d109      	bne.n	80067b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800679e:	4b20      	ldr	r3, [pc, #128]	@ (8006820 <prvAddNewTaskToReadyList+0xbc>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d802      	bhi.n	80067b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80067ac:	4a1c      	ldr	r2, [pc, #112]	@ (8006820 <prvAddNewTaskToReadyList+0xbc>)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6013      	str	r3, [r2, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
<<<<<<< HEAD
 80066a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006718 <prvAddNewTaskToReadyList+0xc4>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3301      	adds	r3, #1
 80066a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006718 <prvAddNewTaskToReadyList+0xc4>)
 80066aa:	6013      	str	r3, [r2, #0]
=======
 80067b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006828 <prvAddNewTaskToReadyList+0xc4>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3301      	adds	r3, #1
 80067b8:	4a1b      	ldr	r2, [pc, #108]	@ (8006828 <prvAddNewTaskToReadyList+0xc4>)
 80067ba:	6013      	str	r3, [r2, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
<<<<<<< HEAD
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b0:	2201      	movs	r2, #1
 80066b2:	409a      	lsls	r2, r3
 80066b4:	4b19      	ldr	r3, [pc, #100]	@ (800671c <prvAddNewTaskToReadyList+0xc8>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	4a18      	ldr	r2, [pc, #96]	@ (800671c <prvAddNewTaskToReadyList+0xc8>)
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c2:	4613      	mov	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4a15      	ldr	r2, [pc, #84]	@ (8006720 <prvAddNewTaskToReadyList+0xcc>)
 80066cc:	441a      	add	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	3304      	adds	r3, #4
 80066d2:	4619      	mov	r1, r3
 80066d4:	4610      	mov	r0, r2
 80066d6:	f7ff f92b 	bl	8005930 <vListInsertEnd>
=======
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c0:	2201      	movs	r2, #1
 80067c2:	409a      	lsls	r2, r3
 80067c4:	4b19      	ldr	r3, [pc, #100]	@ (800682c <prvAddNewTaskToReadyList+0xc8>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	4a18      	ldr	r2, [pc, #96]	@ (800682c <prvAddNewTaskToReadyList+0xc8>)
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067d2:	4613      	mov	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4a15      	ldr	r2, [pc, #84]	@ (8006830 <prvAddNewTaskToReadyList+0xcc>)
 80067dc:	441a      	add	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	3304      	adds	r3, #4
 80067e2:	4619      	mov	r1, r3
 80067e4:	4610      	mov	r0, r2
 80067e6:	f7ff f92b 	bl	8005a40 <vListInsertEnd>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 80066da:	f001 f8c7 	bl	800786c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80066de:	4b0d      	ldr	r3, [pc, #52]	@ (8006714 <prvAddNewTaskToReadyList+0xc0>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00e      	beq.n	8006704 <prvAddNewTaskToReadyList+0xb0>
=======
 80067ea:	f001 f8c7 	bl	800797c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80067ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006824 <prvAddNewTaskToReadyList+0xc0>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00e      	beq.n	8006814 <prvAddNewTaskToReadyList+0xb0>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
<<<<<<< HEAD
 80066e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006710 <prvAddNewTaskToReadyList+0xbc>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d207      	bcs.n	8006704 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80066f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006724 <prvAddNewTaskToReadyList+0xd0>)
 80066f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	f3bf 8f6f 	isb	sy
=======
 80067f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006820 <prvAddNewTaskToReadyList+0xbc>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006800:	429a      	cmp	r2, r3
 8006802:	d207      	bcs.n	8006814 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006804:	4b0b      	ldr	r3, [pc, #44]	@ (8006834 <prvAddNewTaskToReadyList+0xd0>)
 8006806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	f3bf 8f6f 	isb	sy
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 8006704:	bf00      	nop
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	200004cc 	.word	0x200004cc
 8006710:	200003cc 	.word	0x200003cc
 8006714:	200004d8 	.word	0x200004d8
 8006718:	200004e8 	.word	0x200004e8
 800671c:	200004d4 	.word	0x200004d4
 8006720:	200003d0 	.word	0x200003d0
 8006724:	e000ed04 	.word	0xe000ed04

08006728 <vTaskDelay>:
=======
 8006814:	bf00      	nop
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	200004d4 	.word	0x200004d4
 8006820:	200003d4 	.word	0x200003d4
 8006824:	200004e0 	.word	0x200004e0
 8006828:	200004f0 	.word	0x200004f0
 800682c:	200004dc 	.word	0x200004dc
 8006830:	200003d8 	.word	0x200003d8
 8006834:	e000ed04 	.word	0xe000ed04

08006838 <vTaskDelay>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
<<<<<<< HEAD
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006730:	2300      	movs	r3, #0
 8006732:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d018      	beq.n	800676c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800673a:	4b14      	ldr	r3, [pc, #80]	@ (800678c <vTaskDelay+0x64>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00b      	beq.n	800675a <vTaskDelay+0x32>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	60bb      	str	r3, [r7, #8]
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop
 8006758:	e7fd      	b.n	8006756 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800675a:	f000 f87d 	bl	8006858 <vTaskSuspendAll>
=======
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d018      	beq.n	800687c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800684a:	4b14      	ldr	r3, [pc, #80]	@ (800689c <vTaskDelay+0x64>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00b      	beq.n	800686a <vTaskDelay+0x32>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	60bb      	str	r3, [r7, #8]
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop
 8006868:	e7fd      	b.n	8006866 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800686a:	f000 f87d 	bl	8006968 <vTaskSuspendAll>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
<<<<<<< HEAD
 800675e:	2100      	movs	r1, #0
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 feb7 	bl	80074d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006766:	f000 f885 	bl	8006874 <xTaskResumeAll>
 800676a:	60f8      	str	r0, [r7, #12]
=======
 800686e:	2100      	movs	r1, #0
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 feb7 	bl	80075e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006876:	f000 f885 	bl	8006984 <xTaskResumeAll>
 800687a:	60f8      	str	r0, [r7, #12]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< HEAD
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d107      	bne.n	8006782 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006772:	4b07      	ldr	r3, [pc, #28]	@ (8006790 <vTaskDelay+0x68>)
 8006774:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	f3bf 8f6f 	isb	sy
=======
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d107      	bne.n	8006892 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006882:	4b07      	ldr	r3, [pc, #28]	@ (80068a0 <vTaskDelay+0x68>)
 8006884:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006888:	601a      	str	r2, [r3, #0]
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	f3bf 8f6f 	isb	sy
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 8006782:	bf00      	nop
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	200004f4 	.word	0x200004f4
 8006790:	e000ed04 	.word	0xe000ed04

08006794 <vTaskStartScheduler>:
=======
 8006892:	bf00      	nop
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	200004fc 	.word	0x200004fc
 80068a0:	e000ed04 	.word	0xe000ed04

080068a4 <vTaskStartScheduler>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< HEAD
 8006794:	b580      	push	{r7, lr}
 8006796:	b08a      	sub	sp, #40	@ 0x28
 8006798:	af04      	add	r7, sp, #16
=======
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b08a      	sub	sp, #40	@ 0x28
 80068a8:	af04      	add	r7, sp, #16
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
<<<<<<< HEAD
 800679a:	2300      	movs	r3, #0
 800679c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800679e:	2300      	movs	r3, #0
 80067a0:	607b      	str	r3, [r7, #4]
=======
 80068aa:	2300      	movs	r3, #0
 80068ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80068ae:	2300      	movs	r3, #0
 80068b0:	607b      	str	r3, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
<<<<<<< HEAD
 80067a2:	463a      	mov	r2, r7
 80067a4:	1d39      	adds	r1, r7, #4
 80067a6:	f107 0308 	add.w	r3, r7, #8
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fa f830 	bl	8000810 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067b0:	6839      	ldr	r1, [r7, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	9202      	str	r2, [sp, #8]
 80067b8:	9301      	str	r3, [sp, #4]
 80067ba:	2300      	movs	r3, #0
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	2300      	movs	r3, #0
 80067c0:	460a      	mov	r2, r1
 80067c2:	491f      	ldr	r1, [pc, #124]	@ (8006840 <vTaskStartScheduler+0xac>)
 80067c4:	481f      	ldr	r0, [pc, #124]	@ (8006844 <vTaskStartScheduler+0xb0>)
 80067c6:	f7ff fe17 	bl	80063f8 <xTaskCreateStatic>
 80067ca:	4603      	mov	r3, r0
 80067cc:	4a1e      	ldr	r2, [pc, #120]	@ (8006848 <vTaskStartScheduler+0xb4>)
 80067ce:	6013      	str	r3, [r2, #0]
=======
 80068b2:	463a      	mov	r2, r7
 80068b4:	1d39      	adds	r1, r7, #4
 80068b6:	f107 0308 	add.w	r3, r7, #8
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7f9 ffa8 	bl	8000810 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068c0:	6839      	ldr	r1, [r7, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	9202      	str	r2, [sp, #8]
 80068c8:	9301      	str	r3, [sp, #4]
 80068ca:	2300      	movs	r3, #0
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	2300      	movs	r3, #0
 80068d0:	460a      	mov	r2, r1
 80068d2:	491f      	ldr	r1, [pc, #124]	@ (8006950 <vTaskStartScheduler+0xac>)
 80068d4:	481f      	ldr	r0, [pc, #124]	@ (8006954 <vTaskStartScheduler+0xb0>)
 80068d6:	f7ff fe17 	bl	8006508 <xTaskCreateStatic>
 80068da:	4603      	mov	r3, r0
 80068dc:	4a1e      	ldr	r2, [pc, #120]	@ (8006958 <vTaskStartScheduler+0xb4>)
 80068de:	6013      	str	r3, [r2, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
<<<<<<< HEAD
 80067d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006848 <vTaskStartScheduler+0xb4>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80067d8:	2301      	movs	r3, #1
 80067da:	617b      	str	r3, [r7, #20]
 80067dc:	e001      	b.n	80067e2 <vTaskStartScheduler+0x4e>
=======
 80068e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006958 <vTaskStartScheduler+0xb4>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068e8:	2301      	movs	r3, #1
 80068ea:	617b      	str	r3, [r7, #20]
 80068ec:	e001      	b.n	80068f2 <vTaskStartScheduler+0x4e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< HEAD
 80067de:	2300      	movs	r3, #0
 80067e0:	617b      	str	r3, [r7, #20]
=======
 80068ee:	2300      	movs	r3, #0
 80068f0:	617b      	str	r3, [r7, #20]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< HEAD
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d116      	bne.n	8006816 <vTaskStartScheduler+0x82>
	__asm volatile
 80067e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	613b      	str	r3, [r7, #16]
}
 80067fa:	bf00      	nop
=======
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d116      	bne.n	8006926 <vTaskStartScheduler+0x82>
	__asm volatile
 80068f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fc:	f383 8811 	msr	BASEPRI, r3
 8006900:	f3bf 8f6f 	isb	sy
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	613b      	str	r3, [r7, #16]
}
 800690a:	bf00      	nop
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 80067fc:	4b13      	ldr	r3, [pc, #76]	@ (800684c <vTaskStartScheduler+0xb8>)
 80067fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006802:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006804:	4b12      	ldr	r3, [pc, #72]	@ (8006850 <vTaskStartScheduler+0xbc>)
 8006806:	2201      	movs	r2, #1
 8006808:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800680a:	4b12      	ldr	r3, [pc, #72]	@ (8006854 <vTaskStartScheduler+0xc0>)
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]
=======
 800690c:	4b13      	ldr	r3, [pc, #76]	@ (800695c <vTaskStartScheduler+0xb8>)
 800690e:	f04f 32ff 	mov.w	r2, #4294967295
 8006912:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006914:	4b12      	ldr	r3, [pc, #72]	@ (8006960 <vTaskStartScheduler+0xbc>)
 8006916:	2201      	movs	r2, #1
 8006918:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800691a:	4b12      	ldr	r3, [pc, #72]	@ (8006964 <vTaskStartScheduler+0xc0>)
 800691c:	2200      	movs	r2, #0
 800691e:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< HEAD
 8006810:	f000 ff56 	bl	80076c0 <xPortStartScheduler>
=======
 8006920:	f000 ff56 	bl	80077d0 <xPortStartScheduler>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
<<<<<<< HEAD
 8006814:	e00f      	b.n	8006836 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681c:	d10b      	bne.n	8006836 <vTaskStartScheduler+0xa2>
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	60fb      	str	r3, [r7, #12]
}
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	e7fd      	b.n	8006832 <vTaskStartScheduler+0x9e>
}
 8006836:	bf00      	nop
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	08008984 	.word	0x08008984
 8006844:	08006dfd 	.word	0x08006dfd
 8006848:	200004f0 	.word	0x200004f0
 800684c:	200004ec 	.word	0x200004ec
 8006850:	200004d8 	.word	0x200004d8
 8006854:	200004d0 	.word	0x200004d0

08006858 <vTaskSuspendAll>:
=======
 8006924:	e00f      	b.n	8006946 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692c:	d10b      	bne.n	8006946 <vTaskStartScheduler+0xa2>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	60fb      	str	r3, [r7, #12]
}
 8006940:	bf00      	nop
 8006942:	bf00      	nop
 8006944:	e7fd      	b.n	8006942 <vTaskStartScheduler+0x9e>
}
 8006946:	bf00      	nop
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	08008ac4 	.word	0x08008ac4
 8006954:	08006f0d 	.word	0x08006f0d
 8006958:	200004f8 	.word	0x200004f8
 800695c:	200004f4 	.word	0x200004f4
 8006960:	200004e0 	.word	0x200004e0
 8006964:	200004d8 	.word	0x200004d8

08006968 <vTaskSuspendAll>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
<<<<<<< HEAD
 8006858:	b480      	push	{r7}
 800685a:	af00      	add	r7, sp, #0
=======
 8006968:	b480      	push	{r7}
 800696a:	af00      	add	r7, sp, #0
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
<<<<<<< HEAD
 800685c:	4b04      	ldr	r3, [pc, #16]	@ (8006870 <vTaskSuspendAll+0x18>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3301      	adds	r3, #1
 8006862:	4a03      	ldr	r2, [pc, #12]	@ (8006870 <vTaskSuspendAll+0x18>)
 8006864:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006866:	bf00      	nop
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	200004f4 	.word	0x200004f4

08006874 <xTaskResumeAll>:
=======
 800696c:	4b04      	ldr	r3, [pc, #16]	@ (8006980 <vTaskSuspendAll+0x18>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3301      	adds	r3, #1
 8006972:	4a03      	ldr	r2, [pc, #12]	@ (8006980 <vTaskSuspendAll+0x18>)
 8006974:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006976:	bf00      	nop
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	200004fc 	.word	0x200004fc

08006984 <xTaskResumeAll>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< HEAD
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800687e:	2300      	movs	r3, #0
 8006880:	60bb      	str	r3, [r7, #8]
=======
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800698a:	2300      	movs	r3, #0
 800698c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800698e:	2300      	movs	r3, #0
 8006990:	60bb      	str	r3, [r7, #8]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< HEAD
 8006882:	4b42      	ldr	r3, [pc, #264]	@ (800698c <xTaskResumeAll+0x118>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10b      	bne.n	80068a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	603b      	str	r3, [r7, #0]
}
 800689c:	bf00      	nop
 800689e:	bf00      	nop
 80068a0:	e7fd      	b.n	800689e <xTaskResumeAll+0x2a>
=======
 8006992:	4b42      	ldr	r3, [pc, #264]	@ (8006a9c <xTaskResumeAll+0x118>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10b      	bne.n	80069b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	603b      	str	r3, [r7, #0]
}
 80069ac:	bf00      	nop
 80069ae:	bf00      	nop
 80069b0:	e7fd      	b.n	80069ae <xTaskResumeAll+0x2a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 80068a2:	f000 ffb1 	bl	8007808 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068a6:	4b39      	ldr	r3, [pc, #228]	@ (800698c <xTaskResumeAll+0x118>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3b01      	subs	r3, #1
 80068ac:	4a37      	ldr	r2, [pc, #220]	@ (800698c <xTaskResumeAll+0x118>)
 80068ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068b0:	4b36      	ldr	r3, [pc, #216]	@ (800698c <xTaskResumeAll+0x118>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d161      	bne.n	800697c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80068b8:	4b35      	ldr	r3, [pc, #212]	@ (8006990 <xTaskResumeAll+0x11c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d05d      	beq.n	800697c <xTaskResumeAll+0x108>
=======
 80069b2:	f000 ffb1 	bl	8007918 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069b6:	4b39      	ldr	r3, [pc, #228]	@ (8006a9c <xTaskResumeAll+0x118>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	4a37      	ldr	r2, [pc, #220]	@ (8006a9c <xTaskResumeAll+0x118>)
 80069be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069c0:	4b36      	ldr	r3, [pc, #216]	@ (8006a9c <xTaskResumeAll+0x118>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d161      	bne.n	8006a8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069c8:	4b35      	ldr	r3, [pc, #212]	@ (8006aa0 <xTaskResumeAll+0x11c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d05d      	beq.n	8006a8c <xTaskResumeAll+0x108>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< HEAD
 80068c0:	e02e      	b.n	8006920 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068c2:	4b34      	ldr	r3, [pc, #208]	@ (8006994 <xTaskResumeAll+0x120>)
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3318      	adds	r3, #24
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7ff f88b 	bl	80059ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	3304      	adds	r3, #4
 80068d8:	4618      	mov	r0, r3
 80068da:	f7ff f886 	bl	80059ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e2:	2201      	movs	r2, #1
 80068e4:	409a      	lsls	r2, r3
 80068e6:	4b2c      	ldr	r3, [pc, #176]	@ (8006998 <xTaskResumeAll+0x124>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	4a2a      	ldr	r2, [pc, #168]	@ (8006998 <xTaskResumeAll+0x124>)
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068f4:	4613      	mov	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4a27      	ldr	r2, [pc, #156]	@ (800699c <xTaskResumeAll+0x128>)
 80068fe:	441a      	add	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	3304      	adds	r3, #4
 8006904:	4619      	mov	r1, r3
 8006906:	4610      	mov	r0, r2
 8006908:	f7ff f812 	bl	8005930 <vListInsertEnd>
=======
 80069d0:	e02e      	b.n	8006a30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d2:	4b34      	ldr	r3, [pc, #208]	@ (8006aa4 <xTaskResumeAll+0x120>)
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3318      	adds	r3, #24
 80069de:	4618      	mov	r0, r3
 80069e0:	f7ff f88b 	bl	8005afa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	3304      	adds	r3, #4
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7ff f886 	bl	8005afa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f2:	2201      	movs	r2, #1
 80069f4:	409a      	lsls	r2, r3
 80069f6:	4b2c      	ldr	r3, [pc, #176]	@ (8006aa8 <xTaskResumeAll+0x124>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	4a2a      	ldr	r2, [pc, #168]	@ (8006aa8 <xTaskResumeAll+0x124>)
 80069fe:	6013      	str	r3, [r2, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a04:	4613      	mov	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4a27      	ldr	r2, [pc, #156]	@ (8006aac <xTaskResumeAll+0x128>)
 8006a0e:	441a      	add	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	3304      	adds	r3, #4
 8006a14:	4619      	mov	r1, r3
 8006a16:	4610      	mov	r0, r2
 8006a18:	f7ff f812 	bl	8005a40 <vListInsertEnd>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006910:	4b23      	ldr	r3, [pc, #140]	@ (80069a0 <xTaskResumeAll+0x12c>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006916:	429a      	cmp	r2, r3
 8006918:	d302      	bcc.n	8006920 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800691a:	4b22      	ldr	r3, [pc, #136]	@ (80069a4 <xTaskResumeAll+0x130>)
 800691c:	2201      	movs	r2, #1
 800691e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006920:	4b1c      	ldr	r3, [pc, #112]	@ (8006994 <xTaskResumeAll+0x120>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1cc      	bne.n	80068c2 <xTaskResumeAll+0x4e>
=======
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a20:	4b23      	ldr	r3, [pc, #140]	@ (8006ab0 <xTaskResumeAll+0x12c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d302      	bcc.n	8006a30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006a2a:	4b22      	ldr	r3, [pc, #136]	@ (8006ab4 <xTaskResumeAll+0x130>)
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a30:	4b1c      	ldr	r3, [pc, #112]	@ (8006aa4 <xTaskResumeAll+0x120>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1cc      	bne.n	80069d2 <xTaskResumeAll+0x4e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
<<<<<<< HEAD
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <xTaskResumeAll+0xbe>
=======
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <xTaskResumeAll+0xbe>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
<<<<<<< HEAD
 800692e:	f000 fb1b 	bl	8006f68 <prvResetNextTaskUnblockTime>
=======
 8006a3e:	f000 fb1b 	bl	8007078 <prvResetNextTaskUnblockTime>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
<<<<<<< HEAD
 8006932:	4b1d      	ldr	r3, [pc, #116]	@ (80069a8 <xTaskResumeAll+0x134>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d010      	beq.n	8006960 <xTaskResumeAll+0xec>
=======
 8006a42:	4b1d      	ldr	r3, [pc, #116]	@ (8006ab8 <xTaskResumeAll+0x134>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d010      	beq.n	8006a70 <xTaskResumeAll+0xec>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 800693e:	f000 f837 	bl	80069b0 <xTaskIncrementTick>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006948:	4b16      	ldr	r3, [pc, #88]	@ (80069a4 <xTaskResumeAll+0x130>)
 800694a:	2201      	movs	r2, #1
 800694c:	601a      	str	r2, [r3, #0]
=======
 8006a4e:	f000 f837 	bl	8006ac0 <xTaskIncrementTick>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006a58:	4b16      	ldr	r3, [pc, #88]	@ (8006ab4 <xTaskResumeAll+0x130>)
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
<<<<<<< HEAD
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	3b01      	subs	r3, #1
 8006952:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1f1      	bne.n	800693e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800695a:	4b13      	ldr	r3, [pc, #76]	@ (80069a8 <xTaskResumeAll+0x134>)
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]
=======
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3b01      	subs	r3, #1
 8006a62:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1f1      	bne.n	8006a4e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006a6a:	4b13      	ldr	r3, [pc, #76]	@ (8006ab8 <xTaskResumeAll+0x134>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 8006960:	4b10      	ldr	r3, [pc, #64]	@ (80069a4 <xTaskResumeAll+0x130>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d009      	beq.n	800697c <xTaskResumeAll+0x108>
=======
 8006a70:	4b10      	ldr	r3, [pc, #64]	@ (8006ab4 <xTaskResumeAll+0x130>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d009      	beq.n	8006a8c <xTaskResumeAll+0x108>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< HEAD
 8006968:	2301      	movs	r3, #1
 800696a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800696c:	4b0f      	ldr	r3, [pc, #60]	@ (80069ac <xTaskResumeAll+0x138>)
 800696e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	f3bf 8f6f 	isb	sy
=======
 8006a78:	2301      	movs	r3, #1
 8006a7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8006abc <xTaskResumeAll+0x138>)
 8006a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	f3bf 8f6f 	isb	sy
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 800697c:	f000 ff76 	bl	800786c <vPortExitCritical>

	return xAlreadyYielded;
 8006980:	68bb      	ldr	r3, [r7, #8]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	200004f4 	.word	0x200004f4
 8006990:	200004cc 	.word	0x200004cc
 8006994:	2000048c 	.word	0x2000048c
 8006998:	200004d4 	.word	0x200004d4
 800699c:	200003d0 	.word	0x200003d0
 80069a0:	200003cc 	.word	0x200003cc
 80069a4:	200004e0 	.word	0x200004e0
 80069a8:	200004dc 	.word	0x200004dc
 80069ac:	e000ed04 	.word	0xe000ed04

080069b0 <xTaskIncrementTick>:
=======
 8006a8c:	f000 ff76 	bl	800797c <vPortExitCritical>

	return xAlreadyYielded;
 8006a90:	68bb      	ldr	r3, [r7, #8]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	200004fc 	.word	0x200004fc
 8006aa0:	200004d4 	.word	0x200004d4
 8006aa4:	20000494 	.word	0x20000494
 8006aa8:	200004dc 	.word	0x200004dc
 8006aac:	200003d8 	.word	0x200003d8
 8006ab0:	200003d4 	.word	0x200003d4
 8006ab4:	200004e8 	.word	0x200004e8
 8006ab8:	200004e4 	.word	0x200004e4
 8006abc:	e000ed04 	.word	0xe000ed04

08006ac0 <xTaskIncrementTick>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< HEAD
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80069b6:	2300      	movs	r3, #0
 80069b8:	617b      	str	r3, [r7, #20]
=======
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	617b      	str	r3, [r7, #20]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 80069ba:	4b4f      	ldr	r3, [pc, #316]	@ (8006af8 <xTaskIncrementTick+0x148>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f040 8089 	bne.w	8006ad6 <xTaskIncrementTick+0x126>
=======
 8006aca:	4b4f      	ldr	r3, [pc, #316]	@ (8006c08 <xTaskIncrementTick+0x148>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f040 8089 	bne.w	8006be6 <xTaskIncrementTick+0x126>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
<<<<<<< HEAD
 80069c4:	4b4d      	ldr	r3, [pc, #308]	@ (8006afc <xTaskIncrementTick+0x14c>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3301      	adds	r3, #1
 80069ca:	613b      	str	r3, [r7, #16]
=======
 8006ad4:	4b4d      	ldr	r3, [pc, #308]	@ (8006c0c <xTaskIncrementTick+0x14c>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	613b      	str	r3, [r7, #16]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
<<<<<<< HEAD
 80069cc:	4a4b      	ldr	r2, [pc, #300]	@ (8006afc <xTaskIncrementTick+0x14c>)
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d121      	bne.n	8006a1c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80069d8:	4b49      	ldr	r3, [pc, #292]	@ (8006b00 <xTaskIncrementTick+0x150>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00b      	beq.n	80069fa <xTaskIncrementTick+0x4a>
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	603b      	str	r3, [r7, #0]
}
 80069f4:	bf00      	nop
 80069f6:	bf00      	nop
 80069f8:	e7fd      	b.n	80069f6 <xTaskIncrementTick+0x46>
 80069fa:	4b41      	ldr	r3, [pc, #260]	@ (8006b00 <xTaskIncrementTick+0x150>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	4b40      	ldr	r3, [pc, #256]	@ (8006b04 <xTaskIncrementTick+0x154>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a3e      	ldr	r2, [pc, #248]	@ (8006b00 <xTaskIncrementTick+0x150>)
 8006a06:	6013      	str	r3, [r2, #0]
 8006a08:	4a3e      	ldr	r2, [pc, #248]	@ (8006b04 <xTaskIncrementTick+0x154>)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6013      	str	r3, [r2, #0]
 8006a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8006b08 <xTaskIncrementTick+0x158>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3301      	adds	r3, #1
 8006a14:	4a3c      	ldr	r2, [pc, #240]	@ (8006b08 <xTaskIncrementTick+0x158>)
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	f000 faa6 	bl	8006f68 <prvResetNextTaskUnblockTime>
=======
 8006adc:	4a4b      	ldr	r2, [pc, #300]	@ (8006c0c <xTaskIncrementTick+0x14c>)
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d121      	bne.n	8006b2c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ae8:	4b49      	ldr	r3, [pc, #292]	@ (8006c10 <xTaskIncrementTick+0x150>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00b      	beq.n	8006b0a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	603b      	str	r3, [r7, #0]
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop
 8006b08:	e7fd      	b.n	8006b06 <xTaskIncrementTick+0x46>
 8006b0a:	4b41      	ldr	r3, [pc, #260]	@ (8006c10 <xTaskIncrementTick+0x150>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	4b40      	ldr	r3, [pc, #256]	@ (8006c14 <xTaskIncrementTick+0x154>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a3e      	ldr	r2, [pc, #248]	@ (8006c10 <xTaskIncrementTick+0x150>)
 8006b16:	6013      	str	r3, [r2, #0]
 8006b18:	4a3e      	ldr	r2, [pc, #248]	@ (8006c14 <xTaskIncrementTick+0x154>)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6013      	str	r3, [r2, #0]
 8006b1e:	4b3e      	ldr	r3, [pc, #248]	@ (8006c18 <xTaskIncrementTick+0x158>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3301      	adds	r3, #1
 8006b24:	4a3c      	ldr	r2, [pc, #240]	@ (8006c18 <xTaskIncrementTick+0x158>)
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	f000 faa6 	bl	8007078 <prvResetNextTaskUnblockTime>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< HEAD
 8006a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8006b0c <xTaskIncrementTick+0x15c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d348      	bcc.n	8006ab8 <xTaskIncrementTick+0x108>
=======
 8006b2c:	4b3b      	ldr	r3, [pc, #236]	@ (8006c1c <xTaskIncrementTick+0x15c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d348      	bcc.n	8006bc8 <xTaskIncrementTick+0x108>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< HEAD
 8006a26:	4b36      	ldr	r3, [pc, #216]	@ (8006b00 <xTaskIncrementTick+0x150>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d104      	bne.n	8006a3a <xTaskIncrementTick+0x8a>
=======
 8006b36:	4b36      	ldr	r3, [pc, #216]	@ (8006c10 <xTaskIncrementTick+0x150>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d104      	bne.n	8006b4a <xTaskIncrementTick+0x8a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8006a30:	4b36      	ldr	r3, [pc, #216]	@ (8006b0c <xTaskIncrementTick+0x15c>)
 8006a32:	f04f 32ff 	mov.w	r2, #4294967295
 8006a36:	601a      	str	r2, [r3, #0]
					break;
 8006a38:	e03e      	b.n	8006ab8 <xTaskIncrementTick+0x108>
=======
 8006b40:	4b36      	ldr	r3, [pc, #216]	@ (8006c1c <xTaskIncrementTick+0x15c>)
 8006b42:	f04f 32ff 	mov.w	r2, #4294967295
 8006b46:	601a      	str	r2, [r3, #0]
					break;
 8006b48:	e03e      	b.n	8006bc8 <xTaskIncrementTick+0x108>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 8006a3a:	4b31      	ldr	r3, [pc, #196]	@ (8006b00 <xTaskIncrementTick+0x150>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d203      	bcs.n	8006a5a <xTaskIncrementTick+0xaa>
=======
 8006b4a:	4b31      	ldr	r3, [pc, #196]	@ (8006c10 <xTaskIncrementTick+0x150>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d203      	bcs.n	8006b6a <xTaskIncrementTick+0xaa>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
<<<<<<< HEAD
 8006a52:	4a2e      	ldr	r2, [pc, #184]	@ (8006b0c <xTaskIncrementTick+0x15c>)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a58:	e02e      	b.n	8006ab8 <xTaskIncrementTick+0x108>
=======
 8006b62:	4a2e      	ldr	r2, [pc, #184]	@ (8006c1c <xTaskIncrementTick+0x15c>)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b68:	e02e      	b.n	8006bc8 <xTaskIncrementTick+0x108>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fe ffc3 	bl	80059ea <uxListRemove>
=======
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	3304      	adds	r3, #4
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe ffc3 	bl	8005afa <uxListRemove>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< HEAD
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d004      	beq.n	8006a76 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	3318      	adds	r3, #24
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fe ffba 	bl	80059ea <uxListRemove>
=======
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d004      	beq.n	8006b86 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	3318      	adds	r3, #24
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7fe ffba 	bl	8005afa <uxListRemove>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	409a      	lsls	r2, r3
 8006a7e:	4b24      	ldr	r3, [pc, #144]	@ (8006b10 <xTaskIncrementTick+0x160>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	4a22      	ldr	r2, [pc, #136]	@ (8006b10 <xTaskIncrementTick+0x160>)
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4a1f      	ldr	r2, [pc, #124]	@ (8006b14 <xTaskIncrementTick+0x164>)
 8006a96:	441a      	add	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	4610      	mov	r0, r2
 8006aa0:	f7fe ff46 	bl	8005930 <vListInsertEnd>
=======
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	409a      	lsls	r2, r3
 8006b8e:	4b24      	ldr	r3, [pc, #144]	@ (8006c20 <xTaskIncrementTick+0x160>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	4a22      	ldr	r2, [pc, #136]	@ (8006c20 <xTaskIncrementTick+0x160>)
 8006b96:	6013      	str	r3, [r2, #0]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8006c24 <xTaskIncrementTick+0x164>)
 8006ba6:	441a      	add	r2, r3
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	3304      	adds	r3, #4
 8006bac:	4619      	mov	r1, r3
 8006bae:	4610      	mov	r0, r2
 8006bb0:	f7fe ff46 	bl	8005a40 <vListInsertEnd>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8006b18 <xTaskIncrementTick+0x168>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d3b9      	bcc.n	8006a26 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ab6:	e7b6      	b.n	8006a26 <xTaskIncrementTick+0x76>
=======
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8006c28 <xTaskIncrementTick+0x168>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d3b9      	bcc.n	8006b36 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bc6:	e7b6      	b.n	8006b36 <xTaskIncrementTick+0x76>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 8006ab8:	4b17      	ldr	r3, [pc, #92]	@ (8006b18 <xTaskIncrementTick+0x168>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006abe:	4915      	ldr	r1, [pc, #84]	@ (8006b14 <xTaskIncrementTick+0x164>)
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	440b      	add	r3, r1
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d907      	bls.n	8006ae0 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	617b      	str	r3, [r7, #20]
 8006ad4:	e004      	b.n	8006ae0 <xTaskIncrementTick+0x130>
=======
 8006bc8:	4b17      	ldr	r3, [pc, #92]	@ (8006c28 <xTaskIncrementTick+0x168>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bce:	4915      	ldr	r1, [pc, #84]	@ (8006c24 <xTaskIncrementTick+0x164>)
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	440b      	add	r3, r1
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d907      	bls.n	8006bf0 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8006be0:	2301      	movs	r3, #1
 8006be2:	617b      	str	r3, [r7, #20]
 8006be4:	e004      	b.n	8006bf0 <xTaskIncrementTick+0x130>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
<<<<<<< HEAD
 8006ad6:	4b11      	ldr	r3, [pc, #68]	@ (8006b1c <xTaskIncrementTick+0x16c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3301      	adds	r3, #1
 8006adc:	4a0f      	ldr	r2, [pc, #60]	@ (8006b1c <xTaskIncrementTick+0x16c>)
 8006ade:	6013      	str	r3, [r2, #0]
=======
 8006be6:	4b11      	ldr	r3, [pc, #68]	@ (8006c2c <xTaskIncrementTick+0x16c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3301      	adds	r3, #1
 8006bec:	4a0f      	ldr	r2, [pc, #60]	@ (8006c2c <xTaskIncrementTick+0x16c>)
 8006bee:	6013      	str	r3, [r2, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 8006ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8006b20 <xTaskIncrementTick+0x170>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	617b      	str	r3, [r7, #20]
=======
 8006bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8006c30 <xTaskIncrementTick+0x170>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	617b      	str	r3, [r7, #20]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
<<<<<<< HEAD
 8006aec:	697b      	ldr	r3, [r7, #20]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3718      	adds	r7, #24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	200004f4 	.word	0x200004f4
 8006afc:	200004d0 	.word	0x200004d0
 8006b00:	20000484 	.word	0x20000484
 8006b04:	20000488 	.word	0x20000488
 8006b08:	200004e4 	.word	0x200004e4
 8006b0c:	200004ec 	.word	0x200004ec
 8006b10:	200004d4 	.word	0x200004d4
 8006b14:	200003d0 	.word	0x200003d0
 8006b18:	200003cc 	.word	0x200003cc
 8006b1c:	200004dc 	.word	0x200004dc
 8006b20:	200004e0 	.word	0x200004e0

08006b24 <vTaskSwitchContext>:
=======
 8006bfc:	697b      	ldr	r3, [r7, #20]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3718      	adds	r7, #24
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	200004fc 	.word	0x200004fc
 8006c0c:	200004d8 	.word	0x200004d8
 8006c10:	2000048c 	.word	0x2000048c
 8006c14:	20000490 	.word	0x20000490
 8006c18:	200004ec 	.word	0x200004ec
 8006c1c:	200004f4 	.word	0x200004f4
 8006c20:	200004dc 	.word	0x200004dc
 8006c24:	200003d8 	.word	0x200003d8
 8006c28:	200003d4 	.word	0x200003d4
 8006c2c:	200004e4 	.word	0x200004e4
 8006c30:	200004e8 	.word	0x200004e8

08006c34 <vTaskSwitchContext>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< HEAD
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b2a:	4b27      	ldr	r3, [pc, #156]	@ (8006bc8 <vTaskSwitchContext+0xa4>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <vTaskSwitchContext+0x16>
=======
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c3a:	4b27      	ldr	r3, [pc, #156]	@ (8006cd8 <vTaskSwitchContext+0xa4>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <vTaskSwitchContext+0x16>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 8006b32:	4b26      	ldr	r3, [pc, #152]	@ (8006bcc <vTaskSwitchContext+0xa8>)
 8006b34:	2201      	movs	r2, #1
 8006b36:	601a      	str	r2, [r3, #0]
=======
 8006c42:	4b26      	ldr	r3, [pc, #152]	@ (8006cdc <vTaskSwitchContext+0xa8>)
 8006c44:	2201      	movs	r2, #1
 8006c46:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< HEAD
 8006b38:	e040      	b.n	8006bbc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006b3a:	4b24      	ldr	r3, [pc, #144]	@ (8006bcc <vTaskSwitchContext+0xa8>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b40:	4b23      	ldr	r3, [pc, #140]	@ (8006bd0 <vTaskSwitchContext+0xac>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	fab3 f383 	clz	r3, r3
 8006b4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006b4e:	7afb      	ldrb	r3, [r7, #11]
 8006b50:	f1c3 031f 	rsb	r3, r3, #31
 8006b54:	617b      	str	r3, [r7, #20]
 8006b56:	491f      	ldr	r1, [pc, #124]	@ (8006bd4 <vTaskSwitchContext+0xb0>)
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	440b      	add	r3, r1
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10b      	bne.n	8006b82 <vTaskSwitchContext+0x5e>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	607b      	str	r3, [r7, #4]
}
 8006b7c:	bf00      	nop
 8006b7e:	bf00      	nop
 8006b80:	e7fd      	b.n	8006b7e <vTaskSwitchContext+0x5a>
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	4613      	mov	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4a11      	ldr	r2, [pc, #68]	@ (8006bd4 <vTaskSwitchContext+0xb0>)
 8006b8e:	4413      	add	r3, r2
 8006b90:	613b      	str	r3, [r7, #16]
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	605a      	str	r2, [r3, #4]
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d104      	bne.n	8006bb2 <vTaskSwitchContext+0x8e>
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	605a      	str	r2, [r3, #4]
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	4a07      	ldr	r2, [pc, #28]	@ (8006bd8 <vTaskSwitchContext+0xb4>)
 8006bba:	6013      	str	r3, [r2, #0]
}
 8006bbc:	bf00      	nop
 8006bbe:	371c      	adds	r7, #28
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	200004f4 	.word	0x200004f4
 8006bcc:	200004e0 	.word	0x200004e0
 8006bd0:	200004d4 	.word	0x200004d4
 8006bd4:	200003d0 	.word	0x200003d0
 8006bd8:	200003cc 	.word	0x200003cc

08006bdc <vTaskPlaceOnEventList>:
=======
 8006c48:	e040      	b.n	8006ccc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006c4a:	4b24      	ldr	r3, [pc, #144]	@ (8006cdc <vTaskSwitchContext+0xa8>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c50:	4b23      	ldr	r3, [pc, #140]	@ (8006ce0 <vTaskSwitchContext+0xac>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	fab3 f383 	clz	r3, r3
 8006c5c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006c5e:	7afb      	ldrb	r3, [r7, #11]
 8006c60:	f1c3 031f 	rsb	r3, r3, #31
 8006c64:	617b      	str	r3, [r7, #20]
 8006c66:	491f      	ldr	r1, [pc, #124]	@ (8006ce4 <vTaskSwitchContext+0xb0>)
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	440b      	add	r3, r1
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10b      	bne.n	8006c92 <vTaskSwitchContext+0x5e>
	__asm volatile
 8006c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c7e:	f383 8811 	msr	BASEPRI, r3
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	607b      	str	r3, [r7, #4]
}
 8006c8c:	bf00      	nop
 8006c8e:	bf00      	nop
 8006c90:	e7fd      	b.n	8006c8e <vTaskSwitchContext+0x5a>
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	4613      	mov	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4a11      	ldr	r2, [pc, #68]	@ (8006ce4 <vTaskSwitchContext+0xb0>)
 8006c9e:	4413      	add	r3, r2
 8006ca0:	613b      	str	r3, [r7, #16]
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	605a      	str	r2, [r3, #4]
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	3308      	adds	r3, #8
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d104      	bne.n	8006cc2 <vTaskSwitchContext+0x8e>
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	605a      	str	r2, [r3, #4]
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	4a07      	ldr	r2, [pc, #28]	@ (8006ce8 <vTaskSwitchContext+0xb4>)
 8006cca:	6013      	str	r3, [r2, #0]
}
 8006ccc:	bf00      	nop
 8006cce:	371c      	adds	r7, #28
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	200004fc 	.word	0x200004fc
 8006cdc:	200004e8 	.word	0x200004e8
 8006ce0:	200004dc 	.word	0x200004dc
 8006ce4:	200003d8 	.word	0x200003d8
 8006ce8:	200003d4 	.word	0x200003d4

08006cec <vTaskPlaceOnEventList>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10b      	bne.n	8006c04 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf0:	f383 8811 	msr	BASEPRI, r3
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	60fb      	str	r3, [r7, #12]
}
 8006bfe:	bf00      	nop
 8006c00:	bf00      	nop
 8006c02:	e7fd      	b.n	8006c00 <vTaskPlaceOnEventList+0x24>
=======
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10b      	bne.n	8006d14 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	60fb      	str	r3, [r7, #12]
}
 8006d0e:	bf00      	nop
 8006d10:	bf00      	nop
 8006d12:	e7fd      	b.n	8006d10 <vTaskPlaceOnEventList+0x24>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 8006c04:	4b07      	ldr	r3, [pc, #28]	@ (8006c24 <vTaskPlaceOnEventList+0x48>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3318      	adds	r3, #24
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7fe feb3 	bl	8005978 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c12:	2101      	movs	r1, #1
 8006c14:	6838      	ldr	r0, [r7, #0]
 8006c16:	f000 fc5d 	bl	80074d4 <prvAddCurrentTaskToDelayedList>
}
 8006c1a:	bf00      	nop
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	200003cc 	.word	0x200003cc

08006c28 <xTaskRemoveFromEventList>:
=======
 8006d14:	4b07      	ldr	r3, [pc, #28]	@ (8006d34 <vTaskPlaceOnEventList+0x48>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3318      	adds	r3, #24
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f7fe feb3 	bl	8005a88 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d22:	2101      	movs	r1, #1
 8006d24:	6838      	ldr	r0, [r7, #0]
 8006d26:	f000 fc5d 	bl	80075e4 <prvAddCurrentTaskToDelayedList>
}
 8006d2a:	bf00      	nop
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	200003d4 	.word	0x200003d4

08006d38 <xTaskRemoveFromEventList>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
<<<<<<< HEAD
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
=======
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10b      	bne.n	8006c56 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	60fb      	str	r3, [r7, #12]
}
 8006c50:	bf00      	nop
 8006c52:	bf00      	nop
 8006c54:	e7fd      	b.n	8006c52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	3318      	adds	r3, #24
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7fe fec5 	bl	80059ea <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c60:	4b1d      	ldr	r3, [pc, #116]	@ (8006cd8 <xTaskRemoveFromEventList+0xb0>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d11c      	bne.n	8006ca2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fe febc 	bl	80059ea <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c76:	2201      	movs	r2, #1
 8006c78:	409a      	lsls	r2, r3
 8006c7a:	4b18      	ldr	r3, [pc, #96]	@ (8006cdc <xTaskRemoveFromEventList+0xb4>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	4a16      	ldr	r2, [pc, #88]	@ (8006cdc <xTaskRemoveFromEventList+0xb4>)
 8006c82:	6013      	str	r3, [r2, #0]
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c88:	4613      	mov	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4a13      	ldr	r2, [pc, #76]	@ (8006ce0 <xTaskRemoveFromEventList+0xb8>)
 8006c92:	441a      	add	r2, r3
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	3304      	adds	r3, #4
 8006c98:	4619      	mov	r1, r3
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	f7fe fe48 	bl	8005930 <vListInsertEnd>
 8006ca0:	e005      	b.n	8006cae <xTaskRemoveFromEventList+0x86>
=======
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10b      	bne.n	8006d66 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	60fb      	str	r3, [r7, #12]
}
 8006d60:	bf00      	nop
 8006d62:	bf00      	nop
 8006d64:	e7fd      	b.n	8006d62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	3318      	adds	r3, #24
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fe fec5 	bl	8005afa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d70:	4b1d      	ldr	r3, [pc, #116]	@ (8006de8 <xTaskRemoveFromEventList+0xb0>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d11c      	bne.n	8006db2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7fe febc 	bl	8005afa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d86:	2201      	movs	r2, #1
 8006d88:	409a      	lsls	r2, r3
 8006d8a:	4b18      	ldr	r3, [pc, #96]	@ (8006dec <xTaskRemoveFromEventList+0xb4>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	4a16      	ldr	r2, [pc, #88]	@ (8006dec <xTaskRemoveFromEventList+0xb4>)
 8006d92:	6013      	str	r3, [r2, #0]
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d98:	4613      	mov	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4a13      	ldr	r2, [pc, #76]	@ (8006df0 <xTaskRemoveFromEventList+0xb8>)
 8006da2:	441a      	add	r2, r3
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	3304      	adds	r3, #4
 8006da8:	4619      	mov	r1, r3
 8006daa:	4610      	mov	r0, r2
 8006dac:	f7fe fe48 	bl	8005a40 <vListInsertEnd>
 8006db0:	e005      	b.n	8006dbe <xTaskRemoveFromEventList+0x86>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< HEAD
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	3318      	adds	r3, #24
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	480e      	ldr	r0, [pc, #56]	@ (8006ce4 <xTaskRemoveFromEventList+0xbc>)
 8006caa:	f7fe fe41 	bl	8005930 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce8 <xTaskRemoveFromEventList+0xc0>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d905      	bls.n	8006cc8 <xTaskRemoveFromEventList+0xa0>
=======
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	3318      	adds	r3, #24
 8006db6:	4619      	mov	r1, r3
 8006db8:	480e      	ldr	r0, [pc, #56]	@ (8006df4 <xTaskRemoveFromEventList+0xbc>)
 8006dba:	f7fe fe41 	bl	8005a40 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006df8 <xTaskRemoveFromEventList+0xc0>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d905      	bls.n	8006dd8 <xTaskRemoveFromEventList+0xa0>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
<<<<<<< HEAD
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	617b      	str	r3, [r7, #20]
=======
 8006dcc:	2301      	movs	r3, #1
 8006dce:	617b      	str	r3, [r7, #20]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 8006cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8006cec <xTaskRemoveFromEventList+0xc4>)
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	e001      	b.n	8006ccc <xTaskRemoveFromEventList+0xa4>
=======
 8006dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8006dfc <xTaskRemoveFromEventList+0xc4>)
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	601a      	str	r2, [r3, #0]
 8006dd6:	e001      	b.n	8006ddc <xTaskRemoveFromEventList+0xa4>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	}
	else
	{
		xReturn = pdFALSE;
<<<<<<< HEAD
 8006cc8:	2300      	movs	r3, #0
 8006cca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ccc:	697b      	ldr	r3, [r7, #20]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	200004f4 	.word	0x200004f4
 8006cdc:	200004d4 	.word	0x200004d4
 8006ce0:	200003d0 	.word	0x200003d0
 8006ce4:	2000048c 	.word	0x2000048c
 8006ce8:	200003cc 	.word	0x200003cc
 8006cec:	200004e0 	.word	0x200004e0

08006cf0 <vTaskInternalSetTimeOutState>:
=======
 8006dd8:	2300      	movs	r3, #0
 8006dda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ddc:	697b      	ldr	r3, [r7, #20]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3718      	adds	r7, #24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	200004fc 	.word	0x200004fc
 8006dec:	200004dc 	.word	0x200004dc
 8006df0:	200003d8 	.word	0x200003d8
 8006df4:	20000494 	.word	0x20000494
 8006df8:	200003d4 	.word	0x200003d4
 8006dfc:	200004e8 	.word	0x200004e8

08006e00 <vTaskInternalSetTimeOutState>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
<<<<<<< HEAD
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006cf8:	4b06      	ldr	r3, [pc, #24]	@ (8006d14 <vTaskInternalSetTimeOutState+0x24>)
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d00:	4b05      	ldr	r3, [pc, #20]	@ (8006d18 <vTaskInternalSetTimeOutState+0x28>)
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	605a      	str	r2, [r3, #4]
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr
 8006d14:	200004e4 	.word	0x200004e4
 8006d18:	200004d0 	.word	0x200004d0

08006d1c <xTaskCheckForTimeOut>:
=======
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e08:	4b06      	ldr	r3, [pc, #24]	@ (8006e24 <vTaskInternalSetTimeOutState+0x24>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e10:	4b05      	ldr	r3, [pc, #20]	@ (8006e28 <vTaskInternalSetTimeOutState+0x28>)
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	605a      	str	r2, [r3, #4]
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	200004ec 	.word	0x200004ec
 8006e28:	200004d8 	.word	0x200004d8

08006e2c <xTaskCheckForTimeOut>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
<<<<<<< HEAD
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10b      	bne.n	8006d44 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	613b      	str	r3, [r7, #16]
}
 8006d3e:	bf00      	nop
 8006d40:	bf00      	nop
 8006d42:	e7fd      	b.n	8006d40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10b      	bne.n	8006d62 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	60fb      	str	r3, [r7, #12]
}
 8006d5c:	bf00      	nop
 8006d5e:	bf00      	nop
 8006d60:	e7fd      	b.n	8006d5e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006d62:	f000 fd51 	bl	8007808 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d66:	4b1d      	ldr	r3, [pc, #116]	@ (8006ddc <xTaskCheckForTimeOut+0xc0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	617b      	str	r3, [r7, #20]
=======
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b088      	sub	sp, #32
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10b      	bne.n	8006e54 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	613b      	str	r3, [r7, #16]
}
 8006e4e:	bf00      	nop
 8006e50:	bf00      	nop
 8006e52:	e7fd      	b.n	8006e50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10b      	bne.n	8006e72 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	60fb      	str	r3, [r7, #12]
}
 8006e6c:	bf00      	nop
 8006e6e:	bf00      	nop
 8006e70:	e7fd      	b.n	8006e6e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006e72:	f000 fd51 	bl	8007918 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e76:	4b1d      	ldr	r3, [pc, #116]	@ (8006eec <xTaskCheckForTimeOut+0xc0>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	617b      	str	r3, [r7, #20]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
<<<<<<< HEAD
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7e:	d102      	bne.n	8006d86 <xTaskCheckForTimeOut+0x6a>
=======
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8e:	d102      	bne.n	8006e96 <xTaskCheckForTimeOut+0x6a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
<<<<<<< HEAD
 8006d80:	2300      	movs	r3, #0
 8006d82:	61fb      	str	r3, [r7, #28]
 8006d84:	e023      	b.n	8006dce <xTaskCheckForTimeOut+0xb2>
=======
 8006e90:	2300      	movs	r3, #0
 8006e92:	61fb      	str	r3, [r7, #28]
 8006e94:	e023      	b.n	8006ede <xTaskCheckForTimeOut+0xb2>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
<<<<<<< HEAD
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	4b15      	ldr	r3, [pc, #84]	@ (8006de0 <xTaskCheckForTimeOut+0xc4>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d007      	beq.n	8006da2 <xTaskCheckForTimeOut+0x86>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d302      	bcc.n	8006da2 <xTaskCheckForTimeOut+0x86>
=======
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	4b15      	ldr	r3, [pc, #84]	@ (8006ef0 <xTaskCheckForTimeOut+0xc4>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d007      	beq.n	8006eb2 <xTaskCheckForTimeOut+0x86>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d302      	bcc.n	8006eb2 <xTaskCheckForTimeOut+0x86>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
<<<<<<< HEAD
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	61fb      	str	r3, [r7, #28]
 8006da0:	e015      	b.n	8006dce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d20b      	bcs.n	8006dc4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	1ad2      	subs	r2, r2, r3
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff ff99 	bl	8006cf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	61fb      	str	r3, [r7, #28]
 8006dc2:	e004      	b.n	8006dce <xTaskCheckForTimeOut+0xb2>
=======
 8006eac:	2301      	movs	r3, #1
 8006eae:	61fb      	str	r3, [r7, #28]
 8006eb0:	e015      	b.n	8006ede <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d20b      	bcs.n	8006ed4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	1ad2      	subs	r2, r2, r3
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7ff ff99 	bl	8006e00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	61fb      	str	r3, [r7, #28]
 8006ed2:	e004      	b.n	8006ede <xTaskCheckForTimeOut+0xb2>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
		else
		{
			*pxTicksToWait = 0;
<<<<<<< HEAD
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006dce:	f000 fd4d 	bl	800786c <vPortExitCritical>

	return xReturn;
 8006dd2:	69fb      	ldr	r3, [r7, #28]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3720      	adds	r7, #32
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	200004d0 	.word	0x200004d0
 8006de0:	200004e4 	.word	0x200004e4

08006de4 <vTaskMissedYield>:
=======
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006eda:	2301      	movs	r3, #1
 8006edc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ede:	f000 fd4d 	bl	800797c <vPortExitCritical>

	return xReturn;
 8006ee2:	69fb      	ldr	r3, [r7, #28]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3720      	adds	r7, #32
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	200004d8 	.word	0x200004d8
 8006ef0:	200004ec 	.word	0x200004ec

08006ef4 <vTaskMissedYield>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
<<<<<<< HEAD
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006de8:	4b03      	ldr	r3, [pc, #12]	@ (8006df8 <vTaskMissedYield+0x14>)
 8006dea:	2201      	movs	r2, #1
 8006dec:	601a      	str	r2, [r3, #0]
}
 8006dee:	bf00      	nop
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	200004e0 	.word	0x200004e0

08006dfc <prvIdleTask>:
=======
 8006ef4:	b480      	push	{r7}
 8006ef6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ef8:	4b03      	ldr	r3, [pc, #12]	@ (8006f08 <vTaskMissedYield+0x14>)
 8006efa:	2201      	movs	r2, #1
 8006efc:	601a      	str	r2, [r3, #0]
}
 8006efe:	bf00      	nop
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr
 8006f08:	200004e8 	.word	0x200004e8

08006f0c <prvIdleTask>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< HEAD
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
=======
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
<<<<<<< HEAD
 8006e04:	f000 f852 	bl	8006eac <prvCheckTasksWaitingTermination>
=======
 8006f14:	f000 f852 	bl	8006fbc <prvCheckTasksWaitingTermination>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 8006e08:	4b06      	ldr	r3, [pc, #24]	@ (8006e24 <prvIdleTask+0x28>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d9f9      	bls.n	8006e04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e10:	4b05      	ldr	r3, [pc, #20]	@ (8006e28 <prvIdleTask+0x2c>)
 8006e12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e20:	e7f0      	b.n	8006e04 <prvIdleTask+0x8>
 8006e22:	bf00      	nop
 8006e24:	200003d0 	.word	0x200003d0
 8006e28:	e000ed04 	.word	0xe000ed04

08006e2c <prvInitialiseTaskLists>:
=======
 8006f18:	4b06      	ldr	r3, [pc, #24]	@ (8006f34 <prvIdleTask+0x28>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d9f9      	bls.n	8006f14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f20:	4b05      	ldr	r3, [pc, #20]	@ (8006f38 <prvIdleTask+0x2c>)
 8006f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f30:	e7f0      	b.n	8006f14 <prvIdleTask+0x8>
 8006f32:	bf00      	nop
 8006f34:	200003d8 	.word	0x200003d8
 8006f38:	e000ed04 	.word	0xe000ed04

08006f3c <prvInitialiseTaskLists>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
<<<<<<< HEAD
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e32:	2300      	movs	r3, #0
 8006e34:	607b      	str	r3, [r7, #4]
 8006e36:	e00c      	b.n	8006e52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4a12      	ldr	r2, [pc, #72]	@ (8006e8c <prvInitialiseTaskLists+0x60>)
 8006e44:	4413      	add	r3, r2
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fe fd45 	bl	80058d6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	607b      	str	r3, [r7, #4]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b06      	cmp	r3, #6
 8006e56:	d9ef      	bls.n	8006e38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e58:	480d      	ldr	r0, [pc, #52]	@ (8006e90 <prvInitialiseTaskLists+0x64>)
 8006e5a:	f7fe fd3c 	bl	80058d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e5e:	480d      	ldr	r0, [pc, #52]	@ (8006e94 <prvInitialiseTaskLists+0x68>)
 8006e60:	f7fe fd39 	bl	80058d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e64:	480c      	ldr	r0, [pc, #48]	@ (8006e98 <prvInitialiseTaskLists+0x6c>)
 8006e66:	f7fe fd36 	bl	80058d6 <vListInitialise>
=======
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f42:	2300      	movs	r3, #0
 8006f44:	607b      	str	r3, [r7, #4]
 8006f46:	e00c      	b.n	8006f62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4a12      	ldr	r2, [pc, #72]	@ (8006f9c <prvInitialiseTaskLists+0x60>)
 8006f54:	4413      	add	r3, r2
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fe fd45 	bl	80059e6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	607b      	str	r3, [r7, #4]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b06      	cmp	r3, #6
 8006f66:	d9ef      	bls.n	8006f48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f68:	480d      	ldr	r0, [pc, #52]	@ (8006fa0 <prvInitialiseTaskLists+0x64>)
 8006f6a:	f7fe fd3c 	bl	80059e6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f6e:	480d      	ldr	r0, [pc, #52]	@ (8006fa4 <prvInitialiseTaskLists+0x68>)
 8006f70:	f7fe fd39 	bl	80059e6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f74:	480c      	ldr	r0, [pc, #48]	@ (8006fa8 <prvInitialiseTaskLists+0x6c>)
 8006f76:	f7fe fd36 	bl	80059e6 <vListInitialise>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< HEAD
 8006e6a:	480c      	ldr	r0, [pc, #48]	@ (8006e9c <prvInitialiseTaskLists+0x70>)
 8006e6c:	f7fe fd33 	bl	80058d6 <vListInitialise>
=======
 8006f7a:	480c      	ldr	r0, [pc, #48]	@ (8006fac <prvInitialiseTaskLists+0x70>)
 8006f7c:	f7fe fd33 	bl	80059e6 <vListInitialise>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< HEAD
 8006e70:	480b      	ldr	r0, [pc, #44]	@ (8006ea0 <prvInitialiseTaskLists+0x74>)
 8006e72:	f7fe fd30 	bl	80058d6 <vListInitialise>
=======
 8006f80:	480b      	ldr	r0, [pc, #44]	@ (8006fb0 <prvInitialiseTaskLists+0x74>)
 8006f82:	f7fe fd30 	bl	80059e6 <vListInitialise>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< HEAD
 8006e76:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea4 <prvInitialiseTaskLists+0x78>)
 8006e78:	4a05      	ldr	r2, [pc, #20]	@ (8006e90 <prvInitialiseTaskLists+0x64>)
 8006e7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ea8 <prvInitialiseTaskLists+0x7c>)
 8006e7e:	4a05      	ldr	r2, [pc, #20]	@ (8006e94 <prvInitialiseTaskLists+0x68>)
 8006e80:	601a      	str	r2, [r3, #0]
}
 8006e82:	bf00      	nop
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	200003d0 	.word	0x200003d0
 8006e90:	2000045c 	.word	0x2000045c
 8006e94:	20000470 	.word	0x20000470
 8006e98:	2000048c 	.word	0x2000048c
 8006e9c:	200004a0 	.word	0x200004a0
 8006ea0:	200004b8 	.word	0x200004b8
 8006ea4:	20000484 	.word	0x20000484
 8006ea8:	20000488 	.word	0x20000488

08006eac <prvCheckTasksWaitingTermination>:
=======
 8006f86:	4b0b      	ldr	r3, [pc, #44]	@ (8006fb4 <prvInitialiseTaskLists+0x78>)
 8006f88:	4a05      	ldr	r2, [pc, #20]	@ (8006fa0 <prvInitialiseTaskLists+0x64>)
 8006f8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb8 <prvInitialiseTaskLists+0x7c>)
 8006f8e:	4a05      	ldr	r2, [pc, #20]	@ (8006fa4 <prvInitialiseTaskLists+0x68>)
 8006f90:	601a      	str	r2, [r3, #0]
}
 8006f92:	bf00      	nop
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	200003d8 	.word	0x200003d8
 8006fa0:	20000464 	.word	0x20000464
 8006fa4:	20000478 	.word	0x20000478
 8006fa8:	20000494 	.word	0x20000494
 8006fac:	200004a8 	.word	0x200004a8
 8006fb0:	200004c0 	.word	0x200004c0
 8006fb4:	2000048c 	.word	0x2000048c
 8006fb8:	20000490 	.word	0x20000490

08006fbc <prvCheckTasksWaitingTermination>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
<<<<<<< HEAD
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
=======
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< HEAD
 8006eb2:	e019      	b.n	8006ee8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006eb4:	f000 fca8 	bl	8007808 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eb8:	4b10      	ldr	r3, [pc, #64]	@ (8006efc <prvCheckTasksWaitingTermination+0x50>)
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7fe fd90 	bl	80059ea <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006eca:	4b0d      	ldr	r3, [pc, #52]	@ (8006f00 <prvCheckTasksWaitingTermination+0x54>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	4a0b      	ldr	r2, [pc, #44]	@ (8006f00 <prvCheckTasksWaitingTermination+0x54>)
 8006ed2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8006f04 <prvCheckTasksWaitingTermination+0x58>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	4a0a      	ldr	r2, [pc, #40]	@ (8006f04 <prvCheckTasksWaitingTermination+0x58>)
 8006edc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ede:	f000 fcc5 	bl	800786c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f810 	bl	8006f08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ee8:	4b06      	ldr	r3, [pc, #24]	@ (8006f04 <prvCheckTasksWaitingTermination+0x58>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e1      	bne.n	8006eb4 <prvCheckTasksWaitingTermination+0x8>
=======
 8006fc2:	e019      	b.n	8006ff8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006fc4:	f000 fca8 	bl	8007918 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fc8:	4b10      	ldr	r3, [pc, #64]	@ (800700c <prvCheckTasksWaitingTermination+0x50>)
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	3304      	adds	r3, #4
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7fe fd90 	bl	8005afa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006fda:	4b0d      	ldr	r3, [pc, #52]	@ (8007010 <prvCheckTasksWaitingTermination+0x54>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	4a0b      	ldr	r2, [pc, #44]	@ (8007010 <prvCheckTasksWaitingTermination+0x54>)
 8006fe2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8007014 <prvCheckTasksWaitingTermination+0x58>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	4a0a      	ldr	r2, [pc, #40]	@ (8007014 <prvCheckTasksWaitingTermination+0x58>)
 8006fec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006fee:	f000 fcc5 	bl	800797c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f810 	bl	8007018 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ff8:	4b06      	ldr	r3, [pc, #24]	@ (8007014 <prvCheckTasksWaitingTermination+0x58>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1e1      	bne.n	8006fc4 <prvCheckTasksWaitingTermination+0x8>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
<<<<<<< HEAD
 8006ef0:	bf00      	nop
 8006ef2:	bf00      	nop
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	200004a0 	.word	0x200004a0
 8006f00:	200004cc 	.word	0x200004cc
 8006f04:	200004b4 	.word	0x200004b4

08006f08 <prvDeleteTCB>:
=======
 8007000:	bf00      	nop
 8007002:	bf00      	nop
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	200004a8 	.word	0x200004a8
 8007010:	200004d4 	.word	0x200004d4
 8007014:	200004bc 	.word	0x200004bc

08007018 <prvDeleteTCB>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
<<<<<<< HEAD
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
=======
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
<<<<<<< HEAD
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d108      	bne.n	8006f2c <prvDeleteTCB+0x24>
=======
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007026:	2b00      	cmp	r3, #0
 8007028:	d108      	bne.n	800703c <prvDeleteTCB+0x24>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
<<<<<<< HEAD
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 fe5c 	bl	8007bdc <vPortFree>
				vPortFree( pxTCB );
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fe59 	bl	8007bdc <vPortFree>
=======
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800702e:	4618      	mov	r0, r3
 8007030:	f000 fe5c 	bl	8007cec <vPortFree>
				vPortFree( pxTCB );
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fe59 	bl	8007cec <vPortFree>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
<<<<<<< HEAD
 8006f2a:	e019      	b.n	8006f60 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d103      	bne.n	8006f3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fe50 	bl	8007bdc <vPortFree>
	}
 8006f3c:	e010      	b.n	8006f60 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d00b      	beq.n	8006f60 <prvDeleteTCB+0x58>
	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	60fb      	str	r3, [r7, #12]
}
 8006f5a:	bf00      	nop
 8006f5c:	bf00      	nop
 8006f5e:	e7fd      	b.n	8006f5c <prvDeleteTCB+0x54>
	}
 8006f60:	bf00      	nop
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <prvResetNextTaskUnblockTime>:
=======
 800703a:	e019      	b.n	8007070 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007042:	2b01      	cmp	r3, #1
 8007044:	d103      	bne.n	800704e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fe50 	bl	8007cec <vPortFree>
	}
 800704c:	e010      	b.n	8007070 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007054:	2b02      	cmp	r3, #2
 8007056:	d00b      	beq.n	8007070 <prvDeleteTCB+0x58>
	__asm volatile
 8007058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	60fb      	str	r3, [r7, #12]
}
 800706a:	bf00      	nop
 800706c:	bf00      	nop
 800706e:	e7fd      	b.n	800706c <prvDeleteTCB+0x54>
	}
 8007070:	bf00      	nop
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <prvResetNextTaskUnblockTime>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
<<<<<<< HEAD
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8006fa0 <prvResetNextTaskUnblockTime+0x38>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d104      	bne.n	8006f82 <prvResetNextTaskUnblockTime+0x1a>
=======
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800707e:	4b0c      	ldr	r3, [pc, #48]	@ (80070b0 <prvResetNextTaskUnblockTime+0x38>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d104      	bne.n	8007092 <prvResetNextTaskUnblockTime+0x1a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 8006f78:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa4 <prvResetNextTaskUnblockTime+0x3c>)
 8006f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f7e:	601a      	str	r2, [r3, #0]
=======
 8007088:	4b0a      	ldr	r3, [pc, #40]	@ (80070b4 <prvResetNextTaskUnblockTime+0x3c>)
 800708a:	f04f 32ff 	mov.w	r2, #4294967295
 800708e:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
<<<<<<< HEAD
 8006f80:	e008      	b.n	8006f94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f82:	4b07      	ldr	r3, [pc, #28]	@ (8006fa0 <prvResetNextTaskUnblockTime+0x38>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	4a04      	ldr	r2, [pc, #16]	@ (8006fa4 <prvResetNextTaskUnblockTime+0x3c>)
 8006f92:	6013      	str	r3, [r2, #0]
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	20000484 	.word	0x20000484
 8006fa4:	200004ec 	.word	0x200004ec

08006fa8 <xTaskGetSchedulerState>:
=======
 8007090:	e008      	b.n	80070a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007092:	4b07      	ldr	r3, [pc, #28]	@ (80070b0 <prvResetNextTaskUnblockTime+0x38>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	4a04      	ldr	r2, [pc, #16]	@ (80070b4 <prvResetNextTaskUnblockTime+0x3c>)
 80070a2:	6013      	str	r3, [r2, #0]
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	2000048c 	.word	0x2000048c
 80070b4:	200004f4 	.word	0x200004f4

080070b8 <xTaskGetSchedulerState>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
<<<<<<< HEAD
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006fae:	4b0b      	ldr	r3, [pc, #44]	@ (8006fdc <xTaskGetSchedulerState+0x34>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d102      	bne.n	8006fbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	607b      	str	r3, [r7, #4]
 8006fba:	e008      	b.n	8006fce <xTaskGetSchedulerState+0x26>
=======
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80070be:	4b0b      	ldr	r3, [pc, #44]	@ (80070ec <xTaskGetSchedulerState+0x34>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d102      	bne.n	80070cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070c6:	2301      	movs	r3, #1
 80070c8:	607b      	str	r3, [r7, #4]
 80070ca:	e008      	b.n	80070de <xTaskGetSchedulerState+0x26>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 8006fbc:	4b08      	ldr	r3, [pc, #32]	@ (8006fe0 <xTaskGetSchedulerState+0x38>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d102      	bne.n	8006fca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	607b      	str	r3, [r7, #4]
 8006fc8:	e001      	b.n	8006fce <xTaskGetSchedulerState+0x26>
=======
 80070cc:	4b08      	ldr	r3, [pc, #32]	@ (80070f0 <xTaskGetSchedulerState+0x38>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d102      	bne.n	80070da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070d4:	2302      	movs	r3, #2
 80070d6:	607b      	str	r3, [r7, #4]
 80070d8:	e001      	b.n	80070de <xTaskGetSchedulerState+0x26>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
<<<<<<< HEAD
 8006fca:	2300      	movs	r3, #0
 8006fcc:	607b      	str	r3, [r7, #4]
=======
 80070da:	2300      	movs	r3, #0
 80070dc:	607b      	str	r3, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			}
		}

		return xReturn;
<<<<<<< HEAD
 8006fce:	687b      	ldr	r3, [r7, #4]
	}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	200004d8 	.word	0x200004d8
 8006fe0:	200004f4 	.word	0x200004f4

08006fe4 <xTaskPriorityDisinherit>:
=======
 80070de:	687b      	ldr	r3, [r7, #4]
	}
 80070e0:	4618      	mov	r0, r3
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	200004e0 	.word	0x200004e0
 80070f0:	200004fc 	.word	0x200004fc

080070f4 <xTaskPriorityDisinherit>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< HEAD
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d070      	beq.n	80070dc <xTaskPriorityDisinherit+0xf8>
=======
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007100:	2300      	movs	r3, #0
 8007102:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d070      	beq.n	80071ec <xTaskPriorityDisinherit+0xf8>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
<<<<<<< HEAD
 8006ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80070e8 <xTaskPriorityDisinherit+0x104>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	429a      	cmp	r2, r3
 8007002:	d00b      	beq.n	800701c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	60fb      	str	r3, [r7, #12]
}
 8007016:	bf00      	nop
 8007018:	bf00      	nop
 800701a:	e7fd      	b.n	8007018 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10b      	bne.n	800703c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	60bb      	str	r3, [r7, #8]
}
 8007036:	bf00      	nop
 8007038:	bf00      	nop
 800703a:	e7fd      	b.n	8007038 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007040:	1e5a      	subs	r2, r3, #1
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	649a      	str	r2, [r3, #72]	@ 0x48
=======
 800710a:	4b3b      	ldr	r3, [pc, #236]	@ (80071f8 <xTaskPriorityDisinherit+0x104>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	429a      	cmp	r2, r3
 8007112:	d00b      	beq.n	800712c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	60fb      	str	r3, [r7, #12]
}
 8007126:	bf00      	nop
 8007128:	bf00      	nop
 800712a:	e7fd      	b.n	8007128 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10b      	bne.n	800714c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	60bb      	str	r3, [r7, #8]
}
 8007146:	bf00      	nop
 8007148:	bf00      	nop
 800714a:	e7fd      	b.n	8007148 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007150:	1e5a      	subs	r2, r3, #1
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	649a      	str	r2, [r3, #72]	@ 0x48
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
<<<<<<< HEAD
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800704e:	429a      	cmp	r2, r3
 8007050:	d044      	beq.n	80070dc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007056:	2b00      	cmp	r3, #0
 8007058:	d140      	bne.n	80070dc <xTaskPriorityDisinherit+0xf8>
=======
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800715e:	429a      	cmp	r2, r3
 8007160:	d044      	beq.n	80071ec <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007166:	2b00      	cmp	r3, #0
 8007168:	d140      	bne.n	80071ec <xTaskPriorityDisinherit+0xf8>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	3304      	adds	r3, #4
 800705e:	4618      	mov	r0, r3
 8007060:	f7fe fcc3 	bl	80059ea <uxListRemove>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d115      	bne.n	8007096 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800706e:	491f      	ldr	r1, [pc, #124]	@ (80070ec <xTaskPriorityDisinherit+0x108>)
 8007070:	4613      	mov	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	440b      	add	r3, r1
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10a      	bne.n	8007096 <xTaskPriorityDisinherit+0xb2>
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007084:	2201      	movs	r2, #1
 8007086:	fa02 f303 	lsl.w	r3, r2, r3
 800708a:	43da      	mvns	r2, r3
 800708c:	4b18      	ldr	r3, [pc, #96]	@ (80070f0 <xTaskPriorityDisinherit+0x10c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4013      	ands	r3, r2
 8007092:	4a17      	ldr	r2, [pc, #92]	@ (80070f0 <xTaskPriorityDisinherit+0x10c>)
 8007094:	6013      	str	r3, [r2, #0]
=======
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	3304      	adds	r3, #4
 800716e:	4618      	mov	r0, r3
 8007170:	f7fe fcc3 	bl	8005afa <uxListRemove>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d115      	bne.n	80071a6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800717e:	491f      	ldr	r1, [pc, #124]	@ (80071fc <xTaskPriorityDisinherit+0x108>)
 8007180:	4613      	mov	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	440b      	add	r3, r1
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10a      	bne.n	80071a6 <xTaskPriorityDisinherit+0xb2>
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007194:	2201      	movs	r2, #1
 8007196:	fa02 f303 	lsl.w	r3, r2, r3
 800719a:	43da      	mvns	r2, r3
 800719c:	4b18      	ldr	r3, [pc, #96]	@ (8007200 <xTaskPriorityDisinherit+0x10c>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4013      	ands	r3, r2
 80071a2:	4a17      	ldr	r2, [pc, #92]	@ (8007200 <xTaskPriorityDisinherit+0x10c>)
 80071a4:	6013      	str	r3, [r2, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
<<<<<<< HEAD
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a2:	f1c3 0207 	rsb	r2, r3, #7
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ae:	2201      	movs	r2, #1
 80070b0:	409a      	lsls	r2, r3
 80070b2:	4b0f      	ldr	r3, [pc, #60]	@ (80070f0 <xTaskPriorityDisinherit+0x10c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	4a0d      	ldr	r2, [pc, #52]	@ (80070f0 <xTaskPriorityDisinherit+0x10c>)
 80070ba:	6013      	str	r3, [r2, #0]
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070c0:	4613      	mov	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4a08      	ldr	r2, [pc, #32]	@ (80070ec <xTaskPriorityDisinherit+0x108>)
 80070ca:	441a      	add	r2, r3
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	3304      	adds	r3, #4
 80070d0:	4619      	mov	r1, r3
 80070d2:	4610      	mov	r0, r2
 80070d4:	f7fe fc2c 	bl	8005930 <vListInsertEnd>
=======
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b2:	f1c3 0207 	rsb	r2, r3, #7
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071be:	2201      	movs	r2, #1
 80071c0:	409a      	lsls	r2, r3
 80071c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007200 <xTaskPriorityDisinherit+0x10c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	4a0d      	ldr	r2, [pc, #52]	@ (8007200 <xTaskPriorityDisinherit+0x10c>)
 80071ca:	6013      	str	r3, [r2, #0]
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071d0:	4613      	mov	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4a08      	ldr	r2, [pc, #32]	@ (80071fc <xTaskPriorityDisinherit+0x108>)
 80071da:	441a      	add	r2, r3
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	3304      	adds	r3, #4
 80071e0:	4619      	mov	r1, r3
 80071e2:	4610      	mov	r0, r2
 80071e4:	f7fe fc2c 	bl	8005a40 <vListInsertEnd>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
<<<<<<< HEAD
 80070d8:	2301      	movs	r3, #1
 80070da:	617b      	str	r3, [r7, #20]
=======
 80071e8:	2301      	movs	r3, #1
 80071ea:	617b      	str	r3, [r7, #20]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< HEAD
 80070dc:	697b      	ldr	r3, [r7, #20]
	}
 80070de:	4618      	mov	r0, r3
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	200003cc 	.word	0x200003cc
 80070ec:	200003d0 	.word	0x200003d0
 80070f0:	200004d4 	.word	0x200004d4

080070f4 <xTaskNotifyWait>:
=======
 80071ec:	697b      	ldr	r3, [r7, #20]
	}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	200003d4 	.word	0x200003d4
 80071fc:	200003d8 	.word	0x200003d8
 8007200:	200004dc 	.word	0x200004dc

08007204 <xTaskNotifyWait>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
<<<<<<< HEAD
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
 8007100:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007102:	f000 fb81 	bl	8007808 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007106:	4b26      	ldr	r3, [pc, #152]	@ (80071a0 <xTaskNotifyWait+0xac>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b02      	cmp	r3, #2
 8007112:	d01a      	beq.n	800714a <xTaskNotifyWait+0x56>
=======
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
 8007210:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007212:	f000 fb81 	bl	8007918 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007216:	4b26      	ldr	r3, [pc, #152]	@ (80072b0 <xTaskNotifyWait+0xac>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b02      	cmp	r3, #2
 8007222:	d01a      	beq.n	800725a <xTaskNotifyWait+0x56>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
<<<<<<< HEAD
 8007114:	4b22      	ldr	r3, [pc, #136]	@ (80071a0 <xTaskNotifyWait+0xac>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	43d2      	mvns	r2, r2
 800711e:	400a      	ands	r2, r1
 8007120:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007122:	4b1f      	ldr	r3, [pc, #124]	@ (80071a0 <xTaskNotifyWait+0xac>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00b      	beq.n	800714a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007132:	2101      	movs	r1, #1
 8007134:	6838      	ldr	r0, [r7, #0]
 8007136:	f000 f9cd 	bl	80074d4 <prvAddCurrentTaskToDelayedList>
=======
 8007224:	4b22      	ldr	r3, [pc, #136]	@ (80072b0 <xTaskNotifyWait+0xac>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	43d2      	mvns	r2, r2
 800722e:	400a      	ands	r2, r1
 8007230:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007232:	4b1f      	ldr	r3, [pc, #124]	@ (80072b0 <xTaskNotifyWait+0xac>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00b      	beq.n	800725a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007242:	2101      	movs	r1, #1
 8007244:	6838      	ldr	r0, [r7, #0]
 8007246:	f000 f9cd 	bl	80075e4 <prvAddCurrentTaskToDelayedList>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
<<<<<<< HEAD
 800713a:	4b1a      	ldr	r3, [pc, #104]	@ (80071a4 <xTaskNotifyWait+0xb0>)
 800713c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007140:	601a      	str	r2, [r3, #0]
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	f3bf 8f6f 	isb	sy
=======
 800724a:	4b1a      	ldr	r3, [pc, #104]	@ (80072b4 <xTaskNotifyWait+0xb0>)
 800724c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007250:	601a      	str	r2, [r3, #0]
 8007252:	f3bf 8f4f 	dsb	sy
 8007256:	f3bf 8f6f 	isb	sy
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 800714a:	f000 fb8f 	bl	800786c <vPortExitCritical>

		taskENTER_CRITICAL();
 800714e:	f000 fb5b 	bl	8007808 <vPortEnterCritical>
=======
 800725a:	f000 fb8f 	bl	800797c <vPortExitCritical>

		taskENTER_CRITICAL();
 800725e:	f000 fb5b 	bl	8007918 <vPortEnterCritical>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
<<<<<<< HEAD
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d004      	beq.n	8007162 <xTaskNotifyWait+0x6e>
=======
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d004      	beq.n	8007272 <xTaskNotifyWait+0x6e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
<<<<<<< HEAD
 8007158:	4b11      	ldr	r3, [pc, #68]	@ (80071a0 <xTaskNotifyWait+0xac>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	601a      	str	r2, [r3, #0]
=======
 8007268:	4b11      	ldr	r3, [pc, #68]	@ (80072b0 <xTaskNotifyWait+0xac>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
<<<<<<< HEAD
 8007162:	4b0f      	ldr	r3, [pc, #60]	@ (80071a0 <xTaskNotifyWait+0xac>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b02      	cmp	r3, #2
 800716e:	d002      	beq.n	8007176 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007170:	2300      	movs	r3, #0
 8007172:	617b      	str	r3, [r7, #20]
 8007174:	e008      	b.n	8007188 <xTaskNotifyWait+0x94>
=======
 8007272:	4b0f      	ldr	r3, [pc, #60]	@ (80072b0 <xTaskNotifyWait+0xac>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b02      	cmp	r3, #2
 800727e:	d002      	beq.n	8007286 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007280:	2300      	movs	r3, #0
 8007282:	617b      	str	r3, [r7, #20]
 8007284:	e008      	b.n	8007298 <xTaskNotifyWait+0x94>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
<<<<<<< HEAD
 8007176:	4b0a      	ldr	r3, [pc, #40]	@ (80071a0 <xTaskNotifyWait+0xac>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	43d2      	mvns	r2, r2
 8007180:	400a      	ands	r2, r1
 8007182:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 8007184:	2301      	movs	r3, #1
 8007186:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007188:	4b05      	ldr	r3, [pc, #20]	@ (80071a0 <xTaskNotifyWait+0xac>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 8007192:	f000 fb6b 	bl	800786c <vPortExitCritical>

		return xReturn;
 8007196:	697b      	ldr	r3, [r7, #20]
	}
 8007198:	4618      	mov	r0, r3
 800719a:	3718      	adds	r7, #24
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	200003cc 	.word	0x200003cc
 80071a4:	e000ed04 	.word	0xe000ed04

080071a8 <xTaskGenericNotify>:
=======
 8007286:	4b0a      	ldr	r3, [pc, #40]	@ (80072b0 <xTaskNotifyWait+0xac>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	43d2      	mvns	r2, r2
 8007290:	400a      	ands	r2, r1
 8007292:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 8007294:	2301      	movs	r3, #1
 8007296:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007298:	4b05      	ldr	r3, [pc, #20]	@ (80072b0 <xTaskNotifyWait+0xac>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 80072a2:	f000 fb6b 	bl	800797c <vPortExitCritical>

		return xReturn;
 80072a6:	697b      	ldr	r3, [r7, #20]
	}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3718      	adds	r7, #24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	200003d4 	.word	0x200003d4
 80072b4:	e000ed04 	.word	0xe000ed04

080072b8 <xTaskGenericNotify>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
<<<<<<< HEAD
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b08a      	sub	sp, #40	@ 0x28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	603b      	str	r3, [r7, #0]
 80071b4:	4613      	mov	r3, r2
 80071b6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80071b8:	2301      	movs	r3, #1
 80071ba:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10b      	bne.n	80071da <xTaskGenericNotify+0x32>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	61bb      	str	r3, [r7, #24]
}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop
 80071d8:	e7fd      	b.n	80071d6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80071de:	f000 fb13 	bl	8007808 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80071e8:	6a3b      	ldr	r3, [r7, #32]
 80071ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80071f0:	6a3b      	ldr	r3, [r7, #32]
 80071f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80071f6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	2202      	movs	r2, #2
 80071fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 8007200:	79fb      	ldrb	r3, [r7, #7]
 8007202:	2b04      	cmp	r3, #4
 8007204:	d827      	bhi.n	8007256 <xTaskGenericNotify+0xae>
 8007206:	a201      	add	r2, pc, #4	@ (adr r2, 800720c <xTaskGenericNotify+0x64>)
 8007208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720c:	08007279 	.word	0x08007279
 8007210:	08007221 	.word	0x08007221
 8007214:	0800722f 	.word	0x0800722f
 8007218:	0800723b 	.word	0x0800723b
 800721c:	08007243 	.word	0x08007243
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	431a      	orrs	r2, r3
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800722c:	e027      	b.n	800727e <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007232:	1c5a      	adds	r2, r3, #1
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8007238:	e021      	b.n	800727e <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800723a:	6a3b      	ldr	r3, [r7, #32]
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8007240:	e01d      	b.n	800727e <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007242:	7ffb      	ldrb	r3, [r7, #31]
 8007244:	2b02      	cmp	r3, #2
 8007246:	d003      	beq.n	8007250 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	64da      	str	r2, [r3, #76]	@ 0x4c
=======
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b08a      	sub	sp, #40	@ 0x28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	603b      	str	r3, [r7, #0]
 80072c4:	4613      	mov	r3, r2
 80072c6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80072c8:	2301      	movs	r3, #1
 80072ca:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10b      	bne.n	80072ea <xTaskGenericNotify+0x32>
	__asm volatile
 80072d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	61bb      	str	r3, [r7, #24]
}
 80072e4:	bf00      	nop
 80072e6:	bf00      	nop
 80072e8:	e7fd      	b.n	80072e6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80072ee:	f000 fb13 	bl	8007918 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d003      	beq.n	8007300 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007306:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	2202      	movs	r2, #2
 800730c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 8007310:	79fb      	ldrb	r3, [r7, #7]
 8007312:	2b04      	cmp	r3, #4
 8007314:	d827      	bhi.n	8007366 <xTaskGenericNotify+0xae>
 8007316:	a201      	add	r2, pc, #4	@ (adr r2, 800731c <xTaskGenericNotify+0x64>)
 8007318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731c:	08007389 	.word	0x08007389
 8007320:	08007331 	.word	0x08007331
 8007324:	0800733f 	.word	0x0800733f
 8007328:	0800734b 	.word	0x0800734b
 800732c:	08007353 	.word	0x08007353
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	431a      	orrs	r2, r3
 8007338:	6a3b      	ldr	r3, [r7, #32]
 800733a:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800733c:	e027      	b.n	800738e <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8007348:	e021      	b.n	800738e <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8007350:	e01d      	b.n	800738e <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007352:	7ffb      	ldrb	r3, [r7, #31]
 8007354:	2b02      	cmp	r3, #2
 8007356:	d003      	beq.n	8007360 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	64da      	str	r2, [r3, #76]	@ 0x4c
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
<<<<<<< HEAD
 800724e:	e016      	b.n	800727e <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8007250:	2300      	movs	r3, #0
 8007252:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8007254:	e013      	b.n	800727e <xTaskGenericNotify+0xd6>
=======
 800735e:	e016      	b.n	800738e <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8007360:	2300      	movs	r3, #0
 8007362:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8007364:	e013      	b.n	800738e <xTaskGenericNotify+0xd6>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
<<<<<<< HEAD
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800725a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725e:	d00d      	beq.n	800727c <xTaskGenericNotify+0xd4>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	617b      	str	r3, [r7, #20]
}
 8007272:	bf00      	nop
 8007274:	bf00      	nop
 8007276:	e7fd      	b.n	8007274 <xTaskGenericNotify+0xcc>
					break;
 8007278:	bf00      	nop
 800727a:	e000      	b.n	800727e <xTaskGenericNotify+0xd6>

					break;
 800727c:	bf00      	nop
=======
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800736a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736e:	d00d      	beq.n	800738c <xTaskGenericNotify+0xd4>
	__asm volatile
 8007370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	617b      	str	r3, [r7, #20]
}
 8007382:	bf00      	nop
 8007384:	bf00      	nop
 8007386:	e7fd      	b.n	8007384 <xTaskGenericNotify+0xcc>
					break;
 8007388:	bf00      	nop
 800738a:	e000      	b.n	800738e <xTaskGenericNotify+0xd6>

					break;
 800738c:	bf00      	nop
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
<<<<<<< HEAD
 800727e:	7ffb      	ldrb	r3, [r7, #31]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d13a      	bne.n	80072fa <xTaskGenericNotify+0x152>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	3304      	adds	r3, #4
 8007288:	4618      	mov	r0, r3
 800728a:	f7fe fbae 	bl	80059ea <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007292:	2201      	movs	r2, #1
 8007294:	409a      	lsls	r2, r3
 8007296:	4b1c      	ldr	r3, [pc, #112]	@ (8007308 <xTaskGenericNotify+0x160>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4313      	orrs	r3, r2
 800729c:	4a1a      	ldr	r2, [pc, #104]	@ (8007308 <xTaskGenericNotify+0x160>)
 800729e:	6013      	str	r3, [r2, #0]
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072a4:	4613      	mov	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4a17      	ldr	r2, [pc, #92]	@ (800730c <xTaskGenericNotify+0x164>)
 80072ae:	441a      	add	r2, r3
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	3304      	adds	r3, #4
 80072b4:	4619      	mov	r1, r3
 80072b6:	4610      	mov	r0, r2
 80072b8:	f7fe fb3a 	bl	8005930 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00b      	beq.n	80072dc <xTaskGenericNotify+0x134>
	__asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	613b      	str	r3, [r7, #16]
}
 80072d6:	bf00      	nop
 80072d8:	bf00      	nop
 80072da:	e7fd      	b.n	80072d8 <xTaskGenericNotify+0x130>
=======
 800738e:	7ffb      	ldrb	r3, [r7, #31]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d13a      	bne.n	800740a <xTaskGenericNotify+0x152>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	3304      	adds	r3, #4
 8007398:	4618      	mov	r0, r3
 800739a:	f7fe fbae 	bl	8005afa <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a2:	2201      	movs	r2, #1
 80073a4:	409a      	lsls	r2, r3
 80073a6:	4b1c      	ldr	r3, [pc, #112]	@ (8007418 <xTaskGenericNotify+0x160>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	4a1a      	ldr	r2, [pc, #104]	@ (8007418 <xTaskGenericNotify+0x160>)
 80073ae:	6013      	str	r3, [r2, #0]
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073b4:	4613      	mov	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4a17      	ldr	r2, [pc, #92]	@ (800741c <xTaskGenericNotify+0x164>)
 80073be:	441a      	add	r2, r3
 80073c0:	6a3b      	ldr	r3, [r7, #32]
 80073c2:	3304      	adds	r3, #4
 80073c4:	4619      	mov	r1, r3
 80073c6:	4610      	mov	r0, r2
 80073c8:	f7fe fb3a 	bl	8005a40 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00b      	beq.n	80073ec <xTaskGenericNotify+0x134>
	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	613b      	str	r3, [r7, #16]
}
 80073e6:	bf00      	nop
 80073e8:	bf00      	nop
 80073ea:	e7fd      	b.n	80073e8 <xTaskGenericNotify+0x130>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007310 <xTaskGenericNotify+0x168>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d907      	bls.n	80072fa <xTaskGenericNotify+0x152>
=======
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007420 <xTaskGenericNotify+0x168>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d907      	bls.n	800740a <xTaskGenericNotify+0x152>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 80072ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007314 <xTaskGenericNotify+0x16c>)
 80072ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	f3bf 8f6f 	isb	sy
=======
 80073fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007424 <xTaskGenericNotify+0x16c>)
 80073fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007400:	601a      	str	r2, [r3, #0]
 8007402:	f3bf 8f4f 	dsb	sy
 8007406:	f3bf 8f6f 	isb	sy
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 80072fa:	f000 fab7 	bl	800786c <vPortExitCritical>

		return xReturn;
 80072fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007300:	4618      	mov	r0, r3
 8007302:	3728      	adds	r7, #40	@ 0x28
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	200004d4 	.word	0x200004d4
 800730c:	200003d0 	.word	0x200003d0
 8007310:	200003cc 	.word	0x200003cc
 8007314:	e000ed04 	.word	0xe000ed04

08007318 <xTaskGenericNotifyFromISR>:
=======
 800740a:	f000 fab7 	bl	800797c <vPortExitCritical>

		return xReturn;
 800740e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007410:	4618      	mov	r0, r3
 8007412:	3728      	adds	r7, #40	@ 0x28
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	200004dc 	.word	0x200004dc
 800741c:	200003d8 	.word	0x200003d8
 8007420:	200003d4 	.word	0x200003d4
 8007424:	e000ed04 	.word	0xe000ed04

08007428 <xTaskGenericNotifyFromISR>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
<<<<<<< HEAD
 8007318:	b580      	push	{r7, lr}
 800731a:	b08e      	sub	sp, #56	@ 0x38
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	603b      	str	r3, [r7, #0]
 8007324:	4613      	mov	r3, r2
 8007326:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007328:	2301      	movs	r3, #1
 800732a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10b      	bne.n	800734a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	e7fd      	b.n	8007346 <xTaskGenericNotifyFromISR+0x2e>
=======
 8007428:	b580      	push	{r7, lr}
 800742a:	b08e      	sub	sp, #56	@ 0x38
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	603b      	str	r3, [r7, #0]
 8007434:	4613      	mov	r3, r2
 8007436:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007438:	2301      	movs	r3, #1
 800743a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10b      	bne.n	800745a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8007442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007454:	bf00      	nop
 8007456:	bf00      	nop
 8007458:	e7fd      	b.n	8007456 <xTaskGenericNotifyFromISR+0x2e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 800734a:	f000 fb3d 	bl	80079c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8007352:	f3ef 8211 	mrs	r2, BASEPRI
 8007356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	623a      	str	r2, [r7, #32]
 8007368:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800736a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800736c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d003      	beq.n	800737c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007376:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800737c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007388:	2202      	movs	r2, #2
 800738a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 800738e:	79fb      	ldrb	r3, [r7, #7]
 8007390:	2b04      	cmp	r3, #4
 8007392:	d829      	bhi.n	80073e8 <xTaskGenericNotifyFromISR+0xd0>
 8007394:	a201      	add	r2, pc, #4	@ (adr r2, 800739c <xTaskGenericNotifyFromISR+0x84>)
 8007396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739a:	bf00      	nop
 800739c:	0800740b 	.word	0x0800740b
 80073a0:	080073b1 	.word	0x080073b1
 80073a4:	080073bf 	.word	0x080073bf
 80073a8:	080073cb 	.word	0x080073cb
 80073ac:	080073d3 	.word	0x080073d3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80073b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	431a      	orrs	r2, r3
 80073b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ba:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80073bc:	e028      	b.n	8007410 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80073be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c6:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80073c8:	e022      	b.n	8007410 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80073ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80073d0:	e01e      	b.n	8007410 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80073d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d003      	beq.n	80073e2 <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80073da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	64da      	str	r2, [r3, #76]	@ 0x4c
=======
 800745a:	f000 fb3d 	bl	8007ad8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8007462:	f3ef 8211 	mrs	r2, BASEPRI
 8007466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	623a      	str	r2, [r7, #32]
 8007478:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800747a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800747c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007486:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800748c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007498:	2202      	movs	r2, #2
 800749a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 800749e:	79fb      	ldrb	r3, [r7, #7]
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d829      	bhi.n	80074f8 <xTaskGenericNotifyFromISR+0xd0>
 80074a4:	a201      	add	r2, pc, #4	@ (adr r2, 80074ac <xTaskGenericNotifyFromISR+0x84>)
 80074a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074aa:	bf00      	nop
 80074ac:	0800751b 	.word	0x0800751b
 80074b0:	080074c1 	.word	0x080074c1
 80074b4:	080074cf 	.word	0x080074cf
 80074b8:	080074db 	.word	0x080074db
 80074bc:	080074e3 	.word	0x080074e3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80074c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	431a      	orrs	r2, r3
 80074c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ca:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80074cc:	e028      	b.n	8007520 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80074ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d6:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80074d8:	e022      	b.n	8007520 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80074da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80074e0:	e01e      	b.n	8007520 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80074e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d003      	beq.n	80074f2 <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80074ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	64da      	str	r2, [r3, #76]	@ 0x4c
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
<<<<<<< HEAD
 80073e0:	e016      	b.n	8007410 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 80073e2:	2300      	movs	r3, #0
 80073e4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80073e6:	e013      	b.n	8007410 <xTaskGenericNotifyFromISR+0xf8>
=======
 80074f0:	e016      	b.n	8007520 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80074f6:	e013      	b.n	8007520 <xTaskGenericNotifyFromISR+0xf8>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
<<<<<<< HEAD
 80073e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f0:	d00d      	beq.n	800740e <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 80073f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	61bb      	str	r3, [r7, #24]
}
 8007404:	bf00      	nop
 8007406:	bf00      	nop
 8007408:	e7fd      	b.n	8007406 <xTaskGenericNotifyFromISR+0xee>
					break;
 800740a:	bf00      	nop
 800740c:	e000      	b.n	8007410 <xTaskGenericNotifyFromISR+0xf8>
					break;
 800740e:	bf00      	nop
=======
 80074f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007500:	d00d      	beq.n	800751e <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 8007502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	61bb      	str	r3, [r7, #24]
}
 8007514:	bf00      	nop
 8007516:	bf00      	nop
 8007518:	e7fd      	b.n	8007516 <xTaskGenericNotifyFromISR+0xee>
					break;
 800751a:	bf00      	nop
 800751c:	e000      	b.n	8007520 <xTaskGenericNotifyFromISR+0xf8>
					break;
 800751e:	bf00      	nop
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
<<<<<<< HEAD
 8007410:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007414:	2b01      	cmp	r3, #1
 8007416:	d146      	bne.n	80074a6 <xTaskGenericNotifyFromISR+0x18e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00b      	beq.n	8007438 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	617b      	str	r3, [r7, #20]
}
 8007432:	bf00      	nop
 8007434:	bf00      	nop
 8007436:	e7fd      	b.n	8007434 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007438:	4b20      	ldr	r3, [pc, #128]	@ (80074bc <xTaskGenericNotifyFromISR+0x1a4>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d11c      	bne.n	800747a <xTaskGenericNotifyFromISR+0x162>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007442:	3304      	adds	r3, #4
 8007444:	4618      	mov	r0, r3
 8007446:	f7fe fad0 	bl	80059ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800744a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800744e:	2201      	movs	r2, #1
 8007450:	409a      	lsls	r2, r3
 8007452:	4b1b      	ldr	r3, [pc, #108]	@ (80074c0 <xTaskGenericNotifyFromISR+0x1a8>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4313      	orrs	r3, r2
 8007458:	4a19      	ldr	r2, [pc, #100]	@ (80074c0 <xTaskGenericNotifyFromISR+0x1a8>)
 800745a:	6013      	str	r3, [r2, #0]
 800745c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007460:	4613      	mov	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4a16      	ldr	r2, [pc, #88]	@ (80074c4 <xTaskGenericNotifyFromISR+0x1ac>)
 800746a:	441a      	add	r2, r3
 800746c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746e:	3304      	adds	r3, #4
 8007470:	4619      	mov	r1, r3
 8007472:	4610      	mov	r0, r2
 8007474:	f7fe fa5c 	bl	8005930 <vListInsertEnd>
 8007478:	e005      	b.n	8007486 <xTaskGenericNotifyFromISR+0x16e>
=======
 8007520:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007524:	2b01      	cmp	r3, #1
 8007526:	d146      	bne.n	80075b6 <xTaskGenericNotifyFromISR+0x18e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00b      	beq.n	8007548 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8007530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	617b      	str	r3, [r7, #20]
}
 8007542:	bf00      	nop
 8007544:	bf00      	nop
 8007546:	e7fd      	b.n	8007544 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007548:	4b20      	ldr	r3, [pc, #128]	@ (80075cc <xTaskGenericNotifyFromISR+0x1a4>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d11c      	bne.n	800758a <xTaskGenericNotifyFromISR+0x162>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007552:	3304      	adds	r3, #4
 8007554:	4618      	mov	r0, r3
 8007556:	f7fe fad0 	bl	8005afa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800755a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755e:	2201      	movs	r2, #1
 8007560:	409a      	lsls	r2, r3
 8007562:	4b1b      	ldr	r3, [pc, #108]	@ (80075d0 <xTaskGenericNotifyFromISR+0x1a8>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4313      	orrs	r3, r2
 8007568:	4a19      	ldr	r2, [pc, #100]	@ (80075d0 <xTaskGenericNotifyFromISR+0x1a8>)
 800756a:	6013      	str	r3, [r2, #0]
 800756c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007570:	4613      	mov	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4413      	add	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4a16      	ldr	r2, [pc, #88]	@ (80075d4 <xTaskGenericNotifyFromISR+0x1ac>)
 800757a:	441a      	add	r2, r3
 800757c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757e:	3304      	adds	r3, #4
 8007580:	4619      	mov	r1, r3
 8007582:	4610      	mov	r0, r2
 8007584:	f7fe fa5c 	bl	8005a40 <vListInsertEnd>
 8007588:	e005      	b.n	8007596 <xTaskGenericNotifyFromISR+0x16e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
<<<<<<< HEAD
 800747a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747c:	3318      	adds	r3, #24
 800747e:	4619      	mov	r1, r3
 8007480:	4811      	ldr	r0, [pc, #68]	@ (80074c8 <xTaskGenericNotifyFromISR+0x1b0>)
 8007482:	f7fe fa55 	bl	8005930 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800748a:	4b10      	ldr	r3, [pc, #64]	@ (80074cc <xTaskGenericNotifyFromISR+0x1b4>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007490:	429a      	cmp	r2, r3
 8007492:	d908      	bls.n	80074a6 <xTaskGenericNotifyFromISR+0x18e>
=======
 800758a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758c:	3318      	adds	r3, #24
 800758e:	4619      	mov	r1, r3
 8007590:	4811      	ldr	r0, [pc, #68]	@ (80075d8 <xTaskGenericNotifyFromISR+0x1b0>)
 8007592:	f7fe fa55 	bl	8005a40 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800759a:	4b10      	ldr	r3, [pc, #64]	@ (80075dc <xTaskGenericNotifyFromISR+0x1b4>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d908      	bls.n	80075b6 <xTaskGenericNotifyFromISR+0x18e>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
 8007494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <xTaskGenericNotifyFromISR+0x188>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800749a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800749c:	2201      	movs	r2, #1
 800749e:	601a      	str	r2, [r3, #0]
=======
 80075a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d002      	beq.n	80075b0 <xTaskGenericNotifyFromISR+0x188>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80075aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075ac:	2201      	movs	r2, #1
 80075ae:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
<<<<<<< HEAD
 80074a0:	4b0b      	ldr	r3, [pc, #44]	@ (80074d0 <xTaskGenericNotifyFromISR+0x1b8>)
 80074a2:	2201      	movs	r2, #1
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	f383 8811 	msr	BASEPRI, r3
}
 80074b0:	bf00      	nop
=======
 80075b0:	4b0b      	ldr	r3, [pc, #44]	@ (80075e0 <xTaskGenericNotifyFromISR+0x1b8>)
 80075b2:	2201      	movs	r2, #1
 80075b4:	601a      	str	r2, [r3, #0]
 80075b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	f383 8811 	msr	BASEPRI, r3
}
 80075c0:	bf00      	nop
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
<<<<<<< HEAD
 80074b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3738      	adds	r7, #56	@ 0x38
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	200004f4 	.word	0x200004f4
 80074c0:	200004d4 	.word	0x200004d4
 80074c4:	200003d0 	.word	0x200003d0
 80074c8:	2000048c 	.word	0x2000048c
 80074cc:	200003cc 	.word	0x200003cc
 80074d0:	200004e0 	.word	0x200004e0

080074d4 <prvAddCurrentTaskToDelayedList>:
=======
 80075c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3738      	adds	r7, #56	@ 0x38
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	200004fc 	.word	0x200004fc
 80075d0:	200004dc 	.word	0x200004dc
 80075d4:	200003d8 	.word	0x200003d8
 80075d8:	20000494 	.word	0x20000494
 80075dc:	200003d4 	.word	0x200003d4
 80075e0:	200004e8 	.word	0x200004e8

080075e4 <prvAddCurrentTaskToDelayedList>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< HEAD
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80074de:	4b29      	ldr	r3, [pc, #164]	@ (8007584 <prvAddCurrentTaskToDelayedList+0xb0>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	60fb      	str	r3, [r7, #12]
=======
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075ee:	4b29      	ldr	r3, [pc, #164]	@ (8007694 <prvAddCurrentTaskToDelayedList+0xb0>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	60fb      	str	r3, [r7, #12]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 80074e4:	4b28      	ldr	r3, [pc, #160]	@ (8007588 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	3304      	adds	r3, #4
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fe fa7d 	bl	80059ea <uxListRemove>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10b      	bne.n	800750e <prvAddCurrentTaskToDelayedList+0x3a>
=======
 80075f4:	4b28      	ldr	r3, [pc, #160]	@ (8007698 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3304      	adds	r3, #4
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe fa7d 	bl	8005afa <uxListRemove>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10b      	bne.n	800761e <prvAddCurrentTaskToDelayedList+0x3a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
<<<<<<< HEAD
 80074f6:	4b24      	ldr	r3, [pc, #144]	@ (8007588 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fc:	2201      	movs	r2, #1
 80074fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007502:	43da      	mvns	r2, r3
 8007504:	4b21      	ldr	r3, [pc, #132]	@ (800758c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4013      	ands	r3, r2
 800750a:	4a20      	ldr	r2, [pc, #128]	@ (800758c <prvAddCurrentTaskToDelayedList+0xb8>)
 800750c:	6013      	str	r3, [r2, #0]
=======
 8007606:	4b24      	ldr	r3, [pc, #144]	@ (8007698 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760c:	2201      	movs	r2, #1
 800760e:	fa02 f303 	lsl.w	r3, r2, r3
 8007612:	43da      	mvns	r2, r3
 8007614:	4b21      	ldr	r3, [pc, #132]	@ (800769c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4013      	ands	r3, r2
 800761a:	4a20      	ldr	r2, [pc, #128]	@ (800769c <prvAddCurrentTaskToDelayedList+0xb8>)
 800761c:	6013      	str	r3, [r2, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< HEAD
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007514:	d10a      	bne.n	800752c <prvAddCurrentTaskToDelayedList+0x58>
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d007      	beq.n	800752c <prvAddCurrentTaskToDelayedList+0x58>
=======
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007624:	d10a      	bne.n	800763c <prvAddCurrentTaskToDelayedList+0x58>
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d007      	beq.n	800763c <prvAddCurrentTaskToDelayedList+0x58>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< HEAD
 800751c:	4b1a      	ldr	r3, [pc, #104]	@ (8007588 <prvAddCurrentTaskToDelayedList+0xb4>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3304      	adds	r3, #4
 8007522:	4619      	mov	r1, r3
 8007524:	481a      	ldr	r0, [pc, #104]	@ (8007590 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007526:	f7fe fa03 	bl	8005930 <vListInsertEnd>
=======
 800762c:	4b1a      	ldr	r3, [pc, #104]	@ (8007698 <prvAddCurrentTaskToDelayedList+0xb4>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3304      	adds	r3, #4
 8007632:	4619      	mov	r1, r3
 8007634:	481a      	ldr	r0, [pc, #104]	@ (80076a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007636:	f7fe fa03 	bl	8005a40 <vListInsertEnd>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< HEAD
 800752a:	e026      	b.n	800757a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4413      	add	r3, r2
 8007532:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007534:	4b14      	ldr	r3, [pc, #80]	@ (8007588 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	429a      	cmp	r2, r3
 8007542:	d209      	bcs.n	8007558 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007544:	4b13      	ldr	r3, [pc, #76]	@ (8007594 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	4b0f      	ldr	r3, [pc, #60]	@ (8007588 <prvAddCurrentTaskToDelayedList+0xb4>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3304      	adds	r3, #4
 800754e:	4619      	mov	r1, r3
 8007550:	4610      	mov	r0, r2
 8007552:	f7fe fa11 	bl	8005978 <vListInsert>
}
 8007556:	e010      	b.n	800757a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007558:	4b0f      	ldr	r3, [pc, #60]	@ (8007598 <prvAddCurrentTaskToDelayedList+0xc4>)
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	4b0a      	ldr	r3, [pc, #40]	@ (8007588 <prvAddCurrentTaskToDelayedList+0xb4>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3304      	adds	r3, #4
 8007562:	4619      	mov	r1, r3
 8007564:	4610      	mov	r0, r2
 8007566:	f7fe fa07 	bl	8005978 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800756a:	4b0c      	ldr	r3, [pc, #48]	@ (800759c <prvAddCurrentTaskToDelayedList+0xc8>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	429a      	cmp	r2, r3
 8007572:	d202      	bcs.n	800757a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007574:	4a09      	ldr	r2, [pc, #36]	@ (800759c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	6013      	str	r3, [r2, #0]
}
 800757a:	bf00      	nop
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	200004d0 	.word	0x200004d0
 8007588:	200003cc 	.word	0x200003cc
 800758c:	200004d4 	.word	0x200004d4
 8007590:	200004b8 	.word	0x200004b8
 8007594:	20000488 	.word	0x20000488
 8007598:	20000484 	.word	0x20000484
 800759c:	200004ec 	.word	0x200004ec

080075a0 <pxPortInitialiseStack>:
=======
 800763a:	e026      	b.n	800768a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4413      	add	r3, r2
 8007642:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007644:	4b14      	ldr	r3, [pc, #80]	@ (8007698 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	429a      	cmp	r2, r3
 8007652:	d209      	bcs.n	8007668 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007654:	4b13      	ldr	r3, [pc, #76]	@ (80076a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	4b0f      	ldr	r3, [pc, #60]	@ (8007698 <prvAddCurrentTaskToDelayedList+0xb4>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3304      	adds	r3, #4
 800765e:	4619      	mov	r1, r3
 8007660:	4610      	mov	r0, r2
 8007662:	f7fe fa11 	bl	8005a88 <vListInsert>
}
 8007666:	e010      	b.n	800768a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007668:	4b0f      	ldr	r3, [pc, #60]	@ (80076a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	4b0a      	ldr	r3, [pc, #40]	@ (8007698 <prvAddCurrentTaskToDelayedList+0xb4>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3304      	adds	r3, #4
 8007672:	4619      	mov	r1, r3
 8007674:	4610      	mov	r0, r2
 8007676:	f7fe fa07 	bl	8005a88 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800767a:	4b0c      	ldr	r3, [pc, #48]	@ (80076ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	429a      	cmp	r2, r3
 8007682:	d202      	bcs.n	800768a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007684:	4a09      	ldr	r2, [pc, #36]	@ (80076ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	6013      	str	r3, [r2, #0]
}
 800768a:	bf00      	nop
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	200004d8 	.word	0x200004d8
 8007698:	200003d4 	.word	0x200003d4
 800769c:	200004dc 	.word	0x200004dc
 80076a0:	200004c0 	.word	0x200004c0
 80076a4:	20000490 	.word	0x20000490
 80076a8:	2000048c 	.word	0x2000048c
 80076ac:	200004f4 	.word	0x200004f4

080076b0 <pxPortInitialiseStack>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< HEAD
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
=======
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
<<<<<<< HEAD
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	3b04      	subs	r3, #4
 80075b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80075b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3b04      	subs	r3, #4
 80075be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	f023 0201 	bic.w	r2, r3, #1
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3b04      	subs	r3, #4
 80075ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075d0:	4a0c      	ldr	r2, [pc, #48]	@ (8007604 <pxPortInitialiseStack+0x64>)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	3b14      	subs	r3, #20
 80075da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	601a      	str	r2, [r3, #0]
=======
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	3b04      	subs	r3, #4
 80076c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80076c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	3b04      	subs	r3, #4
 80076ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f023 0201 	bic.w	r2, r3, #1
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	3b04      	subs	r3, #4
 80076de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076e0:	4a0c      	ldr	r2, [pc, #48]	@ (8007714 <pxPortInitialiseStack+0x64>)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	3b14      	subs	r3, #20
 80076ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
<<<<<<< HEAD
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	3b04      	subs	r3, #4
 80075e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f06f 0202 	mvn.w	r2, #2
 80075ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3b20      	subs	r3, #32
 80075f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80075f6:	68fb      	ldr	r3, [r7, #12]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	08007609 	.word	0x08007609

08007608 <prvTaskExitError>:
=======
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	3b04      	subs	r3, #4
 80076f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f06f 0202 	mvn.w	r2, #2
 80076fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	3b20      	subs	r3, #32
 8007704:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007706:	68fb      	ldr	r3, [r7, #12]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	08007719 	.word	0x08007719

08007718 <prvTaskExitError>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
<<<<<<< HEAD
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800760e:	2300      	movs	r3, #0
 8007610:	607b      	str	r3, [r7, #4]
=======
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800771e:	2300      	movs	r3, #0
 8007720:	607b      	str	r3, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< HEAD
 8007612:	4b13      	ldr	r3, [pc, #76]	@ (8007660 <prvTaskExitError+0x58>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800761a:	d00b      	beq.n	8007634 <prvTaskExitError+0x2c>
	__asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	60fb      	str	r3, [r7, #12]
}
 800762e:	bf00      	nop
 8007630:	bf00      	nop
 8007632:	e7fd      	b.n	8007630 <prvTaskExitError+0x28>
	__asm volatile
 8007634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007638:	f383 8811 	msr	BASEPRI, r3
 800763c:	f3bf 8f6f 	isb	sy
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	60bb      	str	r3, [r7, #8]
}
 8007646:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007648:	bf00      	nop
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d0fc      	beq.n	800764a <prvTaskExitError+0x42>
=======
 8007722:	4b13      	ldr	r3, [pc, #76]	@ (8007770 <prvTaskExitError+0x58>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772a:	d00b      	beq.n	8007744 <prvTaskExitError+0x2c>
	__asm volatile
 800772c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	60fb      	str	r3, [r7, #12]
}
 800773e:	bf00      	nop
 8007740:	bf00      	nop
 8007742:	e7fd      	b.n	8007740 <prvTaskExitError+0x28>
	__asm volatile
 8007744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	60bb      	str	r3, [r7, #8]
}
 8007756:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007758:	bf00      	nop
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d0fc      	beq.n	800775a <prvTaskExitError+0x42>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
<<<<<<< HEAD
 8007650:	bf00      	nop
 8007652:	bf00      	nop
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	2000000c 	.word	0x2000000c
	...

08007670 <SVC_Handler>:
=======
 8007760:	bf00      	nop
 8007762:	bf00      	nop
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	2000000c 	.word	0x2000000c
	...

08007780 <SVC_Handler>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
<<<<<<< HEAD
 8007670:	4b07      	ldr	r3, [pc, #28]	@ (8007690 <pxCurrentTCBConst2>)
 8007672:	6819      	ldr	r1, [r3, #0]
 8007674:	6808      	ldr	r0, [r1, #0]
 8007676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767a:	f380 8809 	msr	PSP, r0
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f04f 0000 	mov.w	r0, #0
 8007686:	f380 8811 	msr	BASEPRI, r0
 800768a:	4770      	bx	lr
 800768c:	f3af 8000 	nop.w

08007690 <pxCurrentTCBConst2>:
 8007690:	200003cc 	.word	0x200003cc
=======
 8007780:	4b07      	ldr	r3, [pc, #28]	@ (80077a0 <pxCurrentTCBConst2>)
 8007782:	6819      	ldr	r1, [r3, #0]
 8007784:	6808      	ldr	r0, [r1, #0]
 8007786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778a:	f380 8809 	msr	PSP, r0
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f04f 0000 	mov.w	r0, #0
 8007796:	f380 8811 	msr	BASEPRI, r0
 800779a:	4770      	bx	lr
 800779c:	f3af 8000 	nop.w

080077a0 <pxCurrentTCBConst2>:
 80077a0:	200003d4 	.word	0x200003d4
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
<<<<<<< HEAD
 8007694:	bf00      	nop
 8007696:	bf00      	nop

08007698 <prvPortStartFirstTask>:
=======
 80077a4:	bf00      	nop
 80077a6:	bf00      	nop

080077a8 <prvPortStartFirstTask>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
<<<<<<< HEAD
 8007698:	4808      	ldr	r0, [pc, #32]	@ (80076bc <prvPortStartFirstTask+0x24>)
 800769a:	6800      	ldr	r0, [r0, #0]
 800769c:	6800      	ldr	r0, [r0, #0]
 800769e:	f380 8808 	msr	MSP, r0
 80076a2:	f04f 0000 	mov.w	r0, #0
 80076a6:	f380 8814 	msr	CONTROL, r0
 80076aa:	b662      	cpsie	i
 80076ac:	b661      	cpsie	f
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	df00      	svc	0
 80076b8:	bf00      	nop
=======
 80077a8:	4808      	ldr	r0, [pc, #32]	@ (80077cc <prvPortStartFirstTask+0x24>)
 80077aa:	6800      	ldr	r0, [r0, #0]
 80077ac:	6800      	ldr	r0, [r0, #0]
 80077ae:	f380 8808 	msr	MSP, r0
 80077b2:	f04f 0000 	mov.w	r0, #0
 80077b6:	f380 8814 	msr	CONTROL, r0
 80077ba:	b662      	cpsie	i
 80077bc:	b661      	cpsie	f
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	df00      	svc	0
 80077c8:	bf00      	nop
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< HEAD
 80076ba:	bf00      	nop
 80076bc:	e000ed08 	.word	0xe000ed08

080076c0 <xPortStartScheduler>:
=======
 80077ca:	bf00      	nop
 80077cc:	e000ed08 	.word	0xe000ed08

080077d0 <xPortStartScheduler>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< HEAD
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
=======
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
<<<<<<< HEAD
 80076c6:	4b47      	ldr	r3, [pc, #284]	@ (80077e4 <xPortStartScheduler+0x124>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a47      	ldr	r2, [pc, #284]	@ (80077e8 <xPortStartScheduler+0x128>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d10b      	bne.n	80076e8 <xPortStartScheduler+0x28>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	613b      	str	r3, [r7, #16]
}
 80076e2:	bf00      	nop
 80076e4:	bf00      	nop
 80076e6:	e7fd      	b.n	80076e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80076e8:	4b3e      	ldr	r3, [pc, #248]	@ (80077e4 <xPortStartScheduler+0x124>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a3f      	ldr	r2, [pc, #252]	@ (80077ec <xPortStartScheduler+0x12c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d10b      	bne.n	800770a <xPortStartScheduler+0x4a>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	60fb      	str	r3, [r7, #12]
}
 8007704:	bf00      	nop
 8007706:	bf00      	nop
 8007708:	e7fd      	b.n	8007706 <xPortStartScheduler+0x46>
=======
 80077d6:	4b47      	ldr	r3, [pc, #284]	@ (80078f4 <xPortStartScheduler+0x124>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a47      	ldr	r2, [pc, #284]	@ (80078f8 <xPortStartScheduler+0x128>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d10b      	bne.n	80077f8 <xPortStartScheduler+0x28>
	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	613b      	str	r3, [r7, #16]
}
 80077f2:	bf00      	nop
 80077f4:	bf00      	nop
 80077f6:	e7fd      	b.n	80077f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077f8:	4b3e      	ldr	r3, [pc, #248]	@ (80078f4 <xPortStartScheduler+0x124>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a3f      	ldr	r2, [pc, #252]	@ (80078fc <xPortStartScheduler+0x12c>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d10b      	bne.n	800781a <xPortStartScheduler+0x4a>
	__asm volatile
 8007802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	60fb      	str	r3, [r7, #12]
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop
 8007818:	e7fd      	b.n	8007816 <xPortStartScheduler+0x46>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
<<<<<<< HEAD
 800770a:	4b39      	ldr	r3, [pc, #228]	@ (80077f0 <xPortStartScheduler+0x130>)
 800770c:	617b      	str	r3, [r7, #20]
=======
 800781a:	4b39      	ldr	r3, [pc, #228]	@ (8007900 <xPortStartScheduler+0x130>)
 800781c:	617b      	str	r3, [r7, #20]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
<<<<<<< HEAD
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	b2db      	uxtb	r3, r3
 8007714:	607b      	str	r3, [r7, #4]
=======
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	b2db      	uxtb	r3, r3
 8007824:	607b      	str	r3, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
<<<<<<< HEAD
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	22ff      	movs	r2, #255	@ 0xff
 800771a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	b2db      	uxtb	r3, r3
 8007722:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007724:	78fb      	ldrb	r3, [r7, #3]
 8007726:	b2db      	uxtb	r3, r3
 8007728:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800772c:	b2da      	uxtb	r2, r3
 800772e:	4b31      	ldr	r3, [pc, #196]	@ (80077f4 <xPortStartScheduler+0x134>)
 8007730:	701a      	strb	r2, [r3, #0]
=======
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	22ff      	movs	r2, #255	@ 0xff
 800782a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007834:	78fb      	ldrb	r3, [r7, #3]
 8007836:	b2db      	uxtb	r3, r3
 8007838:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800783c:	b2da      	uxtb	r2, r3
 800783e:	4b31      	ldr	r3, [pc, #196]	@ (8007904 <xPortStartScheduler+0x134>)
 8007840:	701a      	strb	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
<<<<<<< HEAD
 8007732:	4b31      	ldr	r3, [pc, #196]	@ (80077f8 <xPortStartScheduler+0x138>)
 8007734:	2207      	movs	r2, #7
 8007736:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007738:	e009      	b.n	800774e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800773a:	4b2f      	ldr	r3, [pc, #188]	@ (80077f8 <xPortStartScheduler+0x138>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3b01      	subs	r3, #1
 8007740:	4a2d      	ldr	r2, [pc, #180]	@ (80077f8 <xPortStartScheduler+0x138>)
 8007742:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007744:	78fb      	ldrb	r3, [r7, #3]
 8007746:	b2db      	uxtb	r3, r3
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	b2db      	uxtb	r3, r3
 800774c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800774e:	78fb      	ldrb	r3, [r7, #3]
 8007750:	b2db      	uxtb	r3, r3
 8007752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007756:	2b80      	cmp	r3, #128	@ 0x80
 8007758:	d0ef      	beq.n	800773a <xPortStartScheduler+0x7a>
=======
 8007842:	4b31      	ldr	r3, [pc, #196]	@ (8007908 <xPortStartScheduler+0x138>)
 8007844:	2207      	movs	r2, #7
 8007846:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007848:	e009      	b.n	800785e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800784a:	4b2f      	ldr	r3, [pc, #188]	@ (8007908 <xPortStartScheduler+0x138>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3b01      	subs	r3, #1
 8007850:	4a2d      	ldr	r2, [pc, #180]	@ (8007908 <xPortStartScheduler+0x138>)
 8007852:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007854:	78fb      	ldrb	r3, [r7, #3]
 8007856:	b2db      	uxtb	r3, r3
 8007858:	005b      	lsls	r3, r3, #1
 800785a:	b2db      	uxtb	r3, r3
 800785c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800785e:	78fb      	ldrb	r3, [r7, #3]
 8007860:	b2db      	uxtb	r3, r3
 8007862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007866:	2b80      	cmp	r3, #128	@ 0x80
 8007868:	d0ef      	beq.n	800784a <xPortStartScheduler+0x7a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
<<<<<<< HEAD
 800775a:	4b27      	ldr	r3, [pc, #156]	@ (80077f8 <xPortStartScheduler+0x138>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f1c3 0307 	rsb	r3, r3, #7
 8007762:	2b04      	cmp	r3, #4
 8007764:	d00b      	beq.n	800777e <xPortStartScheduler+0xbe>
	__asm volatile
 8007766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	60bb      	str	r3, [r7, #8]
}
 8007778:	bf00      	nop
 800777a:	bf00      	nop
 800777c:	e7fd      	b.n	800777a <xPortStartScheduler+0xba>
=======
 800786a:	4b27      	ldr	r3, [pc, #156]	@ (8007908 <xPortStartScheduler+0x138>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f1c3 0307 	rsb	r3, r3, #7
 8007872:	2b04      	cmp	r3, #4
 8007874:	d00b      	beq.n	800788e <xPortStartScheduler+0xbe>
	__asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	60bb      	str	r3, [r7, #8]
}
 8007888:	bf00      	nop
 800788a:	bf00      	nop
 800788c:	e7fd      	b.n	800788a <xPortStartScheduler+0xba>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
<<<<<<< HEAD
 800777e:	4b1e      	ldr	r3, [pc, #120]	@ (80077f8 <xPortStartScheduler+0x138>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	021b      	lsls	r3, r3, #8
 8007784:	4a1c      	ldr	r2, [pc, #112]	@ (80077f8 <xPortStartScheduler+0x138>)
 8007786:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007788:	4b1b      	ldr	r3, [pc, #108]	@ (80077f8 <xPortStartScheduler+0x138>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007790:	4a19      	ldr	r2, [pc, #100]	@ (80077f8 <xPortStartScheduler+0x138>)
 8007792:	6013      	str	r3, [r2, #0]
=======
 800788e:	4b1e      	ldr	r3, [pc, #120]	@ (8007908 <xPortStartScheduler+0x138>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	021b      	lsls	r3, r3, #8
 8007894:	4a1c      	ldr	r2, [pc, #112]	@ (8007908 <xPortStartScheduler+0x138>)
 8007896:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007898:	4b1b      	ldr	r3, [pc, #108]	@ (8007908 <xPortStartScheduler+0x138>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078a0:	4a19      	ldr	r2, [pc, #100]	@ (8007908 <xPortStartScheduler+0x138>)
 80078a2:	6013      	str	r3, [r2, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
<<<<<<< HEAD
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	b2da      	uxtb	r2, r3
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	701a      	strb	r2, [r3, #0]
=======
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	701a      	strb	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
<<<<<<< HEAD
 800779c:	4b17      	ldr	r3, [pc, #92]	@ (80077fc <xPortStartScheduler+0x13c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a16      	ldr	r2, [pc, #88]	@ (80077fc <xPortStartScheduler+0x13c>)
 80077a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80077a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077a8:	4b14      	ldr	r3, [pc, #80]	@ (80077fc <xPortStartScheduler+0x13c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a13      	ldr	r2, [pc, #76]	@ (80077fc <xPortStartScheduler+0x13c>)
 80077ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80077b2:	6013      	str	r3, [r2, #0]
=======
 80078ac:	4b17      	ldr	r3, [pc, #92]	@ (800790c <xPortStartScheduler+0x13c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a16      	ldr	r2, [pc, #88]	@ (800790c <xPortStartScheduler+0x13c>)
 80078b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80078b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078b8:	4b14      	ldr	r3, [pc, #80]	@ (800790c <xPortStartScheduler+0x13c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a13      	ldr	r2, [pc, #76]	@ (800790c <xPortStartScheduler+0x13c>)
 80078be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80078c2:	6013      	str	r3, [r2, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< HEAD
 80077b4:	f000 f8da 	bl	800796c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077b8:	4b11      	ldr	r3, [pc, #68]	@ (8007800 <xPortStartScheduler+0x140>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077be:	f000 f8f9 	bl	80079b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077c2:	4b10      	ldr	r3, [pc, #64]	@ (8007804 <xPortStartScheduler+0x144>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a0f      	ldr	r2, [pc, #60]	@ (8007804 <xPortStartScheduler+0x144>)
 80077c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80077cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077ce:	f7ff ff63 	bl	8007698 <prvPortStartFirstTask>
=======
 80078c4:	f000 f8da 	bl	8007a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078c8:	4b11      	ldr	r3, [pc, #68]	@ (8007910 <xPortStartScheduler+0x140>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078ce:	f000 f8f9 	bl	8007ac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078d2:	4b10      	ldr	r3, [pc, #64]	@ (8007914 <xPortStartScheduler+0x144>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a0f      	ldr	r2, [pc, #60]	@ (8007914 <xPortStartScheduler+0x144>)
 80078d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80078dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078de:	f7ff ff63 	bl	80077a8 <prvPortStartFirstTask>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
<<<<<<< HEAD
 80077d2:	f7ff f9a7 	bl	8006b24 <vTaskSwitchContext>
	prvTaskExitError();
 80077d6:	f7ff ff17 	bl	8007608 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	e000ed00 	.word	0xe000ed00
 80077e8:	410fc271 	.word	0x410fc271
 80077ec:	410fc270 	.word	0x410fc270
 80077f0:	e000e400 	.word	0xe000e400
 80077f4:	200004f8 	.word	0x200004f8
 80077f8:	200004fc 	.word	0x200004fc
 80077fc:	e000ed20 	.word	0xe000ed20
 8007800:	2000000c 	.word	0x2000000c
 8007804:	e000ef34 	.word	0xe000ef34

08007808 <vPortEnterCritical>:
=======
 80078e2:	f7ff f9a7 	bl	8006c34 <vTaskSwitchContext>
	prvTaskExitError();
 80078e6:	f7ff ff17 	bl	8007718 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3718      	adds	r7, #24
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	e000ed00 	.word	0xe000ed00
 80078f8:	410fc271 	.word	0x410fc271
 80078fc:	410fc270 	.word	0x410fc270
 8007900:	e000e400 	.word	0xe000e400
 8007904:	20000500 	.word	0x20000500
 8007908:	20000504 	.word	0x20000504
 800790c:	e000ed20 	.word	0xe000ed20
 8007910:	2000000c 	.word	0x2000000c
 8007914:	e000ef34 	.word	0xe000ef34

08007918 <vPortEnterCritical>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
<<<<<<< HEAD
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
	__asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	607b      	str	r3, [r7, #4]
}
 8007820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007822:	4b10      	ldr	r3, [pc, #64]	@ (8007864 <vPortEnterCritical+0x5c>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	3301      	adds	r3, #1
 8007828:	4a0e      	ldr	r2, [pc, #56]	@ (8007864 <vPortEnterCritical+0x5c>)
 800782a:	6013      	str	r3, [r2, #0]
=======
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	607b      	str	r3, [r7, #4]
}
 8007930:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007932:	4b10      	ldr	r3, [pc, #64]	@ (8007974 <vPortEnterCritical+0x5c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3301      	adds	r3, #1
 8007938:	4a0e      	ldr	r2, [pc, #56]	@ (8007974 <vPortEnterCritical+0x5c>)
 800793a:	6013      	str	r3, [r2, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
<<<<<<< HEAD
 800782c:	4b0d      	ldr	r3, [pc, #52]	@ (8007864 <vPortEnterCritical+0x5c>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d110      	bne.n	8007856 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007834:	4b0c      	ldr	r3, [pc, #48]	@ (8007868 <vPortEnterCritical+0x60>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00b      	beq.n	8007856 <vPortEnterCritical+0x4e>
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	603b      	str	r3, [r7, #0]
}
 8007850:	bf00      	nop
 8007852:	bf00      	nop
 8007854:	e7fd      	b.n	8007852 <vPortEnterCritical+0x4a>
	}
}
 8007856:	bf00      	nop
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	2000000c 	.word	0x2000000c
 8007868:	e000ed04 	.word	0xe000ed04

0800786c <vPortExitCritical>:
=======
 800793c:	4b0d      	ldr	r3, [pc, #52]	@ (8007974 <vPortEnterCritical+0x5c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d110      	bne.n	8007966 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007944:	4b0c      	ldr	r3, [pc, #48]	@ (8007978 <vPortEnterCritical+0x60>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00b      	beq.n	8007966 <vPortEnterCritical+0x4e>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	603b      	str	r3, [r7, #0]
}
 8007960:	bf00      	nop
 8007962:	bf00      	nop
 8007964:	e7fd      	b.n	8007962 <vPortEnterCritical+0x4a>
	}
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	2000000c 	.word	0x2000000c
 8007978:	e000ed04 	.word	0xe000ed04

0800797c <vPortExitCritical>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
<<<<<<< HEAD
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007872:	4b12      	ldr	r3, [pc, #72]	@ (80078bc <vPortExitCritical+0x50>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10b      	bne.n	8007892 <vPortExitCritical+0x26>
	__asm volatile
 800787a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	607b      	str	r3, [r7, #4]
}
 800788c:	bf00      	nop
 800788e:	bf00      	nop
 8007890:	e7fd      	b.n	800788e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007892:	4b0a      	ldr	r3, [pc, #40]	@ (80078bc <vPortExitCritical+0x50>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	3b01      	subs	r3, #1
 8007898:	4a08      	ldr	r2, [pc, #32]	@ (80078bc <vPortExitCritical+0x50>)
 800789a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800789c:	4b07      	ldr	r3, [pc, #28]	@ (80078bc <vPortExitCritical+0x50>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d105      	bne.n	80078b0 <vPortExitCritical+0x44>
 80078a4:	2300      	movs	r3, #0
 80078a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	f383 8811 	msr	BASEPRI, r3
}
 80078ae:	bf00      	nop
=======
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007982:	4b12      	ldr	r3, [pc, #72]	@ (80079cc <vPortExitCritical+0x50>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10b      	bne.n	80079a2 <vPortExitCritical+0x26>
	__asm volatile
 800798a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	607b      	str	r3, [r7, #4]
}
 800799c:	bf00      	nop
 800799e:	bf00      	nop
 80079a0:	e7fd      	b.n	800799e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079a2:	4b0a      	ldr	r3, [pc, #40]	@ (80079cc <vPortExitCritical+0x50>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	4a08      	ldr	r2, [pc, #32]	@ (80079cc <vPortExitCritical+0x50>)
 80079aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079ac:	4b07      	ldr	r3, [pc, #28]	@ (80079cc <vPortExitCritical+0x50>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d105      	bne.n	80079c0 <vPortExitCritical+0x44>
 80079b4:	2300      	movs	r3, #0
 80079b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	f383 8811 	msr	BASEPRI, r3
}
 80079be:	bf00      	nop
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	{
		portENABLE_INTERRUPTS();
	}
}
<<<<<<< HEAD
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	2000000c 	.word	0x2000000c

080078c0 <PendSV_Handler>:
=======
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	2000000c 	.word	0x2000000c

080079d0 <PendSV_Handler>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< HEAD
 80078c0:	f3ef 8009 	mrs	r0, PSP
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	4b15      	ldr	r3, [pc, #84]	@ (8007920 <pxCurrentTCBConst>)
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	f01e 0f10 	tst.w	lr, #16
 80078d0:	bf08      	it	eq
 80078d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078da:	6010      	str	r0, [r2, #0]
 80078dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80078e4:	f380 8811 	msr	BASEPRI, r0
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f7ff f918 	bl	8006b24 <vTaskSwitchContext>
 80078f4:	f04f 0000 	mov.w	r0, #0
 80078f8:	f380 8811 	msr	BASEPRI, r0
 80078fc:	bc09      	pop	{r0, r3}
 80078fe:	6819      	ldr	r1, [r3, #0]
 8007900:	6808      	ldr	r0, [r1, #0]
 8007902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007906:	f01e 0f10 	tst.w	lr, #16
 800790a:	bf08      	it	eq
 800790c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007910:	f380 8809 	msr	PSP, r0
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	f3af 8000 	nop.w

08007920 <pxCurrentTCBConst>:
 8007920:	200003cc 	.word	0x200003cc
=======
 80079d0:	f3ef 8009 	mrs	r0, PSP
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	4b15      	ldr	r3, [pc, #84]	@ (8007a30 <pxCurrentTCBConst>)
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	f01e 0f10 	tst.w	lr, #16
 80079e0:	bf08      	it	eq
 80079e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ea:	6010      	str	r0, [r2, #0]
 80079ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80079f4:	f380 8811 	msr	BASEPRI, r0
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f7ff f918 	bl	8006c34 <vTaskSwitchContext>
 8007a04:	f04f 0000 	mov.w	r0, #0
 8007a08:	f380 8811 	msr	BASEPRI, r0
 8007a0c:	bc09      	pop	{r0, r3}
 8007a0e:	6819      	ldr	r1, [r3, #0]
 8007a10:	6808      	ldr	r0, [r1, #0]
 8007a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a16:	f01e 0f10 	tst.w	lr, #16
 8007a1a:	bf08      	it	eq
 8007a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a20:	f380 8809 	msr	PSP, r0
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	f3af 8000 	nop.w

08007a30 <pxCurrentTCBConst>:
 8007a30:	200003d4 	.word	0x200003d4
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
<<<<<<< HEAD
 8007924:	bf00      	nop
 8007926:	bf00      	nop

08007928 <SysTick_Handler>:
=======
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop

08007a38 <SysTick_Handler>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< HEAD
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
	__asm volatile
 800792e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	607b      	str	r3, [r7, #4]
}
 8007940:	bf00      	nop
=======
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	607b      	str	r3, [r7, #4]
}
 8007a50:	bf00      	nop
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 8007942:	f7ff f835 	bl	80069b0 <xTaskIncrementTick>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <SysTick_Handler+0x2c>
=======
 8007a52:	f7ff f835 	bl	8006ac0 <xTaskIncrementTick>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <SysTick_Handler+0x2c>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
<<<<<<< HEAD
 800794c:	4b06      	ldr	r3, [pc, #24]	@ (8007968 <SysTick_Handler+0x40>)
 800794e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	2300      	movs	r3, #0
 8007956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	f383 8811 	msr	BASEPRI, r3
}
 800795e:	bf00      	nop
=======
 8007a5c:	4b06      	ldr	r3, [pc, #24]	@ (8007a78 <SysTick_Handler+0x40>)
 8007a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	2300      	movs	r3, #0
 8007a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	f383 8811 	msr	BASEPRI, r3
}
 8007a6e:	bf00      	nop
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
	}
	portENABLE_INTERRUPTS();
}
<<<<<<< HEAD
 8007960:	bf00      	nop
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	e000ed04 	.word	0xe000ed04

0800796c <vPortSetupTimerInterrupt>:
=======
 8007a70:	bf00      	nop
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	e000ed04 	.word	0xe000ed04

08007a7c <vPortSetupTimerInterrupt>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< HEAD
 800796c:	b480      	push	{r7}
 800796e:	af00      	add	r7, sp, #0
=======
 8007a7c:	b480      	push	{r7}
 8007a7e:	af00      	add	r7, sp, #0
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
<<<<<<< HEAD
 8007970:	4b0b      	ldr	r3, [pc, #44]	@ (80079a0 <vPortSetupTimerInterrupt+0x34>)
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007976:	4b0b      	ldr	r3, [pc, #44]	@ (80079a4 <vPortSetupTimerInterrupt+0x38>)
 8007978:	2200      	movs	r2, #0
 800797a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800797c:	4b0a      	ldr	r3, [pc, #40]	@ (80079a8 <vPortSetupTimerInterrupt+0x3c>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a0a      	ldr	r2, [pc, #40]	@ (80079ac <vPortSetupTimerInterrupt+0x40>)
 8007982:	fba2 2303 	umull	r2, r3, r2, r3
 8007986:	099b      	lsrs	r3, r3, #6
 8007988:	4a09      	ldr	r2, [pc, #36]	@ (80079b0 <vPortSetupTimerInterrupt+0x44>)
 800798a:	3b01      	subs	r3, #1
 800798c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800798e:	4b04      	ldr	r3, [pc, #16]	@ (80079a0 <vPortSetupTimerInterrupt+0x34>)
 8007990:	2207      	movs	r2, #7
 8007992:	601a      	str	r2, [r3, #0]
}
 8007994:	bf00      	nop
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	e000e010 	.word	0xe000e010
 80079a4:	e000e018 	.word	0xe000e018
 80079a8:	20000000 	.word	0x20000000
 80079ac:	10624dd3 	.word	0x10624dd3
 80079b0:	e000e014 	.word	0xe000e014

080079b4 <vPortEnableVFP>:
=======
 8007a80:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab0 <vPortSetupTimerInterrupt+0x34>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a86:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab4 <vPortSetupTimerInterrupt+0x38>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ab8 <vPortSetupTimerInterrupt+0x3c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a0a      	ldr	r2, [pc, #40]	@ (8007abc <vPortSetupTimerInterrupt+0x40>)
 8007a92:	fba2 2303 	umull	r2, r3, r2, r3
 8007a96:	099b      	lsrs	r3, r3, #6
 8007a98:	4a09      	ldr	r2, [pc, #36]	@ (8007ac0 <vPortSetupTimerInterrupt+0x44>)
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a9e:	4b04      	ldr	r3, [pc, #16]	@ (8007ab0 <vPortSetupTimerInterrupt+0x34>)
 8007aa0:	2207      	movs	r2, #7
 8007aa2:	601a      	str	r2, [r3, #0]
}
 8007aa4:	bf00      	nop
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	e000e010 	.word	0xe000e010
 8007ab4:	e000e018 	.word	0xe000e018
 8007ab8:	20000000 	.word	0x20000000
 8007abc:	10624dd3 	.word	0x10624dd3
 8007ac0:	e000e014 	.word	0xe000e014

08007ac4 <vPortEnableVFP>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
<<<<<<< HEAD
 80079b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80079c4 <vPortEnableVFP+0x10>
 80079b8:	6801      	ldr	r1, [r0, #0]
 80079ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80079be:	6001      	str	r1, [r0, #0]
 80079c0:	4770      	bx	lr
=======
 8007ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ad4 <vPortEnableVFP+0x10>
 8007ac8:	6801      	ldr	r1, [r0, #0]
 8007aca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007ace:	6001      	str	r1, [r0, #0]
 8007ad0:	4770      	bx	lr
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
<<<<<<< HEAD
 80079c2:	bf00      	nop
 80079c4:	e000ed88 	.word	0xe000ed88

080079c8 <vPortValidateInterruptPriority>:
=======
 8007ad2:	bf00      	nop
 8007ad4:	e000ed88 	.word	0xe000ed88

08007ad8 <vPortValidateInterruptPriority>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
<<<<<<< HEAD
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
=======
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
<<<<<<< HEAD
 80079ce:	f3ef 8305 	mrs	r3, IPSR
 80079d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2b0f      	cmp	r3, #15
 80079d8:	d915      	bls.n	8007a06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079da:	4a18      	ldr	r2, [pc, #96]	@ (8007a3c <vPortValidateInterruptPriority+0x74>)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	4413      	add	r3, r2
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	72fb      	strb	r3, [r7, #11]
=======
 8007ade:	f3ef 8305 	mrs	r3, IPSR
 8007ae2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2b0f      	cmp	r3, #15
 8007ae8:	d915      	bls.n	8007b16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007aea:	4a18      	ldr	r2, [pc, #96]	@ (8007b4c <vPortValidateInterruptPriority+0x74>)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	72fb      	strb	r3, [r7, #11]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
<<<<<<< HEAD
 80079e4:	4b16      	ldr	r3, [pc, #88]	@ (8007a40 <vPortValidateInterruptPriority+0x78>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	7afa      	ldrb	r2, [r7, #11]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d20b      	bcs.n	8007a06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	607b      	str	r3, [r7, #4]
}
 8007a00:	bf00      	nop
 8007a02:	bf00      	nop
 8007a04:	e7fd      	b.n	8007a02 <vPortValidateInterruptPriority+0x3a>
=======
 8007af4:	4b16      	ldr	r3, [pc, #88]	@ (8007b50 <vPortValidateInterruptPriority+0x78>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	7afa      	ldrb	r2, [r7, #11]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d20b      	bcs.n	8007b16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	607b      	str	r3, [r7, #4]
}
 8007b10:	bf00      	nop
 8007b12:	bf00      	nop
 8007b14:	e7fd      	b.n	8007b12 <vPortValidateInterruptPriority+0x3a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
<<<<<<< HEAD
 8007a06:	4b0f      	ldr	r3, [pc, #60]	@ (8007a44 <vPortValidateInterruptPriority+0x7c>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8007a48 <vPortValidateInterruptPriority+0x80>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d90b      	bls.n	8007a2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	603b      	str	r3, [r7, #0]
}
 8007a28:	bf00      	nop
 8007a2a:	bf00      	nop
 8007a2c:	e7fd      	b.n	8007a2a <vPortValidateInterruptPriority+0x62>
	}
 8007a2e:	bf00      	nop
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	e000e3f0 	.word	0xe000e3f0
 8007a40:	200004f8 	.word	0x200004f8
 8007a44:	e000ed0c 	.word	0xe000ed0c
 8007a48:	200004fc 	.word	0x200004fc

08007a4c <pvPortMalloc>:
=======
 8007b16:	4b0f      	ldr	r3, [pc, #60]	@ (8007b54 <vPortValidateInterruptPriority+0x7c>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b58 <vPortValidateInterruptPriority+0x80>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d90b      	bls.n	8007b3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	603b      	str	r3, [r7, #0]
}
 8007b38:	bf00      	nop
 8007b3a:	bf00      	nop
 8007b3c:	e7fd      	b.n	8007b3a <vPortValidateInterruptPriority+0x62>
	}
 8007b3e:	bf00      	nop
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	e000e3f0 	.word	0xe000e3f0
 8007b50:	20000500 	.word	0x20000500
 8007b54:	e000ed0c 	.word	0xe000ed0c
 8007b58:	20000504 	.word	0x20000504

08007b5c <pvPortMalloc>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< HEAD
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08a      	sub	sp, #40	@ 0x28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a54:	2300      	movs	r3, #0
 8007a56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a58:	f7fe fefe 	bl	8006858 <vTaskSuspendAll>
=======
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b08a      	sub	sp, #40	@ 0x28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b64:	2300      	movs	r3, #0
 8007b66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b68:	f7fe fefe 	bl	8006968 <vTaskSuspendAll>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
<<<<<<< HEAD
 8007a5c:	4b5a      	ldr	r3, [pc, #360]	@ (8007bc8 <pvPortMalloc+0x17c>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a64:	f000 f916 	bl	8007c94 <prvHeapInit>
=======
 8007b6c:	4b5a      	ldr	r3, [pc, #360]	@ (8007cd8 <pvPortMalloc+0x17c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b74:	f000 f916 	bl	8007da4 <prvHeapInit>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
<<<<<<< HEAD
 8007a68:	4b58      	ldr	r3, [pc, #352]	@ (8007bcc <pvPortMalloc+0x180>)
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4013      	ands	r3, r2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f040 8090 	bne.w	8007b96 <pvPortMalloc+0x14a>
=======
 8007b78:	4b58      	ldr	r3, [pc, #352]	@ (8007cdc <pvPortMalloc+0x180>)
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4013      	ands	r3, r2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f040 8090 	bne.w	8007ca6 <pvPortMalloc+0x14a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
<<<<<<< HEAD
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d01e      	beq.n	8007aba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007a7c:	2208      	movs	r2, #8
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4413      	add	r3, r2
 8007a82:	607b      	str	r3, [r7, #4]
=======
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d01e      	beq.n	8007bca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007b8c:	2208      	movs	r2, #8
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4413      	add	r3, r2
 8007b92:	607b      	str	r3, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
<<<<<<< HEAD
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d015      	beq.n	8007aba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f023 0307 	bic.w	r3, r3, #7
 8007a94:	3308      	adds	r3, #8
 8007a96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f003 0307 	and.w	r3, r3, #7
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00b      	beq.n	8007aba <pvPortMalloc+0x6e>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	617b      	str	r3, [r7, #20]
}
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop
 8007ab8:	e7fd      	b.n	8007ab6 <pvPortMalloc+0x6a>
=======
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f003 0307 	and.w	r3, r3, #7
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d015      	beq.n	8007bca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f023 0307 	bic.w	r3, r3, #7
 8007ba4:	3308      	adds	r3, #8
 8007ba6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f003 0307 	and.w	r3, r3, #7
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00b      	beq.n	8007bca <pvPortMalloc+0x6e>
	__asm volatile
 8007bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb6:	f383 8811 	msr	BASEPRI, r3
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	617b      	str	r3, [r7, #20]
}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop
 8007bc8:	e7fd      	b.n	8007bc6 <pvPortMalloc+0x6a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
<<<<<<< HEAD
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d06a      	beq.n	8007b96 <pvPortMalloc+0x14a>
 8007ac0:	4b43      	ldr	r3, [pc, #268]	@ (8007bd0 <pvPortMalloc+0x184>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d865      	bhi.n	8007b96 <pvPortMalloc+0x14a>
=======
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d06a      	beq.n	8007ca6 <pvPortMalloc+0x14a>
 8007bd0:	4b43      	ldr	r3, [pc, #268]	@ (8007ce0 <pvPortMalloc+0x184>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d865      	bhi.n	8007ca6 <pvPortMalloc+0x14a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
<<<<<<< HEAD
 8007aca:	4b42      	ldr	r3, [pc, #264]	@ (8007bd4 <pvPortMalloc+0x188>)
 8007acc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ace:	4b41      	ldr	r3, [pc, #260]	@ (8007bd4 <pvPortMalloc+0x188>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ad4:	e004      	b.n	8007ae0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d903      	bls.n	8007af2 <pvPortMalloc+0xa6>
 8007aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1f1      	bne.n	8007ad6 <pvPortMalloc+0x8a>
=======
 8007bda:	4b42      	ldr	r3, [pc, #264]	@ (8007ce4 <pvPortMalloc+0x188>)
 8007bdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bde:	4b41      	ldr	r3, [pc, #260]	@ (8007ce4 <pvPortMalloc+0x188>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007be4:	e004      	b.n	8007bf0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d903      	bls.n	8007c02 <pvPortMalloc+0xa6>
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1f1      	bne.n	8007be6 <pvPortMalloc+0x8a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
<<<<<<< HEAD
 8007af2:	4b35      	ldr	r3, [pc, #212]	@ (8007bc8 <pvPortMalloc+0x17c>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d04c      	beq.n	8007b96 <pvPortMalloc+0x14a>
=======
 8007c02:	4b35      	ldr	r3, [pc, #212]	@ (8007cd8 <pvPortMalloc+0x17c>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d04c      	beq.n	8007ca6 <pvPortMalloc+0x14a>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
<<<<<<< HEAD
 8007afc:	6a3b      	ldr	r3, [r7, #32]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2208      	movs	r2, #8
 8007b02:	4413      	add	r3, r2
 8007b04:	61fb      	str	r3, [r7, #28]
=======
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2208      	movs	r2, #8
 8007c12:	4413      	add	r3, r2
 8007c14:	61fb      	str	r3, [r7, #28]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
<<<<<<< HEAD
 8007b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	601a      	str	r2, [r3, #0]
=======
 8007c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
<<<<<<< HEAD
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	1ad2      	subs	r2, r2, r3
 8007b16:	2308      	movs	r3, #8
 8007b18:	005b      	lsls	r3, r3, #1
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d920      	bls.n	8007b60 <pvPortMalloc+0x114>
=======
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c20:	685a      	ldr	r2, [r3, #4]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	1ad2      	subs	r2, r2, r3
 8007c26:	2308      	movs	r3, #8
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d920      	bls.n	8007c70 <pvPortMalloc+0x114>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
<<<<<<< HEAD
 8007b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4413      	add	r3, r2
 8007b24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	f003 0307 	and.w	r3, r3, #7
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00b      	beq.n	8007b48 <pvPortMalloc+0xfc>
	__asm volatile
 8007b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	613b      	str	r3, [r7, #16]
}
 8007b42:	bf00      	nop
 8007b44:	bf00      	nop
 8007b46:	e7fd      	b.n	8007b44 <pvPortMalloc+0xf8>
=======
 8007c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4413      	add	r3, r2
 8007c34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	f003 0307 	and.w	r3, r3, #7
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00b      	beq.n	8007c58 <pvPortMalloc+0xfc>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	613b      	str	r3, [r7, #16]
}
 8007c52:	bf00      	nop
 8007c54:	bf00      	nop
 8007c56:	e7fd      	b.n	8007c54 <pvPortMalloc+0xf8>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
<<<<<<< HEAD
 8007b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	1ad2      	subs	r2, r2, r3
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b5a:	69b8      	ldr	r0, [r7, #24]
 8007b5c:	f000 f8fc 	bl	8007d58 <prvInsertBlockIntoFreeList>
=======
 8007c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	1ad2      	subs	r2, r2, r3
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c6a:	69b8      	ldr	r0, [r7, #24]
 8007c6c:	f000 f8fc 	bl	8007e68 <prvInsertBlockIntoFreeList>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
<<<<<<< HEAD
 8007b60:	4b1b      	ldr	r3, [pc, #108]	@ (8007bd0 <pvPortMalloc+0x184>)
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	4a19      	ldr	r2, [pc, #100]	@ (8007bd0 <pvPortMalloc+0x184>)
 8007b6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b6e:	4b18      	ldr	r3, [pc, #96]	@ (8007bd0 <pvPortMalloc+0x184>)
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	4b19      	ldr	r3, [pc, #100]	@ (8007bd8 <pvPortMalloc+0x18c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d203      	bcs.n	8007b82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b7a:	4b15      	ldr	r3, [pc, #84]	@ (8007bd0 <pvPortMalloc+0x184>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a16      	ldr	r2, [pc, #88]	@ (8007bd8 <pvPortMalloc+0x18c>)
 8007b80:	6013      	str	r3, [r2, #0]
=======
 8007c70:	4b1b      	ldr	r3, [pc, #108]	@ (8007ce0 <pvPortMalloc+0x184>)
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	4a19      	ldr	r2, [pc, #100]	@ (8007ce0 <pvPortMalloc+0x184>)
 8007c7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c7e:	4b18      	ldr	r3, [pc, #96]	@ (8007ce0 <pvPortMalloc+0x184>)
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	4b19      	ldr	r3, [pc, #100]	@ (8007ce8 <pvPortMalloc+0x18c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d203      	bcs.n	8007c92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c8a:	4b15      	ldr	r3, [pc, #84]	@ (8007ce0 <pvPortMalloc+0x184>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a16      	ldr	r2, [pc, #88]	@ (8007ce8 <pvPortMalloc+0x18c>)
 8007c90:	6013      	str	r3, [r2, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
<<<<<<< HEAD
 8007b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	4b11      	ldr	r3, [pc, #68]	@ (8007bcc <pvPortMalloc+0x180>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b92:	2200      	movs	r2, #0
 8007b94:	601a      	str	r2, [r3, #0]
=======
 8007c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c94:	685a      	ldr	r2, [r3, #4]
 8007c96:	4b11      	ldr	r3, [pc, #68]	@ (8007cdc <pvPortMalloc+0x180>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< HEAD
 8007b96:	f7fe fe6d 	bl	8006874 <xTaskResumeAll>
=======
 8007ca6:	f7fe fe6d 	bl	8006984 <xTaskResumeAll>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< HEAD
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	f003 0307 	and.w	r3, r3, #7
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00b      	beq.n	8007bbc <pvPortMalloc+0x170>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	60fb      	str	r3, [r7, #12]
}
 8007bb6:	bf00      	nop
 8007bb8:	bf00      	nop
 8007bba:	e7fd      	b.n	8007bb8 <pvPortMalloc+0x16c>
	return pvReturn;
 8007bbc:	69fb      	ldr	r3, [r7, #28]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3728      	adds	r7, #40	@ 0x28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20004108 	.word	0x20004108
 8007bcc:	20004114 	.word	0x20004114
 8007bd0:	2000410c 	.word	0x2000410c
 8007bd4:	20004100 	.word	0x20004100
 8007bd8:	20004110 	.word	0x20004110

08007bdc <vPortFree>:
=======
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	f003 0307 	and.w	r3, r3, #7
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00b      	beq.n	8007ccc <pvPortMalloc+0x170>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	60fb      	str	r3, [r7, #12]
}
 8007cc6:	bf00      	nop
 8007cc8:	bf00      	nop
 8007cca:	e7fd      	b.n	8007cc8 <pvPortMalloc+0x16c>
	return pvReturn;
 8007ccc:	69fb      	ldr	r3, [r7, #28]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3728      	adds	r7, #40	@ 0x28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20004110 	.word	0x20004110
 8007cdc:	2000411c 	.word	0x2000411c
 8007ce0:	20004114 	.word	0x20004114
 8007ce4:	20004108 	.word	0x20004108
 8007ce8:	20004118 	.word	0x20004118

08007cec <vPortFree>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
<<<<<<< HEAD
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d04a      	beq.n	8007c84 <vPortFree+0xa8>
=======
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d04a      	beq.n	8007d94 <vPortFree+0xa8>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
<<<<<<< HEAD
 8007bee:	2308      	movs	r3, #8
 8007bf0:	425b      	negs	r3, r3
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	4b22      	ldr	r3, [pc, #136]	@ (8007c8c <vPortFree+0xb0>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4013      	ands	r3, r2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10b      	bne.n	8007c22 <vPortFree+0x46>
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	60fb      	str	r3, [r7, #12]
}
 8007c1c:	bf00      	nop
 8007c1e:	bf00      	nop
 8007c20:	e7fd      	b.n	8007c1e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00b      	beq.n	8007c42 <vPortFree+0x66>
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	60bb      	str	r3, [r7, #8]
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	e7fd      	b.n	8007c3e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	4b11      	ldr	r3, [pc, #68]	@ (8007c8c <vPortFree+0xb0>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d019      	beq.n	8007c84 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d115      	bne.n	8007c84 <vPortFree+0xa8>
=======
 8007cfe:	2308      	movs	r3, #8
 8007d00:	425b      	negs	r3, r3
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	4413      	add	r3, r2
 8007d06:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	4b22      	ldr	r3, [pc, #136]	@ (8007d9c <vPortFree+0xb0>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4013      	ands	r3, r2
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10b      	bne.n	8007d32 <vPortFree+0x46>
	__asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d1e:	f383 8811 	msr	BASEPRI, r3
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	60fb      	str	r3, [r7, #12]
}
 8007d2c:	bf00      	nop
 8007d2e:	bf00      	nop
 8007d30:	e7fd      	b.n	8007d2e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00b      	beq.n	8007d52 <vPortFree+0x66>
	__asm volatile
 8007d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	60bb      	str	r3, [r7, #8]
}
 8007d4c:	bf00      	nop
 8007d4e:	bf00      	nop
 8007d50:	e7fd      	b.n	8007d4e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	4b11      	ldr	r3, [pc, #68]	@ (8007d9c <vPortFree+0xb0>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d019      	beq.n	8007d94 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d115      	bne.n	8007d94 <vPortFree+0xa8>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
<<<<<<< HEAD
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c8c <vPortFree+0xb0>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	43db      	mvns	r3, r3
 8007c62:	401a      	ands	r2, r3
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c68:	f7fe fdf6 	bl	8006858 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	685a      	ldr	r2, [r3, #4]
 8007c70:	4b07      	ldr	r3, [pc, #28]	@ (8007c90 <vPortFree+0xb4>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4413      	add	r3, r2
 8007c76:	4a06      	ldr	r2, [pc, #24]	@ (8007c90 <vPortFree+0xb4>)
 8007c78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c7a:	6938      	ldr	r0, [r7, #16]
 8007c7c:	f000 f86c 	bl	8007d58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007c80:	f7fe fdf8 	bl	8006874 <xTaskResumeAll>
=======
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d9c <vPortFree+0xb0>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	43db      	mvns	r3, r3
 8007d72:	401a      	ands	r2, r3
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d78:	f7fe fdf6 	bl	8006968 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	4b07      	ldr	r3, [pc, #28]	@ (8007da0 <vPortFree+0xb4>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4413      	add	r3, r2
 8007d86:	4a06      	ldr	r2, [pc, #24]	@ (8007da0 <vPortFree+0xb4>)
 8007d88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d8a:	6938      	ldr	r0, [r7, #16]
 8007d8c:	f000 f86c 	bl	8007e68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007d90:	f7fe fdf8 	bl	8006984 <xTaskResumeAll>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< HEAD
 8007c84:	bf00      	nop
 8007c86:	3718      	adds	r7, #24
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	20004114 	.word	0x20004114
 8007c90:	2000410c 	.word	0x2000410c

08007c94 <prvHeapInit>:
=======
 8007d94:	bf00      	nop
 8007d96:	3718      	adds	r7, #24
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	2000411c 	.word	0x2000411c
 8007da0:	20004114 	.word	0x20004114

08007da4 <prvHeapInit>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
<<<<<<< HEAD
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
=======
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
<<<<<<< HEAD
 8007c9a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ca0:	4b27      	ldr	r3, [pc, #156]	@ (8007d40 <prvHeapInit+0xac>)
 8007ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f003 0307 	and.w	r3, r3, #7
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00c      	beq.n	8007cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3307      	adds	r3, #7
 8007cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f023 0307 	bic.w	r3, r3, #7
 8007cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8007d40 <prvHeapInit+0xac>)
 8007cc4:	4413      	add	r3, r2
 8007cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	607b      	str	r3, [r7, #4]
=======
 8007daa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007dae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007db0:	4b27      	ldr	r3, [pc, #156]	@ (8007e50 <prvHeapInit+0xac>)
 8007db2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f003 0307 	and.w	r3, r3, #7
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00c      	beq.n	8007dd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	3307      	adds	r3, #7
 8007dc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f023 0307 	bic.w	r3, r3, #7
 8007dca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8007e50 <prvHeapInit+0xac>)
 8007dd4:	4413      	add	r3, r2
 8007dd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	607b      	str	r3, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 8007ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8007d44 <prvHeapInit+0xb0>)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8007d44 <prvHeapInit+0xb0>)
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	605a      	str	r2, [r3, #4]
=======
 8007ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8007e54 <prvHeapInit+0xb0>)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007de2:	4b1c      	ldr	r3, [pc, #112]	@ (8007e54 <prvHeapInit+0xb0>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	605a      	str	r2, [r3, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
<<<<<<< HEAD
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	4413      	add	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ce0:	2208      	movs	r2, #8
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	1a9b      	subs	r3, r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f023 0307 	bic.w	r3, r3, #7
 8007cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4a15      	ldr	r2, [pc, #84]	@ (8007d48 <prvHeapInit+0xb4>)
 8007cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007cf6:	4b14      	ldr	r3, [pc, #80]	@ (8007d48 <prvHeapInit+0xb4>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007cfe:	4b12      	ldr	r3, [pc, #72]	@ (8007d48 <prvHeapInit+0xb4>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2200      	movs	r2, #0
 8007d04:	601a      	str	r2, [r3, #0]
=======
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	4413      	add	r3, r2
 8007dee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007df0:	2208      	movs	r2, #8
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	1a9b      	subs	r3, r3, r2
 8007df6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f023 0307 	bic.w	r3, r3, #7
 8007dfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4a15      	ldr	r2, [pc, #84]	@ (8007e58 <prvHeapInit+0xb4>)
 8007e04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e06:	4b14      	ldr	r3, [pc, #80]	@ (8007e58 <prvHeapInit+0xb4>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e0e:	4b12      	ldr	r3, [pc, #72]	@ (8007e58 <prvHeapInit+0xb4>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2200      	movs	r2, #0
 8007e14:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	1ad2      	subs	r2, r2, r3
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d14:	4b0c      	ldr	r3, [pc, #48]	@ (8007d48 <prvHeapInit+0xb4>)
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	4a0a      	ldr	r2, [pc, #40]	@ (8007d4c <prvHeapInit+0xb8>)
 8007d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	4a09      	ldr	r2, [pc, #36]	@ (8007d50 <prvHeapInit+0xbc>)
 8007d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d2c:	4b09      	ldr	r3, [pc, #36]	@ (8007d54 <prvHeapInit+0xc0>)
 8007d2e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007d32:	601a      	str	r2, [r3, #0]
}
 8007d34:	bf00      	nop
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	20000500 	.word	0x20000500
 8007d44:	20004100 	.word	0x20004100
 8007d48:	20004108 	.word	0x20004108
 8007d4c:	20004110 	.word	0x20004110
 8007d50:	2000410c 	.word	0x2000410c
 8007d54:	20004114 	.word	0x20004114

08007d58 <prvInsertBlockIntoFreeList>:
=======
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	1ad2      	subs	r2, r2, r3
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e24:	4b0c      	ldr	r3, [pc, #48]	@ (8007e58 <prvHeapInit+0xb4>)
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	4a0a      	ldr	r2, [pc, #40]	@ (8007e5c <prvHeapInit+0xb8>)
 8007e32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	4a09      	ldr	r2, [pc, #36]	@ (8007e60 <prvHeapInit+0xbc>)
 8007e3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e3c:	4b09      	ldr	r3, [pc, #36]	@ (8007e64 <prvHeapInit+0xc0>)
 8007e3e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e42:	601a      	str	r2, [r3, #0]
}
 8007e44:	bf00      	nop
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	20000508 	.word	0x20000508
 8007e54:	20004108 	.word	0x20004108
 8007e58:	20004110 	.word	0x20004110
 8007e5c:	20004118 	.word	0x20004118
 8007e60:	20004114 	.word	0x20004114
 8007e64:	2000411c 	.word	0x2000411c

08007e68 <prvInsertBlockIntoFreeList>:
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< HEAD
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
=======
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< HEAD
 8007d60:	4b28      	ldr	r3, [pc, #160]	@ (8007e04 <prvInsertBlockIntoFreeList+0xac>)
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	e002      	b.n	8007d6c <prvInsertBlockIntoFreeList+0x14>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	60fb      	str	r3, [r7, #12]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d8f7      	bhi.n	8007d66 <prvInsertBlockIntoFreeList+0xe>
=======
 8007e70:	4b28      	ldr	r3, [pc, #160]	@ (8007f14 <prvInsertBlockIntoFreeList+0xac>)
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	e002      	b.n	8007e7c <prvInsertBlockIntoFreeList+0x14>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	60fb      	str	r3, [r7, #12]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d8f7      	bhi.n	8007e76 <prvInsertBlockIntoFreeList+0xe>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
<<<<<<< HEAD
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	4413      	add	r3, r2
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d108      	bne.n	8007d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	441a      	add	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	607b      	str	r3, [r7, #4]
=======
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	4413      	add	r3, r2
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d108      	bne.n	8007eaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	685a      	ldr	r2, [r3, #4]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	441a      	add	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	607b      	str	r3, [r7, #4]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
<<<<<<< HEAD
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	441a      	add	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d118      	bne.n	8007de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	4b15      	ldr	r3, [pc, #84]	@ (8007e08 <prvInsertBlockIntoFreeList+0xb0>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d00d      	beq.n	8007dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685a      	ldr	r2, [r3, #4]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	441a      	add	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	e008      	b.n	8007de8 <prvInsertBlockIntoFreeList+0x90>
=======
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	441a      	add	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d118      	bne.n	8007ef0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	4b15      	ldr	r3, [pc, #84]	@ (8007f18 <prvInsertBlockIntoFreeList+0xb0>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d00d      	beq.n	8007ee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	441a      	add	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	e008      	b.n	8007ef8 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< HEAD
 8007dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8007e08 <prvInsertBlockIntoFreeList+0xb0>)
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	e003      	b.n	8007de8 <prvInsertBlockIntoFreeList+0x90>
=======
 8007ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8007f18 <prvInsertBlockIntoFreeList+0xb0>)
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	e003      	b.n	8007ef8 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
<<<<<<< HEAD
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	601a      	str	r2, [r3, #0]
=======
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< HEAD
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d002      	beq.n	8007df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	601a      	str	r2, [r3, #0]
=======
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d002      	beq.n	8007f06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	601a      	str	r2, [r3, #0]
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 8007df6:	bf00      	nop
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	20004100 	.word	0x20004100
 8007e08:	20004108 	.word	0x20004108

08007e0c <atoi>:
 8007e0c:	220a      	movs	r2, #10
 8007e0e:	2100      	movs	r1, #0
 8007e10:	f000 b87a 	b.w	8007f08 <strtol>

08007e14 <_strtol_l.constprop.0>:
 8007e14:	2b24      	cmp	r3, #36	@ 0x24
 8007e16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e1a:	4686      	mov	lr, r0
 8007e1c:	4690      	mov	r8, r2
 8007e1e:	d801      	bhi.n	8007e24 <_strtol_l.constprop.0+0x10>
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d106      	bne.n	8007e32 <_strtol_l.constprop.0+0x1e>
 8007e24:	f000 f8a2 	bl	8007f6c <__errno>
 8007e28:	2316      	movs	r3, #22
 8007e2a:	6003      	str	r3, [r0, #0]
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e32:	4834      	ldr	r0, [pc, #208]	@ (8007f04 <_strtol_l.constprop.0+0xf0>)
 8007e34:	460d      	mov	r5, r1
 8007e36:	462a      	mov	r2, r5
 8007e38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e3c:	5d06      	ldrb	r6, [r0, r4]
 8007e3e:	f016 0608 	ands.w	r6, r6, #8
 8007e42:	d1f8      	bne.n	8007e36 <_strtol_l.constprop.0+0x22>
 8007e44:	2c2d      	cmp	r4, #45	@ 0x2d
 8007e46:	d12d      	bne.n	8007ea4 <_strtol_l.constprop.0+0x90>
 8007e48:	782c      	ldrb	r4, [r5, #0]
 8007e4a:	2601      	movs	r6, #1
 8007e4c:	1c95      	adds	r5, r2, #2
 8007e4e:	f033 0210 	bics.w	r2, r3, #16
 8007e52:	d109      	bne.n	8007e68 <_strtol_l.constprop.0+0x54>
 8007e54:	2c30      	cmp	r4, #48	@ 0x30
 8007e56:	d12a      	bne.n	8007eae <_strtol_l.constprop.0+0x9a>
 8007e58:	782a      	ldrb	r2, [r5, #0]
 8007e5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007e5e:	2a58      	cmp	r2, #88	@ 0x58
 8007e60:	d125      	bne.n	8007eae <_strtol_l.constprop.0+0x9a>
 8007e62:	786c      	ldrb	r4, [r5, #1]
 8007e64:	2310      	movs	r3, #16
 8007e66:	3502      	adds	r5, #2
 8007e68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007e6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007e70:	2200      	movs	r2, #0
 8007e72:	fbbc f9f3 	udiv	r9, ip, r3
 8007e76:	4610      	mov	r0, r2
 8007e78:	fb03 ca19 	mls	sl, r3, r9, ip
 8007e7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007e80:	2f09      	cmp	r7, #9
 8007e82:	d81b      	bhi.n	8007ebc <_strtol_l.constprop.0+0xa8>
 8007e84:	463c      	mov	r4, r7
 8007e86:	42a3      	cmp	r3, r4
 8007e88:	dd27      	ble.n	8007eda <_strtol_l.constprop.0+0xc6>
 8007e8a:	1c57      	adds	r7, r2, #1
 8007e8c:	d007      	beq.n	8007e9e <_strtol_l.constprop.0+0x8a>
 8007e8e:	4581      	cmp	r9, r0
 8007e90:	d320      	bcc.n	8007ed4 <_strtol_l.constprop.0+0xc0>
 8007e92:	d101      	bne.n	8007e98 <_strtol_l.constprop.0+0x84>
 8007e94:	45a2      	cmp	sl, r4
 8007e96:	db1d      	blt.n	8007ed4 <_strtol_l.constprop.0+0xc0>
 8007e98:	fb00 4003 	mla	r0, r0, r3, r4
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ea2:	e7eb      	b.n	8007e7c <_strtol_l.constprop.0+0x68>
 8007ea4:	2c2b      	cmp	r4, #43	@ 0x2b
 8007ea6:	bf04      	itt	eq
 8007ea8:	782c      	ldrbeq	r4, [r5, #0]
 8007eaa:	1c95      	addeq	r5, r2, #2
 8007eac:	e7cf      	b.n	8007e4e <_strtol_l.constprop.0+0x3a>
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1da      	bne.n	8007e68 <_strtol_l.constprop.0+0x54>
 8007eb2:	2c30      	cmp	r4, #48	@ 0x30
 8007eb4:	bf0c      	ite	eq
 8007eb6:	2308      	moveq	r3, #8
 8007eb8:	230a      	movne	r3, #10
 8007eba:	e7d5      	b.n	8007e68 <_strtol_l.constprop.0+0x54>
 8007ebc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007ec0:	2f19      	cmp	r7, #25
 8007ec2:	d801      	bhi.n	8007ec8 <_strtol_l.constprop.0+0xb4>
 8007ec4:	3c37      	subs	r4, #55	@ 0x37
 8007ec6:	e7de      	b.n	8007e86 <_strtol_l.constprop.0+0x72>
 8007ec8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007ecc:	2f19      	cmp	r7, #25
 8007ece:	d804      	bhi.n	8007eda <_strtol_l.constprop.0+0xc6>
 8007ed0:	3c57      	subs	r4, #87	@ 0x57
 8007ed2:	e7d8      	b.n	8007e86 <_strtol_l.constprop.0+0x72>
 8007ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed8:	e7e1      	b.n	8007e9e <_strtol_l.constprop.0+0x8a>
 8007eda:	1c53      	adds	r3, r2, #1
 8007edc:	d108      	bne.n	8007ef0 <_strtol_l.constprop.0+0xdc>
 8007ede:	2322      	movs	r3, #34	@ 0x22
 8007ee0:	f8ce 3000 	str.w	r3, [lr]
 8007ee4:	4660      	mov	r0, ip
 8007ee6:	f1b8 0f00 	cmp.w	r8, #0
 8007eea:	d0a0      	beq.n	8007e2e <_strtol_l.constprop.0+0x1a>
 8007eec:	1e69      	subs	r1, r5, #1
 8007eee:	e006      	b.n	8007efe <_strtol_l.constprop.0+0xea>
 8007ef0:	b106      	cbz	r6, 8007ef4 <_strtol_l.constprop.0+0xe0>
 8007ef2:	4240      	negs	r0, r0
 8007ef4:	f1b8 0f00 	cmp.w	r8, #0
 8007ef8:	d099      	beq.n	8007e2e <_strtol_l.constprop.0+0x1a>
 8007efa:	2a00      	cmp	r2, #0
 8007efc:	d1f6      	bne.n	8007eec <_strtol_l.constprop.0+0xd8>
 8007efe:	f8c8 1000 	str.w	r1, [r8]
 8007f02:	e794      	b.n	8007e2e <_strtol_l.constprop.0+0x1a>
 8007f04:	080089bd 	.word	0x080089bd

08007f08 <strtol>:
 8007f08:	4613      	mov	r3, r2
 8007f0a:	460a      	mov	r2, r1
 8007f0c:	4601      	mov	r1, r0
 8007f0e:	4802      	ldr	r0, [pc, #8]	@ (8007f18 <strtol+0x10>)
 8007f10:	6800      	ldr	r0, [r0, #0]
 8007f12:	f7ff bf7f 	b.w	8007e14 <_strtol_l.constprop.0>
 8007f16:	bf00      	nop
 8007f18:	20000010 	.word	0x20000010

08007f1c <siprintf>:
 8007f1c:	b40e      	push	{r1, r2, r3}
 8007f1e:	b500      	push	{lr}
 8007f20:	b09c      	sub	sp, #112	@ 0x70
 8007f22:	ab1d      	add	r3, sp, #116	@ 0x74
 8007f24:	9002      	str	r0, [sp, #8]
 8007f26:	9006      	str	r0, [sp, #24]
 8007f28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007f2c:	4809      	ldr	r0, [pc, #36]	@ (8007f54 <siprintf+0x38>)
 8007f2e:	9107      	str	r1, [sp, #28]
 8007f30:	9104      	str	r1, [sp, #16]
 8007f32:	4909      	ldr	r1, [pc, #36]	@ (8007f58 <siprintf+0x3c>)
 8007f34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f38:	9105      	str	r1, [sp, #20]
 8007f3a:	6800      	ldr	r0, [r0, #0]
 8007f3c:	9301      	str	r3, [sp, #4]
 8007f3e:	a902      	add	r1, sp, #8
 8007f40:	f000 f9aa 	bl	8008298 <_svfiprintf_r>
 8007f44:	9b02      	ldr	r3, [sp, #8]
 8007f46:	2200      	movs	r2, #0
 8007f48:	701a      	strb	r2, [r3, #0]
 8007f4a:	b01c      	add	sp, #112	@ 0x70
 8007f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f50:	b003      	add	sp, #12
 8007f52:	4770      	bx	lr
 8007f54:	20000010 	.word	0x20000010
 8007f58:	ffff0208 	.word	0xffff0208

08007f5c <memset>:
 8007f5c:	4402      	add	r2, r0
 8007f5e:	4603      	mov	r3, r0
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d100      	bne.n	8007f66 <memset+0xa>
 8007f64:	4770      	bx	lr
 8007f66:	f803 1b01 	strb.w	r1, [r3], #1
 8007f6a:	e7f9      	b.n	8007f60 <memset+0x4>

08007f6c <__errno>:
 8007f6c:	4b01      	ldr	r3, [pc, #4]	@ (8007f74 <__errno+0x8>)
 8007f6e:	6818      	ldr	r0, [r3, #0]
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	20000010 	.word	0x20000010

08007f78 <__libc_init_array>:
 8007f78:	b570      	push	{r4, r5, r6, lr}
 8007f7a:	4d0d      	ldr	r5, [pc, #52]	@ (8007fb0 <__libc_init_array+0x38>)
 8007f7c:	4c0d      	ldr	r4, [pc, #52]	@ (8007fb4 <__libc_init_array+0x3c>)
 8007f7e:	1b64      	subs	r4, r4, r5
 8007f80:	10a4      	asrs	r4, r4, #2
 8007f82:	2600      	movs	r6, #0
 8007f84:	42a6      	cmp	r6, r4
 8007f86:	d109      	bne.n	8007f9c <__libc_init_array+0x24>
 8007f88:	4d0b      	ldr	r5, [pc, #44]	@ (8007fb8 <__libc_init_array+0x40>)
 8007f8a:	4c0c      	ldr	r4, [pc, #48]	@ (8007fbc <__libc_init_array+0x44>)
 8007f8c:	f000 fc6e 	bl	800886c <_init>
 8007f90:	1b64      	subs	r4, r4, r5
 8007f92:	10a4      	asrs	r4, r4, #2
 8007f94:	2600      	movs	r6, #0
 8007f96:	42a6      	cmp	r6, r4
 8007f98:	d105      	bne.n	8007fa6 <__libc_init_array+0x2e>
 8007f9a:	bd70      	pop	{r4, r5, r6, pc}
 8007f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fa0:	4798      	blx	r3
 8007fa2:	3601      	adds	r6, #1
 8007fa4:	e7ee      	b.n	8007f84 <__libc_init_array+0xc>
 8007fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007faa:	4798      	blx	r3
 8007fac:	3601      	adds	r6, #1
 8007fae:	e7f2      	b.n	8007f96 <__libc_init_array+0x1e>
 8007fb0:	08008af8 	.word	0x08008af8
 8007fb4:	08008af8 	.word	0x08008af8
 8007fb8:	08008af8 	.word	0x08008af8
 8007fbc:	08008afc 	.word	0x08008afc

08007fc0 <__retarget_lock_acquire_recursive>:
 8007fc0:	4770      	bx	lr

08007fc2 <__retarget_lock_release_recursive>:
 8007fc2:	4770      	bx	lr

08007fc4 <strcpy>:
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fca:	f803 2b01 	strb.w	r2, [r3], #1
 8007fce:	2a00      	cmp	r2, #0
 8007fd0:	d1f9      	bne.n	8007fc6 <strcpy+0x2>
 8007fd2:	4770      	bx	lr

08007fd4 <memcpy>:
 8007fd4:	440a      	add	r2, r1
 8007fd6:	4291      	cmp	r1, r2
 8007fd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fdc:	d100      	bne.n	8007fe0 <memcpy+0xc>
 8007fde:	4770      	bx	lr
 8007fe0:	b510      	push	{r4, lr}
 8007fe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fea:	4291      	cmp	r1, r2
 8007fec:	d1f9      	bne.n	8007fe2 <memcpy+0xe>
 8007fee:	bd10      	pop	{r4, pc}

08007ff0 <_free_r>:
 8007ff0:	b538      	push	{r3, r4, r5, lr}
 8007ff2:	4605      	mov	r5, r0
 8007ff4:	2900      	cmp	r1, #0
 8007ff6:	d041      	beq.n	800807c <_free_r+0x8c>
 8007ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ffc:	1f0c      	subs	r4, r1, #4
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	bfb8      	it	lt
 8008002:	18e4      	addlt	r4, r4, r3
 8008004:	f000 f8e0 	bl	80081c8 <__malloc_lock>
 8008008:	4a1d      	ldr	r2, [pc, #116]	@ (8008080 <_free_r+0x90>)
 800800a:	6813      	ldr	r3, [r2, #0]
 800800c:	b933      	cbnz	r3, 800801c <_free_r+0x2c>
 800800e:	6063      	str	r3, [r4, #4]
 8008010:	6014      	str	r4, [r2, #0]
 8008012:	4628      	mov	r0, r5
 8008014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008018:	f000 b8dc 	b.w	80081d4 <__malloc_unlock>
 800801c:	42a3      	cmp	r3, r4
 800801e:	d908      	bls.n	8008032 <_free_r+0x42>
 8008020:	6820      	ldr	r0, [r4, #0]
 8008022:	1821      	adds	r1, r4, r0
 8008024:	428b      	cmp	r3, r1
 8008026:	bf01      	itttt	eq
 8008028:	6819      	ldreq	r1, [r3, #0]
 800802a:	685b      	ldreq	r3, [r3, #4]
 800802c:	1809      	addeq	r1, r1, r0
 800802e:	6021      	streq	r1, [r4, #0]
 8008030:	e7ed      	b.n	800800e <_free_r+0x1e>
 8008032:	461a      	mov	r2, r3
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	b10b      	cbz	r3, 800803c <_free_r+0x4c>
 8008038:	42a3      	cmp	r3, r4
 800803a:	d9fa      	bls.n	8008032 <_free_r+0x42>
 800803c:	6811      	ldr	r1, [r2, #0]
 800803e:	1850      	adds	r0, r2, r1
 8008040:	42a0      	cmp	r0, r4
 8008042:	d10b      	bne.n	800805c <_free_r+0x6c>
 8008044:	6820      	ldr	r0, [r4, #0]
 8008046:	4401      	add	r1, r0
 8008048:	1850      	adds	r0, r2, r1
 800804a:	4283      	cmp	r3, r0
 800804c:	6011      	str	r1, [r2, #0]
 800804e:	d1e0      	bne.n	8008012 <_free_r+0x22>
 8008050:	6818      	ldr	r0, [r3, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	6053      	str	r3, [r2, #4]
 8008056:	4408      	add	r0, r1
 8008058:	6010      	str	r0, [r2, #0]
 800805a:	e7da      	b.n	8008012 <_free_r+0x22>
 800805c:	d902      	bls.n	8008064 <_free_r+0x74>
 800805e:	230c      	movs	r3, #12
 8008060:	602b      	str	r3, [r5, #0]
 8008062:	e7d6      	b.n	8008012 <_free_r+0x22>
 8008064:	6820      	ldr	r0, [r4, #0]
 8008066:	1821      	adds	r1, r4, r0
 8008068:	428b      	cmp	r3, r1
 800806a:	bf04      	itt	eq
 800806c:	6819      	ldreq	r1, [r3, #0]
 800806e:	685b      	ldreq	r3, [r3, #4]
 8008070:	6063      	str	r3, [r4, #4]
 8008072:	bf04      	itt	eq
 8008074:	1809      	addeq	r1, r1, r0
 8008076:	6021      	streq	r1, [r4, #0]
 8008078:	6054      	str	r4, [r2, #4]
 800807a:	e7ca      	b.n	8008012 <_free_r+0x22>
 800807c:	bd38      	pop	{r3, r4, r5, pc}
 800807e:	bf00      	nop
 8008080:	2000425c 	.word	0x2000425c

08008084 <sbrk_aligned>:
 8008084:	b570      	push	{r4, r5, r6, lr}
 8008086:	4e0f      	ldr	r6, [pc, #60]	@ (80080c4 <sbrk_aligned+0x40>)
 8008088:	460c      	mov	r4, r1
 800808a:	6831      	ldr	r1, [r6, #0]
 800808c:	4605      	mov	r5, r0
 800808e:	b911      	cbnz	r1, 8008096 <sbrk_aligned+0x12>
 8008090:	f000 fba6 	bl	80087e0 <_sbrk_r>
 8008094:	6030      	str	r0, [r6, #0]
 8008096:	4621      	mov	r1, r4
 8008098:	4628      	mov	r0, r5
 800809a:	f000 fba1 	bl	80087e0 <_sbrk_r>
 800809e:	1c43      	adds	r3, r0, #1
 80080a0:	d103      	bne.n	80080aa <sbrk_aligned+0x26>
 80080a2:	f04f 34ff 	mov.w	r4, #4294967295
 80080a6:	4620      	mov	r0, r4
 80080a8:	bd70      	pop	{r4, r5, r6, pc}
 80080aa:	1cc4      	adds	r4, r0, #3
 80080ac:	f024 0403 	bic.w	r4, r4, #3
 80080b0:	42a0      	cmp	r0, r4
 80080b2:	d0f8      	beq.n	80080a6 <sbrk_aligned+0x22>
 80080b4:	1a21      	subs	r1, r4, r0
 80080b6:	4628      	mov	r0, r5
 80080b8:	f000 fb92 	bl	80087e0 <_sbrk_r>
 80080bc:	3001      	adds	r0, #1
 80080be:	d1f2      	bne.n	80080a6 <sbrk_aligned+0x22>
 80080c0:	e7ef      	b.n	80080a2 <sbrk_aligned+0x1e>
 80080c2:	bf00      	nop
 80080c4:	20004258 	.word	0x20004258

080080c8 <_malloc_r>:
 80080c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080cc:	1ccd      	adds	r5, r1, #3
 80080ce:	f025 0503 	bic.w	r5, r5, #3
 80080d2:	3508      	adds	r5, #8
 80080d4:	2d0c      	cmp	r5, #12
 80080d6:	bf38      	it	cc
 80080d8:	250c      	movcc	r5, #12
 80080da:	2d00      	cmp	r5, #0
 80080dc:	4606      	mov	r6, r0
 80080de:	db01      	blt.n	80080e4 <_malloc_r+0x1c>
 80080e0:	42a9      	cmp	r1, r5
 80080e2:	d904      	bls.n	80080ee <_malloc_r+0x26>
 80080e4:	230c      	movs	r3, #12
 80080e6:	6033      	str	r3, [r6, #0]
 80080e8:	2000      	movs	r0, #0
 80080ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081c4 <_malloc_r+0xfc>
 80080f2:	f000 f869 	bl	80081c8 <__malloc_lock>
 80080f6:	f8d8 3000 	ldr.w	r3, [r8]
 80080fa:	461c      	mov	r4, r3
 80080fc:	bb44      	cbnz	r4, 8008150 <_malloc_r+0x88>
 80080fe:	4629      	mov	r1, r5
 8008100:	4630      	mov	r0, r6
 8008102:	f7ff ffbf 	bl	8008084 <sbrk_aligned>
 8008106:	1c43      	adds	r3, r0, #1
 8008108:	4604      	mov	r4, r0
 800810a:	d158      	bne.n	80081be <_malloc_r+0xf6>
 800810c:	f8d8 4000 	ldr.w	r4, [r8]
 8008110:	4627      	mov	r7, r4
 8008112:	2f00      	cmp	r7, #0
 8008114:	d143      	bne.n	800819e <_malloc_r+0xd6>
 8008116:	2c00      	cmp	r4, #0
 8008118:	d04b      	beq.n	80081b2 <_malloc_r+0xea>
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	4639      	mov	r1, r7
 800811e:	4630      	mov	r0, r6
 8008120:	eb04 0903 	add.w	r9, r4, r3
 8008124:	f000 fb5c 	bl	80087e0 <_sbrk_r>
 8008128:	4581      	cmp	r9, r0
 800812a:	d142      	bne.n	80081b2 <_malloc_r+0xea>
 800812c:	6821      	ldr	r1, [r4, #0]
 800812e:	1a6d      	subs	r5, r5, r1
 8008130:	4629      	mov	r1, r5
 8008132:	4630      	mov	r0, r6
 8008134:	f7ff ffa6 	bl	8008084 <sbrk_aligned>
 8008138:	3001      	adds	r0, #1
 800813a:	d03a      	beq.n	80081b2 <_malloc_r+0xea>
 800813c:	6823      	ldr	r3, [r4, #0]
 800813e:	442b      	add	r3, r5
 8008140:	6023      	str	r3, [r4, #0]
 8008142:	f8d8 3000 	ldr.w	r3, [r8]
 8008146:	685a      	ldr	r2, [r3, #4]
 8008148:	bb62      	cbnz	r2, 80081a4 <_malloc_r+0xdc>
 800814a:	f8c8 7000 	str.w	r7, [r8]
 800814e:	e00f      	b.n	8008170 <_malloc_r+0xa8>
 8008150:	6822      	ldr	r2, [r4, #0]
 8008152:	1b52      	subs	r2, r2, r5
 8008154:	d420      	bmi.n	8008198 <_malloc_r+0xd0>
 8008156:	2a0b      	cmp	r2, #11
 8008158:	d917      	bls.n	800818a <_malloc_r+0xc2>
 800815a:	1961      	adds	r1, r4, r5
 800815c:	42a3      	cmp	r3, r4
 800815e:	6025      	str	r5, [r4, #0]
 8008160:	bf18      	it	ne
 8008162:	6059      	strne	r1, [r3, #4]
 8008164:	6863      	ldr	r3, [r4, #4]
 8008166:	bf08      	it	eq
 8008168:	f8c8 1000 	streq.w	r1, [r8]
 800816c:	5162      	str	r2, [r4, r5]
 800816e:	604b      	str	r3, [r1, #4]
 8008170:	4630      	mov	r0, r6
 8008172:	f000 f82f 	bl	80081d4 <__malloc_unlock>
 8008176:	f104 000b 	add.w	r0, r4, #11
 800817a:	1d23      	adds	r3, r4, #4
 800817c:	f020 0007 	bic.w	r0, r0, #7
 8008180:	1ac2      	subs	r2, r0, r3
 8008182:	bf1c      	itt	ne
 8008184:	1a1b      	subne	r3, r3, r0
 8008186:	50a3      	strne	r3, [r4, r2]
 8008188:	e7af      	b.n	80080ea <_malloc_r+0x22>
 800818a:	6862      	ldr	r2, [r4, #4]
 800818c:	42a3      	cmp	r3, r4
 800818e:	bf0c      	ite	eq
 8008190:	f8c8 2000 	streq.w	r2, [r8]
 8008194:	605a      	strne	r2, [r3, #4]
 8008196:	e7eb      	b.n	8008170 <_malloc_r+0xa8>
 8008198:	4623      	mov	r3, r4
 800819a:	6864      	ldr	r4, [r4, #4]
 800819c:	e7ae      	b.n	80080fc <_malloc_r+0x34>
 800819e:	463c      	mov	r4, r7
 80081a0:	687f      	ldr	r7, [r7, #4]
 80081a2:	e7b6      	b.n	8008112 <_malloc_r+0x4a>
 80081a4:	461a      	mov	r2, r3
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	42a3      	cmp	r3, r4
 80081aa:	d1fb      	bne.n	80081a4 <_malloc_r+0xdc>
 80081ac:	2300      	movs	r3, #0
 80081ae:	6053      	str	r3, [r2, #4]
 80081b0:	e7de      	b.n	8008170 <_malloc_r+0xa8>
 80081b2:	230c      	movs	r3, #12
 80081b4:	6033      	str	r3, [r6, #0]
 80081b6:	4630      	mov	r0, r6
 80081b8:	f000 f80c 	bl	80081d4 <__malloc_unlock>
 80081bc:	e794      	b.n	80080e8 <_malloc_r+0x20>
 80081be:	6005      	str	r5, [r0, #0]
 80081c0:	e7d6      	b.n	8008170 <_malloc_r+0xa8>
 80081c2:	bf00      	nop
 80081c4:	2000425c 	.word	0x2000425c

080081c8 <__malloc_lock>:
 80081c8:	4801      	ldr	r0, [pc, #4]	@ (80081d0 <__malloc_lock+0x8>)
 80081ca:	f7ff bef9 	b.w	8007fc0 <__retarget_lock_acquire_recursive>
 80081ce:	bf00      	nop
 80081d0:	20004254 	.word	0x20004254

080081d4 <__malloc_unlock>:
 80081d4:	4801      	ldr	r0, [pc, #4]	@ (80081dc <__malloc_unlock+0x8>)
 80081d6:	f7ff bef4 	b.w	8007fc2 <__retarget_lock_release_recursive>
 80081da:	bf00      	nop
 80081dc:	20004254 	.word	0x20004254

080081e0 <__ssputs_r>:
 80081e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e4:	688e      	ldr	r6, [r1, #8]
 80081e6:	461f      	mov	r7, r3
 80081e8:	42be      	cmp	r6, r7
 80081ea:	680b      	ldr	r3, [r1, #0]
 80081ec:	4682      	mov	sl, r0
 80081ee:	460c      	mov	r4, r1
 80081f0:	4690      	mov	r8, r2
 80081f2:	d82d      	bhi.n	8008250 <__ssputs_r+0x70>
 80081f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80081f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80081fc:	d026      	beq.n	800824c <__ssputs_r+0x6c>
 80081fe:	6965      	ldr	r5, [r4, #20]
 8008200:	6909      	ldr	r1, [r1, #16]
 8008202:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008206:	eba3 0901 	sub.w	r9, r3, r1
 800820a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800820e:	1c7b      	adds	r3, r7, #1
 8008210:	444b      	add	r3, r9
 8008212:	106d      	asrs	r5, r5, #1
 8008214:	429d      	cmp	r5, r3
 8008216:	bf38      	it	cc
 8008218:	461d      	movcc	r5, r3
 800821a:	0553      	lsls	r3, r2, #21
 800821c:	d527      	bpl.n	800826e <__ssputs_r+0x8e>
 800821e:	4629      	mov	r1, r5
 8008220:	f7ff ff52 	bl	80080c8 <_malloc_r>
 8008224:	4606      	mov	r6, r0
 8008226:	b360      	cbz	r0, 8008282 <__ssputs_r+0xa2>
 8008228:	6921      	ldr	r1, [r4, #16]
 800822a:	464a      	mov	r2, r9
 800822c:	f7ff fed2 	bl	8007fd4 <memcpy>
 8008230:	89a3      	ldrh	r3, [r4, #12]
 8008232:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800823a:	81a3      	strh	r3, [r4, #12]
 800823c:	6126      	str	r6, [r4, #16]
 800823e:	6165      	str	r5, [r4, #20]
 8008240:	444e      	add	r6, r9
 8008242:	eba5 0509 	sub.w	r5, r5, r9
 8008246:	6026      	str	r6, [r4, #0]
 8008248:	60a5      	str	r5, [r4, #8]
 800824a:	463e      	mov	r6, r7
 800824c:	42be      	cmp	r6, r7
 800824e:	d900      	bls.n	8008252 <__ssputs_r+0x72>
 8008250:	463e      	mov	r6, r7
 8008252:	6820      	ldr	r0, [r4, #0]
 8008254:	4632      	mov	r2, r6
 8008256:	4641      	mov	r1, r8
 8008258:	f000 faa8 	bl	80087ac <memmove>
 800825c:	68a3      	ldr	r3, [r4, #8]
 800825e:	1b9b      	subs	r3, r3, r6
 8008260:	60a3      	str	r3, [r4, #8]
 8008262:	6823      	ldr	r3, [r4, #0]
 8008264:	4433      	add	r3, r6
 8008266:	6023      	str	r3, [r4, #0]
 8008268:	2000      	movs	r0, #0
 800826a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800826e:	462a      	mov	r2, r5
 8008270:	f000 fac6 	bl	8008800 <_realloc_r>
 8008274:	4606      	mov	r6, r0
 8008276:	2800      	cmp	r0, #0
 8008278:	d1e0      	bne.n	800823c <__ssputs_r+0x5c>
 800827a:	6921      	ldr	r1, [r4, #16]
 800827c:	4650      	mov	r0, sl
 800827e:	f7ff feb7 	bl	8007ff0 <_free_r>
 8008282:	230c      	movs	r3, #12
 8008284:	f8ca 3000 	str.w	r3, [sl]
 8008288:	89a3      	ldrh	r3, [r4, #12]
 800828a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800828e:	81a3      	strh	r3, [r4, #12]
 8008290:	f04f 30ff 	mov.w	r0, #4294967295
 8008294:	e7e9      	b.n	800826a <__ssputs_r+0x8a>
	...

08008298 <_svfiprintf_r>:
 8008298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800829c:	4698      	mov	r8, r3
 800829e:	898b      	ldrh	r3, [r1, #12]
 80082a0:	061b      	lsls	r3, r3, #24
 80082a2:	b09d      	sub	sp, #116	@ 0x74
 80082a4:	4607      	mov	r7, r0
 80082a6:	460d      	mov	r5, r1
 80082a8:	4614      	mov	r4, r2
 80082aa:	d510      	bpl.n	80082ce <_svfiprintf_r+0x36>
 80082ac:	690b      	ldr	r3, [r1, #16]
 80082ae:	b973      	cbnz	r3, 80082ce <_svfiprintf_r+0x36>
 80082b0:	2140      	movs	r1, #64	@ 0x40
 80082b2:	f7ff ff09 	bl	80080c8 <_malloc_r>
 80082b6:	6028      	str	r0, [r5, #0]
 80082b8:	6128      	str	r0, [r5, #16]
 80082ba:	b930      	cbnz	r0, 80082ca <_svfiprintf_r+0x32>
 80082bc:	230c      	movs	r3, #12
 80082be:	603b      	str	r3, [r7, #0]
 80082c0:	f04f 30ff 	mov.w	r0, #4294967295
 80082c4:	b01d      	add	sp, #116	@ 0x74
 80082c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ca:	2340      	movs	r3, #64	@ 0x40
 80082cc:	616b      	str	r3, [r5, #20]
 80082ce:	2300      	movs	r3, #0
 80082d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80082d2:	2320      	movs	r3, #32
 80082d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80082d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80082dc:	2330      	movs	r3, #48	@ 0x30
 80082de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800847c <_svfiprintf_r+0x1e4>
 80082e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80082e6:	f04f 0901 	mov.w	r9, #1
 80082ea:	4623      	mov	r3, r4
 80082ec:	469a      	mov	sl, r3
 80082ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082f2:	b10a      	cbz	r2, 80082f8 <_svfiprintf_r+0x60>
 80082f4:	2a25      	cmp	r2, #37	@ 0x25
 80082f6:	d1f9      	bne.n	80082ec <_svfiprintf_r+0x54>
 80082f8:	ebba 0b04 	subs.w	fp, sl, r4
 80082fc:	d00b      	beq.n	8008316 <_svfiprintf_r+0x7e>
 80082fe:	465b      	mov	r3, fp
 8008300:	4622      	mov	r2, r4
 8008302:	4629      	mov	r1, r5
 8008304:	4638      	mov	r0, r7
 8008306:	f7ff ff6b 	bl	80081e0 <__ssputs_r>
 800830a:	3001      	adds	r0, #1
 800830c:	f000 80a7 	beq.w	800845e <_svfiprintf_r+0x1c6>
 8008310:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008312:	445a      	add	r2, fp
 8008314:	9209      	str	r2, [sp, #36]	@ 0x24
 8008316:	f89a 3000 	ldrb.w	r3, [sl]
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 809f 	beq.w	800845e <_svfiprintf_r+0x1c6>
 8008320:	2300      	movs	r3, #0
 8008322:	f04f 32ff 	mov.w	r2, #4294967295
 8008326:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800832a:	f10a 0a01 	add.w	sl, sl, #1
 800832e:	9304      	str	r3, [sp, #16]
 8008330:	9307      	str	r3, [sp, #28]
 8008332:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008336:	931a      	str	r3, [sp, #104]	@ 0x68
 8008338:	4654      	mov	r4, sl
 800833a:	2205      	movs	r2, #5
 800833c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008340:	484e      	ldr	r0, [pc, #312]	@ (800847c <_svfiprintf_r+0x1e4>)
 8008342:	f7f7 ff55 	bl	80001f0 <memchr>
 8008346:	9a04      	ldr	r2, [sp, #16]
 8008348:	b9d8      	cbnz	r0, 8008382 <_svfiprintf_r+0xea>
 800834a:	06d0      	lsls	r0, r2, #27
 800834c:	bf44      	itt	mi
 800834e:	2320      	movmi	r3, #32
 8008350:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008354:	0711      	lsls	r1, r2, #28
 8008356:	bf44      	itt	mi
 8008358:	232b      	movmi	r3, #43	@ 0x2b
 800835a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800835e:	f89a 3000 	ldrb.w	r3, [sl]
 8008362:	2b2a      	cmp	r3, #42	@ 0x2a
 8008364:	d015      	beq.n	8008392 <_svfiprintf_r+0xfa>
 8008366:	9a07      	ldr	r2, [sp, #28]
 8008368:	4654      	mov	r4, sl
 800836a:	2000      	movs	r0, #0
 800836c:	f04f 0c0a 	mov.w	ip, #10
 8008370:	4621      	mov	r1, r4
 8008372:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008376:	3b30      	subs	r3, #48	@ 0x30
 8008378:	2b09      	cmp	r3, #9
 800837a:	d94b      	bls.n	8008414 <_svfiprintf_r+0x17c>
 800837c:	b1b0      	cbz	r0, 80083ac <_svfiprintf_r+0x114>
 800837e:	9207      	str	r2, [sp, #28]
 8008380:	e014      	b.n	80083ac <_svfiprintf_r+0x114>
 8008382:	eba0 0308 	sub.w	r3, r0, r8
 8008386:	fa09 f303 	lsl.w	r3, r9, r3
 800838a:	4313      	orrs	r3, r2
 800838c:	9304      	str	r3, [sp, #16]
 800838e:	46a2      	mov	sl, r4
 8008390:	e7d2      	b.n	8008338 <_svfiprintf_r+0xa0>
 8008392:	9b03      	ldr	r3, [sp, #12]
 8008394:	1d19      	adds	r1, r3, #4
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	9103      	str	r1, [sp, #12]
 800839a:	2b00      	cmp	r3, #0
 800839c:	bfbb      	ittet	lt
 800839e:	425b      	neglt	r3, r3
 80083a0:	f042 0202 	orrlt.w	r2, r2, #2
 80083a4:	9307      	strge	r3, [sp, #28]
 80083a6:	9307      	strlt	r3, [sp, #28]
 80083a8:	bfb8      	it	lt
 80083aa:	9204      	strlt	r2, [sp, #16]
 80083ac:	7823      	ldrb	r3, [r4, #0]
 80083ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80083b0:	d10a      	bne.n	80083c8 <_svfiprintf_r+0x130>
 80083b2:	7863      	ldrb	r3, [r4, #1]
 80083b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80083b6:	d132      	bne.n	800841e <_svfiprintf_r+0x186>
 80083b8:	9b03      	ldr	r3, [sp, #12]
 80083ba:	1d1a      	adds	r2, r3, #4
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	9203      	str	r2, [sp, #12]
 80083c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083c4:	3402      	adds	r4, #2
 80083c6:	9305      	str	r3, [sp, #20]
 80083c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800848c <_svfiprintf_r+0x1f4>
 80083cc:	7821      	ldrb	r1, [r4, #0]
 80083ce:	2203      	movs	r2, #3
 80083d0:	4650      	mov	r0, sl
 80083d2:	f7f7 ff0d 	bl	80001f0 <memchr>
 80083d6:	b138      	cbz	r0, 80083e8 <_svfiprintf_r+0x150>
 80083d8:	9b04      	ldr	r3, [sp, #16]
 80083da:	eba0 000a 	sub.w	r0, r0, sl
 80083de:	2240      	movs	r2, #64	@ 0x40
 80083e0:	4082      	lsls	r2, r0
 80083e2:	4313      	orrs	r3, r2
 80083e4:	3401      	adds	r4, #1
 80083e6:	9304      	str	r3, [sp, #16]
 80083e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ec:	4824      	ldr	r0, [pc, #144]	@ (8008480 <_svfiprintf_r+0x1e8>)
 80083ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80083f2:	2206      	movs	r2, #6
 80083f4:	f7f7 fefc 	bl	80001f0 <memchr>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	d036      	beq.n	800846a <_svfiprintf_r+0x1d2>
 80083fc:	4b21      	ldr	r3, [pc, #132]	@ (8008484 <_svfiprintf_r+0x1ec>)
 80083fe:	bb1b      	cbnz	r3, 8008448 <_svfiprintf_r+0x1b0>
 8008400:	9b03      	ldr	r3, [sp, #12]
 8008402:	3307      	adds	r3, #7
 8008404:	f023 0307 	bic.w	r3, r3, #7
 8008408:	3308      	adds	r3, #8
 800840a:	9303      	str	r3, [sp, #12]
 800840c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800840e:	4433      	add	r3, r6
 8008410:	9309      	str	r3, [sp, #36]	@ 0x24
 8008412:	e76a      	b.n	80082ea <_svfiprintf_r+0x52>
 8008414:	fb0c 3202 	mla	r2, ip, r2, r3
 8008418:	460c      	mov	r4, r1
 800841a:	2001      	movs	r0, #1
 800841c:	e7a8      	b.n	8008370 <_svfiprintf_r+0xd8>
 800841e:	2300      	movs	r3, #0
 8008420:	3401      	adds	r4, #1
 8008422:	9305      	str	r3, [sp, #20]
 8008424:	4619      	mov	r1, r3
 8008426:	f04f 0c0a 	mov.w	ip, #10
 800842a:	4620      	mov	r0, r4
 800842c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008430:	3a30      	subs	r2, #48	@ 0x30
 8008432:	2a09      	cmp	r2, #9
 8008434:	d903      	bls.n	800843e <_svfiprintf_r+0x1a6>
 8008436:	2b00      	cmp	r3, #0
 8008438:	d0c6      	beq.n	80083c8 <_svfiprintf_r+0x130>
 800843a:	9105      	str	r1, [sp, #20]
 800843c:	e7c4      	b.n	80083c8 <_svfiprintf_r+0x130>
 800843e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008442:	4604      	mov	r4, r0
 8008444:	2301      	movs	r3, #1
 8008446:	e7f0      	b.n	800842a <_svfiprintf_r+0x192>
 8008448:	ab03      	add	r3, sp, #12
 800844a:	9300      	str	r3, [sp, #0]
 800844c:	462a      	mov	r2, r5
 800844e:	4b0e      	ldr	r3, [pc, #56]	@ (8008488 <_svfiprintf_r+0x1f0>)
 8008450:	a904      	add	r1, sp, #16
 8008452:	4638      	mov	r0, r7
 8008454:	f3af 8000 	nop.w
 8008458:	1c42      	adds	r2, r0, #1
 800845a:	4606      	mov	r6, r0
 800845c:	d1d6      	bne.n	800840c <_svfiprintf_r+0x174>
 800845e:	89ab      	ldrh	r3, [r5, #12]
 8008460:	065b      	lsls	r3, r3, #25
 8008462:	f53f af2d 	bmi.w	80082c0 <_svfiprintf_r+0x28>
 8008466:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008468:	e72c      	b.n	80082c4 <_svfiprintf_r+0x2c>
 800846a:	ab03      	add	r3, sp, #12
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	462a      	mov	r2, r5
 8008470:	4b05      	ldr	r3, [pc, #20]	@ (8008488 <_svfiprintf_r+0x1f0>)
 8008472:	a904      	add	r1, sp, #16
 8008474:	4638      	mov	r0, r7
 8008476:	f000 f879 	bl	800856c <_printf_i>
 800847a:	e7ed      	b.n	8008458 <_svfiprintf_r+0x1c0>
 800847c:	08008abd 	.word	0x08008abd
 8008480:	08008ac7 	.word	0x08008ac7
 8008484:	00000000 	.word	0x00000000
 8008488:	080081e1 	.word	0x080081e1
 800848c:	08008ac3 	.word	0x08008ac3

08008490 <_printf_common>:
 8008490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008494:	4616      	mov	r6, r2
 8008496:	4698      	mov	r8, r3
 8008498:	688a      	ldr	r2, [r1, #8]
 800849a:	690b      	ldr	r3, [r1, #16]
 800849c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084a0:	4293      	cmp	r3, r2
 80084a2:	bfb8      	it	lt
 80084a4:	4613      	movlt	r3, r2
 80084a6:	6033      	str	r3, [r6, #0]
 80084a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80084ac:	4607      	mov	r7, r0
 80084ae:	460c      	mov	r4, r1
 80084b0:	b10a      	cbz	r2, 80084b6 <_printf_common+0x26>
 80084b2:	3301      	adds	r3, #1
 80084b4:	6033      	str	r3, [r6, #0]
 80084b6:	6823      	ldr	r3, [r4, #0]
 80084b8:	0699      	lsls	r1, r3, #26
 80084ba:	bf42      	ittt	mi
 80084bc:	6833      	ldrmi	r3, [r6, #0]
 80084be:	3302      	addmi	r3, #2
 80084c0:	6033      	strmi	r3, [r6, #0]
 80084c2:	6825      	ldr	r5, [r4, #0]
 80084c4:	f015 0506 	ands.w	r5, r5, #6
 80084c8:	d106      	bne.n	80084d8 <_printf_common+0x48>
 80084ca:	f104 0a19 	add.w	sl, r4, #25
 80084ce:	68e3      	ldr	r3, [r4, #12]
 80084d0:	6832      	ldr	r2, [r6, #0]
 80084d2:	1a9b      	subs	r3, r3, r2
 80084d4:	42ab      	cmp	r3, r5
 80084d6:	dc26      	bgt.n	8008526 <_printf_common+0x96>
 80084d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80084dc:	6822      	ldr	r2, [r4, #0]
 80084de:	3b00      	subs	r3, #0
 80084e0:	bf18      	it	ne
 80084e2:	2301      	movne	r3, #1
 80084e4:	0692      	lsls	r2, r2, #26
 80084e6:	d42b      	bmi.n	8008540 <_printf_common+0xb0>
 80084e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80084ec:	4641      	mov	r1, r8
 80084ee:	4638      	mov	r0, r7
 80084f0:	47c8      	blx	r9
 80084f2:	3001      	adds	r0, #1
 80084f4:	d01e      	beq.n	8008534 <_printf_common+0xa4>
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	6922      	ldr	r2, [r4, #16]
 80084fa:	f003 0306 	and.w	r3, r3, #6
 80084fe:	2b04      	cmp	r3, #4
 8008500:	bf02      	ittt	eq
 8008502:	68e5      	ldreq	r5, [r4, #12]
 8008504:	6833      	ldreq	r3, [r6, #0]
 8008506:	1aed      	subeq	r5, r5, r3
 8008508:	68a3      	ldr	r3, [r4, #8]
 800850a:	bf0c      	ite	eq
 800850c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008510:	2500      	movne	r5, #0
 8008512:	4293      	cmp	r3, r2
 8008514:	bfc4      	itt	gt
 8008516:	1a9b      	subgt	r3, r3, r2
 8008518:	18ed      	addgt	r5, r5, r3
 800851a:	2600      	movs	r6, #0
 800851c:	341a      	adds	r4, #26
 800851e:	42b5      	cmp	r5, r6
 8008520:	d11a      	bne.n	8008558 <_printf_common+0xc8>
 8008522:	2000      	movs	r0, #0
 8008524:	e008      	b.n	8008538 <_printf_common+0xa8>
 8008526:	2301      	movs	r3, #1
 8008528:	4652      	mov	r2, sl
 800852a:	4641      	mov	r1, r8
 800852c:	4638      	mov	r0, r7
 800852e:	47c8      	blx	r9
 8008530:	3001      	adds	r0, #1
 8008532:	d103      	bne.n	800853c <_printf_common+0xac>
 8008534:	f04f 30ff 	mov.w	r0, #4294967295
 8008538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800853c:	3501      	adds	r5, #1
 800853e:	e7c6      	b.n	80084ce <_printf_common+0x3e>
 8008540:	18e1      	adds	r1, r4, r3
 8008542:	1c5a      	adds	r2, r3, #1
 8008544:	2030      	movs	r0, #48	@ 0x30
 8008546:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800854a:	4422      	add	r2, r4
 800854c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008550:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008554:	3302      	adds	r3, #2
 8008556:	e7c7      	b.n	80084e8 <_printf_common+0x58>
 8008558:	2301      	movs	r3, #1
 800855a:	4622      	mov	r2, r4
 800855c:	4641      	mov	r1, r8
 800855e:	4638      	mov	r0, r7
 8008560:	47c8      	blx	r9
 8008562:	3001      	adds	r0, #1
 8008564:	d0e6      	beq.n	8008534 <_printf_common+0xa4>
 8008566:	3601      	adds	r6, #1
 8008568:	e7d9      	b.n	800851e <_printf_common+0x8e>
	...

0800856c <_printf_i>:
 800856c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008570:	7e0f      	ldrb	r7, [r1, #24]
 8008572:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008574:	2f78      	cmp	r7, #120	@ 0x78
 8008576:	4691      	mov	r9, r2
 8008578:	4680      	mov	r8, r0
 800857a:	460c      	mov	r4, r1
 800857c:	469a      	mov	sl, r3
 800857e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008582:	d807      	bhi.n	8008594 <_printf_i+0x28>
 8008584:	2f62      	cmp	r7, #98	@ 0x62
 8008586:	d80a      	bhi.n	800859e <_printf_i+0x32>
 8008588:	2f00      	cmp	r7, #0
 800858a:	f000 80d2 	beq.w	8008732 <_printf_i+0x1c6>
 800858e:	2f58      	cmp	r7, #88	@ 0x58
 8008590:	f000 80b9 	beq.w	8008706 <_printf_i+0x19a>
 8008594:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008598:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800859c:	e03a      	b.n	8008614 <_printf_i+0xa8>
 800859e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085a2:	2b15      	cmp	r3, #21
 80085a4:	d8f6      	bhi.n	8008594 <_printf_i+0x28>
 80085a6:	a101      	add	r1, pc, #4	@ (adr r1, 80085ac <_printf_i+0x40>)
 80085a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085ac:	08008605 	.word	0x08008605
 80085b0:	08008619 	.word	0x08008619
 80085b4:	08008595 	.word	0x08008595
 80085b8:	08008595 	.word	0x08008595
 80085bc:	08008595 	.word	0x08008595
 80085c0:	08008595 	.word	0x08008595
 80085c4:	08008619 	.word	0x08008619
 80085c8:	08008595 	.word	0x08008595
 80085cc:	08008595 	.word	0x08008595
 80085d0:	08008595 	.word	0x08008595
 80085d4:	08008595 	.word	0x08008595
 80085d8:	08008719 	.word	0x08008719
 80085dc:	08008643 	.word	0x08008643
 80085e0:	080086d3 	.word	0x080086d3
 80085e4:	08008595 	.word	0x08008595
 80085e8:	08008595 	.word	0x08008595
 80085ec:	0800873b 	.word	0x0800873b
 80085f0:	08008595 	.word	0x08008595
 80085f4:	08008643 	.word	0x08008643
 80085f8:	08008595 	.word	0x08008595
 80085fc:	08008595 	.word	0x08008595
 8008600:	080086db 	.word	0x080086db
 8008604:	6833      	ldr	r3, [r6, #0]
 8008606:	1d1a      	adds	r2, r3, #4
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	6032      	str	r2, [r6, #0]
 800860c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008610:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008614:	2301      	movs	r3, #1
 8008616:	e09d      	b.n	8008754 <_printf_i+0x1e8>
 8008618:	6833      	ldr	r3, [r6, #0]
 800861a:	6820      	ldr	r0, [r4, #0]
 800861c:	1d19      	adds	r1, r3, #4
 800861e:	6031      	str	r1, [r6, #0]
 8008620:	0606      	lsls	r6, r0, #24
 8008622:	d501      	bpl.n	8008628 <_printf_i+0xbc>
 8008624:	681d      	ldr	r5, [r3, #0]
 8008626:	e003      	b.n	8008630 <_printf_i+0xc4>
 8008628:	0645      	lsls	r5, r0, #25
 800862a:	d5fb      	bpl.n	8008624 <_printf_i+0xb8>
 800862c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008630:	2d00      	cmp	r5, #0
 8008632:	da03      	bge.n	800863c <_printf_i+0xd0>
 8008634:	232d      	movs	r3, #45	@ 0x2d
 8008636:	426d      	negs	r5, r5
 8008638:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800863c:	4859      	ldr	r0, [pc, #356]	@ (80087a4 <_printf_i+0x238>)
 800863e:	230a      	movs	r3, #10
 8008640:	e011      	b.n	8008666 <_printf_i+0xfa>
 8008642:	6821      	ldr	r1, [r4, #0]
 8008644:	6833      	ldr	r3, [r6, #0]
 8008646:	0608      	lsls	r0, r1, #24
 8008648:	f853 5b04 	ldr.w	r5, [r3], #4
 800864c:	d402      	bmi.n	8008654 <_printf_i+0xe8>
 800864e:	0649      	lsls	r1, r1, #25
 8008650:	bf48      	it	mi
 8008652:	b2ad      	uxthmi	r5, r5
 8008654:	2f6f      	cmp	r7, #111	@ 0x6f
 8008656:	4853      	ldr	r0, [pc, #332]	@ (80087a4 <_printf_i+0x238>)
 8008658:	6033      	str	r3, [r6, #0]
 800865a:	bf14      	ite	ne
 800865c:	230a      	movne	r3, #10
 800865e:	2308      	moveq	r3, #8
 8008660:	2100      	movs	r1, #0
 8008662:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008666:	6866      	ldr	r6, [r4, #4]
 8008668:	60a6      	str	r6, [r4, #8]
 800866a:	2e00      	cmp	r6, #0
 800866c:	bfa2      	ittt	ge
 800866e:	6821      	ldrge	r1, [r4, #0]
 8008670:	f021 0104 	bicge.w	r1, r1, #4
 8008674:	6021      	strge	r1, [r4, #0]
 8008676:	b90d      	cbnz	r5, 800867c <_printf_i+0x110>
 8008678:	2e00      	cmp	r6, #0
 800867a:	d04b      	beq.n	8008714 <_printf_i+0x1a8>
 800867c:	4616      	mov	r6, r2
 800867e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008682:	fb03 5711 	mls	r7, r3, r1, r5
 8008686:	5dc7      	ldrb	r7, [r0, r7]
 8008688:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800868c:	462f      	mov	r7, r5
 800868e:	42bb      	cmp	r3, r7
 8008690:	460d      	mov	r5, r1
 8008692:	d9f4      	bls.n	800867e <_printf_i+0x112>
 8008694:	2b08      	cmp	r3, #8
 8008696:	d10b      	bne.n	80086b0 <_printf_i+0x144>
 8008698:	6823      	ldr	r3, [r4, #0]
 800869a:	07df      	lsls	r7, r3, #31
 800869c:	d508      	bpl.n	80086b0 <_printf_i+0x144>
 800869e:	6923      	ldr	r3, [r4, #16]
 80086a0:	6861      	ldr	r1, [r4, #4]
 80086a2:	4299      	cmp	r1, r3
 80086a4:	bfde      	ittt	le
 80086a6:	2330      	movle	r3, #48	@ 0x30
 80086a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086b0:	1b92      	subs	r2, r2, r6
 80086b2:	6122      	str	r2, [r4, #16]
 80086b4:	f8cd a000 	str.w	sl, [sp]
 80086b8:	464b      	mov	r3, r9
 80086ba:	aa03      	add	r2, sp, #12
 80086bc:	4621      	mov	r1, r4
 80086be:	4640      	mov	r0, r8
 80086c0:	f7ff fee6 	bl	8008490 <_printf_common>
 80086c4:	3001      	adds	r0, #1
 80086c6:	d14a      	bne.n	800875e <_printf_i+0x1f2>
 80086c8:	f04f 30ff 	mov.w	r0, #4294967295
 80086cc:	b004      	add	sp, #16
 80086ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086d2:	6823      	ldr	r3, [r4, #0]
 80086d4:	f043 0320 	orr.w	r3, r3, #32
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	4833      	ldr	r0, [pc, #204]	@ (80087a8 <_printf_i+0x23c>)
 80086dc:	2778      	movs	r7, #120	@ 0x78
 80086de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80086e2:	6823      	ldr	r3, [r4, #0]
 80086e4:	6831      	ldr	r1, [r6, #0]
 80086e6:	061f      	lsls	r7, r3, #24
 80086e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80086ec:	d402      	bmi.n	80086f4 <_printf_i+0x188>
 80086ee:	065f      	lsls	r7, r3, #25
 80086f0:	bf48      	it	mi
 80086f2:	b2ad      	uxthmi	r5, r5
 80086f4:	6031      	str	r1, [r6, #0]
 80086f6:	07d9      	lsls	r1, r3, #31
 80086f8:	bf44      	itt	mi
 80086fa:	f043 0320 	orrmi.w	r3, r3, #32
 80086fe:	6023      	strmi	r3, [r4, #0]
 8008700:	b11d      	cbz	r5, 800870a <_printf_i+0x19e>
 8008702:	2310      	movs	r3, #16
 8008704:	e7ac      	b.n	8008660 <_printf_i+0xf4>
 8008706:	4827      	ldr	r0, [pc, #156]	@ (80087a4 <_printf_i+0x238>)
 8008708:	e7e9      	b.n	80086de <_printf_i+0x172>
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	f023 0320 	bic.w	r3, r3, #32
 8008710:	6023      	str	r3, [r4, #0]
 8008712:	e7f6      	b.n	8008702 <_printf_i+0x196>
 8008714:	4616      	mov	r6, r2
 8008716:	e7bd      	b.n	8008694 <_printf_i+0x128>
 8008718:	6833      	ldr	r3, [r6, #0]
 800871a:	6825      	ldr	r5, [r4, #0]
 800871c:	6961      	ldr	r1, [r4, #20]
 800871e:	1d18      	adds	r0, r3, #4
 8008720:	6030      	str	r0, [r6, #0]
 8008722:	062e      	lsls	r6, r5, #24
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	d501      	bpl.n	800872c <_printf_i+0x1c0>
 8008728:	6019      	str	r1, [r3, #0]
 800872a:	e002      	b.n	8008732 <_printf_i+0x1c6>
 800872c:	0668      	lsls	r0, r5, #25
 800872e:	d5fb      	bpl.n	8008728 <_printf_i+0x1bc>
 8008730:	8019      	strh	r1, [r3, #0]
 8008732:	2300      	movs	r3, #0
 8008734:	6123      	str	r3, [r4, #16]
 8008736:	4616      	mov	r6, r2
 8008738:	e7bc      	b.n	80086b4 <_printf_i+0x148>
 800873a:	6833      	ldr	r3, [r6, #0]
 800873c:	1d1a      	adds	r2, r3, #4
 800873e:	6032      	str	r2, [r6, #0]
 8008740:	681e      	ldr	r6, [r3, #0]
 8008742:	6862      	ldr	r2, [r4, #4]
 8008744:	2100      	movs	r1, #0
 8008746:	4630      	mov	r0, r6
 8008748:	f7f7 fd52 	bl	80001f0 <memchr>
 800874c:	b108      	cbz	r0, 8008752 <_printf_i+0x1e6>
 800874e:	1b80      	subs	r0, r0, r6
 8008750:	6060      	str	r0, [r4, #4]
 8008752:	6863      	ldr	r3, [r4, #4]
 8008754:	6123      	str	r3, [r4, #16]
 8008756:	2300      	movs	r3, #0
 8008758:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800875c:	e7aa      	b.n	80086b4 <_printf_i+0x148>
 800875e:	6923      	ldr	r3, [r4, #16]
 8008760:	4632      	mov	r2, r6
 8008762:	4649      	mov	r1, r9
 8008764:	4640      	mov	r0, r8
 8008766:	47d0      	blx	sl
 8008768:	3001      	adds	r0, #1
 800876a:	d0ad      	beq.n	80086c8 <_printf_i+0x15c>
 800876c:	6823      	ldr	r3, [r4, #0]
 800876e:	079b      	lsls	r3, r3, #30
 8008770:	d413      	bmi.n	800879a <_printf_i+0x22e>
 8008772:	68e0      	ldr	r0, [r4, #12]
 8008774:	9b03      	ldr	r3, [sp, #12]
 8008776:	4298      	cmp	r0, r3
 8008778:	bfb8      	it	lt
 800877a:	4618      	movlt	r0, r3
 800877c:	e7a6      	b.n	80086cc <_printf_i+0x160>
 800877e:	2301      	movs	r3, #1
 8008780:	4632      	mov	r2, r6
 8008782:	4649      	mov	r1, r9
 8008784:	4640      	mov	r0, r8
 8008786:	47d0      	blx	sl
 8008788:	3001      	adds	r0, #1
 800878a:	d09d      	beq.n	80086c8 <_printf_i+0x15c>
 800878c:	3501      	adds	r5, #1
 800878e:	68e3      	ldr	r3, [r4, #12]
 8008790:	9903      	ldr	r1, [sp, #12]
 8008792:	1a5b      	subs	r3, r3, r1
 8008794:	42ab      	cmp	r3, r5
 8008796:	dcf2      	bgt.n	800877e <_printf_i+0x212>
 8008798:	e7eb      	b.n	8008772 <_printf_i+0x206>
 800879a:	2500      	movs	r5, #0
 800879c:	f104 0619 	add.w	r6, r4, #25
 80087a0:	e7f5      	b.n	800878e <_printf_i+0x222>
 80087a2:	bf00      	nop
 80087a4:	08008ace 	.word	0x08008ace
 80087a8:	08008adf 	.word	0x08008adf

080087ac <memmove>:
 80087ac:	4288      	cmp	r0, r1
 80087ae:	b510      	push	{r4, lr}
 80087b0:	eb01 0402 	add.w	r4, r1, r2
 80087b4:	d902      	bls.n	80087bc <memmove+0x10>
 80087b6:	4284      	cmp	r4, r0
 80087b8:	4623      	mov	r3, r4
 80087ba:	d807      	bhi.n	80087cc <memmove+0x20>
 80087bc:	1e43      	subs	r3, r0, #1
 80087be:	42a1      	cmp	r1, r4
 80087c0:	d008      	beq.n	80087d4 <memmove+0x28>
 80087c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087ca:	e7f8      	b.n	80087be <memmove+0x12>
 80087cc:	4402      	add	r2, r0
 80087ce:	4601      	mov	r1, r0
 80087d0:	428a      	cmp	r2, r1
 80087d2:	d100      	bne.n	80087d6 <memmove+0x2a>
 80087d4:	bd10      	pop	{r4, pc}
 80087d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087de:	e7f7      	b.n	80087d0 <memmove+0x24>

080087e0 <_sbrk_r>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	4d06      	ldr	r5, [pc, #24]	@ (80087fc <_sbrk_r+0x1c>)
 80087e4:	2300      	movs	r3, #0
 80087e6:	4604      	mov	r4, r0
 80087e8:	4608      	mov	r0, r1
 80087ea:	602b      	str	r3, [r5, #0]
 80087ec:	f7f9 f9ba 	bl	8001b64 <_sbrk>
 80087f0:	1c43      	adds	r3, r0, #1
 80087f2:	d102      	bne.n	80087fa <_sbrk_r+0x1a>
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	b103      	cbz	r3, 80087fa <_sbrk_r+0x1a>
 80087f8:	6023      	str	r3, [r4, #0]
 80087fa:	bd38      	pop	{r3, r4, r5, pc}
 80087fc:	20004250 	.word	0x20004250

08008800 <_realloc_r>:
 8008800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008804:	4680      	mov	r8, r0
 8008806:	4615      	mov	r5, r2
 8008808:	460c      	mov	r4, r1
 800880a:	b921      	cbnz	r1, 8008816 <_realloc_r+0x16>
 800880c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008810:	4611      	mov	r1, r2
 8008812:	f7ff bc59 	b.w	80080c8 <_malloc_r>
 8008816:	b92a      	cbnz	r2, 8008824 <_realloc_r+0x24>
 8008818:	f7ff fbea 	bl	8007ff0 <_free_r>
 800881c:	2400      	movs	r4, #0
 800881e:	4620      	mov	r0, r4
 8008820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008824:	f000 f81a 	bl	800885c <_malloc_usable_size_r>
 8008828:	4285      	cmp	r5, r0
 800882a:	4606      	mov	r6, r0
 800882c:	d802      	bhi.n	8008834 <_realloc_r+0x34>
 800882e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008832:	d8f4      	bhi.n	800881e <_realloc_r+0x1e>
 8008834:	4629      	mov	r1, r5
 8008836:	4640      	mov	r0, r8
 8008838:	f7ff fc46 	bl	80080c8 <_malloc_r>
 800883c:	4607      	mov	r7, r0
 800883e:	2800      	cmp	r0, #0
 8008840:	d0ec      	beq.n	800881c <_realloc_r+0x1c>
 8008842:	42b5      	cmp	r5, r6
 8008844:	462a      	mov	r2, r5
 8008846:	4621      	mov	r1, r4
 8008848:	bf28      	it	cs
 800884a:	4632      	movcs	r2, r6
 800884c:	f7ff fbc2 	bl	8007fd4 <memcpy>
 8008850:	4621      	mov	r1, r4
 8008852:	4640      	mov	r0, r8
 8008854:	f7ff fbcc 	bl	8007ff0 <_free_r>
 8008858:	463c      	mov	r4, r7
 800885a:	e7e0      	b.n	800881e <_realloc_r+0x1e>

0800885c <_malloc_usable_size_r>:
 800885c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008860:	1f18      	subs	r0, r3, #4
 8008862:	2b00      	cmp	r3, #0
 8008864:	bfbc      	itt	lt
 8008866:	580b      	ldrlt	r3, [r1, r0]
 8008868:	18c0      	addlt	r0, r0, r3
 800886a:	4770      	bx	lr

0800886c <_init>:
 800886c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800886e:	bf00      	nop
 8008870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008872:	bc08      	pop	{r3}
 8008874:	469e      	mov	lr, r3
 8008876:	4770      	bx	lr

08008878 <_fini>:
 8008878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800887a:	bf00      	nop
 800887c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800887e:	bc08      	pop	{r3}
 8008880:	469e      	mov	lr, r3
 8008882:	4770      	bx	lr
=======
 8007f06:	bf00      	nop
 8007f08:	3714      	adds	r7, #20
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	20004108 	.word	0x20004108
 8007f18:	20004110 	.word	0x20004110

08007f1c <atoi>:
 8007f1c:	220a      	movs	r2, #10
 8007f1e:	2100      	movs	r1, #0
 8007f20:	f000 b87a 	b.w	8008018 <strtol>

08007f24 <_strtol_l.constprop.0>:
 8007f24:	2b24      	cmp	r3, #36	@ 0x24
 8007f26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f2a:	4686      	mov	lr, r0
 8007f2c:	4690      	mov	r8, r2
 8007f2e:	d801      	bhi.n	8007f34 <_strtol_l.constprop.0+0x10>
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d106      	bne.n	8007f42 <_strtol_l.constprop.0+0x1e>
 8007f34:	f000 f8a2 	bl	800807c <__errno>
 8007f38:	2316      	movs	r3, #22
 8007f3a:	6003      	str	r3, [r0, #0]
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f42:	4834      	ldr	r0, [pc, #208]	@ (8008014 <_strtol_l.constprop.0+0xf0>)
 8007f44:	460d      	mov	r5, r1
 8007f46:	462a      	mov	r2, r5
 8007f48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f4c:	5d06      	ldrb	r6, [r0, r4]
 8007f4e:	f016 0608 	ands.w	r6, r6, #8
 8007f52:	d1f8      	bne.n	8007f46 <_strtol_l.constprop.0+0x22>
 8007f54:	2c2d      	cmp	r4, #45	@ 0x2d
 8007f56:	d12d      	bne.n	8007fb4 <_strtol_l.constprop.0+0x90>
 8007f58:	782c      	ldrb	r4, [r5, #0]
 8007f5a:	2601      	movs	r6, #1
 8007f5c:	1c95      	adds	r5, r2, #2
 8007f5e:	f033 0210 	bics.w	r2, r3, #16
 8007f62:	d109      	bne.n	8007f78 <_strtol_l.constprop.0+0x54>
 8007f64:	2c30      	cmp	r4, #48	@ 0x30
 8007f66:	d12a      	bne.n	8007fbe <_strtol_l.constprop.0+0x9a>
 8007f68:	782a      	ldrb	r2, [r5, #0]
 8007f6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f6e:	2a58      	cmp	r2, #88	@ 0x58
 8007f70:	d125      	bne.n	8007fbe <_strtol_l.constprop.0+0x9a>
 8007f72:	786c      	ldrb	r4, [r5, #1]
 8007f74:	2310      	movs	r3, #16
 8007f76:	3502      	adds	r5, #2
 8007f78:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007f7c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f80:	2200      	movs	r2, #0
 8007f82:	fbbc f9f3 	udiv	r9, ip, r3
 8007f86:	4610      	mov	r0, r2
 8007f88:	fb03 ca19 	mls	sl, r3, r9, ip
 8007f8c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007f90:	2f09      	cmp	r7, #9
 8007f92:	d81b      	bhi.n	8007fcc <_strtol_l.constprop.0+0xa8>
 8007f94:	463c      	mov	r4, r7
 8007f96:	42a3      	cmp	r3, r4
 8007f98:	dd27      	ble.n	8007fea <_strtol_l.constprop.0+0xc6>
 8007f9a:	1c57      	adds	r7, r2, #1
 8007f9c:	d007      	beq.n	8007fae <_strtol_l.constprop.0+0x8a>
 8007f9e:	4581      	cmp	r9, r0
 8007fa0:	d320      	bcc.n	8007fe4 <_strtol_l.constprop.0+0xc0>
 8007fa2:	d101      	bne.n	8007fa8 <_strtol_l.constprop.0+0x84>
 8007fa4:	45a2      	cmp	sl, r4
 8007fa6:	db1d      	blt.n	8007fe4 <_strtol_l.constprop.0+0xc0>
 8007fa8:	fb00 4003 	mla	r0, r0, r3, r4
 8007fac:	2201      	movs	r2, #1
 8007fae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fb2:	e7eb      	b.n	8007f8c <_strtol_l.constprop.0+0x68>
 8007fb4:	2c2b      	cmp	r4, #43	@ 0x2b
 8007fb6:	bf04      	itt	eq
 8007fb8:	782c      	ldrbeq	r4, [r5, #0]
 8007fba:	1c95      	addeq	r5, r2, #2
 8007fbc:	e7cf      	b.n	8007f5e <_strtol_l.constprop.0+0x3a>
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1da      	bne.n	8007f78 <_strtol_l.constprop.0+0x54>
 8007fc2:	2c30      	cmp	r4, #48	@ 0x30
 8007fc4:	bf0c      	ite	eq
 8007fc6:	2308      	moveq	r3, #8
 8007fc8:	230a      	movne	r3, #10
 8007fca:	e7d5      	b.n	8007f78 <_strtol_l.constprop.0+0x54>
 8007fcc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007fd0:	2f19      	cmp	r7, #25
 8007fd2:	d801      	bhi.n	8007fd8 <_strtol_l.constprop.0+0xb4>
 8007fd4:	3c37      	subs	r4, #55	@ 0x37
 8007fd6:	e7de      	b.n	8007f96 <_strtol_l.constprop.0+0x72>
 8007fd8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007fdc:	2f19      	cmp	r7, #25
 8007fde:	d804      	bhi.n	8007fea <_strtol_l.constprop.0+0xc6>
 8007fe0:	3c57      	subs	r4, #87	@ 0x57
 8007fe2:	e7d8      	b.n	8007f96 <_strtol_l.constprop.0+0x72>
 8007fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fe8:	e7e1      	b.n	8007fae <_strtol_l.constprop.0+0x8a>
 8007fea:	1c53      	adds	r3, r2, #1
 8007fec:	d108      	bne.n	8008000 <_strtol_l.constprop.0+0xdc>
 8007fee:	2322      	movs	r3, #34	@ 0x22
 8007ff0:	f8ce 3000 	str.w	r3, [lr]
 8007ff4:	4660      	mov	r0, ip
 8007ff6:	f1b8 0f00 	cmp.w	r8, #0
 8007ffa:	d0a0      	beq.n	8007f3e <_strtol_l.constprop.0+0x1a>
 8007ffc:	1e69      	subs	r1, r5, #1
 8007ffe:	e006      	b.n	800800e <_strtol_l.constprop.0+0xea>
 8008000:	b106      	cbz	r6, 8008004 <_strtol_l.constprop.0+0xe0>
 8008002:	4240      	negs	r0, r0
 8008004:	f1b8 0f00 	cmp.w	r8, #0
 8008008:	d099      	beq.n	8007f3e <_strtol_l.constprop.0+0x1a>
 800800a:	2a00      	cmp	r2, #0
 800800c:	d1f6      	bne.n	8007ffc <_strtol_l.constprop.0+0xd8>
 800800e:	f8c8 1000 	str.w	r1, [r8]
 8008012:	e794      	b.n	8007f3e <_strtol_l.constprop.0+0x1a>
 8008014:	08008afd 	.word	0x08008afd

08008018 <strtol>:
 8008018:	4613      	mov	r3, r2
 800801a:	460a      	mov	r2, r1
 800801c:	4601      	mov	r1, r0
 800801e:	4802      	ldr	r0, [pc, #8]	@ (8008028 <strtol+0x10>)
 8008020:	6800      	ldr	r0, [r0, #0]
 8008022:	f7ff bf7f 	b.w	8007f24 <_strtol_l.constprop.0>
 8008026:	bf00      	nop
 8008028:	20000010 	.word	0x20000010

0800802c <siprintf>:
 800802c:	b40e      	push	{r1, r2, r3}
 800802e:	b500      	push	{lr}
 8008030:	b09c      	sub	sp, #112	@ 0x70
 8008032:	ab1d      	add	r3, sp, #116	@ 0x74
 8008034:	9002      	str	r0, [sp, #8]
 8008036:	9006      	str	r0, [sp, #24]
 8008038:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800803c:	4809      	ldr	r0, [pc, #36]	@ (8008064 <siprintf+0x38>)
 800803e:	9107      	str	r1, [sp, #28]
 8008040:	9104      	str	r1, [sp, #16]
 8008042:	4909      	ldr	r1, [pc, #36]	@ (8008068 <siprintf+0x3c>)
 8008044:	f853 2b04 	ldr.w	r2, [r3], #4
 8008048:	9105      	str	r1, [sp, #20]
 800804a:	6800      	ldr	r0, [r0, #0]
 800804c:	9301      	str	r3, [sp, #4]
 800804e:	a902      	add	r1, sp, #8
 8008050:	f000 f9aa 	bl	80083a8 <_svfiprintf_r>
 8008054:	9b02      	ldr	r3, [sp, #8]
 8008056:	2200      	movs	r2, #0
 8008058:	701a      	strb	r2, [r3, #0]
 800805a:	b01c      	add	sp, #112	@ 0x70
 800805c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008060:	b003      	add	sp, #12
 8008062:	4770      	bx	lr
 8008064:	20000010 	.word	0x20000010
 8008068:	ffff0208 	.word	0xffff0208

0800806c <memset>:
 800806c:	4402      	add	r2, r0
 800806e:	4603      	mov	r3, r0
 8008070:	4293      	cmp	r3, r2
 8008072:	d100      	bne.n	8008076 <memset+0xa>
 8008074:	4770      	bx	lr
 8008076:	f803 1b01 	strb.w	r1, [r3], #1
 800807a:	e7f9      	b.n	8008070 <memset+0x4>

0800807c <__errno>:
 800807c:	4b01      	ldr	r3, [pc, #4]	@ (8008084 <__errno+0x8>)
 800807e:	6818      	ldr	r0, [r3, #0]
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	20000010 	.word	0x20000010

08008088 <__libc_init_array>:
 8008088:	b570      	push	{r4, r5, r6, lr}
 800808a:	4d0d      	ldr	r5, [pc, #52]	@ (80080c0 <__libc_init_array+0x38>)
 800808c:	4c0d      	ldr	r4, [pc, #52]	@ (80080c4 <__libc_init_array+0x3c>)
 800808e:	1b64      	subs	r4, r4, r5
 8008090:	10a4      	asrs	r4, r4, #2
 8008092:	2600      	movs	r6, #0
 8008094:	42a6      	cmp	r6, r4
 8008096:	d109      	bne.n	80080ac <__libc_init_array+0x24>
 8008098:	4d0b      	ldr	r5, [pc, #44]	@ (80080c8 <__libc_init_array+0x40>)
 800809a:	4c0c      	ldr	r4, [pc, #48]	@ (80080cc <__libc_init_array+0x44>)
 800809c:	f000 fc6e 	bl	800897c <_init>
 80080a0:	1b64      	subs	r4, r4, r5
 80080a2:	10a4      	asrs	r4, r4, #2
 80080a4:	2600      	movs	r6, #0
 80080a6:	42a6      	cmp	r6, r4
 80080a8:	d105      	bne.n	80080b6 <__libc_init_array+0x2e>
 80080aa:	bd70      	pop	{r4, r5, r6, pc}
 80080ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80080b0:	4798      	blx	r3
 80080b2:	3601      	adds	r6, #1
 80080b4:	e7ee      	b.n	8008094 <__libc_init_array+0xc>
 80080b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ba:	4798      	blx	r3
 80080bc:	3601      	adds	r6, #1
 80080be:	e7f2      	b.n	80080a6 <__libc_init_array+0x1e>
 80080c0:	08008c38 	.word	0x08008c38
 80080c4:	08008c38 	.word	0x08008c38
 80080c8:	08008c38 	.word	0x08008c38
 80080cc:	08008c3c 	.word	0x08008c3c

080080d0 <__retarget_lock_acquire_recursive>:
 80080d0:	4770      	bx	lr

080080d2 <__retarget_lock_release_recursive>:
 80080d2:	4770      	bx	lr

080080d4 <strcpy>:
 80080d4:	4603      	mov	r3, r0
 80080d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080da:	f803 2b01 	strb.w	r2, [r3], #1
 80080de:	2a00      	cmp	r2, #0
 80080e0:	d1f9      	bne.n	80080d6 <strcpy+0x2>
 80080e2:	4770      	bx	lr

080080e4 <memcpy>:
 80080e4:	440a      	add	r2, r1
 80080e6:	4291      	cmp	r1, r2
 80080e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80080ec:	d100      	bne.n	80080f0 <memcpy+0xc>
 80080ee:	4770      	bx	lr
 80080f0:	b510      	push	{r4, lr}
 80080f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080fa:	4291      	cmp	r1, r2
 80080fc:	d1f9      	bne.n	80080f2 <memcpy+0xe>
 80080fe:	bd10      	pop	{r4, pc}

08008100 <_free_r>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	4605      	mov	r5, r0
 8008104:	2900      	cmp	r1, #0
 8008106:	d041      	beq.n	800818c <_free_r+0x8c>
 8008108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800810c:	1f0c      	subs	r4, r1, #4
 800810e:	2b00      	cmp	r3, #0
 8008110:	bfb8      	it	lt
 8008112:	18e4      	addlt	r4, r4, r3
 8008114:	f000 f8e0 	bl	80082d8 <__malloc_lock>
 8008118:	4a1d      	ldr	r2, [pc, #116]	@ (8008190 <_free_r+0x90>)
 800811a:	6813      	ldr	r3, [r2, #0]
 800811c:	b933      	cbnz	r3, 800812c <_free_r+0x2c>
 800811e:	6063      	str	r3, [r4, #4]
 8008120:	6014      	str	r4, [r2, #0]
 8008122:	4628      	mov	r0, r5
 8008124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008128:	f000 b8dc 	b.w	80082e4 <__malloc_unlock>
 800812c:	42a3      	cmp	r3, r4
 800812e:	d908      	bls.n	8008142 <_free_r+0x42>
 8008130:	6820      	ldr	r0, [r4, #0]
 8008132:	1821      	adds	r1, r4, r0
 8008134:	428b      	cmp	r3, r1
 8008136:	bf01      	itttt	eq
 8008138:	6819      	ldreq	r1, [r3, #0]
 800813a:	685b      	ldreq	r3, [r3, #4]
 800813c:	1809      	addeq	r1, r1, r0
 800813e:	6021      	streq	r1, [r4, #0]
 8008140:	e7ed      	b.n	800811e <_free_r+0x1e>
 8008142:	461a      	mov	r2, r3
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	b10b      	cbz	r3, 800814c <_free_r+0x4c>
 8008148:	42a3      	cmp	r3, r4
 800814a:	d9fa      	bls.n	8008142 <_free_r+0x42>
 800814c:	6811      	ldr	r1, [r2, #0]
 800814e:	1850      	adds	r0, r2, r1
 8008150:	42a0      	cmp	r0, r4
 8008152:	d10b      	bne.n	800816c <_free_r+0x6c>
 8008154:	6820      	ldr	r0, [r4, #0]
 8008156:	4401      	add	r1, r0
 8008158:	1850      	adds	r0, r2, r1
 800815a:	4283      	cmp	r3, r0
 800815c:	6011      	str	r1, [r2, #0]
 800815e:	d1e0      	bne.n	8008122 <_free_r+0x22>
 8008160:	6818      	ldr	r0, [r3, #0]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	6053      	str	r3, [r2, #4]
 8008166:	4408      	add	r0, r1
 8008168:	6010      	str	r0, [r2, #0]
 800816a:	e7da      	b.n	8008122 <_free_r+0x22>
 800816c:	d902      	bls.n	8008174 <_free_r+0x74>
 800816e:	230c      	movs	r3, #12
 8008170:	602b      	str	r3, [r5, #0]
 8008172:	e7d6      	b.n	8008122 <_free_r+0x22>
 8008174:	6820      	ldr	r0, [r4, #0]
 8008176:	1821      	adds	r1, r4, r0
 8008178:	428b      	cmp	r3, r1
 800817a:	bf04      	itt	eq
 800817c:	6819      	ldreq	r1, [r3, #0]
 800817e:	685b      	ldreq	r3, [r3, #4]
 8008180:	6063      	str	r3, [r4, #4]
 8008182:	bf04      	itt	eq
 8008184:	1809      	addeq	r1, r1, r0
 8008186:	6021      	streq	r1, [r4, #0]
 8008188:	6054      	str	r4, [r2, #4]
 800818a:	e7ca      	b.n	8008122 <_free_r+0x22>
 800818c:	bd38      	pop	{r3, r4, r5, pc}
 800818e:	bf00      	nop
 8008190:	20004264 	.word	0x20004264

08008194 <sbrk_aligned>:
 8008194:	b570      	push	{r4, r5, r6, lr}
 8008196:	4e0f      	ldr	r6, [pc, #60]	@ (80081d4 <sbrk_aligned+0x40>)
 8008198:	460c      	mov	r4, r1
 800819a:	6831      	ldr	r1, [r6, #0]
 800819c:	4605      	mov	r5, r0
 800819e:	b911      	cbnz	r1, 80081a6 <sbrk_aligned+0x12>
 80081a0:	f000 fba6 	bl	80088f0 <_sbrk_r>
 80081a4:	6030      	str	r0, [r6, #0]
 80081a6:	4621      	mov	r1, r4
 80081a8:	4628      	mov	r0, r5
 80081aa:	f000 fba1 	bl	80088f0 <_sbrk_r>
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	d103      	bne.n	80081ba <sbrk_aligned+0x26>
 80081b2:	f04f 34ff 	mov.w	r4, #4294967295
 80081b6:	4620      	mov	r0, r4
 80081b8:	bd70      	pop	{r4, r5, r6, pc}
 80081ba:	1cc4      	adds	r4, r0, #3
 80081bc:	f024 0403 	bic.w	r4, r4, #3
 80081c0:	42a0      	cmp	r0, r4
 80081c2:	d0f8      	beq.n	80081b6 <sbrk_aligned+0x22>
 80081c4:	1a21      	subs	r1, r4, r0
 80081c6:	4628      	mov	r0, r5
 80081c8:	f000 fb92 	bl	80088f0 <_sbrk_r>
 80081cc:	3001      	adds	r0, #1
 80081ce:	d1f2      	bne.n	80081b6 <sbrk_aligned+0x22>
 80081d0:	e7ef      	b.n	80081b2 <sbrk_aligned+0x1e>
 80081d2:	bf00      	nop
 80081d4:	20004260 	.word	0x20004260

080081d8 <_malloc_r>:
 80081d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081dc:	1ccd      	adds	r5, r1, #3
 80081de:	f025 0503 	bic.w	r5, r5, #3
 80081e2:	3508      	adds	r5, #8
 80081e4:	2d0c      	cmp	r5, #12
 80081e6:	bf38      	it	cc
 80081e8:	250c      	movcc	r5, #12
 80081ea:	2d00      	cmp	r5, #0
 80081ec:	4606      	mov	r6, r0
 80081ee:	db01      	blt.n	80081f4 <_malloc_r+0x1c>
 80081f0:	42a9      	cmp	r1, r5
 80081f2:	d904      	bls.n	80081fe <_malloc_r+0x26>
 80081f4:	230c      	movs	r3, #12
 80081f6:	6033      	str	r3, [r6, #0]
 80081f8:	2000      	movs	r0, #0
 80081fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80082d4 <_malloc_r+0xfc>
 8008202:	f000 f869 	bl	80082d8 <__malloc_lock>
 8008206:	f8d8 3000 	ldr.w	r3, [r8]
 800820a:	461c      	mov	r4, r3
 800820c:	bb44      	cbnz	r4, 8008260 <_malloc_r+0x88>
 800820e:	4629      	mov	r1, r5
 8008210:	4630      	mov	r0, r6
 8008212:	f7ff ffbf 	bl	8008194 <sbrk_aligned>
 8008216:	1c43      	adds	r3, r0, #1
 8008218:	4604      	mov	r4, r0
 800821a:	d158      	bne.n	80082ce <_malloc_r+0xf6>
 800821c:	f8d8 4000 	ldr.w	r4, [r8]
 8008220:	4627      	mov	r7, r4
 8008222:	2f00      	cmp	r7, #0
 8008224:	d143      	bne.n	80082ae <_malloc_r+0xd6>
 8008226:	2c00      	cmp	r4, #0
 8008228:	d04b      	beq.n	80082c2 <_malloc_r+0xea>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	4639      	mov	r1, r7
 800822e:	4630      	mov	r0, r6
 8008230:	eb04 0903 	add.w	r9, r4, r3
 8008234:	f000 fb5c 	bl	80088f0 <_sbrk_r>
 8008238:	4581      	cmp	r9, r0
 800823a:	d142      	bne.n	80082c2 <_malloc_r+0xea>
 800823c:	6821      	ldr	r1, [r4, #0]
 800823e:	1a6d      	subs	r5, r5, r1
 8008240:	4629      	mov	r1, r5
 8008242:	4630      	mov	r0, r6
 8008244:	f7ff ffa6 	bl	8008194 <sbrk_aligned>
 8008248:	3001      	adds	r0, #1
 800824a:	d03a      	beq.n	80082c2 <_malloc_r+0xea>
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	442b      	add	r3, r5
 8008250:	6023      	str	r3, [r4, #0]
 8008252:	f8d8 3000 	ldr.w	r3, [r8]
 8008256:	685a      	ldr	r2, [r3, #4]
 8008258:	bb62      	cbnz	r2, 80082b4 <_malloc_r+0xdc>
 800825a:	f8c8 7000 	str.w	r7, [r8]
 800825e:	e00f      	b.n	8008280 <_malloc_r+0xa8>
 8008260:	6822      	ldr	r2, [r4, #0]
 8008262:	1b52      	subs	r2, r2, r5
 8008264:	d420      	bmi.n	80082a8 <_malloc_r+0xd0>
 8008266:	2a0b      	cmp	r2, #11
 8008268:	d917      	bls.n	800829a <_malloc_r+0xc2>
 800826a:	1961      	adds	r1, r4, r5
 800826c:	42a3      	cmp	r3, r4
 800826e:	6025      	str	r5, [r4, #0]
 8008270:	bf18      	it	ne
 8008272:	6059      	strne	r1, [r3, #4]
 8008274:	6863      	ldr	r3, [r4, #4]
 8008276:	bf08      	it	eq
 8008278:	f8c8 1000 	streq.w	r1, [r8]
 800827c:	5162      	str	r2, [r4, r5]
 800827e:	604b      	str	r3, [r1, #4]
 8008280:	4630      	mov	r0, r6
 8008282:	f000 f82f 	bl	80082e4 <__malloc_unlock>
 8008286:	f104 000b 	add.w	r0, r4, #11
 800828a:	1d23      	adds	r3, r4, #4
 800828c:	f020 0007 	bic.w	r0, r0, #7
 8008290:	1ac2      	subs	r2, r0, r3
 8008292:	bf1c      	itt	ne
 8008294:	1a1b      	subne	r3, r3, r0
 8008296:	50a3      	strne	r3, [r4, r2]
 8008298:	e7af      	b.n	80081fa <_malloc_r+0x22>
 800829a:	6862      	ldr	r2, [r4, #4]
 800829c:	42a3      	cmp	r3, r4
 800829e:	bf0c      	ite	eq
 80082a0:	f8c8 2000 	streq.w	r2, [r8]
 80082a4:	605a      	strne	r2, [r3, #4]
 80082a6:	e7eb      	b.n	8008280 <_malloc_r+0xa8>
 80082a8:	4623      	mov	r3, r4
 80082aa:	6864      	ldr	r4, [r4, #4]
 80082ac:	e7ae      	b.n	800820c <_malloc_r+0x34>
 80082ae:	463c      	mov	r4, r7
 80082b0:	687f      	ldr	r7, [r7, #4]
 80082b2:	e7b6      	b.n	8008222 <_malloc_r+0x4a>
 80082b4:	461a      	mov	r2, r3
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	42a3      	cmp	r3, r4
 80082ba:	d1fb      	bne.n	80082b4 <_malloc_r+0xdc>
 80082bc:	2300      	movs	r3, #0
 80082be:	6053      	str	r3, [r2, #4]
 80082c0:	e7de      	b.n	8008280 <_malloc_r+0xa8>
 80082c2:	230c      	movs	r3, #12
 80082c4:	6033      	str	r3, [r6, #0]
 80082c6:	4630      	mov	r0, r6
 80082c8:	f000 f80c 	bl	80082e4 <__malloc_unlock>
 80082cc:	e794      	b.n	80081f8 <_malloc_r+0x20>
 80082ce:	6005      	str	r5, [r0, #0]
 80082d0:	e7d6      	b.n	8008280 <_malloc_r+0xa8>
 80082d2:	bf00      	nop
 80082d4:	20004264 	.word	0x20004264

080082d8 <__malloc_lock>:
 80082d8:	4801      	ldr	r0, [pc, #4]	@ (80082e0 <__malloc_lock+0x8>)
 80082da:	f7ff bef9 	b.w	80080d0 <__retarget_lock_acquire_recursive>
 80082de:	bf00      	nop
 80082e0:	2000425c 	.word	0x2000425c

080082e4 <__malloc_unlock>:
 80082e4:	4801      	ldr	r0, [pc, #4]	@ (80082ec <__malloc_unlock+0x8>)
 80082e6:	f7ff bef4 	b.w	80080d2 <__retarget_lock_release_recursive>
 80082ea:	bf00      	nop
 80082ec:	2000425c 	.word	0x2000425c

080082f0 <__ssputs_r>:
 80082f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f4:	688e      	ldr	r6, [r1, #8]
 80082f6:	461f      	mov	r7, r3
 80082f8:	42be      	cmp	r6, r7
 80082fa:	680b      	ldr	r3, [r1, #0]
 80082fc:	4682      	mov	sl, r0
 80082fe:	460c      	mov	r4, r1
 8008300:	4690      	mov	r8, r2
 8008302:	d82d      	bhi.n	8008360 <__ssputs_r+0x70>
 8008304:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008308:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800830c:	d026      	beq.n	800835c <__ssputs_r+0x6c>
 800830e:	6965      	ldr	r5, [r4, #20]
 8008310:	6909      	ldr	r1, [r1, #16]
 8008312:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008316:	eba3 0901 	sub.w	r9, r3, r1
 800831a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800831e:	1c7b      	adds	r3, r7, #1
 8008320:	444b      	add	r3, r9
 8008322:	106d      	asrs	r5, r5, #1
 8008324:	429d      	cmp	r5, r3
 8008326:	bf38      	it	cc
 8008328:	461d      	movcc	r5, r3
 800832a:	0553      	lsls	r3, r2, #21
 800832c:	d527      	bpl.n	800837e <__ssputs_r+0x8e>
 800832e:	4629      	mov	r1, r5
 8008330:	f7ff ff52 	bl	80081d8 <_malloc_r>
 8008334:	4606      	mov	r6, r0
 8008336:	b360      	cbz	r0, 8008392 <__ssputs_r+0xa2>
 8008338:	6921      	ldr	r1, [r4, #16]
 800833a:	464a      	mov	r2, r9
 800833c:	f7ff fed2 	bl	80080e4 <memcpy>
 8008340:	89a3      	ldrh	r3, [r4, #12]
 8008342:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800834a:	81a3      	strh	r3, [r4, #12]
 800834c:	6126      	str	r6, [r4, #16]
 800834e:	6165      	str	r5, [r4, #20]
 8008350:	444e      	add	r6, r9
 8008352:	eba5 0509 	sub.w	r5, r5, r9
 8008356:	6026      	str	r6, [r4, #0]
 8008358:	60a5      	str	r5, [r4, #8]
 800835a:	463e      	mov	r6, r7
 800835c:	42be      	cmp	r6, r7
 800835e:	d900      	bls.n	8008362 <__ssputs_r+0x72>
 8008360:	463e      	mov	r6, r7
 8008362:	6820      	ldr	r0, [r4, #0]
 8008364:	4632      	mov	r2, r6
 8008366:	4641      	mov	r1, r8
 8008368:	f000 faa8 	bl	80088bc <memmove>
 800836c:	68a3      	ldr	r3, [r4, #8]
 800836e:	1b9b      	subs	r3, r3, r6
 8008370:	60a3      	str	r3, [r4, #8]
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	4433      	add	r3, r6
 8008376:	6023      	str	r3, [r4, #0]
 8008378:	2000      	movs	r0, #0
 800837a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800837e:	462a      	mov	r2, r5
 8008380:	f000 fac6 	bl	8008910 <_realloc_r>
 8008384:	4606      	mov	r6, r0
 8008386:	2800      	cmp	r0, #0
 8008388:	d1e0      	bne.n	800834c <__ssputs_r+0x5c>
 800838a:	6921      	ldr	r1, [r4, #16]
 800838c:	4650      	mov	r0, sl
 800838e:	f7ff feb7 	bl	8008100 <_free_r>
 8008392:	230c      	movs	r3, #12
 8008394:	f8ca 3000 	str.w	r3, [sl]
 8008398:	89a3      	ldrh	r3, [r4, #12]
 800839a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800839e:	81a3      	strh	r3, [r4, #12]
 80083a0:	f04f 30ff 	mov.w	r0, #4294967295
 80083a4:	e7e9      	b.n	800837a <__ssputs_r+0x8a>
	...

080083a8 <_svfiprintf_r>:
 80083a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ac:	4698      	mov	r8, r3
 80083ae:	898b      	ldrh	r3, [r1, #12]
 80083b0:	061b      	lsls	r3, r3, #24
 80083b2:	b09d      	sub	sp, #116	@ 0x74
 80083b4:	4607      	mov	r7, r0
 80083b6:	460d      	mov	r5, r1
 80083b8:	4614      	mov	r4, r2
 80083ba:	d510      	bpl.n	80083de <_svfiprintf_r+0x36>
 80083bc:	690b      	ldr	r3, [r1, #16]
 80083be:	b973      	cbnz	r3, 80083de <_svfiprintf_r+0x36>
 80083c0:	2140      	movs	r1, #64	@ 0x40
 80083c2:	f7ff ff09 	bl	80081d8 <_malloc_r>
 80083c6:	6028      	str	r0, [r5, #0]
 80083c8:	6128      	str	r0, [r5, #16]
 80083ca:	b930      	cbnz	r0, 80083da <_svfiprintf_r+0x32>
 80083cc:	230c      	movs	r3, #12
 80083ce:	603b      	str	r3, [r7, #0]
 80083d0:	f04f 30ff 	mov.w	r0, #4294967295
 80083d4:	b01d      	add	sp, #116	@ 0x74
 80083d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083da:	2340      	movs	r3, #64	@ 0x40
 80083dc:	616b      	str	r3, [r5, #20]
 80083de:	2300      	movs	r3, #0
 80083e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80083e2:	2320      	movs	r3, #32
 80083e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80083ec:	2330      	movs	r3, #48	@ 0x30
 80083ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800858c <_svfiprintf_r+0x1e4>
 80083f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083f6:	f04f 0901 	mov.w	r9, #1
 80083fa:	4623      	mov	r3, r4
 80083fc:	469a      	mov	sl, r3
 80083fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008402:	b10a      	cbz	r2, 8008408 <_svfiprintf_r+0x60>
 8008404:	2a25      	cmp	r2, #37	@ 0x25
 8008406:	d1f9      	bne.n	80083fc <_svfiprintf_r+0x54>
 8008408:	ebba 0b04 	subs.w	fp, sl, r4
 800840c:	d00b      	beq.n	8008426 <_svfiprintf_r+0x7e>
 800840e:	465b      	mov	r3, fp
 8008410:	4622      	mov	r2, r4
 8008412:	4629      	mov	r1, r5
 8008414:	4638      	mov	r0, r7
 8008416:	f7ff ff6b 	bl	80082f0 <__ssputs_r>
 800841a:	3001      	adds	r0, #1
 800841c:	f000 80a7 	beq.w	800856e <_svfiprintf_r+0x1c6>
 8008420:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008422:	445a      	add	r2, fp
 8008424:	9209      	str	r2, [sp, #36]	@ 0x24
 8008426:	f89a 3000 	ldrb.w	r3, [sl]
 800842a:	2b00      	cmp	r3, #0
 800842c:	f000 809f 	beq.w	800856e <_svfiprintf_r+0x1c6>
 8008430:	2300      	movs	r3, #0
 8008432:	f04f 32ff 	mov.w	r2, #4294967295
 8008436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800843a:	f10a 0a01 	add.w	sl, sl, #1
 800843e:	9304      	str	r3, [sp, #16]
 8008440:	9307      	str	r3, [sp, #28]
 8008442:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008446:	931a      	str	r3, [sp, #104]	@ 0x68
 8008448:	4654      	mov	r4, sl
 800844a:	2205      	movs	r2, #5
 800844c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008450:	484e      	ldr	r0, [pc, #312]	@ (800858c <_svfiprintf_r+0x1e4>)
 8008452:	f7f7 fecd 	bl	80001f0 <memchr>
 8008456:	9a04      	ldr	r2, [sp, #16]
 8008458:	b9d8      	cbnz	r0, 8008492 <_svfiprintf_r+0xea>
 800845a:	06d0      	lsls	r0, r2, #27
 800845c:	bf44      	itt	mi
 800845e:	2320      	movmi	r3, #32
 8008460:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008464:	0711      	lsls	r1, r2, #28
 8008466:	bf44      	itt	mi
 8008468:	232b      	movmi	r3, #43	@ 0x2b
 800846a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800846e:	f89a 3000 	ldrb.w	r3, [sl]
 8008472:	2b2a      	cmp	r3, #42	@ 0x2a
 8008474:	d015      	beq.n	80084a2 <_svfiprintf_r+0xfa>
 8008476:	9a07      	ldr	r2, [sp, #28]
 8008478:	4654      	mov	r4, sl
 800847a:	2000      	movs	r0, #0
 800847c:	f04f 0c0a 	mov.w	ip, #10
 8008480:	4621      	mov	r1, r4
 8008482:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008486:	3b30      	subs	r3, #48	@ 0x30
 8008488:	2b09      	cmp	r3, #9
 800848a:	d94b      	bls.n	8008524 <_svfiprintf_r+0x17c>
 800848c:	b1b0      	cbz	r0, 80084bc <_svfiprintf_r+0x114>
 800848e:	9207      	str	r2, [sp, #28]
 8008490:	e014      	b.n	80084bc <_svfiprintf_r+0x114>
 8008492:	eba0 0308 	sub.w	r3, r0, r8
 8008496:	fa09 f303 	lsl.w	r3, r9, r3
 800849a:	4313      	orrs	r3, r2
 800849c:	9304      	str	r3, [sp, #16]
 800849e:	46a2      	mov	sl, r4
 80084a0:	e7d2      	b.n	8008448 <_svfiprintf_r+0xa0>
 80084a2:	9b03      	ldr	r3, [sp, #12]
 80084a4:	1d19      	adds	r1, r3, #4
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	9103      	str	r1, [sp, #12]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	bfbb      	ittet	lt
 80084ae:	425b      	neglt	r3, r3
 80084b0:	f042 0202 	orrlt.w	r2, r2, #2
 80084b4:	9307      	strge	r3, [sp, #28]
 80084b6:	9307      	strlt	r3, [sp, #28]
 80084b8:	bfb8      	it	lt
 80084ba:	9204      	strlt	r2, [sp, #16]
 80084bc:	7823      	ldrb	r3, [r4, #0]
 80084be:	2b2e      	cmp	r3, #46	@ 0x2e
 80084c0:	d10a      	bne.n	80084d8 <_svfiprintf_r+0x130>
 80084c2:	7863      	ldrb	r3, [r4, #1]
 80084c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80084c6:	d132      	bne.n	800852e <_svfiprintf_r+0x186>
 80084c8:	9b03      	ldr	r3, [sp, #12]
 80084ca:	1d1a      	adds	r2, r3, #4
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	9203      	str	r2, [sp, #12]
 80084d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084d4:	3402      	adds	r4, #2
 80084d6:	9305      	str	r3, [sp, #20]
 80084d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800859c <_svfiprintf_r+0x1f4>
 80084dc:	7821      	ldrb	r1, [r4, #0]
 80084de:	2203      	movs	r2, #3
 80084e0:	4650      	mov	r0, sl
 80084e2:	f7f7 fe85 	bl	80001f0 <memchr>
 80084e6:	b138      	cbz	r0, 80084f8 <_svfiprintf_r+0x150>
 80084e8:	9b04      	ldr	r3, [sp, #16]
 80084ea:	eba0 000a 	sub.w	r0, r0, sl
 80084ee:	2240      	movs	r2, #64	@ 0x40
 80084f0:	4082      	lsls	r2, r0
 80084f2:	4313      	orrs	r3, r2
 80084f4:	3401      	adds	r4, #1
 80084f6:	9304      	str	r3, [sp, #16]
 80084f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084fc:	4824      	ldr	r0, [pc, #144]	@ (8008590 <_svfiprintf_r+0x1e8>)
 80084fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008502:	2206      	movs	r2, #6
 8008504:	f7f7 fe74 	bl	80001f0 <memchr>
 8008508:	2800      	cmp	r0, #0
 800850a:	d036      	beq.n	800857a <_svfiprintf_r+0x1d2>
 800850c:	4b21      	ldr	r3, [pc, #132]	@ (8008594 <_svfiprintf_r+0x1ec>)
 800850e:	bb1b      	cbnz	r3, 8008558 <_svfiprintf_r+0x1b0>
 8008510:	9b03      	ldr	r3, [sp, #12]
 8008512:	3307      	adds	r3, #7
 8008514:	f023 0307 	bic.w	r3, r3, #7
 8008518:	3308      	adds	r3, #8
 800851a:	9303      	str	r3, [sp, #12]
 800851c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800851e:	4433      	add	r3, r6
 8008520:	9309      	str	r3, [sp, #36]	@ 0x24
 8008522:	e76a      	b.n	80083fa <_svfiprintf_r+0x52>
 8008524:	fb0c 3202 	mla	r2, ip, r2, r3
 8008528:	460c      	mov	r4, r1
 800852a:	2001      	movs	r0, #1
 800852c:	e7a8      	b.n	8008480 <_svfiprintf_r+0xd8>
 800852e:	2300      	movs	r3, #0
 8008530:	3401      	adds	r4, #1
 8008532:	9305      	str	r3, [sp, #20]
 8008534:	4619      	mov	r1, r3
 8008536:	f04f 0c0a 	mov.w	ip, #10
 800853a:	4620      	mov	r0, r4
 800853c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008540:	3a30      	subs	r2, #48	@ 0x30
 8008542:	2a09      	cmp	r2, #9
 8008544:	d903      	bls.n	800854e <_svfiprintf_r+0x1a6>
 8008546:	2b00      	cmp	r3, #0
 8008548:	d0c6      	beq.n	80084d8 <_svfiprintf_r+0x130>
 800854a:	9105      	str	r1, [sp, #20]
 800854c:	e7c4      	b.n	80084d8 <_svfiprintf_r+0x130>
 800854e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008552:	4604      	mov	r4, r0
 8008554:	2301      	movs	r3, #1
 8008556:	e7f0      	b.n	800853a <_svfiprintf_r+0x192>
 8008558:	ab03      	add	r3, sp, #12
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	462a      	mov	r2, r5
 800855e:	4b0e      	ldr	r3, [pc, #56]	@ (8008598 <_svfiprintf_r+0x1f0>)
 8008560:	a904      	add	r1, sp, #16
 8008562:	4638      	mov	r0, r7
 8008564:	f3af 8000 	nop.w
 8008568:	1c42      	adds	r2, r0, #1
 800856a:	4606      	mov	r6, r0
 800856c:	d1d6      	bne.n	800851c <_svfiprintf_r+0x174>
 800856e:	89ab      	ldrh	r3, [r5, #12]
 8008570:	065b      	lsls	r3, r3, #25
 8008572:	f53f af2d 	bmi.w	80083d0 <_svfiprintf_r+0x28>
 8008576:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008578:	e72c      	b.n	80083d4 <_svfiprintf_r+0x2c>
 800857a:	ab03      	add	r3, sp, #12
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	462a      	mov	r2, r5
 8008580:	4b05      	ldr	r3, [pc, #20]	@ (8008598 <_svfiprintf_r+0x1f0>)
 8008582:	a904      	add	r1, sp, #16
 8008584:	4638      	mov	r0, r7
 8008586:	f000 f879 	bl	800867c <_printf_i>
 800858a:	e7ed      	b.n	8008568 <_svfiprintf_r+0x1c0>
 800858c:	08008bfd 	.word	0x08008bfd
 8008590:	08008c07 	.word	0x08008c07
 8008594:	00000000 	.word	0x00000000
 8008598:	080082f1 	.word	0x080082f1
 800859c:	08008c03 	.word	0x08008c03

080085a0 <_printf_common>:
 80085a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085a4:	4616      	mov	r6, r2
 80085a6:	4698      	mov	r8, r3
 80085a8:	688a      	ldr	r2, [r1, #8]
 80085aa:	690b      	ldr	r3, [r1, #16]
 80085ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80085b0:	4293      	cmp	r3, r2
 80085b2:	bfb8      	it	lt
 80085b4:	4613      	movlt	r3, r2
 80085b6:	6033      	str	r3, [r6, #0]
 80085b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80085bc:	4607      	mov	r7, r0
 80085be:	460c      	mov	r4, r1
 80085c0:	b10a      	cbz	r2, 80085c6 <_printf_common+0x26>
 80085c2:	3301      	adds	r3, #1
 80085c4:	6033      	str	r3, [r6, #0]
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	0699      	lsls	r1, r3, #26
 80085ca:	bf42      	ittt	mi
 80085cc:	6833      	ldrmi	r3, [r6, #0]
 80085ce:	3302      	addmi	r3, #2
 80085d0:	6033      	strmi	r3, [r6, #0]
 80085d2:	6825      	ldr	r5, [r4, #0]
 80085d4:	f015 0506 	ands.w	r5, r5, #6
 80085d8:	d106      	bne.n	80085e8 <_printf_common+0x48>
 80085da:	f104 0a19 	add.w	sl, r4, #25
 80085de:	68e3      	ldr	r3, [r4, #12]
 80085e0:	6832      	ldr	r2, [r6, #0]
 80085e2:	1a9b      	subs	r3, r3, r2
 80085e4:	42ab      	cmp	r3, r5
 80085e6:	dc26      	bgt.n	8008636 <_printf_common+0x96>
 80085e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80085ec:	6822      	ldr	r2, [r4, #0]
 80085ee:	3b00      	subs	r3, #0
 80085f0:	bf18      	it	ne
 80085f2:	2301      	movne	r3, #1
 80085f4:	0692      	lsls	r2, r2, #26
 80085f6:	d42b      	bmi.n	8008650 <_printf_common+0xb0>
 80085f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80085fc:	4641      	mov	r1, r8
 80085fe:	4638      	mov	r0, r7
 8008600:	47c8      	blx	r9
 8008602:	3001      	adds	r0, #1
 8008604:	d01e      	beq.n	8008644 <_printf_common+0xa4>
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	6922      	ldr	r2, [r4, #16]
 800860a:	f003 0306 	and.w	r3, r3, #6
 800860e:	2b04      	cmp	r3, #4
 8008610:	bf02      	ittt	eq
 8008612:	68e5      	ldreq	r5, [r4, #12]
 8008614:	6833      	ldreq	r3, [r6, #0]
 8008616:	1aed      	subeq	r5, r5, r3
 8008618:	68a3      	ldr	r3, [r4, #8]
 800861a:	bf0c      	ite	eq
 800861c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008620:	2500      	movne	r5, #0
 8008622:	4293      	cmp	r3, r2
 8008624:	bfc4      	itt	gt
 8008626:	1a9b      	subgt	r3, r3, r2
 8008628:	18ed      	addgt	r5, r5, r3
 800862a:	2600      	movs	r6, #0
 800862c:	341a      	adds	r4, #26
 800862e:	42b5      	cmp	r5, r6
 8008630:	d11a      	bne.n	8008668 <_printf_common+0xc8>
 8008632:	2000      	movs	r0, #0
 8008634:	e008      	b.n	8008648 <_printf_common+0xa8>
 8008636:	2301      	movs	r3, #1
 8008638:	4652      	mov	r2, sl
 800863a:	4641      	mov	r1, r8
 800863c:	4638      	mov	r0, r7
 800863e:	47c8      	blx	r9
 8008640:	3001      	adds	r0, #1
 8008642:	d103      	bne.n	800864c <_printf_common+0xac>
 8008644:	f04f 30ff 	mov.w	r0, #4294967295
 8008648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800864c:	3501      	adds	r5, #1
 800864e:	e7c6      	b.n	80085de <_printf_common+0x3e>
 8008650:	18e1      	adds	r1, r4, r3
 8008652:	1c5a      	adds	r2, r3, #1
 8008654:	2030      	movs	r0, #48	@ 0x30
 8008656:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800865a:	4422      	add	r2, r4
 800865c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008660:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008664:	3302      	adds	r3, #2
 8008666:	e7c7      	b.n	80085f8 <_printf_common+0x58>
 8008668:	2301      	movs	r3, #1
 800866a:	4622      	mov	r2, r4
 800866c:	4641      	mov	r1, r8
 800866e:	4638      	mov	r0, r7
 8008670:	47c8      	blx	r9
 8008672:	3001      	adds	r0, #1
 8008674:	d0e6      	beq.n	8008644 <_printf_common+0xa4>
 8008676:	3601      	adds	r6, #1
 8008678:	e7d9      	b.n	800862e <_printf_common+0x8e>
	...

0800867c <_printf_i>:
 800867c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008680:	7e0f      	ldrb	r7, [r1, #24]
 8008682:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008684:	2f78      	cmp	r7, #120	@ 0x78
 8008686:	4691      	mov	r9, r2
 8008688:	4680      	mov	r8, r0
 800868a:	460c      	mov	r4, r1
 800868c:	469a      	mov	sl, r3
 800868e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008692:	d807      	bhi.n	80086a4 <_printf_i+0x28>
 8008694:	2f62      	cmp	r7, #98	@ 0x62
 8008696:	d80a      	bhi.n	80086ae <_printf_i+0x32>
 8008698:	2f00      	cmp	r7, #0
 800869a:	f000 80d2 	beq.w	8008842 <_printf_i+0x1c6>
 800869e:	2f58      	cmp	r7, #88	@ 0x58
 80086a0:	f000 80b9 	beq.w	8008816 <_printf_i+0x19a>
 80086a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80086ac:	e03a      	b.n	8008724 <_printf_i+0xa8>
 80086ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80086b2:	2b15      	cmp	r3, #21
 80086b4:	d8f6      	bhi.n	80086a4 <_printf_i+0x28>
 80086b6:	a101      	add	r1, pc, #4	@ (adr r1, 80086bc <_printf_i+0x40>)
 80086b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086bc:	08008715 	.word	0x08008715
 80086c0:	08008729 	.word	0x08008729
 80086c4:	080086a5 	.word	0x080086a5
 80086c8:	080086a5 	.word	0x080086a5
 80086cc:	080086a5 	.word	0x080086a5
 80086d0:	080086a5 	.word	0x080086a5
 80086d4:	08008729 	.word	0x08008729
 80086d8:	080086a5 	.word	0x080086a5
 80086dc:	080086a5 	.word	0x080086a5
 80086e0:	080086a5 	.word	0x080086a5
 80086e4:	080086a5 	.word	0x080086a5
 80086e8:	08008829 	.word	0x08008829
 80086ec:	08008753 	.word	0x08008753
 80086f0:	080087e3 	.word	0x080087e3
 80086f4:	080086a5 	.word	0x080086a5
 80086f8:	080086a5 	.word	0x080086a5
 80086fc:	0800884b 	.word	0x0800884b
 8008700:	080086a5 	.word	0x080086a5
 8008704:	08008753 	.word	0x08008753
 8008708:	080086a5 	.word	0x080086a5
 800870c:	080086a5 	.word	0x080086a5
 8008710:	080087eb 	.word	0x080087eb
 8008714:	6833      	ldr	r3, [r6, #0]
 8008716:	1d1a      	adds	r2, r3, #4
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	6032      	str	r2, [r6, #0]
 800871c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008720:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008724:	2301      	movs	r3, #1
 8008726:	e09d      	b.n	8008864 <_printf_i+0x1e8>
 8008728:	6833      	ldr	r3, [r6, #0]
 800872a:	6820      	ldr	r0, [r4, #0]
 800872c:	1d19      	adds	r1, r3, #4
 800872e:	6031      	str	r1, [r6, #0]
 8008730:	0606      	lsls	r6, r0, #24
 8008732:	d501      	bpl.n	8008738 <_printf_i+0xbc>
 8008734:	681d      	ldr	r5, [r3, #0]
 8008736:	e003      	b.n	8008740 <_printf_i+0xc4>
 8008738:	0645      	lsls	r5, r0, #25
 800873a:	d5fb      	bpl.n	8008734 <_printf_i+0xb8>
 800873c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008740:	2d00      	cmp	r5, #0
 8008742:	da03      	bge.n	800874c <_printf_i+0xd0>
 8008744:	232d      	movs	r3, #45	@ 0x2d
 8008746:	426d      	negs	r5, r5
 8008748:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800874c:	4859      	ldr	r0, [pc, #356]	@ (80088b4 <_printf_i+0x238>)
 800874e:	230a      	movs	r3, #10
 8008750:	e011      	b.n	8008776 <_printf_i+0xfa>
 8008752:	6821      	ldr	r1, [r4, #0]
 8008754:	6833      	ldr	r3, [r6, #0]
 8008756:	0608      	lsls	r0, r1, #24
 8008758:	f853 5b04 	ldr.w	r5, [r3], #4
 800875c:	d402      	bmi.n	8008764 <_printf_i+0xe8>
 800875e:	0649      	lsls	r1, r1, #25
 8008760:	bf48      	it	mi
 8008762:	b2ad      	uxthmi	r5, r5
 8008764:	2f6f      	cmp	r7, #111	@ 0x6f
 8008766:	4853      	ldr	r0, [pc, #332]	@ (80088b4 <_printf_i+0x238>)
 8008768:	6033      	str	r3, [r6, #0]
 800876a:	bf14      	ite	ne
 800876c:	230a      	movne	r3, #10
 800876e:	2308      	moveq	r3, #8
 8008770:	2100      	movs	r1, #0
 8008772:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008776:	6866      	ldr	r6, [r4, #4]
 8008778:	60a6      	str	r6, [r4, #8]
 800877a:	2e00      	cmp	r6, #0
 800877c:	bfa2      	ittt	ge
 800877e:	6821      	ldrge	r1, [r4, #0]
 8008780:	f021 0104 	bicge.w	r1, r1, #4
 8008784:	6021      	strge	r1, [r4, #0]
 8008786:	b90d      	cbnz	r5, 800878c <_printf_i+0x110>
 8008788:	2e00      	cmp	r6, #0
 800878a:	d04b      	beq.n	8008824 <_printf_i+0x1a8>
 800878c:	4616      	mov	r6, r2
 800878e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008792:	fb03 5711 	mls	r7, r3, r1, r5
 8008796:	5dc7      	ldrb	r7, [r0, r7]
 8008798:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800879c:	462f      	mov	r7, r5
 800879e:	42bb      	cmp	r3, r7
 80087a0:	460d      	mov	r5, r1
 80087a2:	d9f4      	bls.n	800878e <_printf_i+0x112>
 80087a4:	2b08      	cmp	r3, #8
 80087a6:	d10b      	bne.n	80087c0 <_printf_i+0x144>
 80087a8:	6823      	ldr	r3, [r4, #0]
 80087aa:	07df      	lsls	r7, r3, #31
 80087ac:	d508      	bpl.n	80087c0 <_printf_i+0x144>
 80087ae:	6923      	ldr	r3, [r4, #16]
 80087b0:	6861      	ldr	r1, [r4, #4]
 80087b2:	4299      	cmp	r1, r3
 80087b4:	bfde      	ittt	le
 80087b6:	2330      	movle	r3, #48	@ 0x30
 80087b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80087c0:	1b92      	subs	r2, r2, r6
 80087c2:	6122      	str	r2, [r4, #16]
 80087c4:	f8cd a000 	str.w	sl, [sp]
 80087c8:	464b      	mov	r3, r9
 80087ca:	aa03      	add	r2, sp, #12
 80087cc:	4621      	mov	r1, r4
 80087ce:	4640      	mov	r0, r8
 80087d0:	f7ff fee6 	bl	80085a0 <_printf_common>
 80087d4:	3001      	adds	r0, #1
 80087d6:	d14a      	bne.n	800886e <_printf_i+0x1f2>
 80087d8:	f04f 30ff 	mov.w	r0, #4294967295
 80087dc:	b004      	add	sp, #16
 80087de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	f043 0320 	orr.w	r3, r3, #32
 80087e8:	6023      	str	r3, [r4, #0]
 80087ea:	4833      	ldr	r0, [pc, #204]	@ (80088b8 <_printf_i+0x23c>)
 80087ec:	2778      	movs	r7, #120	@ 0x78
 80087ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	6831      	ldr	r1, [r6, #0]
 80087f6:	061f      	lsls	r7, r3, #24
 80087f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80087fc:	d402      	bmi.n	8008804 <_printf_i+0x188>
 80087fe:	065f      	lsls	r7, r3, #25
 8008800:	bf48      	it	mi
 8008802:	b2ad      	uxthmi	r5, r5
 8008804:	6031      	str	r1, [r6, #0]
 8008806:	07d9      	lsls	r1, r3, #31
 8008808:	bf44      	itt	mi
 800880a:	f043 0320 	orrmi.w	r3, r3, #32
 800880e:	6023      	strmi	r3, [r4, #0]
 8008810:	b11d      	cbz	r5, 800881a <_printf_i+0x19e>
 8008812:	2310      	movs	r3, #16
 8008814:	e7ac      	b.n	8008770 <_printf_i+0xf4>
 8008816:	4827      	ldr	r0, [pc, #156]	@ (80088b4 <_printf_i+0x238>)
 8008818:	e7e9      	b.n	80087ee <_printf_i+0x172>
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	f023 0320 	bic.w	r3, r3, #32
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	e7f6      	b.n	8008812 <_printf_i+0x196>
 8008824:	4616      	mov	r6, r2
 8008826:	e7bd      	b.n	80087a4 <_printf_i+0x128>
 8008828:	6833      	ldr	r3, [r6, #0]
 800882a:	6825      	ldr	r5, [r4, #0]
 800882c:	6961      	ldr	r1, [r4, #20]
 800882e:	1d18      	adds	r0, r3, #4
 8008830:	6030      	str	r0, [r6, #0]
 8008832:	062e      	lsls	r6, r5, #24
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	d501      	bpl.n	800883c <_printf_i+0x1c0>
 8008838:	6019      	str	r1, [r3, #0]
 800883a:	e002      	b.n	8008842 <_printf_i+0x1c6>
 800883c:	0668      	lsls	r0, r5, #25
 800883e:	d5fb      	bpl.n	8008838 <_printf_i+0x1bc>
 8008840:	8019      	strh	r1, [r3, #0]
 8008842:	2300      	movs	r3, #0
 8008844:	6123      	str	r3, [r4, #16]
 8008846:	4616      	mov	r6, r2
 8008848:	e7bc      	b.n	80087c4 <_printf_i+0x148>
 800884a:	6833      	ldr	r3, [r6, #0]
 800884c:	1d1a      	adds	r2, r3, #4
 800884e:	6032      	str	r2, [r6, #0]
 8008850:	681e      	ldr	r6, [r3, #0]
 8008852:	6862      	ldr	r2, [r4, #4]
 8008854:	2100      	movs	r1, #0
 8008856:	4630      	mov	r0, r6
 8008858:	f7f7 fcca 	bl	80001f0 <memchr>
 800885c:	b108      	cbz	r0, 8008862 <_printf_i+0x1e6>
 800885e:	1b80      	subs	r0, r0, r6
 8008860:	6060      	str	r0, [r4, #4]
 8008862:	6863      	ldr	r3, [r4, #4]
 8008864:	6123      	str	r3, [r4, #16]
 8008866:	2300      	movs	r3, #0
 8008868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800886c:	e7aa      	b.n	80087c4 <_printf_i+0x148>
 800886e:	6923      	ldr	r3, [r4, #16]
 8008870:	4632      	mov	r2, r6
 8008872:	4649      	mov	r1, r9
 8008874:	4640      	mov	r0, r8
 8008876:	47d0      	blx	sl
 8008878:	3001      	adds	r0, #1
 800887a:	d0ad      	beq.n	80087d8 <_printf_i+0x15c>
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	079b      	lsls	r3, r3, #30
 8008880:	d413      	bmi.n	80088aa <_printf_i+0x22e>
 8008882:	68e0      	ldr	r0, [r4, #12]
 8008884:	9b03      	ldr	r3, [sp, #12]
 8008886:	4298      	cmp	r0, r3
 8008888:	bfb8      	it	lt
 800888a:	4618      	movlt	r0, r3
 800888c:	e7a6      	b.n	80087dc <_printf_i+0x160>
 800888e:	2301      	movs	r3, #1
 8008890:	4632      	mov	r2, r6
 8008892:	4649      	mov	r1, r9
 8008894:	4640      	mov	r0, r8
 8008896:	47d0      	blx	sl
 8008898:	3001      	adds	r0, #1
 800889a:	d09d      	beq.n	80087d8 <_printf_i+0x15c>
 800889c:	3501      	adds	r5, #1
 800889e:	68e3      	ldr	r3, [r4, #12]
 80088a0:	9903      	ldr	r1, [sp, #12]
 80088a2:	1a5b      	subs	r3, r3, r1
 80088a4:	42ab      	cmp	r3, r5
 80088a6:	dcf2      	bgt.n	800888e <_printf_i+0x212>
 80088a8:	e7eb      	b.n	8008882 <_printf_i+0x206>
 80088aa:	2500      	movs	r5, #0
 80088ac:	f104 0619 	add.w	r6, r4, #25
 80088b0:	e7f5      	b.n	800889e <_printf_i+0x222>
 80088b2:	bf00      	nop
 80088b4:	08008c0e 	.word	0x08008c0e
 80088b8:	08008c1f 	.word	0x08008c1f

080088bc <memmove>:
 80088bc:	4288      	cmp	r0, r1
 80088be:	b510      	push	{r4, lr}
 80088c0:	eb01 0402 	add.w	r4, r1, r2
 80088c4:	d902      	bls.n	80088cc <memmove+0x10>
 80088c6:	4284      	cmp	r4, r0
 80088c8:	4623      	mov	r3, r4
 80088ca:	d807      	bhi.n	80088dc <memmove+0x20>
 80088cc:	1e43      	subs	r3, r0, #1
 80088ce:	42a1      	cmp	r1, r4
 80088d0:	d008      	beq.n	80088e4 <memmove+0x28>
 80088d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088da:	e7f8      	b.n	80088ce <memmove+0x12>
 80088dc:	4402      	add	r2, r0
 80088de:	4601      	mov	r1, r0
 80088e0:	428a      	cmp	r2, r1
 80088e2:	d100      	bne.n	80088e6 <memmove+0x2a>
 80088e4:	bd10      	pop	{r4, pc}
 80088e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088ee:	e7f7      	b.n	80088e0 <memmove+0x24>

080088f0 <_sbrk_r>:
 80088f0:	b538      	push	{r3, r4, r5, lr}
 80088f2:	4d06      	ldr	r5, [pc, #24]	@ (800890c <_sbrk_r+0x1c>)
 80088f4:	2300      	movs	r3, #0
 80088f6:	4604      	mov	r4, r0
 80088f8:	4608      	mov	r0, r1
 80088fa:	602b      	str	r3, [r5, #0]
 80088fc:	f7f9 f994 	bl	8001c28 <_sbrk>
 8008900:	1c43      	adds	r3, r0, #1
 8008902:	d102      	bne.n	800890a <_sbrk_r+0x1a>
 8008904:	682b      	ldr	r3, [r5, #0]
 8008906:	b103      	cbz	r3, 800890a <_sbrk_r+0x1a>
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	bd38      	pop	{r3, r4, r5, pc}
 800890c:	20004258 	.word	0x20004258

08008910 <_realloc_r>:
 8008910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008914:	4680      	mov	r8, r0
 8008916:	4615      	mov	r5, r2
 8008918:	460c      	mov	r4, r1
 800891a:	b921      	cbnz	r1, 8008926 <_realloc_r+0x16>
 800891c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008920:	4611      	mov	r1, r2
 8008922:	f7ff bc59 	b.w	80081d8 <_malloc_r>
 8008926:	b92a      	cbnz	r2, 8008934 <_realloc_r+0x24>
 8008928:	f7ff fbea 	bl	8008100 <_free_r>
 800892c:	2400      	movs	r4, #0
 800892e:	4620      	mov	r0, r4
 8008930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008934:	f000 f81a 	bl	800896c <_malloc_usable_size_r>
 8008938:	4285      	cmp	r5, r0
 800893a:	4606      	mov	r6, r0
 800893c:	d802      	bhi.n	8008944 <_realloc_r+0x34>
 800893e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008942:	d8f4      	bhi.n	800892e <_realloc_r+0x1e>
 8008944:	4629      	mov	r1, r5
 8008946:	4640      	mov	r0, r8
 8008948:	f7ff fc46 	bl	80081d8 <_malloc_r>
 800894c:	4607      	mov	r7, r0
 800894e:	2800      	cmp	r0, #0
 8008950:	d0ec      	beq.n	800892c <_realloc_r+0x1c>
 8008952:	42b5      	cmp	r5, r6
 8008954:	462a      	mov	r2, r5
 8008956:	4621      	mov	r1, r4
 8008958:	bf28      	it	cs
 800895a:	4632      	movcs	r2, r6
 800895c:	f7ff fbc2 	bl	80080e4 <memcpy>
 8008960:	4621      	mov	r1, r4
 8008962:	4640      	mov	r0, r8
 8008964:	f7ff fbcc 	bl	8008100 <_free_r>
 8008968:	463c      	mov	r4, r7
 800896a:	e7e0      	b.n	800892e <_realloc_r+0x1e>

0800896c <_malloc_usable_size_r>:
 800896c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008970:	1f18      	subs	r0, r3, #4
 8008972:	2b00      	cmp	r3, #0
 8008974:	bfbc      	itt	lt
 8008976:	580b      	ldrlt	r3, [r1, r0]
 8008978:	18c0      	addlt	r0, r0, r3
 800897a:	4770      	bx	lr

0800897c <_init>:
 800897c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897e:	bf00      	nop
 8008980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008982:	bc08      	pop	{r3}
 8008984:	469e      	mov	lr, r3
 8008986:	4770      	bx	lr

08008988 <_fini>:
 8008988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898a:	bf00      	nop
 800898c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800898e:	bc08      	pop	{r3}
 8008990:	469e      	mov	lr, r3
 8008992:	4770      	bx	lr
>>>>>>> d11152295f41fdfa255a00a18ae3432128dc5ba6
